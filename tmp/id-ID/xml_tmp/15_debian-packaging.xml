<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="debian-packaging">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-debian-packaging.png" scalefit="1" />
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>Backport</keyword>
      <keyword>Rebuild</keyword>
      <keyword>Paket sumber</keyword>
      <keyword>Archive</keyword>
      <keyword>Meta-package</keyword>
      <keyword>Debian Developer</keyword>
      <keyword>Maintainer</keyword>
    </keywordset>
  </chapterinfo>
  <title>Membuat paket Debian</title>
  <highlights>
    <para>Sudah menjadi hal umum bagi administrator yang rutin menangani paket Debian, pada suatu saat ingin membuat paket Debian-nya sendiri, atau memodifikasi paket yang sudah ada. Bab ini berusaha menjawab pertanyaan yang paling sering diajukan dalam topik paket Debian, dan menyediakan bagian-bagian yang diperlukan untuk memanfaatkan keunggulan infrastruktur Debian dengan cara terbaik. Dengan sedikit keberuntungan, setelah mencoba sendiri membuat paket Debian, bisa jadi Anda merasa tertarik untuk melanjutkan dan bergabung dengan proyek Debian itu sendiri!</para>
  </highlights>
  <section id="sect.rebuilding-package">
    <title>Membangun ulang sebuah Paket dari Source-nya</title>

    <para>Membangun ulang sebuah paket biner dibutuhkan dalam beberapa kondisi. Dalam kondisi tertentu, administrator membutuhkan fitur perangkat lunak yang mensyaratkan untuk di-compile dari source, dengan opsi kompilasi tertentu; pada kasus lain, perangkat yang dipaketkan dalam Debian yang terpasang tidak cukup anyar. Pada kasus kedua, administrator umumnya akan mem-build paket yang lebih terkini diambil dari Debian dengan versi yang lebih baru — seperti <emphasis role="distribution">Testing</emphasis> atau bahkan <emphasis role="distribution">Unstable</emphasis> — sehingga paket yang lebih baru ini dapat bekerja pada distribusi <emphasis role="distribution">Stable</emphasis> mereka; operasi ini disebut dengan “backporting”. Seperti biasa, perlu waspada sebelum memutuskan melakukan tugas seperti itu, dengan memeriksa apakah sebelumnya sudah pernah dilakukan — pencarian cepat pada Debian Package Tracker untuk paket tersebut akan mengungkap informasi itu. <ulink type="block" url="https://tracker.debian.org/" />. <indexterm><primary>backport</primary></indexterm></para>
    <section>
      <title>Mendapatkan Sumber</title>

      <para>Membangun ulang sebuah paket Debian dimulai dengan mendapatkan kode sumber. Cara yang paling mudah adalah menggunakan perintah <command>apt-get source <replaceable>nama-paket-sumber</replaceable></command>. Perintah ini membutuhkan baris <literal>deb-src</literal> pada berkas  <filename>/etc/apt/sources.list</filename>, dan berkas indeks yang mutakhir (yaitu <command>apt-get update</command>). Kondisi ini harusnya sudah terpenuhi jika Anda mengikuti instruksi dari bab mengenai konfigurasi APT (lihat <xref linkend="sect.apt-sources.list" />). Perhatikan, bahwa Anda akan mengunduh paket sumber dari versi Debian yang disebutkan dalam baris <literal>deb-src</literal>. Jika Anda membutuhkan versi lainnya, Anda dapat mengunduh secara manual dari cermin Debian atau dari situs web. Hal ini melibatkan dua atau tiga berkas (dengan ekstensi <filename>*.dsc</filename> — untuk <emphasis>Debian Source Control</emphasis> — <filename>*.tar.<replaceable>comp</replaceable></filename>, dan terkadang <filename>*.diff.gz</filename> atau <filename>*.debian.tar.<replaceable>comp</replaceable></filename> — <replaceable>comp</replaceable> dengan alternatif <literal>gz</literal>, <literal>bz2</literal>, atau <literal>xz</literal> tergantung perkakas kompresi yang digunakan), lalu jalankan perintah <command>dpkg-source -x <replaceable>file.dsc</replaceable></command>. Jika berkas <filename>*.dsc</filename> dapat diakses langsung pada URL tertentu, terdapat cara yang lebih sederhana untuk mem-fetch-nya, yaitu dengan perintah <command>dget <replaceable>URL</replaceable></command>. Perintah ini (yang dapat ditemukan di paket <emphasis role="pkg">devscripts</emphasis>) mem-fetch berkas <filename>*.dsc</filename> pada alamat yang diberikan, menganalisis isinya, dan secara otomatis mem-fetch berkas atau berkas-berkas yang diacu di dalamnya. Sekali semua telah diunduh, itu mengekstraksi paket sumber (kecuali bila opsi <literal>-d</literal> atau <literal>--download-only</literal> dipakai.</para>
    </section>
    <section>
      <title>Membuat Perubahan</title>

      <para>Sumber dari paket sekarang tersedia di dalam direktori dengan nama paket sumber berikut dengan versinya (sebagai contoh, <emphasis>samba-4.1.17+dfsg</emphasis>); di sinilah kita akan bekerja untuk melakukan perubahan lokal.</para>

      <para>Hal pertama yang perlu dilakukan adalah mengubah nomor versi paket, sehingga paket hasil rebuilt dapat dibedakan dari paket asalnya yang disediakan Debian. Dengan asumsi versi saat ini adalah <literal>2:4.1.17+dfsg-2</literal>, kita dapat membuat versi <literal>2:4.1.17+dfsg-2falcot1</literal>, yang dengan jelas menandakan asal dari paket. Hal ini membuat nomor versi paket lebih tinggi dari yang disediakan Debian, sehingga paket akan dengan mudah ter-install sebagai pemutakhiran dari paket asalnya. Perubahan seperti ini paling baik dihasilkan menggunakan perintah <command>dch</command> (<emphasis>Debian CHangelog</emphasis>) dari paket <emphasis role="pkg">devscripts</emphasis>, dengan invokasi seperti <command>dch - --local falcot</command>. Invokasi ini meng-invoke penyunting teks (<command>sensible-editor</command> — ini harus menjadi penyunting teks favorit Anda jika disebutkan dalam variabel lingkungan <varname>VISUAL</varname> atau <varname>EDITOR</varname>, dan penyunting teks bawaan bila tidak) untuk dapat mendokumentasikan perbedaan yang dihasilkan oleh rebuild ini. Penyunting ini menunjukkan bahwa <command>dch</command> benar-benar mengubah berkas <filename>debian/changelog</filename>.</para>

      <para>Saat perubahan pada opsi build diperlukan, perubahan perlu dibuat pada <filename>debian/rules</filename>, yang mendorong langkah-langkah pada proses build. Pada kasus yang paling sederhana, baris terkait konfigurasi awal (<literal>./configure …</literal>) atau pada build sesungguhnya (<literal>$(MAKE) …</literal> atau <literal>make …</literal>) dapat dengan mudah ditemukan. Jika perintah ini tidak dipanggil secara eksplisit, mereka merupakan efek samping dari perintah eksplisit lainnya, yang pada kasus tertentu mengacu pada dokumentasi mereka untuk mempelajari lebih lanjut bagaimana mengubah perilaku default. Dengan paket-paket yang memakai <command>dh</command>, Anda mungkin perlu menambah override untuk perintah <command>dh_auto_configure</command> atau <command>dh_auto_build</command> (lihat halaman manual masing-masing untuk penjelasan tentang bagaimana mencapai ini).</para>

      <para>Tergantung pada perubahan lokal pada paket, pemutakhiran bisa jadi dibutuhkan dalam berkas <filename>debian/control</filename>, yang berisi deskripsi dari paket yang dihasilkan. Secara spesifik, berkas ini berisi baris <literal>Build-Depends</literal> yang mengendalikan daftar dependensi yang perlu dipenuhi pada paket yang dibangun. Hal ini seringkali mengacu pada versi paket yang ada di dalam distribusi dari sumber paket asal, namun tidak tersedia di dalam distribusi yang digunakan untuk rebuild. Tidak ada cara otomatis untuk menentukan jika dependensi benar-benar dibutuhkan atau hanya disebutkan untuk menjamin bahwa build hanya dicoba dengan versi terbaru dari pustaka — ini merupakan satu-satunya cara untuk memaksa <emphasis>autobuilder</emphasis> untuk menggunakan versi paket yang diberikan selama proses build, hal inilah mengapa Debian maintainer seringkali menggunakan versi build-dependencies yang ketat.</para>

      <para>Jika Anda tahu secara yakin bahwa build-dependencies terlalu ketat, Anda bebas untuk melonggarkannya secara lokal. Dengan membaca berkas yang mendokumentasikan standar membangun perangkat lunak — berkas ini sering disebut sebagai <filename>INSTALL</filename> — akan membantu Anda mengetahui dependensi yang sesuai. Idealnya, semua dependensi harus dapat dipenuhi dari distribusi yang digunakan untuk rebuild; jika tidak, sebuah proses rekursif dimulai, yaitu saat paket yang disebutkan dalam field  <literal>Build-Depends</literal> harus di-backport sebelum paket target dapat di-backport. Beberapa paket bisa jadi tidak perlu di-backport, dan dapat di-install apa-adanya selama proses build (contoh yang jelas adalah <emphasis role="pkg">debhelper</emphasis>). Perlu dicatat bahwa proses backport dapat dengan cepat menjadi kompleks jika Anda tidak hati-hati. Oleh karena itu, backport sedapat mungkin diminimalisir.</para>

      <sidebar>
        <title><emphasis>TIP</emphasis> Menginstall <literal>Build-Depends</literal></title>
        <indexterm><primary><literal>Build-Depends</literal>, ruas kendali</primary></indexterm> 
	<para><command>apt-get</command> allows
	installing all packages mentioned in the
	<literal>Build-Depends</literal> fields of a source package
	available in a distribution mentioned in a
	<literal>deb-src</literal> line of the
	<filename>/etc/apt/sources.list</filename> file. This is a simple
	matter of running the <command>apt-get build-dep
	<replaceable>source-package</replaceable></command> command.</para>
      </sidebar>
    </section>
    <section>
      <title>Memulai Rebuild</title>

      <para>Saat semua perubahan yang diperlukan telah diterapkan pada sumber, kita dapat memulai membuat paket binari sesungguhnya (<filename>.deb</filename> file). Semua proses ini dikelola oleh perintah <command>dpkg-buildpackage</command>.</para>

      <example>
        <title>Membangun ulang sebuah paket</title>

        <screen><computeroutput>$ </computeroutput><userinput>dpkg-buildpackage -us -uc
</userinput><computeroutput>[...]
</computeroutput></screen>
      </example>

      <sidebar id="sidebar.fakeroot">
        <title><emphasis>TOOL</emphasis> <command>fakeroot</command></title>

	<para>In essence, the package creation process is a simple matter
	of gathering in an archive a set of existing (or built) files; most
	of the files will end up being owned by <emphasis>root</emphasis>
	in the archive. However, building the whole package under this user
	would imply increased risks; fortunately, this can be avoided with
	the <command>fakeroot</command> command. This tool can be used to
	run a program and give it the impression that it runs as
	<emphasis>root</emphasis> and creates files with arbitrary
	ownership and permissions. When the program creates the archive
	that will become the Debian package, it is tricked into creating an
	archive containing files marked as belonging to arbitrary owners,
	including <emphasis>root</emphasis>. This setup is so convenient
	that <command>dpkg-buildpackage</command> uses
	<command>fakeroot</command> by default when building
	packages.</para>

	<para>Perhatikan bahwa program hanya mengakali sehingga “seolah-olah percaya” beroperasi dengan akun ber-privilege, dan proses sesungguhnya berjalan sebagai pengguna menjalankan <command>fakeroot <replaceable>program</replaceable></command> (dan berkas sesungguhnya dibuat dengan permission pengguna). Dalam proses ini sama sekali tidak menggunakan privilege root sehingga tidak mungkin terjadi abuse.</para>
      </sidebar>

      <para>Perintah sebelumnya dapat gagal jika field <literal>Build-Depends</literal> belum diperbaharui, atau jika paket terkait tidak ter-install. Pada kasus seperti ini, mungkin untuk meng-overrule kondisi ini dengan memberikan opsi <literal>-d</literal> ke <command>dpkg-buildpackage</command>. Namun, dengan secara eksplisit mengacuhkan dependensi ini akan berisiko terjadi kegagalan pada tahap berikutnya. Lebih buruk lagi, paket bisa jadi terlihat di-build dengan benar namun tidak berjalan sebagaimana mestinya: beberapa program secara otomatis men-disable beberapa fitur saat pustaka yang dibutuhkan tidak tersedia saat waktu build.</para>

      <para>Lebih sering, pengembang Debian menggunakan program dengan tingkat lebih tinggi (higher-level program) seperti <command>debuild</command>; debuild menjalankan <command>dpkg-buildpackage</command>, namun juga menambahkan invokasi dari program yang menjalankan pemeriksaan untuk memvalidasi paket terhadap Debian policy. Script ini juga membersihkan environment sehingga variabel environment lokal tidak “mengotori” paket yang di-build. Perintah <command>debuild</command> adalah salah satu perkakas dalam <emphasis>devscripts</emphasis> suite, yang berbagi konsistensi yang sama dan konfigurasi yang sama untuk membuat pekerjaan maintainer menjadi lebih mudah.</para>

      <sidebar>
        <title><emphasis>SEKILAS</emphasis> <command>pbuilder</command></title>
        <indexterm><primary><command>pbuilder</command></primary></indexterm>

	<para>Program <command>pbuilder</command> (dalam paket dengan nama mirip) memungkinkan mem-build paket Debian dalam lingkungan <emphasis>chrooted</emphasis>. Pada awalnya pbuilder membuat direktori temporer berisi sistem minimal yang dibutuhkan untuk mem-build paket (termasuk paket yang disebutkan dalam field <emphasis>Build-Depends</emphasis>). Direktori ini digunakan sebagai direktori root (<filename>/</filename>), menggunakan perintah <command>chroot</command>, saat proses build.</para>

	<para>Perkakas ini memungkinkan proses build terjadi dalam lingkungan yang tidak dikotak-katik oleh pengguna. Hal ini juga memungkinkan untuk mendeteksi build-dependencies yang hilang (karena build akan gagal kecuali dependensi terkait didokumentasikan). Akhirnya, pbuilder memungkinkan untuk membangun paket versi Debian yang tidak digunakan oleh sistem secara keseluruhan: mesin dapat menggunakan <emphasis role="distribution">Stable</emphasis> untuk beban kerja normal, dan <command>pbuilder</command> berjalan pada mesin yang sama menggunakan <emphasis role="distribution">Unstable</emphasis> untuk membangun paket.</para>
      </sidebar>
    </section>
  </section>
  <section id="sect.building-first-package">
    <title>Membangun Ulang Paket Pertama Anda</title>
    <section>
      <title>Meta-Packages atau Paket Palsu</title>

      <para>Paket palsu dan meta-packages, sebenarnya mirip. Keduanya merupakan shell kosong yang ada hanya untuk membuat meta-data mereka dimuat di dalam package handling stack.</para>

      <para>Tujuan dari paket palsu adalah mengakali <command>dpkg</command> dan <command>apt</command> sehingga percaya bahwa paket ter-install biarpun hanya berupa shell kosong. Hal ini memungkinkan memenuhi dependensi dari paket saat perangkat lunak terkait ter-install di luar ruang lingkup sistem pemaketan. Metode seperti ini bekerja, namun sedapat mungkin dihindari, karena tidak ada jaminan bahwa perangkat lunak yang ter-install berperilaku persis seperti paket terkait dan paket lainnya yang tergantung padanya tidak bekerja sebagaimana mestinya.</para>

      <para>Di sisi lain, sebuah meta-package mayoritas ada sebagai kumpulan dari dependensi, sehingga meng-install meta-package sesungguhnya akan mendatangkan paket lain dalam satu langkah.</para>

      <para>Kedua jenis paket ini dapat dibuat dengan perintah <command>equivs-control</command> dan <command>equivs-build</command>(dalam paket <emphasis role="pkg">equivs</emphasis>). Perintah <command>equivs-control <replaceable>berkas</replaceable></command> membuat berkas header paket Debian yang harus disunting agar memuat nama dari paket yang diinginkan, nomor versinya, nama dari maintainer, dependensi, dan deskripsinya. Field lainnya tanpa nilai default adalah opsional dan dapat dihapus. Field <literal>Copyright</literal>, <literal>Changelog</literal>, <literal>Readme</literal> dan <literal>Extra-Files</literal> bukan merupakan field standar dalam paket Debian; mereka hanya relevan dalam ruang lingkup <command>equivs-build</command>, dan mereka tidak akan disimpan dalam header dari paket yang dihasilkan.</para>

      <example>
        <title>Berkas header dari <emphasis>libxml-libxml-perl</emphasis> paket palsu</title>

        <programlisting>
Section: perl
Priority: optional
Standards-Version: 3.9.6

Package: libxml-libxml-perl
Version: 2.0116-1
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Depends: libxml2 (&gt;= 2.7.4)
Architecture: all
Description: Fake package - module manually installed in site_perl
 This is a fake package to let the packaging system
 believe that this Debian package is installed. 
 .
 In fact, the package is not installed since a newer version
 of the module has been manually compiled &amp; installed in the
 site_perl directory.
</programlisting>
      </example>

      <para>Langkah selanjutnya adalah membuat paket Debian dengan perintah <command>equivs-build <replaceable>berkas</replaceable></command>. Voilà: paket dibuat pada direktori saat ini dan dapat dapat ditangani sebagaimana paket Debian lainnya.</para>
    </section>
    <section>
      <title>Berkas Archive Sederhana</title>

      <para>The Falcot Corp administrators need to create a Debian package
      in order to ease deployment of a set of documents on a large number
      of machines. The administrator in charge of this task first reads the
      “New Maintainer's Guide”, then starts working on their first
      package. <ulink type="block" url="https://www.debian.org/doc/manuals/maint-guide/" /></para>

      <para>Langkah pertama adalah membuat direktori <filename>falcot-data-1.0</filename> berisi target dari paket sumber. Paket secara logika akan dinamakan <literal>falcot-data</literal> dan dengan nomor versi <literal>1.0</literal>. Administrator selanjutnya meletakkan berkas dokumen dalam subdirektori <filename>data</filename>. Lalu mereka meng-invoke perintah <command>dh_make</command> (dari paket <emphasis role="pkg">dh-make</emphasis>) untuk menambah berkas yang dibutuhkan oleh proses pembuatan paket, yang akan disimpan dalam subdirektori <filename>debian</filename>:</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>cd falcot-data-1.0</userinput>
<computeroutput>$ </computeroutput><userinput>dh_make --native</userinput>
<computeroutput>
Type of package: single binary, indep binary, multiple binary, library, kernel module, kernel patch?
 [s/i/m/l/k/n] </computeroutput><userinput>i</userinput>
<computeroutput>
Maintainer name : Raphael Hertzog
Email-Address   : hertzog@debian.org
Date            : Fri, 04 Sep 2015 12:09:39 -0400
Package Name    : falcot-data
Version         : 1.0
License         : gpl3
Type of Package : Independent
Hit &lt;enter&gt; to confirm:
Currently there is no top level Makefile. This may require additional tuning.
Done. Please edit the files in the debian/ subdirectory now. You should also
check that the falcot-data Makefiles install into $DESTDIR and not in / .
$</computeroutput>
</screen>

      <para>Tipe paket yang dipilih (<emphasis>single binary</emphasis>) menandakan bahwa paket sumber ini akan menghasilkan sebuah paket binari single bergantung pada arsitektur (<literal>Architecture: any</literal>). <emphasis>indep binary</emphasis> bertindak sebagai lawannya, dan menghasilkan paket binari single yang tidak bergantung pada arsitektur target (<literal>Architecture: all</literal>). Dalam kasus ini, pilihan yang terakhir lebih relevan karena paket hanya mengandung dokumen dan tidak ada binari program, jadi dapat digunakan pada semua komputer dari semua arsitektur.</para>

      <indexterm><primary>package types</primary></indexterm>
      <indexterm><primary>package</primary><secondary>types</secondary></indexterm>

      <para>Tipe <emphasis>multiple binary</emphasis> terkait ke paket sumber yang menghasilkan beberapa paket binari. Pada kasus khusus, <emphasis>library</emphasis>, berguna untuk shared libraries, karena mereka perlu mengikuti aturan pemaketan yang ketat. Dalam kasus serupa, <emphasis>kernel module</emphasis> atau <emphasis>kernel patch</emphasis> harus dibatasi ke paket yang mengandung modul kernel.</para>

      <sidebar>
        <title><emphasis>TIP</emphasis> Nama dan alamat surel Maintainer</title>

	<para>Most of the programs involved in package maintenance will
	look for your name and email address in the
	<varname>DEBFULLNAME</varname> and <varname>DEBEMAIL</varname> or
	<varname>EMAIL</varname> environment variables. Defining them once
	and for all will avoid you having to type them multiple times. If
	your usual shell is <command>bash</command>, it is a simple matter
	of adding the following two lines in your
	<filename>~/.bashrc</filename> file (you will obviously
	replace the values with more relevant ones!):</para>

        <programlisting>
export EMAIL="hertzog@debian.org"
export DEBFULLNAME="Raphael Hertzog"</programlisting>
      </sidebar>

      <para>The <command>dh_make</command> command created a
      <filename>debian</filename> subdirectory with many files. Some
      are required, in particular <filename>rules</filename>,
      <filename>control</filename>, <filename>changelog</filename> and
      <filename>copyright</filename>. Files with the
      <filename>.ex</filename> extension are example files that can be
      used by modifying them (and removing the extension) when
      appropriate. When they are not needed, removing them is
      recommended. The <filename>compat</filename> file should be
      kept, since it is required for the correct functioning of the
      <emphasis>debhelper</emphasis> suite of programs (all beginning
      with the <command>dh_</command> prefix) used at various stages
      of the package build process.</para>

      <para>The <filename>copyright</filename> file must contain
      information about the authors of the documents included in the
      package, and the related license. In our case, these are internal
      documents and their use is restricted to within the Falcot Corp
      company. The default <filename>changelog</filename> file is generally
      appropriate; replacing the “Initial release” with a more verbose
      explanation and changing the distribution from
      <literal>unstable</literal> to <literal>internal</literal> is enough.
      The <filename>control</filename> file was also updated: the <literal>Section</literal> field
      has been changed to <emphasis>misc</emphasis> and the
      <literal>Homepage</literal>, <literal>Vcs-Git</literal> and
      <literal>Vcs-Browser</literal> fields were removed. The
      <literal>Depends</literal> fields was completed with
      <literal>iceweasel | www-browser</literal> so as to ensure the
      availability of a web browser able to display the documents in the
      package.</para>

      <example>
        <title>Berkas <filename>control</filename></title>

        <programlisting>
Source: falcot-data
Section: misc
Priority: optional
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Build-Depends: debhelper (&gt;= 9)
Standards-Version: 3.9.5

Package: falcot-data
Architecture: all
Depends: iceweasel | www-browser, ${misc:Depends}
Description: Internal Falcot Corp Documentation
 This package provides several documents describing the internal
 structure at Falcot Corp.  This includes:
  - organization diagram
  - contacts for each department.
 .
 These documents MUST NOT leave the company.
 Their use is INTERNAL ONLY.
</programlisting>
      </example>

      <example>
        <title>Berkas <filename>changelog</filename></title>

        <programlisting>
falcot-data (1.0) internal; urgency=low

  * Initial Release.
  * Let's start with few documents:
    - internal company structure;
    - contacts for each department.

 -- Raphael Hertzog &lt;hertzog@debian.org&gt;  Fri, 04 Sep 2015 12:09:39 -0400
</programlisting>
      </example>

      <example>
        <title>Berkas <filename>copyright</filename></title>

        <programlisting>
Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: falcot-data

Files: *
Copyright: 2004-2015 Falcot Corp
License: 
 All rights reserved.
</programlisting>
      </example>

      <sidebar>
        <title><emphasis>KEMBALI KE DASAR</emphasis> Berkas <filename>Makefile</filename></title>
        <indexterm><primary><filename>Makefile</filename></primary></indexterm>

	<para>Berkas <filename>Makefile</filename> adalah sebuah script yang digunakan oleh program <command>make</command>; Berkas ini mendeskripsikan bagaimana mem-build sekumpulan berkas dari berkas lainnya dalam dependensi tree (contohnya, sebuah program dapat di-build dari beberapa berkas sumber). Berkas <filename>Makefile</filename> mendeskripsikan aturan ini dalam format berikut:</para>

        <programlisting>
target: source1 source2 ...
        command1
        command2
</programlisting>

	<para>Interpretasi dari aturan tersebut sebagai berikut: jika salah satu dari berkas <literal>sources</literal> lebih baru dari berkas <literal>target</literal>, maka target perlu dibuat, menggunakan <command>command1</command> dan <command>command2</command>.</para>

	<para>Perhatikan bahwa command line harus dimulai dengan karakter tab; perhatikan juga bahwa saat command line dimulai dengan karakter dash (<literal>-</literal>), kegagalan dari perintah meng-interupsi seluruh proses.</para>
      </sidebar>

      <para>Berkas <filename>rules</filename> umumnya berisi sekumpulan rules yang digunakan untuk meng-konfigurasi, build dan install perangkat lunak dalam subdirektori terdedikasi (dinamakan setelah paket binari dihasilkan). Isi dari subdirektori ini selanjutnya diarsipkan dalam paket Debian seolah sebagai root dari filesystem. Dalam kasus kami, berkas akan di-install dalam subdirektori <filename>debian/falcot-data/usr/share/falcot-data/</filename>, jadi meng-install paket yang dihasilkan akan men-deploy berkas di bawah <filename>/usr/share/falcot-data/</filename>. Berkas <filename>rules</filename> digunakan sebagai <filename>Makefile</filename>, dengan beberapa target standar (termasuk <literal>clean</literal> dan <literal>binary</literal>, digunakan untuk membersihkan direktori sumber dan menghasilkan paket binari).</para>

      <para>Walaupun berkas ini merupakan jantung dari proses, lama kelamaan hanya berisi bare minimum untuk menjalankan sekumpulan perintah yang disediakan oleh perkakas <command>debhelper</command>. Sebagai contoh dalam kasus untuk berkas yang dihasilkan oleh <command>dh_make</command>. Untuk menginstall berkas kita, kita hanya perlu mengkonfigurasi perilaku dari perintah <command>dh_install</command> dengan membuat berkas berikut <filename>debian/falcot-data.install</filename>:</para>

      <programlisting>
data/* usr/share/falcot-data/</programlisting>

      <para>Pada poin ini, paket dapat dibuat. Namun kita akan menambahkan sedikit polesan. Karena administrator ingin dokumen dapat diakses dengan mudah dari menu dalam lingkungan grafis desktop, kita membuat sebuah berkas <filename>falcot-data.desktop</filename>dan meletakkannya di <filename>/usr/share/applications</filename> dengan menambahkan dua baris pada <filename>debian/falcot-data.install</filename>.</para>

      <example>
        <title>Berkas <filename>falcot-data.desktop</filename></title>

        <programlisting>
[Desktop Entry]
Name=Internal Falcot Corp Documentation
Comment=Starts a browser to read the documentation
Exec=x-www-browser /usr/share/falcot-data/index.html
Terminal=false
Type=Application
Categories=Documentation;
</programlisting>
      </example>

      <para>Pembaharuan <filename>debian/falcot-data.install</filename> terlihat seperti ini:</para>
      <programlisting>
data/* usr/share/falcot-data/
falcot-data.desktop usr/share/applications/</programlisting>

      <para>Paket sumber kita sekarang sudah siap. Yang perlu dilakukan hanya membuat paket binari, dengan metode yang sama yang kita gunakan sebelumnya untuk membangun ulang paket: kita jalankan perintah <command>dpkg-buildpackage -us -uc</command> dari direktori <filename>falcot-data-1.0</filename>.</para>
    </section>
  </section>
  <section id="sect.setup-apt-package-repository">
    <title>Membuat Repositori Paket untuk APT</title>
    <indexterm><primary>package archive</primary></indexterm>
    <indexterm><primary>package</primary><secondary>Debian</secondary><tertiary>archive of</tertiary></indexterm>

    <para>Falcor Corp perlahan mulai mengelola sejumlah paket Debian baik dimodifikasi lokal dari paket yang sudah ada atau membuat dari awal untuk mendistribusikan data internal dan program.</para>

    <para>To make deployment easier, they want to integrate these packages
    in a package archive that can be directly used by APT. For obvious
    maintenance reasons, they wish to separate internal packages from
    locally-rebuilt packages. The goal is for the matching entries in a
    <filename>/etc/apt/sources.list.d/falcot.list</filename> file to be as
    follows:</para>

    <programlisting>
deb http://packages.falcot.com/ updates/
deb http://packages.falcot.com/ internal/</programlisting>
    <indexterm><primary><command>mini-dinstall</command></primary></indexterm>

    <para>The administrators therefore configure a virtual host on their
    internal HTTP server, with <filename>/srv/vhosts/packages/</filename>
    as the root of the associated web space. The management of the archive
    itself is delegated to the <command>mini-dinstall</command> command
    (in the similarly-named package). This tool keeps an eye on an
    <filename>incoming/</filename> directory (in our case,
    <filename>/srv/vhosts/packages/mini-dinstall/incoming/</filename>) and
    waits for new packages there; when a package is uploaded, it is
    installed into a Debian archive at
    <filename>/srv/vhosts/packages/</filename>. The
    <command>mini-dinstall</command> command reads the
    <filename>*.changes</filename> file created when the Debian package is
    generated. These files contain a list of all other files associated with
    the version of the package (<filename>*.deb</filename>,
    <filename>*.dsc</filename>,
    <filename>*.diff.gz</filename>/<filename>*.debian.tar.gz</filename>,
    <filename>*.orig.tar.gz</filename>, or their equivalents with other
    compression tools), and these allow <command>mini-dinstall</command> to
    know which files to install. <filename>*.changes</filename> files also
    contain the name of the target distribution (often
    <literal>unstable</literal>) mentioned in the latest
    <filename>debian/changelog</filename> entry, and
    <command>mini-dinstall</command> uses this information to decide where
    the package should be installed. This is why administrators must always
    change this field before building a package, and set it to
    <literal>internal</literal> or <literal>updates</literal>, depending on
    the target location. <command>mini-dinstall</command> then generates
    the files required by APT, such as
    <filename>Packages.gz</filename>.</para>

    <sidebar>
      <title><emphasis>ALTERNATIF</emphasis> <command>apt-ftparchive</command></title>
      <indexterm><primary><command>apt-ftparchive</command></primary></indexterm>

      <para>If <command>mini-dinstall</command> seems too complex for your
      Debian archive needs, you can also use the
      <command>apt-ftparchive</command> command. This tool scans the
      contents of a directory and displays (on its standard output) a
      matching <filename>Packages</filename> file. In the Falcot Corp case,
      administrators could upload the packages directly into
      <filename>/srv/vhosts/packages/updates/</filename> or
      <filename>/srv/vhosts/packages/internal/</filename>, then run the
      following commands to create the <filename>Packages.gz</filename>
      files:</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>cd /srv/vhosts/packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages updates &gt;updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages internal &gt;internal/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip internal/Packages</userinput></screen>

      <para>Perintah <command>apt-ftparchive sources</command> mengizinkan membuat berkas <filename>Sources.gz</filename> dengan cara yang mirip.</para>
    </sidebar>

    <para>Mengkonfigurasi <command>mini-dinstall</command> membutuhkan menyiapkan sebuah berkas <filename>~/.mini-dinstall.conf</filename>; dalam kasus Falcot Corp, isinya adalah sebagai berikut:</para>

    <programlisting>
[DEFAULT]
archive_style = flat
archivedir = /srv/vhosts/packages

verify_sigs = 0
mail_to = admin@falcot.com

generate_release = 1
release_origin = Falcot Corp
release_codename = stable

[updates]
release_label = Recompiled Debian Packages

[internal]
release_label = Internal Packages</programlisting>

    <para>One decision worth noting is the generation of
    <filename>Release</filename> files for each archive. This can help
    manage package installation priorities using the
    <filename>/etc/apt/preferences</filename> configuration file (see
    <xref linkend="sect.apt.priorities" /> for details).</para>

    <sidebar>
      <title><emphasis>SECURITY</emphasis> <command>mini-dinstall</command> dan permission</title>

      <para>Since <command>mini-dinstall</command> has been designed to run
      as a regular user, there's no need to run it as root. The easiest way
      is to configure everything within the user account belonging to the
      administrator in charge of creating the Debian packages. Since only
      this administrator has the required permissions to put files in the
      <filename>incoming/</filename> directory, we can deduce that the
      administrator authenticated the origin of each package prior to
      deployment and <command>mini-dinstall</command> does not need to do
      it again. This explains the <literal>verify_sigs = 0</literal>
      parameter (which means that signatures need not be verified).
      However, if the contents of packages are sensitive, we can reverse
      the setting and elect to authenticate with a keyring containing the
      public keys of persons allowed to create packages (configured with
      the <literal>extra_keyrings</literal> parameter);
      <command>mini-dinstall</command> will then check the origin of each
      incoming package by analyzing the signature integrated to the
      <filename>*.changes</filename> file.</para>
    </sidebar>

    <para>Invoking <command>mini-dinstall</command> actually starts a
    daemon in the background. As long as this daemon runs, it will check
    for new packages in the <filename>incoming/</filename> directory every
    half-hour; when a new package arrives, it will be moved to the archive
    and the appropriate <filename>Packages.gz</filename> and
    <filename>Sources.gz</filename> files will be regenerated. If running a
    daemon is a problem, <command>mini-dinstall</command> can also be
    manually invoked in batch mode (with the <literal>-b</literal> option)
    every time a package is uploaded into the
    <filename>incoming/</filename> directory. Other possibilities provided
    by <command>mini-dinstall</command> are documented in its
    <citerefentry><refentrytitle>mini-dinstall</refentrytitle>
    <manvolnum>1</manvolnum></citerefentry> manual page.</para>

    <sidebar>
      <title><emphasis>EKSTRA</emphasis> Membuat sebuah signed archive</title>

      <para>The APT suite checks a chain of cryptographic signatures on the
      packages it handles before installing them, in order to ensure
      their authenticity (see <xref linkend="sect.package-authentication" />). Private APT archives can
      then be a problem, since the machines using them will keep displaying
      warnings about unsigned packages. A diligent administrator will
      therefore integrate private archives with the secure APT
      mechanism.</para>

      <para>Untuk membantu dengan proses ini, <command>mini-dinstall</command> memuat <literal>release_signscript</literal> opsi konfigurasi yang memungkinkan menspesifikasikan sebuah script untuk digunakan untuk menghasilkan signature. Titik mulai yang bagus adalah script <filename>sign-release.sh</filename> yang disediakan oleh <emphasis role="pkg">mini-dinstall</emphasis> paket <filename>/usr/share/doc/mini-dinstall/examples/</filename>; perubahan lokal bisa jadi relevan.</para>
    </sidebar>
  </section>
  <section id="sect.becoming-package-maintainer">
    <title>Menjadi seorang Maintainer Paket</title>
    <section>
      <title>Belajar untuk Membuat Perubahan</title>

      <para>Membuat paket Debian berkualitas tidak selalu pekerjaan sederhana, dan menjadi pengelola paket membutuhkan ..., keduanya dengan teori dan praktik. Bukan masalah sesederhana membangun dan meng-install perangkat lunak; tapi, ... kompleksitas datang dari pemahaman masalah dan konflik, dan lebih umum dengan interaksi, dengan ... paket lain yang tersedia.</para>
      <section>
        <title>Aturan</title>

	<para>A Debian package must comply with the precise rules compiled
	in the Debian policy, and each package maintainer must know them.
	There is no requirement to know them by heart, but rather to know
	they exist and to refer to them whenever a choice presents a
	non-trivial alternative. Every Debian maintainer has made mistakes
	by not knowing about a rule, but this is not a huge problem as long 
	as the error gets fixed when a user reports it as a bug report (which
        tends to happen fairly soon thanks to advanced users).
        <ulink type="block" url="https://www.debian.org/doc/debian-policy/" /></para>
      </section>
      <section>
        <title>Prosedur</title>
        <indexterm><primary>Referensi Pengembang Debian</primary></indexterm>

	<para>Debian is not a simple collection of individual packages.
	Everyone's packaging work is part of a collective project; being a
	Debian developer involves knowing how the Debian project operates
	as a whole. Every developer will, sooner or later, interact with
	others. The Debian Developer's Reference (in the <emphasis role="pkg">developers-reference</emphasis> package) summarizes what
	every developer must know in order to interact as smoothly as
	possible with the various teams within the project, and to take the
	best possible advantages of the available resources. This document
	also enumerates a number of duties a developer is expected to
	fulfill. <ulink type="block" url="https://www.debian.org/doc/manuals/developers-reference/" /></para>
      </section>
      <section>
        <title>Perkakas</title>

	<para>Many tools help package maintainers in their work. This
	section describes them quickly, but does not give the full details,
	since they all have comprehensive documentation of their
	own.</para>
        <section>
          <title>Program <command>lintian</command></title>
          <indexterm><primary><command>lintian</command></primary></indexterm>

	  <para>This tool is one of the most important: it's the Debian
	  package checker. It is based on a large array of tests created
	  from the Debian policy, and detects quickly and automatically
	  many errors that can then be fixed before packages are
	  released.</para>

	  <para>Perkakas ini hanyalah pembantu, dan sesekali salah (contohnya, sejak kebijakan Debian berubah seiring waktu, <command>lintian</command> sesekali ....) ... juga tidak lengkap: tidak mendapatkan kesalahan Lintian bukan berarti bukti bahwa paket sudah sempurna; ... mencegah kesalahan yang paling umum.</para>
        </section>
        <section>
          <title>The <command>piuparts</command> Program</title>
          <indexterm><primary><command>piuparts</command></primary></indexterm>

	  <para>This is another important tool: it automates the
	  installation, upgrade, removal and purge of a package (in an
	  isolated environment), and checks that none of these
	  operations leads to an error.  It can help in detecting
	  missing dependencies, and it also detects when files are
	  incorrectly left over after the package got purged.</para>
        </section>
        <section>
          <title>devscripts</title>
          <indexterm><primary><emphasis role="pkg">devscripts</emphasis></primary></indexterm>
          <indexterm><primary><command>debuild</command></primary></indexterm>
          <indexterm><primary><command>dch</command></primary></indexterm>
          <indexterm><primary><command>uscan</command></primary></indexterm>
          <indexterm><primary><command>debi</command></primary></indexterm>
          <indexterm><primary><command>debc</command></primary></indexterm>

	  <para>Paket <emphasis role="pkg">devscripts</emphasis> berisi banyak program yang membantu beragam pekerjaan pengembang Debian:</para>
          <itemizedlist>
            <listitem>
	      <para><command>debuild</command> memungkinkan menghasilkan sebuah paket (dengan <command>dpkg-buildpackage</command>) dan menjalankan <command>lintian</command> untuk memeriksa kepatuhan dengan kebijakan Debian.</para>
            </listitem>
            <listitem>
	      <para><command>debclean</command> membersihkan paket sumber setelah paket binari dihasilkan.</para>
            </listitem>
            <listitem>
	      <para><command>dch</command> memungkinkan penyuntingan cepat dan mudah dari berkas <filename>debian/changelog</filename> dalam paket sumber.</para>
            </listitem>
            <listitem>
	      <para><command>uscan</command> memeriksa apakah terdapat versi baru perangkat lunak yang dirilis oleh penulis upstream; hal ini membutuhkan berkas <filename>debian/watch</filename> dengan deskripsi dari lokasi rilis.</para>
            </listitem>
            <listitem>
	      <para><command>debi</command> allows installing (with
	      <command>dpkg -i</command>) the Debian package that was just
	      generated without the need to type its full name and path.</para>
            </listitem>
            <listitem>
	      <para>Hal yang mirip, <command>debc</command> memungkinkan pencarian isi dari paket yang baru dibuat (dengan <command>dpkg -c</command>), tanpa harus mengetik nama lengkap dan path.</para>
            </listitem>
            <listitem>
	      <para><command>bts</command> mengendalikan sistem pelacakan bug dari command line; program ini secara otomatis menghasilkan pesan seperlunya.</para>
            </listitem>
            <listitem>
	      <para><command>debrelease</command> menggunggah paket yang baru dibuat ke server remote, tanpa harus mengisi nama lengkap dan path dari berkas <filename>.changes</filename> terkait.</para>
            </listitem>
            <listitem>
	      <para><command>debsign</command> menandatangani berkas <filename>*.dsc</filename> dan <filename>*.changes</filename>.</para>
            </listitem>
            <listitem>
	      <para><command>uupdate</command> ... proses pembuatan dari revisi baru paket saat versi upstream telah dirilis.</para>
            </listitem>
          </itemizedlist>
        </section>
        <section>
          <title><emphasis role="pkg">debhelper</emphasis> dan <emphasis role="pkg">dh-make</emphasis></title>
          <indexterm><primary><emphasis>debhelper</emphasis></primary></indexterm>
          <indexterm><primary><emphasis>dh-make</emphasis></primary></indexterm>

	  <para>Debhelper is a set of scripts easing the creation of
	  policy-compliant packages; these scripts are invoked from
	  <filename>debian/rules</filename>. Debhelper has been widely
	  adopted within Debian, as evidenced by the fact that it is used
	  by the majority of official Debian packages. All the commands it
          contains have a <command>dh_</command> prefix.</para>

	  <para>The <command>dh_make</command> script (in the
	  <emphasis>dh-make</emphasis> package) creates files required for
	  generating a Debian package in a directory initially containing
	  the sources for a piece of software. As can be guessed from the
	  name of the program, the generated files use debhelper by
	  default.</para>
        </section>
        <section>
          <title><command>dupload</command> dan <command>dput</command></title>
          <indexterm><primary><command>dupload</command></primary></indexterm>
          <indexterm><primary><command>dput</command></primary></indexterm>

	  <para>Perintah <command>dupload</command> dan <command>dput</command> memungkinkan mengunggah paket Debian ke (bisa jadi remote) server. Hal ini memungkinkan pengembang untuk mempublikasikan paket mereka pada server Debian utama (<literal>ftp-master.debian.org</literal>) sehingga bisa terintegrasi ke dalam archive dan didistribusikan oleh cermin. Perintah ini mengambil berkas <filename>*.changes</filename> sebagai parameter, dan ... berkas relevan lainnya dari isinya.</para>
        </section>
      </section>
    </section>
    <section>
      <title>Proses Penerimaan</title>

      <para>Becoming a “Debian developer” is not a simple administrative
      matter. The process comprises several steps, and is as much an
      initiation as it is a selection process. In any case, it is
      formalized and well-documented, so anyone can track their progression
      on the website dedicated to the new member process.
      <ulink type="block" url="https://nm.debian.org/" /></para>

      <sidebar>
        <title><emphasis>EXTRA</emphasis> Proses lightweight untuk “Debian Maintainers”</title>

        <para>“Debian Maintainer” is another status that gives less
          privileges than “Debian developer” but whose associated process
          is quicker. With this status, the contributors can maintain
          their own packages only. A Debian developer only needs to perform
          a check on an initial upload, and issue a statement to the
          effect that they trust the prospective maintainer with the
          ability to maintain the package on their own.
        </para>
        <indexterm><primary>Debian Maintainer</primary></indexterm>
      </sidebar>
      <section>
        <title>Persyaratan</title>

	<para>Semua kandidat diharapkan memiliki pengetahuan ... dari bahasa Inggris. Hal ini dibutuhkan pada semua tingkat: untuk komunikasi awal dengan penguji, tentunya, dan tentu nanti, sejak bahasa Inggris adalah bahasa yang ... untuk hampir semua dokumentasi; juga, pengguna paket akan berkomunikasi dengan bahasa Inggris saat melaporkan bug, dan mereka berharap balasan dalam bahasa Inggris.</para>

	<para>Persyaratan lainnya berkaitan dengan motivasi. Menjadi pengembang Debian merupakan proses yang hanya masuk akal jika kandidat mengetahui bahwa minat mereka dalam Debian akan bertahan hingga berbulan-bulan. Proses penerimaanya itu sendiri bisa jadi berlangsung beberapa bulan, dan Debian membutuhkan pengembang untuk jangka waktu panjang; setiap paket perlu pengelolaan permanen, dan tidak hanya unggah di awal saja.</para>
      </section>
      <section>
        <title>Registrasi</title>

	<para>Langkah pertama (nyata) terdiri dari mencari sponsor atau advokat; ini berarti seorang pengembang resmi bersedia menyatakan bahwa mereka yakin bahwa menerima <emphasis>X</emphasis> akan baik untuk Debian. Ini biasanya berarti menandakan bahwa kandidat telah aktif di dalam komunitas, dan karya mereka telah diapresiasi. Jika kandidat pemalu dan karya mereka tidak digembar-gemborkan secara publik, mereka dapat mencoba meyakinkan pengembang Debian untuk mengadvokasi dan menunjukkan karya mereka secara privat.</para>

        <indexterm><primary>key pair</primary></indexterm>
	<para>At the same time, the candidate must generate a
	public/private RSA key pair with GnuPG, which should be signed
	by at least two official Debian developers. The signature
	authenticates the name on the key. Effectively, during a key
	signing party, each participant must show an official
	identification (usually an ID card or passport) together with
	their key identifiers. This step confirms the link between the
	human and the keys. This signature thus requires
	meeting in real life.  If you have not yet met any Debian
	developers in a public free software conference, you can
	explicitly seek developers living nearby using the list on the
	following webpage as a starting point.  <ulink type="block" url="https://wiki.debian.org/Keysigning" /></para>

	<para>Once the registration on <literal>nm.debian.org</literal> has
	been validated by the advocate, an <emphasis>Application
	Manager</emphasis> is assigned to the candidate. The application
	manager will then drive the process through multiple pre-defined
	steps and checks.</para>

	<para>The first verification is an identity check. If you already
	have a key signed by two Debian developers, this step is easy;
	otherwise, the application manager will try and guide you in your
	search for Debian developers close by to organize a meet-up and a
	key signing.</para>
      </section>
      <section>
        <title>Menerima Prinsip-prinsip</title>

	<para>These administrative formalities are followed by
	philosophical considerations. The point is to make sure that the
	candidate understands and accepts the social contract and the
	principles behind Free Software. Joining Debian is only possible if
	one shares the values that unite the current developers, as
	expressed in the founding texts (and summarized in <xref linkend="the-debian-project" />).</para>

	<para>In addition, each candidate wishing to join the Debian ranks is
	expected to know the workings of the project, and how to interact
	appropriately to solve the problems they will doubtless encounter
	as time passes. All of this information is generally documented in
	manuals targeting the new maintainers, and in the Debian
	developer's reference. An attentive reading of this document should
	be enough to answer the examiner's questions. If the answers are
	not satisfactory, the candidate will be informed. They will then have
	to read (again) the relevant documentation before trying again. In
	the cases where the existing documentation does not contain the
	appropriate answer for the question, the candidate can usually
	reach an answer with some practical experience within Debian, or
	potentially by discussing with other Debian developers. This
	mechanism ensures that candidates get involved somewhat in Debian
	before becoming a full part of it. It is a deliberate policy, by
	which candidates who eventually join the project are integrated as
	another piece of an infinitely extensible jigsaw puzzle.</para>

        <indexterm><primary><emphasis>Philosophy &amp; Procedures</emphasis></primary></indexterm>
	<para>This step is usually known as the <emphasis>Philosophy &amp;
	Procedures</emphasis> (P&amp;P for short) in the lingo of the
	developers involved in the new member process.
	</para>
      </section>
      <section>
        <title>Pemeriksaan Keahlian</title>

	<para>Setiap aplikasi untuk menjadi pengembang resmi Debian harus dijustifikasi. Menjadi anggota proyek membutuhkan ... menunjukkan status ini legitimasi, dan memfasilitasi pekerjaan kandidat dalam membantu Debian. Justifikasi yang paling umum adalah ... diberikan Debian developer status ... memudahkan pengelolaan paket Debian, namun ini bukan satu-satunya. Beberapa pengembang bergabung ke proyek untuk aktif berkontribusi dengan mem-porting ke arsitektur spesifik, lainnya ingin meningkatkan dokumentasi, dan seterusnya.</para>

	<para>Langkah ini merepresentasikan peluang bagi kandidat untuk menyatakan bahwa mereka ingin ... dalam proyek Debian dan menunjukkan bahwa mereka telah bergerak maju... Debian adalah proyek pragmatis dan mengatakan sesuatu tidak cukup, jika tindakan tidak sesuai dengan apa yang dikatakan. Umumnya, saat ... dalam proyek berkaitan dengan pengelolaan paket, versi pertama dari prospektif pakt akan harus divalidasi secara teknis dan diunggah ke server Debian oleh sponsor dari pengembang Debian saat ini.</para>

        <sidebar>
          <title><emphasis>KOMUNITAS</emphasis> Sponsoring</title>
          <indexterm><primary>sponsoring</primary></indexterm>

	  <para>Pengembang Debian dapat “sponsor” paket yang disiapkan oleh orang lain, berarti bahwa mereka mempublikasikan mereka dalam repositori Debian resmi setelah melakukan review ... Mekanisme ini memungkinkan orang lain, yang ... melalui proses anggota baru, untuk berkontribusi ... pada proyek. Pada waktu yang bersamaan, memastikan bahwa semua paket yang dimasukkan dalam Debian telah diperiksa oleh anggota resmi.</para>
        </sidebar>

	<para>Akhirnya, penguji memeriksa kemampuan teknis (pemaketan) kandidat dengan kuesioner yang detail. Jawaban buruk tidak diizinkan, namun waktu menjawab tidak dibatasi. Semua dokumentasi tersedia dan beberapa kali percobaan diizinkan jika jawaban pertama belum mencukupi. Langkah ini bukan bermaksud untuk mendiskriminasi, namun untuk memastikan ... pengetahuan yang sama bagi kontributor baru.</para>

        <indexterm><primary><emphasis>Tasks &amp; Skills</emphasis></primary></indexterm>
	<para>This step is known as the <emphasis>Tasks &amp;
	Skills</emphasis> step (T&amp;S for short) in the examiners'
	jargon.</para>
      </section>
      <section>
        <title>Persetujuan Akhir</title>

	<para>Pada langkah terakhir, seluruh proses di-review oleh DAM (<emphasis>Debian Account Manager</emphasis>). DAM akan me-review semua informasi kandidat yang telah dikumpulkan penguji dan membuat keputusan apakah akan membuat akun pada server Debian atau tidak. Pada keadaan di mana informasi tambahan dibutuhkan, pembuatan akun bisa jadi tertunda. Penolakan jarang terjadi jika penguji melakukan pekerjaannya dengan baik, namun sesekali terjadi penolakan. Hal ini tidak pernah permanen, dan kandidat bebas untuk mencoba lagi pada waktu berikutnya.</para>

	<para>The DAM's decision is authoritative and (almost) without
        appeal, which explains why the people in that seat have often been
        criticized in the past.</para>
      </section>
    </section>
  </section>
</chapter>
