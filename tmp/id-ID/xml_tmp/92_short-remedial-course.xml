<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<appendix id="short-remedial-course">
  <appendixinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-short-remedial-course.png" scalefit="1" />
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>BIOS</keyword>
      <keyword>Kernel</keyword>
      <keyword>Unix</keyword>
      <keyword>Proses</keyword>
      <keyword>Hirarki</keyword>
      <keyword>Perintah-perintah Dasar</keyword>
    </keywordset>
  </appendixinfo>
  <title>Kursus Remedial Singkat</title>
  <highlights>
    <para>Meskipun buku ini terutama menarget administrator dan pengguna mahir, kita tidak ingin mengecualikan para pemula yang termotivasi. Lampiran ini karena itu adalah kursus kilat yang menggambarkan konsep-konsep fundamental yang terlibat dalam menangani komputer Unix.</para>
  </highlights>
  <section id="sect.shell-and-basic-commands">
    <title>Perintah-perintah Dasar dan Shell</title>

    <para>Di dunia Unix, setiap administrator pada akhirnya mesti menggunakan baris perintah; sebagai contoh, ketika sistem gagal untuk memulai dengan benar dan hanya menyediakan mode pertolongan baris perintah. Mampu menangani antarmuka seperti itu, karenanya, adalah keterampilan dasar untuk bertahan hidup dalam keadaan ini.</para>

    <sidebar>
      <title><emphasis>SEKILAS</emphasis> Memulai interpreter perintah</title>

      <para>A command-line environment can be run from the graphical
      desktop, by an application known as a “terminal”. In GNOME,
      you can start it from the “Activities” overview (that you get
      when you move the mouse in the top-left corner of the screen) by
      typing the first letters of the application name. In Plasma, you will
      find it in the <menuchoice><guimenu>K</guimenu>
      <guisubmenu>Applications</guisubmenu>
      <guisubmenu>System</guisubmenu></menuchoice> menu.</para>
    </sidebar>

    <para>Bagian ini hanya memberikan kilasan atas perintah-perintah. Mereka semua punya banyak opsi yang tidak dijelaskan di sini, maka silakan mengacu ke dokumentasi yang banyak tersedia dalam masing-masing halaman manual.</para>
    <section>
      <title>Meramban Pohon Direktori dan Mengelola Berkas</title>

      <para>Sekali suatu sesi dibuka, perintah <command>pwd</command> (yang merupakan kepanjangan dari <emphasis>print working directory</emphasis>, cetak direktori kerja) menampilkan lokasi saat ini dalam sistem berkas. Direktori saat ini berubah dengan perintah <command>cd <replaceable>direktori</replaceable></command> (<command>cd</command> adalah <emphasis>change directory</emphasis>, pindah direktori). Direktori induk selalu dinamai <literal>..</literal> (dua titik), sedangkan direktori saat ini juga dikenal sebagai <literal>.</literal> (satu titik). Perintah <command>ls</command> mengizinkan <emphasis>menampilkan</emphasis> isi dari suatu direktori. Bila suatu parameter diberikan, itu beroperasi pada direktori saat ini.</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>pwd</userinput>
<computeroutput>/home/rhertzog
$ </computeroutput><userinput>cd Desktop</userinput>
<computeroutput>$ </computeroutput><userinput>pwd</userinput>
<computeroutput>/home/rhertzog/Desktop
$ </computeroutput><userinput>cd .</userinput>
<computeroutput>$ </computeroutput><userinput>pwd</userinput>
<computeroutput>/home/rhertzog/Desktop
$ </computeroutput><userinput>cd ..</userinput>
<computeroutput>$ </computeroutput><userinput>pwd</userinput>
<computeroutput>/home/rhertzog
$ </computeroutput><userinput>ls</userinput>
<computeroutput>Desktop    Downloads  Pictures  Templates
Documents  Music      Public    Videos</computeroutput>
      </screen>

      <para>Suatu direktori baru dapat dibuat dengan <command>mkdir <replaceable>direktori</replaceable></command>, dan suatu direktori (kosong) yang telah ada dapat dihapus dengan <command>rmdir <replaceable>direktori</replaceable></command>. Perintah <command>mv</command> mengizinkan <emphasis>memindah</emphasis> dan/atau mengubah nama berkas dan direktori; <emphasis>menghapus</emphasis> suatu berkas dicapai dengan <command>rm <replaceable>berkas</replaceable></command>.</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>mkdir test</userinput>
<computeroutput>$ </computeroutput><userinput>ls</userinput>
<computeroutput>Desktop    Downloads  Pictures  Templates  Videos
Documents  Music      Public    test
$ </computeroutput><userinput>mv test new</userinput>
<computeroutput>$ </computeroutput><userinput>ls</userinput>
<computeroutput>Desktop    Downloads  new       Public     Videos
Documents  Music      Pictures  Templates
$ </computeroutput><userinput>rmdir new</userinput>
<computeroutput>$ </computeroutput><userinput>ls</userinput>
<computeroutput>Desktop    Downloads  Pictures  Templates  Videos
Documents  Music      Public</computeroutput>
      </screen>
    </section>
    <section>
      <title>Menampilkan dan Mengubah Berkas Teks</title>

      <para>Perintah <command>cat <replaceable>berkas</replaceable> </command> (dimaksudkan untuk <emphasis>concatenate</emphasis> berkas ke perangkat keluaran standar) membaca berkas dan menampilkan isinya pada terminal. Jika berkas terlalu besar untuk tampil utuh di layar, gunakan pager seperti <command>less</command> (atau <command>more</command>) untuk menampilkan halaman demi halaman.</para>

      <para>Perintah <command>editor</command> memulai suatu penyunting teks (seperti misalnya <command>vi</command> atau <command>nano</command>) dan mengizinkan pembuatan, pengubahan, dan pembacaan berkas teks. Berkas paling sederhana kadang dapat dibuat secara langsung dari interpreter perintah, terima kasih ke redireksi: <command>echo "<replaceable>teks</replaceable>" &gt;<replaceable>berkas</replaceable></command> membuat suatu berkas bernama <replaceable>berkas</replaceable> dengan "<replaceable>teks</replaceable>" sebagai isinya. Menambahkan suatu baris di akhir berkas ini juga mungkin, dengan suatu perintah seperti <command>echo "<replaceable>tekslain</replaceable>" &gt;&gt;<replaceable>berkas</replaceable></command>. Perhatikan <literal>&gt;&gt;</literal> dalam contoh ini.</para>
    </section>
    <section>
      <title>Mencari Berkas dan di dalam Berkas</title>

      <para>Perintah <command>find <replaceable>direktori</replaceable> <replaceable>kriteria</replaceable></command> mencari berkas dalam hirarki di bawah <replaceable>direktori</replaceable> sesuai dengan beberapa kriteria. Kriteria yang paling sering dipakai adalah <literal>-name <replaceable>name</replaceable></literal>: yang mengizinkan pencarian berkas menurut namanya.</para>

      <para>Perintah <command>grep <replaceable>ekpresi</replaceable> <replaceable>berkas</replaceable></command> mencari isi dari berkas dan mengekstrak baris-baris yang cocok dengan ekspresi reguler (lihat bilah sisi <xref linkend="sidebar.regexp" />). Menambahkan opsi <literal>-r</literal> memungkinkan pencarian rekursif pada semua berkas yang ada dalam direktori yang disebut sebagai parameter. Hal ini memungkinkan mencari berkas ketika hanya sebagian dari isinya diketahui.</para>
    </section>
    <section>
      <title>Mengelola Proses</title>

      <para>Perintah <command>ps aux</command> menampilkan daftar proses yang saat ini sedang berjalan dan membantu mengidentifikasi mereka dengan menunjukkan <emphasis>pid</emphasis> (id proces) mereka. Sekali <emphasis>pid</emphasis> dari suatu proses diketahui, perintah <command>kill -<replaceable>signal</replaceable> <replaceable>pid</replaceable></command> mengizinkan mengirim sinyal ke sana (bila proses milik dari pengguna saat ini). Ada beberapa sinyal; yang paling sering dipakai adalah <literal>TERM</literal> (suatu permintaan untuk mengakhiri secara baik-baik) dan <literal>KILL</literal> (mematikan paksa proses).</para>

      <para>Interpreter perintah juga dapat menjalankan program di latar belakang bila perintah diikuti dengan suatu "&amp;". Dengan memakai ampersand, pengguna meneruskan kendali shell seketika walaupun perintah masih berjalan (tersembunyi dari pengguna; sebagai suatu proses latar belakang). Perintah <command>jobs</command> menampilkan daftar proses yang sedang berjalan di latar belakang; menjalankan <command>fg %<replaceable>nomor-tugas</replaceable></command> (untuk <emphasis>foreground</emphasis>) mengembalikan tugas ke latar depan. Ketika suatu perintah dijalankan di latar depan (baik karena itu mulai dijalankan secara normal, atau dibawa kembali ke latar depan dengan <command>fg</command>), kombinasi tombol <keycombo action="simul"><keycap>Control</keycap><keycap>Z</keycap></keycombo> mengistirahatkan proses dan meneruskan kendali baris perintah. Proses kemudian dapat dijalankan ulang di latar belakang dengan <command>bg %<replaceable>nomor-tugas</replaceable></command> (untuk <foreignphrase>background</foreignphrase>).</para>
    </section>
    <section>
      <title>Informasi Sistem: Memori, Ruang Disk, Identitas</title>

      <para>Perintah <command>free</command> menampilkan informasi tentang memori; <command>df</command> (<emphasis>disk free</emphasis>) melaporkan ruang disk yang tersedia pada setiap disk yang di-mount dalam sistem berkas. Opsi <literal>-h</literal> (untuk <emphasis>human readable</emphasis>, dapat dibaca manusia) mengubah ukuran ke dalam satuan yang lebih mudah dibaca (biasanya mebibita or gibibita). Mirip itu, perintah <command>free</command> mendukung opsi-opsi <literal>-m</literal> dan <literal>-g</literal>, dan menampilkan datanya masing-masing dalam mebibita atau dalam gigabita.</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>free</userinput>
<computeroutput>             total       used       free     shared    buffers     cached
Mem:       1028420    1009624      18796          0      47404     391804
-/+ buffers/cache:     570416     458004
Swap:      2771172     404588    2366584
$ </computeroutput><userinput>df</userinput>
<computeroutput>Filesystem           1K-blocks      Used Available Use% Mounted on
/dev/sda2              9614084   4737916   4387796  52% /
tmpfs                   514208         0    514208   0% /lib/init/rw
udev                     10240       100     10140   1% /dev
tmpfs                   514208    269136    245072  53% /dev/shm
/dev/sda5             44552904  36315896   7784380  83% /home
</computeroutput></screen>

      <para>Perintah <command>id</command> menampilkan identitas pengguna yang sedang menjalankan sesi, bersama dengan daftar group dimana dia menjadi anggota. Karena akses ke beberapa berkas atau peranti mungkin dibatasi ke anggota grup, memeriksa keanggotaan grup yang tersedia mungkin berguna.</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>id</userinput>
<computeroutput>uid=1000(rhertzog) gid=1000(rhertzog) groups=1000(rhertzog),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),108(netdev),109(bluetooth),115(scanner)</computeroutput>
      </screen>
    </section>
  </section>
  <section id="sect.filesystem-hierarchy">
    <title>Organisasi dari Hirarki Sistem Berkas</title>
    <indexterm><primary>Hirarki Sistem Berkas</primary></indexterm>
    <section>
      <title>Direktori Root</title>

      <para>Suatu sistem Debian yang diorganisasikan mengikuti <emphasis>Filesystem Hierarchy Standard</emphasis> (FHS). Standar ini mendefinisikan tujuan masing-masing direktori. Sebagai contoh, direktori tingkat paling atas diuraikan sebagai berikut:</para>
      <itemizedlist>
        <listitem>
	  <para><filename>/bin/</filename>: program-program dasar;</para>
        </listitem>
        <listitem>
	  <para><filename>/boot</filename>: Kernel Linux dan berkas-berkas lain yang diperlukan untuk proses boot awal;</para>
        </listitem>
        <listitem>
	  <para><filename>/dev</filename>: berkas peranti;</para>
        </listitem>
        <listitem>
	  <para><filename>/etc</filename>: berkas konfigurasi;</para>
        </listitem>
        <listitem>
	  <para><filename>/home</filename>: berkas pribadi pengguna;</para>
        </listitem>
        <listitem>
	  <para><filename>/lib</filename>: pustaka dasar;</para>
        </listitem>
        <listitem>
	  <para><filename>/media/*</filename>: titik kait untuk peranti lepas pasang (CD-ROM, flash disk USB, dan sebagainya);</para>
        </listitem>
        <listitem>
	  <para><filename>/mnt</filename>: titik kait temporer;</para>
        </listitem>
        <listitem>
	  <para><filename>/opt</filename>: aplikasi ekstra yang disediakan oleh pihak ketiga;</para>
        </listitem>
        <listitem>
	  <para><filename>/root</filename>: berkas pribadi administrator (root);</para>
        </listitem>
        <listitem>
          <para><filename>/run</filename>: data runtime volatile yang tidak bertahan antar reboot (belum masuk ke dalam FHS);</para>
        </listitem>
        <listitem>
	  <para><filename>/sbin</filename>: program-program sistem;</para>
        </listitem>
        <listitem>
	  <para><filename>/srv</filename>: data yang dipakai oleh server yang diwadahi oleh sistem ini;</para>
        </listitem>
        <listitem>
	  <para><filename>/tmp</filename>: berkas temporer; direktori ini seringkali dikosongkan saat boot;</para>
        </listitem>
        <listitem>
	  <para><filename>/usr/</filename>: aplikasi; direktori ini dibagi lagi menjadi <filename>bin</filename>, <filename>sbin</filename>, <filename>lib</filename> (menurut logika yang sama seperti dalam direktori root). Selain itu, <filename>/usr/share/</filename> berisi data arsitektur-independen. <filename>/usr/local/</filename> dimaksudkan untuk digunakan oleh administrator untuk menginstal aplikasi secara manual tanpa menimpa berkas-berkas yang ditangani oleh sistim pemaketan (<command>dpkg</command>).</para>
        </listitem>
        <listitem>
	  <para><filename>/var/</filename>: data variabel yang ditangani oleh daemon. Ini termasuk berkas log, antrian, spool, cache, dan seterusnya.</para>
        </listitem>
        <listitem>
	  <para><filename>/proc/</filename> dan <filename>/sys/</filename> spesifik ke kernel Linux (dan bukan bagian dari FHS). Mereka dipakai oleh kernel untuk mengekspor data ke user space (lihat <xref linkend="sect.userspace-presentation" /> dan <xref linkend="sect.user-space" /> untuk penjelasan tentang konsep ini).</para>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Direktori Home Milik Pengguna</title>

      <para>Isi dari direktori home pengguna tidak distandarkan, tetapi masih ada beberapa konvensi yang patut dicatat. Salah satunya adalah bahwa direktori home pengguna sering disebut dengan sebuah tilde ("~"). Yang sangat berguna untuk diketahui karena interpreter perintah secara otomatis mengganti sebuah tilde dengan direktori yang benar (biasanya <filename>/home/<replaceable>pengguna</replaceable>/</filename>).</para>

      <para>Secara tradisional, berkas konfigurasi aplikasi sering tersimpan langsung di bawah direktori home pengguna, namun nama mereka biasanya mulai dengan sebuah titik (misalnya, klien surel <command>mutt</command> menyimpan konfigurasinya di <filename>~/.muttrc</filename>). Perhatikan bahwa nama berkas yang dimulai dengan sebuah titik tersembunyi secara default; dan <command>ls</command> hanya menampilkan daftar mereka ketika opsi <literal>-a</literal> digunakan, dan manajer berkas grafis harus diberitahu untuk menampilkan berkas yang tersembunyi.</para>

      <para>Beberapa program juga memakai berkas-berkas konfigurasi diorganisasi dalam sebuah direktori (sebagai contoh, <filename>~/.ssh/</filename>). Beberapa aplikasi (seperti misalnya peramban web Iceweasel) juga memakai direktori mereka untuk menyimpan suatu singgahan dari data yang diunduh. Ini berarti bahwa direktori-direktori itu pada akhirnya memakai banyak ruang disk.</para>

      <para>Berkas-berkas konfigurasi ini disimpan secara langsung dalam suatu direktori home pengguna, yang seringkali secara kolektif diacu sebagai <emphasis>dotfiles</emphasis>, telah lama menjamur sampai ke titik dimana dalam direktori-direktori ini bertebaran isi mereka. Untung, suatu upaya yang secara kolektif dinaungi oleh FreeDesktop.org telah menghasilkan “XDG Base Directory Specification”, Spesifikasi Direktori Dasar XDG, suatu konvensi yang bertujuan membersihkan berkas-berkas dan direktori ini. Spesifikasi ini menyatakan bahwa berkas-berkas konfigurasi mesti disimpan di bawah <filename>~/.config</filename>, berkas-berkas singgahan di bawah <filename>~/.cache</filename>, dan berkas-berkas data aplikasi di bawah <filename>~/.local</filename> (atau subdirektorinya). Konvensi ini secara perlahan mengumpulkan dukungan, dan beberapa aplikasi (khususnya yang grafis) telah mulai mengikutinya.</para>

      <para>Desktop grafis biasanya menampilkan isi dari direktori <filename>~/Desktop/</filename> (atau apa pun terjemahan yang tepat untuk sistem yang tidak dikonfigurasi dalam bahasa Inggris) pada desktop (yaitu, apa terlihat pada layar setelah semua aplikasi tertutup atau diikonkan).</para>

      <para>Akhirnya, sistem surel terkadang menyimpan surel yang masuk ke dalam direktori <filename>~/Mail/</filename>.</para>
    </section>
  </section>
  <section id="sect.computer-layers">
    <title>Inner Workings of a Computer: the Different Layers Involved</title>

    <para>Komputer sering dianggap sebagai sesuatu yang agak abstrak, dan antarmuka yang terlihat secara eksternal jauh lebih sederhana daripada kompleksitas internalnya. Kerumitan seperti itu sebagian berasal dari banyaknya bagian yang terlibat. Namun, potongan-potongan ini dapat dilihat dalam lapisan-lapisan, dimana suatu lapisan hanya berinteraksi dengan yang berada tepat di atas atau di bawahnya.</para>

    <para>An end-user can get by without knowing these details… as long
    as everything works. When confronting a problem such as, “The
    internet doesn't work!”, the first thing to do is to identify in
    which layer the problem originates. Is the network card (hardware)
    working? Is it recognized by the computer? Does the Linux kernel see
    it? Are the network parameters properly configured? All these questions
    isolate an appropriate layer and focus on a potential source of the
    problem.</para>
    <section id="sect.hardware">
      <title>Lapisan Terdalam: Perangkat Keras</title>
      <indexterm><primary>IDE</primary></indexterm>
      <indexterm><primary>SCSI</primary></indexterm>
      <indexterm><primary>Serial ATA</primary></indexterm>
      <indexterm><primary>Parallel ATA</primary></indexterm>
      <indexterm><primary>ATA</primary></indexterm>
      <indexterm><primary>IEEE 1394</primary></indexterm>
      <indexterm><primary>Firewire</primary></indexterm>
      <indexterm><primary>USB</primary></indexterm>

      <para>Let us start with a basic reminder that a computer is,
      first and foremost, a set of hardware elements. There is
      generally a main board (known as the
      <emphasis>motherboard</emphasis>), with one (or more)
      processor(s), some RAM, device controllers, and extension slots
      for option boards (for other device controllers).  Most
      noteworthy among these controllers are IDE (Parallel ATA), SCSI
      and Serial ATA, for connecting to storage devices such as hard
      disks.  Other controllers include USB, which is able to host a
      great variety of devices (ranging from webcams to thermometers,
      from keyboards to home automation systems) and IEEE 1394
      (Firewire). These controllers often allow connecting several
      devices so the complete subsystem handled by a controller is
      therefore usually known as a “bus”.  Option boards include
      graphics cards (into which monitor screens will be plugged),
      sound cards, network interface cards, and so on. Some main
      boards are pre-built with these features, and don't need option
      boards.</para>

      <sidebar>
        <title><emphasis>DALAM PRAKTEK</emphasis> Memeriksa bahwa perangkat keras bekerja</title>

	<para>Checking that a piece of hardware works can be tricky. On the
	other hand, proving that it doesn't work is sometimes quite
	simple.</para>

	<para>A hard disk drive is made of spinning platters and moving
	magnetic heads. When a hard disk is powered up, the platter motor
	makes a characteristic whir. It also dissipates energy as heat.
	Consequently, a hard disk drive that stays cold and silent when
	powered up is broken.</para>

	<para>Network cards often include LEDs displaying the state of the
	link. If a cable is plugged in and leads to a working network hub
	or switch, at least one LED will be on. If no LED lights up, either
	the card itself, the network device, or the cable between them, is
	faulty. The next step is therefore testing each component
	individually.</para>

	<para>Some option boards — especially 3D video cards — include
	cooling devices, such as heat sinks and/or fans. If the fan does
	not spin even though the card is powered up, a plausible
	explanation is the card overheated. This also applies to the main
	processor(s) located on the main board.</para>
      </sidebar>
    </section>
    <section id="sect.bios">
      <title>The Starter: the BIOS or UEFI</title>
      <indexterm><primary>BIOS</primary></indexterm>
      <indexterm><primary>UEFI</primary></indexterm>
      <indexterm><primary>Master Boot Record (MBR)</primary></indexterm>

      <para>Perangkat keras, berdiri sendiri, tidak mampu melakukan tugas-tugas yang berguna tanpa perangkat lunak terkait yang menggerakkannya. Mengendalikan dan berinteraksi dengan perangkat keras adalah tujuan dari sistem operasi dan aplikasi. Ini, pada gilirannya, memerlukan perangkat keras yang fungsional untuk berjalan.</para>

      <para>Simbiosis antara perangkat keras dan perangkat lunak ini tidak terjadi dengan sendirinya. Ketika komputer pertama kali dinyalakan, beberapa penyiapan awal diperlukan. Peran ini diambil oleh BIOS atau UEFI, sepenggal perangkat lunak yang ditanamkan ke dalam main board yang berjalan secara otomatis saat mulai dinyalakan. Tugas utamanya adalah mencari perangkat lunak yang bisa dilimpahi kendali. Biasanya, dalam kasus BIOS, ini termasuk mencari hard disk pertama yang memiliki sektor boot (juga dikenal sebagai <emphasis>master boot record</emphasis> atau <acronym>MBR</acronym>), memuat sektor boot tersebut, dan menjalankannya. Selanjutnya, BIOS biasanya tidak terlibat (sampat boot berikutnya). Dalam kasus UEFI, prosesnya melibatkan pemindaian disk untuk mencari partisi EFI terdedikasi yang memuat aplikasi-aplikasi EFI yang selanjutnya dapat dieksekusi.</para>

      <sidebar>
        <title><emphasis>TOOL</emphasis> Setup, the BIOS/UEFI configuration tool</title>
        <indexterm><primary><emphasis>Setup</emphasis></primary></indexterm>

	<para>The BIOS/UEFI also contains a piece of software called Setup,
	designed to allow configuring aspects of the computer. In
	particular, it allows choosing which boot device is preferred (for
	instance, the floppy disk or CD-ROM drive), setting the system
	clock, and so on. Starting Setup usually involves pressing a key
	very soon after the computer is powered on. This key is often
	<keycap>Del</keycap> or <keycap>Esc</keycap>, sometimes
	<keycap>F2</keycap> or <keycap>F10</keycap>. Most of the time, the
	choice is flashed on screen while booting.</para>
      </sidebar>

      <para>The boot sector (or the EFI partition), in turn, contains another piece of
      software, called the bootloader, whose purpose is to find and run an
      operating system. Since this bootloader is not embedded in the main
      board but loaded from disk, it can be smarter than the BIOS, which
      explains why the BIOS does not load the operating system by itself.
      For instance, the bootloader (often GRUB on Linux systems) can list
      the available operating systems and ask the user to choose one.
      Usually, a time-out and default choice is provided. Sometimes the
      user can also choose to add parameters to pass to the kernel, and so
      on. Eventually, a kernel is found, loaded into memory, and
      executed.</para>

      <sidebar>
        <title><emphasis>NOTE</emphasis> UEFI, a modern replacement to the BIOS</title>
        <indexterm><primary>UEFI</primary></indexterm>
        <indexterm><primary>Secure Boot</primary></indexterm>

        <para>UEFI is a relatively recent development. Most new computers will
        support UEFI booting, but usually they also support BIOS booting alongside
        for backwards compatibility with operating systems that are not ready
        to exploit UEFI.
        </para>
        <para>This new system gets rid of some of the limitations of BIOS
        booting: with the usage of a dedicated partition, the bootloaders no longer
        need special tricks to fit in a tiny <emphasis>master boot record</emphasis>
        and then discover the kernel to boot. Even better, with a suitably
        built Linux kernel, UEFI can directly boot the kernel without any
        intermediary bootloader.  UEFI is also the basic foundation used
        to deliver <emphasis>Secure Boot</emphasis>, a technology ensuring
        that you run only software validated by your operating system
        vendor.
        </para>
      </sidebar>

      <para>The BIOS/UEFI is also in charge of detecting and initializing a
      number of devices. Obviously, this includes the IDE/SATA devices
      (usually hard disk(s) and CD/DVD-ROM drives), but also PCI devices.
      Detected devices are often listed on screen during the boot process.
      If this list goes by too fast, use the <keycap>Pause</keycap> key to
      freeze it for long enough to read. Installed PCI devices that don't
      appear are a bad omen. At worst, the device is faulty. At best, it
      is merely incompatible with the current version of the BIOS or main
      board. PCI specifications evolve, and old main boards are not
      guaranteed to handle newer PCI devices.</para>
    </section>
    <section id="sect.kernel">
      <title>Kernel</title>

      <para>Both the BIOS/UEFI and the bootloader only run for a few seconds
      each; now we are getting to the first piece of software that runs for
      a longer time, the operating system kernel. This kernel assumes the
      role of a conductor in an orchestra, and ensures coordination between
      hardware and software. This role involves several tasks including:
      driving hardware, managing processes, users and permissions, the
      filesystem, and so on. The kernel provides a common base to all other
      programs on the system.</para>
    </section>
    <section id="sect.userspace-presentation">
      <title>The User Space</title>

      <para>Although everything that happens outside of the kernel can be
      lumped together under “user space”, we can still separate it into
      software layers. However, their interactions are more complex than
      before, and the classifications may not be as simple. An application
      commonly uses libraries, which in turn involve the kernel, but the
      communications can also involve other programs, or even many
      libraries calling each other.</para>
    </section>
  </section>
  <section id="sect.kernel-role-and-tasks">
    <title>Some Tasks Handled by the Kernel</title>
    <section id="sect.hardware-drivers">
      <title>Driving the Hardware</title>

      <para>The kernel is, first and foremost, tasked with controlling the
      hardware parts, detecting them, switching them on when the computer
      is powered on, and so on. It also makes them available to
      higher-level software with a simplified programming interface, so
      applications can take advantage of devices without having to worry
      about details such as which extension slot the option board is
      plugged into. The programming interface also provides an abstraction
      layer; this allows video-conferencing software, for example, to use a
      webcam independently of its make and model. The software can just use
      the <emphasis>Video for Linux</emphasis> (V4L) interface, and the
      kernel translates the function calls of this interface into the
      actual hardware commands needed by the specific webcam in use.</para>

     
      <para><indexterm><primary><command>lspci</command></primary></indexterm>
      <indexterm><primary><command>lsusb</command></primary></indexterm>
      <indexterm><primary><command>lsdev</command></primary></indexterm>
      <indexterm><primary><command>lspcmcia</command></primary></indexterm>
      The kernel exports many details about detected hardware through the
      <filename>/proc/</filename> and <filename>/sys/</filename> virtual
      filesystems. Several tools summarize those details. Among them,
      <command>lspci</command> (in the <emphasis role="pkg">pciutils</emphasis> package) lists PCI devices,
      <command>lsusb</command> (in the <emphasis role="pkg">usbutils</emphasis> package) lists USB devices, and
      <command>lspcmcia</command> (in the <emphasis role="pkg">pcmciautils</emphasis> package) lists PCMCIA cards. These
      tools are very useful for identifying the exact model of a device.
      This identification also allows more precise searches on the web,
      which in turn, lead to more relevant documents.</para>

      <example>
        <title>Example of information provided by <command>lspci</command> and <command>lsusb</command></title>

        <screen>
<computeroutput>$ </computeroutput><userinput>lspci</userinput>
<computeroutput>[...]
00:02.1 Display controller: Intel Corporation Mobile 915GM/GMS/910GML Express Graphics Controller (rev 03)
00:1c.0 PCI bridge: Intel Corporation 82801FB/FBM/FR/FW/FRW (ICH6 Family) PCI Express Port 1 (rev 03)
00:1d.0 USB Controller: Intel Corporation 82801FB/FBM/FR/FW/FRW (ICH6 Family) USB UHCI #1 (rev 03)
[...]
01:00.0 Ethernet controller: Broadcom Corporation NetXtreme BCM5751 Gigabit Ethernet PCI Express (rev 01)
02:03.0 Network controller: Intel Corporation PRO/Wireless 2200BG Network Connection (rev 05)
$ </computeroutput><userinput>lsusb</userinput>
<computeroutput>Bus 005 Device 004: ID 413c:a005 Dell Computer Corp.
Bus 005 Device 008: ID 413c:9001 Dell Computer Corp.
Bus 005 Device 007: ID 045e:00dd Microsoft Corp.
Bus 005 Device 006: ID 046d:c03d Logitech, Inc.
[...]
Bus 002 Device 004: ID 413c:8103 Dell Computer Corp. Wireless 350 Bluetooth
</computeroutput></screen>
      </example>

      <para>These programs have a <literal>-v</literal> option, that lists
      much more detailed (but usually not necessary) information. Finally,
      the <command>lsdev</command> command (in the <emphasis role="pkg">procinfo</emphasis> package) lists communication resources
      used by devices.</para>

      <para>Applications often access devices by way of special files
      created within <filename>/dev/</filename> (see sidebar <xref linkend="sidebar.special-files" />). These are special files that
      represent disk drives (for instance, <filename>/dev/hda</filename>
      and <filename>/dev/sdc</filename>), partitions
      (<filename>/dev/hda1</filename> or <filename>/dev/sdc3</filename>),
      mice (<filename>/dev/input/mouse0</filename>), keyboards
      (<filename>/dev/input/event0</filename>), soundcards
      (<filename>/dev/snd/*</filename>), serial ports
      (<filename>/dev/ttyS*</filename>), and so on.</para>
    </section>
    <section id="sect.filesystems">
      <title>Sistem Berkas</title>
      <indexterm><primary>sistem berkas</primary></indexterm>
      <indexterm><primary>sistem, sistem berkas</primary></indexterm>

      <para>Filesystems are one of the most prominent aspects of the
      kernel. Unix systems merge all the file stores into a single
      hierarchy, which allows users (and applications) to access data
      simply by knowing its location within that hierarchy.</para>

      <para>The starting point of this hierarchical tree is called the
      root, <filename>/</filename>. This directory can contain named
      subdirectories. For instance, the <literal>home</literal>
      subdirectory of <filename>/</filename> is called
      <filename>/home/</filename>. This subdirectory can, in turn, contain
      other subdirectories, and so on. Each directory can also contain
      files, where the actual data will be stored. Thus, the
      <filename>/home/rmas/Desktop/hello.txt</filename> name refers to a
      file named <literal>hello.txt</literal> stored in the
      <literal>Desktop</literal> subdirectory of the
      <literal>rmas</literal> subdirectory of the <literal>home</literal>
      directory present in the root. The kernel translates between this
      naming system and the actual, physical storage on a disk.</para>

      <para>Unlike other systems, there is only one such hierarchy, and it
      can integrate data from several disks. One of these disks is used as
      the root, and the others are “mounted” on directories in the
      hierarchy (the Unix command is called <command>mount</command>);
      these other disks are then available under these “mount points”.
      This allows storing users' home directories (traditionally stored
      within <filename>/home/</filename>) on a second hard disk, which will
      contain the <literal>rhertzog</literal> and <literal>rmas</literal>
      directories. Once the disk is mounted on <filename>/home/</filename>,
      these directories become accessible at their usual locations, and
      paths such as <filename>/home/rmas/Desktop/hello.txt</filename> keep
      working.</para>
      <indexterm><primary><command>mkfs</command></primary></indexterm>

      <para>There are many filesystem formats, corresponding to many ways of
      physically storing data on disks. The most widely known are
      <emphasis>ext2</emphasis>, <emphasis>ext3</emphasis> and
      <emphasis>ext4</emphasis>, but others exist. For instance,
      <emphasis>vfat</emphasis> is the system that was historically used by
      DOS and Windows operating systems, which allows using hard disks
      under Debian as well as under Windows. In any case, a filesystem must
      be prepared on a disk before it can be mounted and this operation is
      known as “formatting”. Commands such as
      <command>mkfs.ext3</command> (where <command>mkfs</command> stands
      for <emphasis>MaKe FileSystem</emphasis>) handle formatting. These
      commands require, as a parameter, a device file representing the
      partition to be formatted (for instance,
      <filename>/dev/sda1</filename>). This operation is destructive and
      should only be run once, except if one deliberately wishes to wipe a
      filesystem and start afresh.</para>

      <para>There are also network filesystems, such as
      <acronym>NFS</acronym>, where data is not stored on a local disk.
      Instead, data is transmitted through the network to a server that
      stores and retrieves them on demand. The filesystem abstraction
      shields users from having to care: files remain accessible in their
      usual hierarchical way.</para>
    </section>
    <section id="sect.shared-functions">
      <title>Fungsi Bersama</title>

      <para>Since a number of the same functions are used by all software,
      it makes sense to centralize them in the kernel. For instance, shared
      filesystem handling allows any application to simply open a file by
      name, without needing to worry where the file is stored physically.
      The file can be stored in several different slices on a hard disk, or
      split across several hard disks, or even stored on a remote file
      server. Shared communication functions are used by applications to
      exchange data independently of the way the data is transported. For
      instance, transport could be over any combination of local or
      wireless networks, or over a telephone landline.</para>
    </section>
    <section id="sect.process-management">
      <title>Mengelola Proses</title>
      <indexterm><primary><emphasis>pid</emphasis></primary></indexterm>

      <para>A process is a running instance of a program. This
      requires memory to store both the program itself and its
      operating data. The kernel is in charge of creating and tracking
      them. When a program runs, the kernel first sets aside some
      memory, then loads the executable code from the filesystem into
      it, and then starts the code running.  It keeps information
      about this process, the most visible of which is an
      identification number known as <emphasis>pid</emphasis>
      (<emphasis>process identifier</emphasis>).</para>

      <para>Unix-like kernels (including Linux), like most other modern
      operating systems, are capable of “multi-tasking”. In other words,
      they allow running many processes “at the same time”. There is
      actually only one running process at any one time, but the kernel
      cuts time into small slices and runs each process in turn. Since
      these time slices are very short (in the millisecond range), they
      create the illusion of processes running in parallel, although
      they are actually only active during some time intervals and idle the
      rest of the time. The kernel's job is to adjust its scheduling
      mechanisms to keep that illusion, while maximizing the global system
      performance. If the time slices are too long, the application may
      not appear as responsive as desired. Too short, and the system
      loses time switching tasks too frequently. These decisions can be
      tweaked with process priorities. High-priority processes will run for
      longer and with more frequent time slices than low-priority
      processes.</para>

      <sidebar>
        <title><emphasis>NOTE</emphasis> Multi-processor systems (and variants)</title>

	<para>The limitation described above of only one process being
	able to run at a time, doesn't always apply. The actual
	restriction is that there can only be one
	running process <emphasis>per processor core</emphasis> at a
	time. Multi-processor, multi-core or “hyper-threaded” systems
	allow several processes to run in parallel. The same
	time-slicing system is still used, though, so as to handle
	cases where there are more active processes than available
	processor cores. This is far from unusual: a basic system,
	even a mostly idle one, almost always has tens of running
	processes.</para>
      </sidebar>

      <para>Of course, the kernel allows running several independent
      instances of the same program. But each can only access its own time
      slices and memory. Their data thus remain independent.</para>
    </section>
    <section id="sect.permissions">
      <title>Rights Management</title>

      <para>Unix-like systems are also multi-user. They provide a
      rights management system that supports separate users and groups;
      it also allows control over actions based on
      permissions. The kernel manages data for each process, allowing
      it to control permissions. Most of the time, a process is identified
      by the user who started it. That process is only permitted
      to take those actions available to its owner. For instance, trying
      to open a file requires the kernel
      to check the process identity against access permissions (for
      more details on this particular example, see <xref linkend="sect.rights-management" />).</para>
    </section>
  </section>
  <section id="sect.user-space">
    <title>The User Space</title>
    <indexterm><primary>user space</primary></indexterm>
    <indexterm><primary>kernel space</primary></indexterm>

    <para>“User space” refers to the runtime environment of normal (as
    opposed to kernel) processes. This does not necessarily mean these
    processes are actually started by users because a standard system
    normally has several “daemon” (or background) processes running before the user
    even opens a session. Daemon processes are also considered user-space processes.</para>
    <section id="sect.process-basics">
      <title>Proses</title>
      <indexterm><primary><command>init</command></primary></indexterm>

      <para>When the kernel gets past its initialization phase, it starts
      the very first process, <command>init</command>. Process #1 alone is
      very rarely useful by itself, and Unix-like systems run with many
      additional processes.</para>
      <indexterm><primary><emphasis>fork</emphasis></primary></indexterm>

      <para>First of all, a process can clone itself (this is known as a
      <emphasis>fork</emphasis>). The kernel allocates a new (but
      identical) process memory space, and another process to use it. At
      this time, the only difference between these two processes
      is their <emphasis>pid</emphasis>. The new process is usually
      called a child process, and the original process whose
      <emphasis>pid</emphasis> doesn't change, is called the parent
      process.</para>

      <para>Sometimes, the child process continues to lead its own
      life independently from its parent, with its own data copied
      from the parent process. In many cases, though, this child
      process executes another program. With a few exceptions, its
      memory is simply replaced by that of the new program, and
      execution of this new program begins. This is the mechanism
      used by the init process (with process number 1) to start
      additional services and execute the whole startup sequence.
      At some point, one process among <command>init</command>'s offspring
      starts a graphical interface for users to log in to (the actual
      sequence of events is described in more details in
      <xref linkend="sect.system-boot" />).</para>

      <para>When a process finishes the task for which it was started, it
      terminates. The kernel then recovers the memory assigned to this
      process, and stops giving it slices of running time. The parent
      process is told about its child process being terminated, which
      allows a process to wait for the completion of a task it delegated to
      a child process. This behavior is plainly visible in command-line
      interpreters (known as <emphasis>shells</emphasis>). When a command
      is typed into a shell, the prompt only comes back when the execution
      of the command is over. Most shells allow for running the command in
      the background, it is a simple matter of adding an
      <userinput>&amp;</userinput> to the end of the command. The prompt is
      displayed again right away, which can lead to problems if the command
      needs to display data of its own.</para>
    </section>
    <section id="sect.daemons">
      <title>Daemon</title>
      <indexterm><primary>daemon</primary></indexterm>
      <indexterm><primary>daemon</primary></indexterm>

      <para>A “daemon” is a process started automatically by the boot
      sequence. It keeps running (in the background) to perform maintenance
      tasks or provide services to other processes. This “background
      task” is actually arbitrary, and does not match anything particular
      from the system's point of view. They are simply processes, quite
      similar to other processes, which run in turn when their time slice
      comes. The distinction is only in the human language: a process that
      runs with no interaction with a user (in particular, without any
      graphical interface) is said to be running “in the background” or
      “as a daemon”.</para>

      <sidebar>
        <title><emphasis>VOCABULARY</emphasis> Daemon, demon, a derogatory term?</title>

	<para>Although <emphasis>daemon</emphasis> term shares its
	Greek etymology with <emphasis>demon</emphasis>, the former
	does not imply diabolical evil, instead, it should be
	understood as a kind of helper spirit. This distinction is
	subtle enough in English; it is even worse in other languages
	where the same word is used for both meanings.</para>
      </sidebar>

      <para>Several such daemons are described in detail in <xref linkend="unix-services" />.</para>
    </section>
    <section id="sect.ipc">
      <title>Inter-Process Communications</title>
      <indexterm><primary>IPC</primary></indexterm>
      <indexterm><primary>Inter-Process Communications</primary></indexterm>

      <para>An isolated process, whether a daemon or an interactive
      application, is rarely useful on its own, which is why there are
      several methods allowing separate processes to communicate together,
      either to exchange data or to control one another. The generic term
      referring to this is <emphasis>inter-process
      communication</emphasis>, or IPC for short.</para>

      <para>The simplest IPC system is to use files. The process that
      wishes to send data writes it into a file (with a name known in
      advance), while the recipient only has to open the file and read its
      contents.</para>
      <indexterm><primary><emphasis>pipe</emphasis></primary></indexterm>

      <para>In the case where you do not wish to store data on disk, you
      can use a <emphasis>pipe</emphasis>, which is simply an object with
      two ends; bytes written in one end are readable at the other. If the
      ends are controlled by separate processes, this leads to a simple and
      convenient inter-process communication channel. Pipes can be
      classified into two categories: named pipes, and anonymous pipes. A
      named pipe is represented by an entry on the filesystem (although the
      transmitted data is not stored there), so both processes can open it
      independently if the location of the named pipe is known beforehand.
      In cases where the communicating processes are related (for instance,
      a parent and its child process), the parent process can also create
      an anonymous pipe before forking, and the child inherits it. Both
      processes will then be able to exchange data through the pipe without
      needing the filesystem.</para>

      <sidebar>
        <title><emphasis>IN PRACTICE</emphasis> A concrete example</title>

	<para>Let's describe in some detail what happens when a complex
	command (a <emphasis>pipeline</emphasis>) is run from a shell. We
	assume we have a <command>bash</command> process (the standard user
	shell on Debian), with <emphasis>pid</emphasis> 4374; into this
	shell, we type the command: <command>ls | sort</command> .</para>

	<para>The shell first interprets the command typed in. In our case,
	it understands there are two programs (<command>ls</command> and
	<command>sort</command>), with a data stream flowing from one to
	the other (denoted by the <userinput>|</userinput> character, known
	as <emphasis>pipe</emphasis>). <command>bash</command> first
	creates an unnamed pipe (which initially exists only within the
	<command>bash</command> process itself).</para>

	<para>Then the shell clones itself; this leads to a new
	<command>bash</command> process, with
	<emphasis>pid</emphasis> #4521 (<emphasis>pids</emphasis> are
	abstract numbers, and generally have no particular meaning).
	Process #4521 inherits the pipe, which means it is able to write in
	its “input” side; <command>bash</command> redirects its
	standard output stream to this pipe's input. Then it executes (and
	replaces itself with) the <command>ls</command> program, which
	lists the contents of the current directory. Since
	<command>ls</command> writes on its standard output, and this
	output has previously been redirected, the results are effectively
	sent into the pipe.</para>

	<para>A similar operation happens for the second command:
	<command>bash</command> clones itself again, leading to a new
	<command>bash</command> process with pid #4522. Since it is also a
	child process of #4374, it also inherits the pipe;
	<command>bash</command> then connects its standard input to the
	pipe output, then executes (and replaces itself with) the
	<command>sort</command> command, which sorts its input and displays
	the results.</para>

	<para>All the pieces of the puzzle are now set up:
	<command>ls</command> reads the current directory and writes
	the list of files into the pipe; <command>sort</command> reads
	this list, sorts it alphabetically, and displays the
	results. Processes numbers #4521 and #4522 then terminate, and
	#4374 (which was waiting for them during the operation),
	resumes control and displays the prompt to allow the user to
	type in a new command.</para>
      </sidebar>

      <para>Not all inter-process communications are used to move data
      around, though. In many situations, the only information that needs to
      be transmitted are control messages such as “pause execution” or
      “resume execution”. Unix (and Linux) provides a mechanism known
      as <emphasis>signals</emphasis>, through which a process can simply
      send a specific signal (chosen from a predefined list of
      signals) to another process. The only requirement is to know the
      <emphasis>pid</emphasis> of the target.</para>

      <para>For more complex communications, there are also mechanisms
      allowing a process to open access, or share, part of its
      allocated memory to other processes. Memory now shared between them
      can be used to move data between the processes.</para>

      <para>Finally, network connections can also help processes
      communicate; these processes can even be running on different
      computers, possibly thousands of kilometers apart.</para>

      <para>It is quite standard for a typical Unix-like system to make use
      of all these mechanisms to various degrees.</para>
    </section>
    <section id="sect.libraries">
      <title>Pustaka</title>
      <indexterm><primary>perpustakaan (fungsi)</primary></indexterm>

      <para>Function libraries play a crucial role in a Unix-like operating
      system. They are not proper programs, since they cannot be executed
      on their own, but collections of code fragments that can be used by
      standard programs. Among the common libraries, you can find:</para>
      <itemizedlist>
        <listitem>
	  <para>the standard C library (<emphasis>glibc</emphasis>), which
	  contains basic functions such as ones to open files or network
	  connections, and others facilitating interactions with the
	  kernel;</para>
        </listitem>
        <listitem>
	  <para>graphical toolkits, such as Gtk+ and Qt, allowing many programs to
	  reuse the graphical objects they provide;</para>
        </listitem>
        <listitem>
	  <para>the <emphasis>libpng</emphasis> library, that allows
	  loading, interpreting and saving images in the PNG format.</para>
        </listitem>
      </itemizedlist>

      <para>Thanks to those libraries, applications can reuse existing
      code. Application development is simplified since
      many applications can reuse the same functions. With
      libraries often developed by different persons, the global
      development of the system is closer to Unix's historical
      philosophy.</para>

      <sidebar>
        <title><emphasis>CULTURE</emphasis> The Unix Way: one thing at a time</title>

	<para>Satu dari konsep fundamental yang mendasari keluarga sistem operasi Unix adalah bahwa setiap alat mesti hanya melakukan satu hal, dan melakukannya dengan baik; aplikasi kemudian dapat memakai lagi alat-alat ini untuk membangun lebih banyak logika tingkat lanjut di atasnya. Filosofi ini dapat dilihat dalam banyak inkarnasi. Skrip shell mungkin adalah contoh terbaik: mereka merangkai urutan yang kompleks dari alat-alat yang sangat sederhana (seperti misalnya <command>grep</command>, <command>wc</command>, <command>sort</command>, <command>uniq</command>, dan seterusnya). Implementasi lain dari filosofi ini dapat dilihat dalam pustaka kode: pustaka <emphasis>libpng</emphasis> memungkinkan membaca dan menulis citra-citra PNG, dengan opsi-opsi lain dan dalam cara-cara yang berbeda, tapi hanya melakukan itu; tidak ada pertanyaan untuk memasukkan fungsi-fungsi yang menampilkan atau menyunting citra.</para>
      </sidebar>

      <para>Moreover, these libraries are often referred to as “shared
      libraries”, since the kernel is able to only load them into memory
      once, even if several processes use the same library at the same
      time. This allows saving memory, when compared with the opposite
      (hypothetical) situation where the code for a library would be loaded
      as many times as there are processes using it.</para>
    </section>
  </section>
</appendix>
