<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<appendix id="short-remedial-course" lang="id-ID">
	<appendixinfo>
		 <keywordset>
			<keyword>BIOS</keyword>
			 <keyword>Kernel</keyword>
			 <keyword>Unix</keyword>
			 <keyword>Proses</keyword>
			 <keyword>Hirarki</keyword>
			 <keyword>Perintah-perintah Dasar</keyword>

		</keywordset>

	</appendixinfo>
	 <title>Kursus Remedial Singkat</title>
	 <highlights> <para>
		Meskipun buku ini terutama menarget administrator dan pengguna mahir, kita tidak ingin mengecualikan para pemula yang termotivasi. Lampiran ini karena itu adalah kursus kilat yang menggambarkan konsep-konsep fundamental yang terlibat dalam menangani komputer Unix.
	</para>
	 </highlights> <section id="sect.shell-and-basic-commands">
		<title>Perintah-perintah Dasar dan Shell</title>
		 <para>
			Di dunia Unix, setiap administrator pada akhirnya mesti menggunakan baris perintah; sebagai contoh, ketika sistem gagal untuk memulai dengan benar dan hanya menyediakan mode pertolongan baris perintah. Mampu menangani antarmuka seperti itu, karenanya, adalah keterampilan dasar untuk bertahan hidup dalam keadaan ini.
		</para>
		 <sidebar> <title><emphasis>SEKILAS</emphasis> Memulai interpreter perintah</title>
		 <para>
			A command-line environment can be run from the graphical desktop, by an application known as a “terminal”. In GNOME, you can start it from the “Activities” overview (that you get when you move the mouse in the top-left corner of the screen) by typing the first letters of the application name. In Plasma, you will find it in the <menuchoice><guimenu>K</guimenu> <guisubmenu>Applications</guisubmenu> <guisubmenu>System</guisubmenu></menuchoice> menu.
		</para>
		 </sidebar> <para>
			Bagian ini hanya memberikan kilasan atas perintah-perintah. Mereka semua punya banyak opsi yang tidak dijelaskan di sini, maka silakan mengacu ke dokumentasi yang banyak tersedia dalam masing-masing halaman manual.
		</para>
		 <section>
			<title>Meramban Pohon Direktori dan Mengelola Berkas</title>
			 <para>
				Sekali suatu sesi dibuka, perintah <command>pwd</command> (yang merupakan kepanjangan dari <emphasis>print working directory</emphasis>, cetak direktori kerja) menampilkan lokasi saat ini dalam sistem berkas. Direktori saat ini berubah dengan perintah <command>cd <replaceable>direktori</replaceable></command> (<command>cd</command> adalah <emphasis>change directory</emphasis>, pindah direktori). Direktori induk selalu dinamai <literal>..</literal> (dua titik), sedangkan direktori saat ini juga dikenal sebagai <literal>.</literal> (satu titik). Perintah <command>ls</command> mengizinkan <emphasis>menampilkan</emphasis> isi dari suatu direktori. Bila suatu parameter diberikan, itu beroperasi pada direktori saat ini.
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>pwd</userinput>
<computeroutput>/home/rhertzog
$ </computeroutput><userinput>cd Desktop</userinput>
<computeroutput>$ </computeroutput><userinput>pwd</userinput>
<computeroutput>/home/rhertzog/Desktop
$ </computeroutput><userinput>cd .</userinput>
<computeroutput>$ </computeroutput><userinput>pwd</userinput>
<computeroutput>/home/rhertzog/Desktop
$ </computeroutput><userinput>cd ..</userinput>
<computeroutput>$ </computeroutput><userinput>pwd</userinput>
<computeroutput>/home/rhertzog
$ </computeroutput><userinput>ls</userinput>
<computeroutput>Desktop    Downloads  Pictures  Templates
Documents  Music      Public    Videos</computeroutput>
</screen>
			 <para>
				Suatu direktori baru dapat dibuat dengan <command>mkdir <replaceable>direktori</replaceable></command>, dan suatu direktori (kosong) yang telah ada dapat dihapus dengan <command>rmdir <replaceable>direktori</replaceable></command>. Perintah <command>mv</command> mengizinkan <emphasis>memindah</emphasis> dan/atau mengubah nama berkas dan direktori; <emphasis>menghapus</emphasis> suatu berkas dicapai dengan <command>rm <replaceable>berkas</replaceable></command>.
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>mkdir test</userinput>
<computeroutput>$ </computeroutput><userinput>ls</userinput>
<computeroutput>Desktop    Downloads  Pictures  Templates  Videos
Documents  Music      Public    test
$ </computeroutput><userinput>mv test new</userinput>
<computeroutput>$ </computeroutput><userinput>ls</userinput>
<computeroutput>Desktop    Downloads  new       Public     Videos
Documents  Music      Pictures  Templates
$ </computeroutput><userinput>rmdir new</userinput>
<computeroutput>$ </computeroutput><userinput>ls</userinput>
<computeroutput>Desktop    Downloads  Pictures  Templates  Videos
Documents  Music      Public</computeroutput>
</screen>

		</section>
		 <section>
			<title>Menampilkan dan Mengubah Berkas Teks</title>
			 <para>
				Perintah <command>cat <replaceable>berkas</replaceable> </command> (dimaksudkan untuk <emphasis>concatenate</emphasis> berkas ke perangkat keluaran standar) membaca berkas dan menampilkan isinya pada terminal. Jika berkas terlalu besar untuk tampil utuh di layar, gunakan pager seperti <command>less</command> (atau <command>more</command>) untuk menampilkan halaman demi halaman.
			</para>
			 <para>
				Perintah <command>editor</command> memulai suatu penyunting teks (seperti misalnya <command>vi</command> atau <command>nano</command>) dan mengizinkan pembuatan, pengubahan, dan pembacaan berkas teks. Berkas paling sederhana kadang dapat dibuat secara langsung dari interpreter perintah, terima kasih ke redireksi: <command>echo "<replaceable>teks</replaceable>" &gt;<replaceable>berkas</replaceable></command> membuat suatu berkas bernama <replaceable>berkas</replaceable> dengan "<replaceable>teks</replaceable>" sebagai isinya. Menambahkan suatu baris di akhir berkas ini juga mungkin, dengan suatu perintah seperti <command>echo "<replaceable>tekslain</replaceable>" &gt;&gt;<replaceable>berkas</replaceable></command>. Perhatikan <literal>&gt;&gt;</literal> dalam contoh ini.
			</para>

		</section>
		 <section>
			<title>Mencari Berkas dan di dalam Berkas</title>
			 <para>
				Perintah <command>find <replaceable>direktori</replaceable> <replaceable>kriteria</replaceable></command> mencari berkas dalam hirarki di bawah <replaceable>direktori</replaceable> sesuai dengan beberapa kriteria. Kriteria yang paling sering dipakai adalah <literal>-name <replaceable>name</replaceable></literal>: yang mengizinkan pencarian berkas menurut namanya.
			</para>
			 <para>
				Perintah <command>grep <replaceable>ekpresi</replaceable> <replaceable>berkas</replaceable></command> mencari isi dari berkas dan mengekstrak baris-baris yang cocok dengan ekspresi reguler (lihat bilah sisi <xref linkend="sidebar.regexp" />). Menambahkan opsi <literal>-r</literal> memungkinkan pencarian rekursif pada semua berkas yang ada dalam direktori yang disebut sebagai parameter. Hal ini memungkinkan mencari berkas ketika hanya sebagian dari isinya diketahui.
			</para>

		</section>
		 <section>
			<title>Mengelola Proses</title>
			 <para>
				Perintah <command>ps aux</command> menampilkan daftar proses yang saat ini sedang berjalan dan membantu mengidentifikasi mereka dengan menunjukkan <emphasis>pid</emphasis> (id proces) mereka. Sekali <emphasis>pid</emphasis> dari suatu proses diketahui, perintah <command>kill -<replaceable>signal</replaceable> <replaceable>pid</replaceable></command> mengizinkan mengirim sinyal ke sana (bila proses milik dari pengguna saat ini). Ada beberapa sinyal; yang paling sering dipakai adalah <literal>TERM</literal> (suatu permintaan untuk mengakhiri secara baik-baik) dan <literal>KILL</literal> (mematikan paksa proses).
			</para>
			 <para>
				Interpreter perintah juga dapat menjalankan program di latar belakang bila perintah diikuti dengan suatu "&amp;". Dengan memakai ampersand, pengguna meneruskan kendali shell seketika walaupun perintah masih berjalan (tersembunyi dari pengguna; sebagai suatu proses latar belakang). Perintah <command>jobs</command> menampilkan daftar proses yang sedang berjalan di latar belakang; menjalankan <command>fg %<replaceable>nomor-tugas</replaceable></command> (untuk <emphasis>foreground</emphasis>) mengembalikan tugas ke latar depan. Ketika suatu perintah dijalankan di latar depan (baik karena itu mulai dijalankan secara normal, atau dibawa kembali ke latar depan dengan <command>fg</command>), kombinasi tombol <keycombo action="simul"><keycap>Control</keycap><keycap>Z</keycap></keycombo> mengistirahatkan proses dan meneruskan kendali baris perintah. Proses kemudian dapat dijalankan ulang di latar belakang dengan <command>bg %<replaceable>nomor-tugas</replaceable></command> (untuk <foreignphrase>background</foreignphrase>).
			</para>

		</section>
		 <section>
			<title>Informasi Sistem: Memori, Ruang Disk, Identitas</title>
			 <para>
				Perintah <command>free</command> menampilkan informasi tentang memori; <command>df</command> (<emphasis>disk free</emphasis>) melaporkan ruang disk yang tersedia pada setiap disk yang di-mount dalam sistem berkas. Opsi <literal>-h</literal> (untuk <emphasis>human readable</emphasis>, dapat dibaca manusia) mengubah ukuran ke dalam satuan yang lebih mudah dibaca (biasanya mebibita or gibibita). Mirip itu, perintah <command>free</command> mendukung opsi-opsi <literal>-m</literal> dan <literal>-g</literal>, dan menampilkan datanya masing-masing dalam mebibita atau dalam gigabita.
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>free</userinput>
<computeroutput>             total       used       free     shared    buffers     cached
Mem:       1028420    1009624      18796          0      47404     391804
-/+ buffers/cache:     570416     458004
Swap:      2771172     404588    2366584
$ </computeroutput><userinput>df</userinput>
<computeroutput>Filesystem           1K-blocks      Used Available Use% Mounted on
/dev/sda2              9614084   4737916   4387796  52% /
tmpfs                   514208         0    514208   0% /lib/init/rw
udev                     10240       100     10140   1% /dev
tmpfs                   514208    269136    245072  53% /dev/shm
/dev/sda5             44552904  36315896   7784380  83% /home
</computeroutput></screen>
			 <para>
				Perintah <command>id</command> menampilkan identitas pengguna yang sedang menjalankan sesi, bersama dengan daftar group dimana dia menjadi anggota. Karena akses ke beberapa berkas atau peranti mungkin dibatasi ke anggota grup, memeriksa keanggotaan grup yang tersedia mungkin berguna.
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>id</userinput>
<computeroutput>uid=1000(rhertzog) gid=1000(rhertzog) groups=1000(rhertzog),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),108(netdev),109(bluetooth),115(scanner)</computeroutput>
</screen>

		</section>

	</section>
	 <section id="sect.filesystem-hierarchy">
		<title>Organisasi dari Hirarki Sistem Berkas</title>
		 <indexterm>
			<primary>Hirarki Sistem Berkas</primary>
		</indexterm>
		 <section>
			<title>Direktori Root</title>
			 <para>
				Suatu sistem Debian yang diorganisasikan mengikuti <emphasis>Filesystem Hierarchy Standard</emphasis> (FHS). Standar ini mendefinisikan tujuan masing-masing direktori. Sebagai contoh, direktori tingkat paling atas diuraikan sebagai berikut:
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						<filename>/bin/</filename>: program-program dasar;
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/boot</filename>: Kernel Linux dan berkas-berkas lain yang diperlukan untuk proses boot awal;
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/dev</filename>: berkas peranti;
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/etc</filename>: berkas konfigurasi;
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/home</filename>: berkas pribadi pengguna;
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/lib</filename>: pustaka dasar;
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/media/*</filename>: titik kait untuk peranti lepas pasang (CD-ROM, flash disk USB, dan sebagainya);
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/mnt</filename>: titik kait temporer;
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/opt</filename>: aplikasi ekstra yang disediakan oleh pihak ketiga;
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/root</filename>: berkas pribadi administrator (root);
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/run</filename>: data runtime volatile yang tidak bertahan antar reboot (belum masuk ke dalam FHS);
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/sbin</filename>: program-program sistem;
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/srv</filename>: data yang dipakai oleh server yang diwadahi oleh sistem ini;
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/tmp</filename>: berkas temporer; direktori ini seringkali dikosongkan saat boot;
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/usr/</filename>: aplikasi; direktori ini dibagi lagi menjadi <filename>bin</filename>, <filename>sbin</filename>, <filename>lib</filename> (menurut logika yang sama seperti dalam direktori root). Selain itu, <filename>/usr/share/</filename> berisi data arsitektur-independen. <filename>/usr/local/</filename> dimaksudkan untuk digunakan oleh administrator untuk menginstal aplikasi secara manual tanpa menimpa berkas-berkas yang ditangani oleh sistim pemaketan (<command>dpkg</command>).
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/var/</filename>: data variabel yang ditangani oleh daemon. Ini termasuk berkas log, antrian, spool, cache, dan seterusnya.
					</para>

				</listitem>
				 <listitem>
					<para>
						<filename>/proc/</filename> dan <filename>/sys/</filename> spesifik ke kernel Linux (dan bukan bagian dari FHS). Mereka dipakai oleh kernel untuk mengekspor data ke user space (lihat <xref linkend="sect.userspace-presentation" /> dan <xref linkend="sect.user-space" /> untuk penjelasan tentang konsep ini).
					</para>

				</listitem>

			</itemizedlist>

		</section>
		 <section>
			<title>Direktori Home Milik Pengguna</title>
			 <para>
				Isi dari direktori home pengguna tidak distandarkan, tetapi masih ada beberapa konvensi yang patut dicatat. Salah satunya adalah bahwa direktori home pengguna sering disebut dengan sebuah tilde ("~"). Yang sangat berguna untuk diketahui karena interpreter perintah secara otomatis mengganti sebuah tilde dengan direktori yang benar (biasanya <filename>/home/<replaceable>pengguna</replaceable>/</filename>).
			</para>
			 <para>
				Secara tradisional, berkas konfigurasi aplikasi sering tersimpan langsung di bawah direktori home pengguna, namun nama mereka biasanya mulai dengan sebuah titik (misalnya, klien surel <command>mutt</command> menyimpan konfigurasinya di <filename>~/.muttrc</filename>). Perhatikan bahwa nama berkas yang dimulai dengan sebuah titik tersembunyi secara default; dan <command>ls</command> hanya menampilkan daftar mereka ketika opsi <literal>-a</literal> digunakan, dan manajer berkas grafis harus diberitahu untuk menampilkan berkas yang tersembunyi.
			</para>
			 <para>
				Beberapa program juga memakai berkas-berkas konfigurasi diorganisasi dalam sebuah direktori (sebagai contoh, <filename>~/.ssh/</filename>). Beberapa aplikasi (seperti misalnya peramban web Iceweasel) juga memakai direktori mereka untuk menyimpan suatu singgahan dari data yang diunduh. Ini berarti bahwa direktori-direktori itu pada akhirnya memakai banyak ruang disk.
			</para>
			 <para>
				Berkas-berkas konfigurasi ini disimpan secara langsung dalam suatu direktori home pengguna, yang seringkali secara kolektif diacu sebagai <emphasis>dotfiles</emphasis>, telah lama menjamur sampai ke titik dimana dalam direktori-direktori ini bertebaran isi mereka. Untung, suatu upaya yang secara kolektif dinaungi oleh FreeDesktop.org telah menghasilkan “XDG Base Directory Specification”, Spesifikasi Direktori Dasar XDG, suatu konvensi yang bertujuan membersihkan berkas-berkas dan direktori ini. Spesifikasi ini menyatakan bahwa berkas-berkas konfigurasi mesti disimpan di bawah <filename>~/.config</filename>, berkas-berkas singgahan di bawah <filename>~/.cache</filename>, dan berkas-berkas data aplikasi di bawah <filename>~/.local</filename> (atau subdirektorinya). Konvensi ini secara perlahan mengumpulkan dukungan, dan beberapa aplikasi (khususnya yang grafis) telah mulai mengikutinya.
			</para>
			 <para>
				Desktop grafis biasanya menampilkan isi dari direktori <filename>~/Desktop/</filename> (atau apa pun terjemahan yang tepat untuk sistem yang tidak dikonfigurasi dalam bahasa Inggris) pada desktop (yaitu, apa terlihat pada layar setelah semua aplikasi tertutup atau diikonkan).
			</para>
			 <para>
				Akhirnya, sistem surel terkadang menyimpan surel yang masuk ke dalam direktori <filename>~/Mail/</filename>.
			</para>

		</section>

	</section>
	 <section id="sect.computer-layers">
		<title>Jeroan dari suatu Komputer: Lapisan Berbeda yang Terlibat</title>
		 <para>
			Komputer sering dianggap sebagai sesuatu yang agak abstrak, dan antarmuka yang terlihat secara eksternal jauh lebih sederhana daripada kompleksitas internalnya. Kerumitan seperti itu sebagian berasal dari banyaknya bagian yang terlibat. Namun, potongan-potongan ini dapat dilihat dalam lapisan-lapisan, dimana suatu lapisan hanya berinteraksi dengan yang berada tepat di atas atau di bawahnya.
		</para>
		 <para>
			Pengguna akhir dapat bertahan tanpa mengetahui detail ini… selama semuanya berfungsi. Ketika menghadapi masalah seperti, “Internet tidak berfungsi!”, hal pertama yang harus dilakukan adalah mengidentifikasi di mana lapisan masalahnya berasal. Apakah kartu jaringan (perangkat keras) berfungsi? Apakah itu dikenali oleh komputer? Apakah kernel Linux melihatnya? Apakah parameter jaringan dikonfigurasi dengan benar? Semua pertanyaan ini mengisolasi lapisan yang tepat dan fokus pada sumber potensial masalah.
		</para>
		 <section id="sect.hardware">
			<title>Lapisan Terdalam: Perangkat Keras</title>
			 <indexterm>
				<primary>IDE</primary>
			</indexterm>
			 <indexterm>
				<primary>SCSI</primary>
			</indexterm>
			 <indexterm>
				<primary>Serial ATA</primary>
			</indexterm>
			 <indexterm>
				<primary>Parallel ATA</primary>
			</indexterm>
			 <indexterm>
				<primary>ATA</primary>
			</indexterm>
			 <indexterm>
				<primary>IEEE 1394</primary>
			</indexterm>
			 <indexterm>
				<primary>Firewire</primary>
			</indexterm>
			 <indexterm>
				<primary>USB</primary>
			</indexterm>
			 <para>
				Mari kita mulai dengan pengingat dasar bahwa suatu komputer, pertama dan terpenting, adalah sekumpulan elemen perangkat keras. Biasanya ada suatu papan utama (dikenal sebagai <emphasis>motherboard</emphasis>), dengan satu (atau lebih) prosesor, RAM, pengendali perangkat, dan slot ekstensi untuk papan opsi (untuk pengendali perangkat lain). Yang paling penting di antara pengendali ini adalah IDE (Parallel ATA), SCSI, dan Serial ATA, untuk menghubungkan ke perangkat penyimpanan seperti hard disk. Pengontrol lainnya termasuk USB, yang dapat menghosting berbagai perangkat (mulai dari webcam hingga termometer, dari papan ketik hingga sistem otomasi rumah) dan IEEE 1394 (Firewire). Kontroler ini sering memungkinkan menghubungkan beberapa perangkat sehingga subsistem lengkap yang ditangani oleh pengontrol oleh karena itu biasanya dikenal sebagai ”bus”. Kartu-kartu opsi termasuk kartu grafis (di mana layar monitor akan dipasang), kartu suara, kartu antarmuka jaringan, dan sebagainya. Beberapa papan utama sudah dibangun sebelumnya dengan fitur-fitur ini, dan tidak perlu kartu opsi.
			</para>
			 <sidebar> <title><emphasis>DALAM PRAKTEK</emphasis> Memeriksa bahwa perangkat keras bekerja</title>
			 <para>
				Memeriksa bahwa suatu perangkat keras bekerja bisa rumit. Di sisi lain, membuktikan bahwa itu tidak bekerja kadang-kadang cukup sederhana.
			</para>
			 <para>
				Hard disk drive terbuat dari piringan berputar dan kepala magnetik yang bergerak. Ketika hard disk dinyalakan, motor piringan membuat desir yang khas. Ini juga membuang energi sebagai panas. Akibatnya, hard disk drive yang tetap dingin dan diam saat dinyalakan berarti rusak.
			</para>
			 <para>
				Kartu jaringan sering menyertakan LED yang menampilkan status link. Jika kabel dicolokkan dan mengarah ke hub atau switch jaringan yang berfungsi, setidaknya satu LED akan menyala. Jika tidak ada lampu LED yang menyala, kartu itu sendiri, perangkat jaringan, atau kabel di antara keduanya, rusak. Langkah selanjutnya adalah menguji setiap komponen secara individual.
			</para>
			 <para>
				Beberapa kartu opsi — terutama kartu video 3D — menyertakan perangkat pendinginan, seperti heat sink dan/atau kipas. Jika kipas tidak berputar meskipun kartu dinyalakan, penjelasan yang masuk akal adalah kartu terlalu panas. Ini juga berlaku untuk prosesor utama yang terletak di papan utama.
			</para>
			 </sidebar>
		</section>
		 <section id="sect.bios">
			<title>Awal: BIOS atau UEFI</title>
			 <indexterm>
				<primary>BIOS</primary>
			</indexterm>
			 <indexterm>
				<primary>UEFI</primary>
			</indexterm>
			 <indexterm>
				<primary>Master Boot Record (MBR)</primary>
			</indexterm>
			 <para>
				Perangkat keras, berdiri sendiri, tidak mampu melakukan tugas-tugas yang berguna tanpa perangkat lunak terkait yang menggerakkannya. Mengendalikan dan berinteraksi dengan perangkat keras adalah tujuan dari sistem operasi dan aplikasi. Ini, pada gilirannya, memerlukan perangkat keras yang fungsional untuk berjalan.
			</para>
			 <para>
				Simbiosis antara perangkat keras dan perangkat lunak ini tidak terjadi dengan sendirinya. Ketika komputer pertama kali dinyalakan, beberapa penyiapan awal diperlukan. Peran ini diambil oleh BIOS atau UEFI, sepenggal perangkat lunak yang ditanamkan ke dalam main board yang berjalan secara otomatis saat mulai dinyalakan. Tugas utamanya adalah mencari perangkat lunak yang bisa dilimpahi kendali. Biasanya, dalam kasus BIOS, ini termasuk mencari hard disk pertama yang memiliki sektor boot (juga dikenal sebagai <emphasis>master boot record</emphasis> atau <acronym>MBR</acronym>), memuat sektor boot tersebut, dan menjalankannya. Selanjutnya, BIOS biasanya tidak terlibat (sampat boot berikutnya). Dalam kasus UEFI, prosesnya melibatkan pemindaian disk untuk mencari partisi EFI terdedikasi yang memuat aplikasi-aplikasi EFI yang selanjutnya dapat dieksekusi.
			</para>
			 <sidebar> <title><emphasis>PERKAKAS</emphasis> Penyiapan, alat konfigurasi BIOS/UEFI</title>
			 <indexterm>
				<primary><emphasis>Penyiapan</emphasis></primary>
			</indexterm>
			 <para>
				BIOS/UEFI juga memiliki suatu perangkat lunak bernama Setup, dirancang untuk mengizinkan konfigurasi berbagai aspek komputer. Khususnya, itu mengizinkan memilih perangkat boot mana yang disukai (misalnya, disk floppy atau drive CD-ROM), menata jam sistem, dan seterusnya. Memulai Setup biasanya dengan menekan sebuah tombol segera setelah komputer mulai dihidupkan. Tombon ini biasanya <keycap>Del</keycap> atau <keycap>Esc</keycap>, terkadang <keycap>F2</keycap> atau <keycap>F10</keycap>. Seringkali, pilihan ditampilkan di layar saat boot.
			</para>
			 </sidebar> <para>
				Sektor boot (atau partisi EFI), pada gilirannya, memuat penggalan perangkat lunak lain, yang dinamai bootloader, yang berguna untuk mencari dan menjalankan suatu sistem operasi. Karena bootloader ini tidak ditanamkan dalam papan utama tapi dimuat dari disk, itu bisa lebih cerdas daripada BIOS, yang menjelaskan mengapa BIOS sendiri tidak memuat sistem operasi. Sebagai contoh, bootloader (biasanya GRUB pada sistem Linux) dapat menampilkan daftar sistem operasi yang tersedia dan menanyakan ke pengguna untuk memilih satu. Biasanya, suatu tenggat waktu dan pilihan baku disediakan. Kadang pengguna juga dapat memilih untuk menambah parameter yang dilewatkan ke kernel, dan seterusnya. Pada akhirnya, suatu kernel ditemukan, dimuat ke memori, dan dieksekusi.
			</para>
			 <sidebar> <title><emphasis>CATATAN</emphasis> UEFI, pengganti modern untuk BIOS</title>
			 <indexterm>
				<primary>UEFI</primary>
			</indexterm>
			 <indexterm>
				<primary>Secure Boot</primary>
			</indexterm>
			 <para>
				UEFI relatif baru dikembangkan. Kebanyakan komputer baru akan mendukung boot UEFI, tapi biasanya mereka juga mendukung boot BIOS juga untuk kompatibilitas ke belakang dengan sistem operasi yang tidak siap mengeksploitasi UEFI.
			</para>
			 <para>
				Sistem baru ini menyingkirkan beberapa keterbatasan boot BIOS: dengan penggunaan suatu partisi terdedikasi, bootloader tidak perlu lagi trik khusus agar bisa dimuat dalam <emphasis>master boot record</emphasis> yang mungil lalu mencari kernel yang akan di-boot. Bahkan lebih baik lagi, dengan suatu kernel Linux yang dibangun secara sesuai, UEFI dapat secara langsung mem-boot kernel tanpa bootloader perantara apapun. UEFI juga adalah landasar dasar yang dipakai untuk menghadirkan <emphasis>Secure Boot</emphasis>, suatu teknologi yang memastikan bahwa Anda hanya menjalankan perangkat lunak yang divalidasi oleh vendor sistem operasi Anda.
			</para>
			 </sidebar> <para>
				BIOS/UEFI juga bertanggung jawab mendeteksi dan mengisialisasi sejumlah perangkat. Tentu saja, ini termasuk perangkat IDE/SATA (biasanya drive CD/DVD-ROM dan hard disk), tapi juga perangkat-perangkat PCI. Perangkat-perangkat yang terdeteksi seringkali dimunculkan daftarnya dalam proses boot. Bila daftar ini berlalu terlalu cepat, gunakan tombol <keycap>Pause</keycap> untuk membekukannya cukup lama untuk dibaca. Perangkat-perangkat PCI terpasang yang tidak muncul adalah pertanda buruk. Terparahnya, perangkat bermasalah. Terbaiknya, itu sekedar tidak kompatibel dengan versi saat ini dari BIOS papan utama. Spesifikasi PCI bertumbuh, dan papan utama lama tidak dijamin menangani perangkat PCI yang lebih baru.
			</para>

		</section>
		 <section id="sect.kernel">
			<title>Kernel</title>
			 <para>
				BIOS/UEFI maupun bootloader masing-masing hanya berjalan selama beberapa detik; sekarang kita sampai ke bagian pertama dari perangkat lunak yang berjalan untuk waktu yang lama, kernel sistem operasi. Kernel ini mengambil peran seorang dirigen orkestra, dan menjamin koordinasi antara perangkat keras dan perangkat lunak. Peran ini melibatkan beberapa tugas termasuk: menggerakkan perangkat keras, mengelola proses, pengguna dan izin, sistem berkas, dan seterusnya. Kernel menyediakan dasar yang umum untuk semua program lain pada sistem.
			</para>

		</section>
		 <section id="sect.userspace-presentation">
			<title>Ruang Pengguna</title>
			 <para>
				Walaupun segala sesuatu yang terjadi di luar kernel dapat dikelompok bersama di bawah ”ruang pengguna”, kita masih dapat memisahkan menjadi lapisan-lapisan perangkat lunak. Namun, interaksi mereka lebih kompleks daripada sebelumnya, dan klasifikasi mungkin tidak sederhana. Aplikasi umumnya menggunakan pustaka, yang pada gilirannya melibatkan kernel, tetapi komunikasi dapat juga melibatkan program lain, atau bahkan banyak pustaka memanggil satu sama lain.
			</para>

		</section>

	</section>
	 <section id="sect.kernel-role-and-tasks">
		<title>Beberapa Tugas yang Ditangani oleh Kernel</title>
		 <section id="sect.hardware-drivers">
			<title>Menggerakkan Perangkat Keras</title>
			 <para>
				Kernel ini, pertama dan terutama, bertugas mengendalikan bagian-bagian perangkat keras, mendeteksi mereka, menyalakannya ketika komputer dihidupkan, dan seterusnya. Ini juga membuat mereka tersedia untuk perangkat lunak tingkat yang lebih tinggi dengan antarmuka pemrograman yang disederhanakan, sehingga aplikasi dapat memanfaatkan perangkat tanpa harus khawatir tentang detail seperti slot ekstensi mana tempat dipasangnya kartu opsi. Antarmuka pemrograman juga menyediakan lapisan abstraksi; ini memungkinkan perangkat lunak video-conferencing, misalnya, untuk menggunakan webcam tanpa tergantung kepada merek dan modelnya. Perangkat lunak ini hanya dapat menggunakan antarmuka <emphasis>Video for Linux</emphasis> (V4L), dan kernel menerjemahkan panggilan fungsi antarmuka ini ke perintah perangkat keras sebenarnya yang dibutuhkan oleh webcam tertentu yang digunakan.
			</para>
			 <para>
				<indexterm><primary><command>lspci</command></primary></indexterm> <indexterm><primary><command>lsusb</command></primary></indexterm> <indexterm><primary><command>lsdev</command></primary></indexterm> <indexterm><primary><command>lspcmcia</command></primary></indexterm> Kernel mengekspor banyak rincian tentang perangkat keras yang terdeteksi melalui sistem berkas virtual <filename>/proc/</filename> dan <filename>/sys/</filename>. Bebearpa perkakas meringkas rincian itu. Di antara mereka, <command>lspci</command> (dalam paket <emphasis role="pkg">pciutils</emphasis>) menampilkan daftar perangkat PCI, <command>lsusb</command> (dalam paket <emphasis role="pkg">usbutils</emphasis>) menampilkan daftar perangkat USB, dan <command>lspcmcia</command> (dalam paket <emphasis role="pkg">pcmciautils</emphasis>) menampilkan daftar kartu PCMCIA. Peralatan ini sangat berguna untuk mengidentifikasi model eksak dari suatu perangkat. Identifikasi ini juga mengizinkan pencarian yang lebih presisi pada web, yang pada gilirannya, mengarah ke lebih banyak dokumen yang relevan.
			</para>
			 <example>
				<title>Contoh dari informasi yang disediakan oleh <command>lspci</command> dan <command>lsusb</command></title>
				 
<screen>
<computeroutput>$ </computeroutput><userinput>lspci</userinput>
<computeroutput>[...]
00:02.1 Display controller: Intel Corporation Mobile 915GM/GMS/910GML Express Graphics Controller (rev 03)
00:1c.0 PCI bridge: Intel Corporation 82801FB/FBM/FR/FW/FRW (ICH6 Family) PCI Express Port 1 (rev 03)
00:1d.0 USB Controller: Intel Corporation 82801FB/FBM/FR/FW/FRW (ICH6 Family) USB UHCI #1 (rev 03)
[...]
01:00.0 Ethernet controller: Broadcom Corporation NetXtreme BCM5751 Gigabit Ethernet PCI Express (rev 01)
02:03.0 Network controller: Intel Corporation PRO/Wireless 2200BG Network Connection (rev 05)
$ </computeroutput><userinput>lsusb</userinput>
<computeroutput>Bus 005 Device 004: ID 413c:a005 Dell Computer Corp.
Bus 005 Device 008: ID 413c:9001 Dell Computer Corp.
Bus 005 Device 007: ID 045e:00dd Microsoft Corp.
Bus 005 Device 006: ID 046d:c03d Logitech, Inc.
[...]
Bus 002 Device 004: ID 413c:8103 Dell Computer Corp. Wireless 350 Bluetooth
</computeroutput></screen>

			</example>
			 <para>
				Program-program ini memiliki pilihan <literal>-v</literal>, yang mencantumkan informasi lebih rinci (tapi biasanya tidak perlu). Akhirnya, perintah <command>lsdev</command> (dalam paket <emphasis role="pkg">procinfo</emphasis>) menampilkan daftar sumber daya komunikasi yang digunakan oleh perangkat.
			</para>
			 <para>
				Aplikasi sering mengakses perangkat melalui berkas khusus yang dibuat di dalam <filename>/dev/</filename> (lihat bilah sisi <xref linkend="sidebar.special-files" />). Ini adalah berkas-berkas khusus yang mewakili disk drive (sebagai contoh, <filename>/dev/hda</filename> dan <filename>/dev/sdc</filename>), partisi (<filename>/dev/hda1</filename> atau <filename>/dev/sdc3</filename>), tetikus (<filename>/dev/input/mouse0</filename>), papan ketik (<filename>/dev/input/event0</filename>), kartu suara (<filename>/dev/snd/*</filename>), port serial (<filename>/dev/ttyS*</filename>), dan seterusnya.
			</para>

		</section>
		 <section id="sect.filesystems">
			<title>Sistem Berkas</title>
			 <indexterm>
				<primary>sistem berkas</primary>
			</indexterm>
			 <indexterm>
				<primary>sistem, sistem berkas</primary>
			</indexterm>
			 <para>
				Sistem berkas adalah salah satu aspek yang paling menonjol dari kernel. Sistem Unix menggabungkan semua penyimpanan berkas ke dalam hirarki tunggal, yang memungkinkan pengguna (dan aplikasi) untuk mengakses data hanya dengan mengetahui lokasinya di dalam hierarki itu.
			</para>
			 <para>
				Titik awalk dari pohon hirarkis ini disebut root, <filename>/</filename>. Direktori ini bisa memuat subdirektori-subdirektori yang dinamai. Sebagai contoh, subdirektori <literal>home</literal> dari <filename>/</filename> bernama <filename>/home/</filename>. Subdirektori ini, pada gilirannya, memuat subdirektori lain, dan seterusnya. Setiap direktori juga bisa mengandung berkas, dimana data sebenarnya akan disimpan. Maka, nama <filename>/home/rmas/Desktop/hello.txt</filename> mengacu ke sebuah berkas bernama <literal>hello.txt</literal> yang disimpan di dalam subdirektori <literal>Desktop</literal> dari subdirektori <literal>rmas</literal> subdirektori dari direktori <literal>home</literal> yang ada dalam root. Kernel menerjemahkan antara sistem penamaan ini dan penyimpanan fisik yang sebenarnya pada suatu disk.
			</para>
			 <para>
				Tidak seperti sistem lain, hanya ada satu hirarki seperti itu, dan itu bisa mengintegrasikan data dari beberapa disk. Salah satu dari disk ini dipakai sebagai root, dan yang lainnya ”dikait” pada direktori dalam hirarki (perintah Unix-nya bernama <command>mount</command>); disk-disk lain ini maka kemudian teredia di bawah ”titik-titik kait” ini. Ini mengizinkan menyimpan direktori rumah pengguna (secara tradisional disimpan di bawah <filename>/home/</filename> pada disk ke dua, yang akan memuat direktori <literal>rhertzog</literal> dan <literal>rmas</literal>. Sekali disk dikait pada <filename>/home/</filename>, direktori-direktori ini menjadi dapat diakses pada lokasi biasa, dan path seperti <filename>/home/rmas/Desktop/hello.txt</filename> tetap berjalan.
			</para>
			 <indexterm>
				<primary><command>mkfs</command></primary>
			</indexterm>
			 <para>
				Ada banyak format sistem berkas, terkait dengan banyaknya cara bagaimana secara fisik menyimpan data pada disk. Yang paling dikenal adalah <emphasis>ext2</emphasis>, <emphasis>ext3</emphasis>, dan <emphasis>ext4</emphasis>, tapi yang lain juga ada. Sebagai contoh, <emphasis>vfat</emphasis> adalah sistem yang secara historis dipakai oleh sistem operasi Windows dan DOS, yang mengizinkan memakai hard disk di bawah Debian maupun di bawah Windows. Bagaimanapun, suatu sistem berkas mesti disiapkan pada suatu disk sebelum itu dapat dikait dan operasi ini dikenal sebagai ”memformat”. Perintah seperti <command>mkfs.ext3</command> (dimana <command>mkfs</command> merupakan kependekan dari <emphasis>MaKe FileSystem (buat sistem berkas)</emphasis> menangani pemformatan. Perintah-perintah ini memerlukan, sebagai suatu parameter, sebuah berkas peranti yang mewakili partisi yang akan diformat (sebagai contoh, <filename>/dev/sda1</filename>). Operasi ini merusak dan mesti hanya dijalankan sekali, kecuali bila seseorang dengan sengaja menghendaki membersihkan suatu sistem berkas dan memulai dari awal.
			</para>
			 <para>
				Ada juga sistem berkas jaringan, seperti <acronym>NFS</acronym>, dimana data tidak tersimpan pada disk lokal. Sebaliknya, data ditransmisikan melalui jaringan ke server yang menyimpan dan mengambil mereka saat diminta. Abstraksi sistem berkas melindungi pengguna dari keharusan untuk perawatan: berkas tetap dapat diakses dalam cara hirarkis mereka yang biasa.
			</para>

		</section>
		 <section id="sect.shared-functions">
			<title>Fungsi Bersama</title>
			 <para>
				Karena sejumlah fungsi yang sama dipakai oleh semua perangkat lunak, layak untuk memusatkan mereka di dalam kernel. Sebagai contoh, penanganan sistem berkas bersama mengizinkan sebarang aplikasi sekedar membuka suatu berkas berdasarkan nama, tanpa perlu khawatir di mana berkas disimpan secara fisik. Berkas dapat disimpan di dalam beberapa potongan yang berbeda pada suatu hard disk, atau dipecah ke beberapa hard disk, atau bahkan disimpan pada suatu server berkas jarak jauh. Fungsi-fungsi komunikasi bersama dipakai oleh aplikasi-aplikasi untuk bertukar data secara independen dari cara data dipindahkan. Sebagai contoh, transpor bisa melalui sebarang kombinasi dari jaringa lokal atau nirkabel, atau melalui jalur telepon.
			</para>

		</section>
		 <section id="sect.process-management">
			<title>Mengelola Proses</title>
			 <indexterm>
				<primary><emphasis>pid</emphasis></primary>
			</indexterm>
			 <para>
				Suatu proses adalah sebuah instansi program yang sedang berjalan. Ini membutuhkan memori untuk menyimpan program itu sendiri dan data operasinya. Kernel bertugas menciptakan dan melacak mereka. Ketika sebuah program berjalan, kernel terlebih dahulu menyisihkan sebagian memori, kemudian memuat kode yang dapat dieksekusi dari sistem berkas ke dalamnya, dan kemudian memulai menjalankan kode. Kernel menyimpan informasi tentang proses ini, yang paling terlihat adalah nomor identifikasi yang dikenal sebagai <emphasis>pid</emphasis> (<emphasis>process identifier</emphasis>).
			</para>
			 <para>
				Kernel Unix-like (termasuk Linux), seperti kebanyakan sistem operasi modern lainnya, mampu ”multi-tasking”. Dengan kata lain, mereka memungkinkan menjalankan banyak proses ”pada saat yang sama”. Sebenarnya hanya ada satu proses yang berjalan pada satu waktu, tetapi kernel memotong waktu menjadi irisan-irisan kecil dan menjalankan setiap proses secara bergantian. Karena irisan waktu ini sangat pendek (dalam rentang milidetik), mereka menciptakan ilusi proses yang berjalan secara paralel, meskipun sebenarnya hanya aktif selama beberapa interval waktu dan menganggur di sisa waktu. Tugas kernel adalah menyesuaikan mekanisme penjadwalannya untuk menjaga ilusi itu, sambil memaksimalkan kinerja sistem global. Jika irisan waktu terlalu panjang, aplikasi mungkin tidak tampak responsif seperti yang diinginkan. Terlalu pendek, dan sistem kehilangan waktu karena beralih tugas terlalu sering. Keputusan-keputusan ini dapat disesuaikan dengan prioritas proses. Proses prioritas tinggi akan berjalan lebih lama dan dengan irisan waktu yang lebih sering daripada proses prioritas rendah.
			</para>
			 <sidebar> <title><emphasis>CATATAN</emphasis> Sistem multi-prosesor (dan varian)</title>
			 <para>
				Keterbatasan yang dijelaskan di atas dimana hanya satu proses yang dapat dijalankan pada satu waktu, tidak selalu berlaku. Pembatasan sebenarnya adalah hanya ada satu proses yang berjalan <emphasis>per core prosesor</emphasis> pada satu waktu. Sistem multi-prosesor, multi-core atau ”hyper-threaded” memungkinkan beberapa proses berjalan secara paralel. Sistem pengiris waktu yang sama masih digunakan, untuk menangani kasus-kasus dimana ada lebih banyak proses yang aktif daripada core prosesor yang tersedia. Ini tidak luar biasa: sistem dasar, bahkan yang kebanyakan menganggur, hampir selalu memiliki puluhan proses yang berjalan.
			</para>
			 </sidebar> <para>
				Tentu saja, kernel memungkinkan menjalankan beberapa instansi independen dari program yang sama. Tetapi masing-masing hanya dapat mengakses irisan waktu dan memorinya sendiri. Data mereka dengan demikian tetap independen.
			</para>

		</section>
		 <section id="sect.permissions">
			<title>Manajemen Hak</title>
			 <para>
				Sistem mirip Unix juga multi-pengguna. Mereka menyediakan sistem manajemen hak yang mendukung pengguna dan kelompok terpisah; itu juga memungkinkan kontrol atas tindakan berdasarkan izin. Kernel mengelola data untuk setiap proses, memungkinkannya untuk mengontrol perizinan. Seringkali, suatu proses diidentifikasi oleh pengguna yang memulainya. Proses itu hanya diizinkan untuk mengambil tindakan yang tersedia bagi pemiliknya. Misalnya, mencoba membuka berkas memerlukan kernel untuk memeriksa identitas proses terhadap izin akses (untuk detail lebih lanjut tentang contoh khusus ini, lihat <xref linkend="sect.rights-management" />).
			</para>

		</section>

	</section>
	 <section id="sect.user-space">
		<title>Ruang Pengguna</title>
		 <indexterm>
			<primary>ruang pengguna</primary>
		</indexterm>
		 <indexterm>
			<primary>ruang kernel</primary>
		</indexterm>
		 <para>
			”Ruang pengguna” mengacu pada lingkungan runtime proses normal (sebagai lawan dari kernel). Ini tidak selalu berarti proses-proses ini benar-benar dimulai oleh pengguna karena sistem standar biasanya memiliki beberapa proses ”daemon” (atau latar belakang) yang berjalan sebelum pengguna bahkan membuka sesi. Proses daemon juga dianggap sebagai proses ruang pengguna.
		</para>
		 <section id="sect.process-basics">
			<title>Proses</title>
			 <indexterm>
				<primary><command>init</command></primary>
			</indexterm>
			 <para>
				Ketika kernel berhasil melewati tahap inisialisasi, ia memulai proses pertama, <command>init</command>. Proses #1 sendiri sangat jarang berguna sendirian, dan sistem mirip Unix berjalan dengan banyak proses tambahan.
			</para>
			 <indexterm>
				<primary><emphasis>fork</emphasis></primary>
			</indexterm>
			 <para>
				Pertama-tama, proses dapat mengklon dirinya sendiri (dikenal sebagai sebuah <emphasis>fork</emphasis>). Kernel mengalokasikan ruang memori proses yang baru (tapi identik), dan proses lain yang menggunakannya. Saat ini, satu-satunya perbedaan antara dua proses ini adalah <emphasis>pid</emphasis> mereka. Proses baru biasanya disebut proses anak, dan proses asli yang <emphasis>pid</emphasis>-nya tidak berubah, disebut proses induk.
			</para>
			 <para>
				Kadang-kadang, proses anak terus menjalani hidupnya sendiri secara mandiri dari induknya, dengan data sendiri yang disalin dari proses induk. Dalam banyak kasus, proses anak ini menjalankan program lain. Dengan beberapa pengecualian, memorinya hanya digantikan oleh program baru, dan eksekusi program baru ini dimulai. Ini adalah mekanisme yang digunakan oleh proses init (dengan proses nomor 1) untuk memulai layanan tambahan dan menjalankan seluruh urutan startup. Pada titik tertentu, satu proses di antara anak-anak <command>init</command> memulai antarmuka grafis bagi pengguna untuk masuk (urutan kejadian yang sebenarnya dijelaskan lebih detail di <xref linkend="sect.system-boot" />).
			</para>
			 <para>
				Ketika sebuah proses menyelesaikan tugas yang dimulai, itu berakhir. Kernel kemudian memulihkan memori yang ditugaskan untuk proses ini, dan berhenti memberikannya irisan waktu berjalan. Proses induk diberitahu tentang proses anaknya yang dihentikan, yang memungkinkan proses untuk menunggu penyelesaian tugas yang didelegasikan kepada proses anak. Perilaku ini terlihat jelas dalam penerjemah baris perintah (dikenal sebagai <emphasis>shells</emphasis>). Ketika sebuah perintah diketik ke dalam shell, prompt hanya akan kembali ketika eksekusi perintah selesai. Kebanyakan shell memungkinkan untuk menjalankan perintah di latar belakang, itu sekedar menambahkan <userinput>&amp;</userinput> ke ujung perintah. Prompt ditampilkan lagi segera, yang dapat menyebabkan masalah jika perintah perlu menampilkan data sendiri.
			</para>

		</section>
		 <section id="sect.daemons">
			<title>Daemon</title>
			 <indexterm>
				<primary>daemon</primary>
			</indexterm>
			 <indexterm>
				<primary>daemon</primary>
			</indexterm>
			 <para>
				A ”daemon” adalah proses yang dimulai secara otomatis oleh urutan boot. Itu terus berjalan (di latar belakang) untuk melakukan tugas-tugas pemeliharaan atau memberikan layanan ke proses lain. ”Tugas latar belakang” ini sebenarnya sebarang, dan tidak cocok dengan apa pun dari sudut pandang sistem. Mereka hanyalah proses, sangat mirip dengan proses lain, yang berjalan pada gilirannya ketika irisan waktu mereka datang. Perbedaannya hanya dalam bahasa manusia: sebuah proses yang berjalan tanpa interaksi dengan pengguna (khususnya, tanpa antarmuka grafis) dikatakan berjalan ”di latar belakang” atau ”sebagai daemon”.
			</para>
			 <sidebar> <title><emphasis>KOSA KATA</emphasis> Daemon, demon, istilah yang merendahkan?</title>
			 <para>
				Meskipun istilah <emphasis>daemon</emphasis> memiliki etimologi Yunani yang sama dengan <emphasis>demon</emphasis> (setan), yang pertama tidak menyiratkan setan jahat, sebaliknya, harus dipahami sebagai semacam roh penolong. Perbedaan ini cukup halus dalam bahasa Inggris; hal ini bahkan lebih buruk dalam bahasa lain yang mana kata yang sama digunakan untuk kedua makna.
			</para>
			 </sidebar> <para>
				Beberapa daemon tersebut dijelaskan secara rinci dalam <xref linkend="unix-services" />.
			</para>

		</section>
		 <section id="sect.ipc">
			<title>Inter-Process Communications</title>
			 <indexterm>
				<primary>IPC</primary>
			</indexterm>
			 <indexterm>
				<primary>Inter-Process Communications</primary>
			</indexterm>
			 <para>
				Suatu proses yang terisolasi, apakah itu daemon atau aplikasi interaktif, jarang berguna saat berdiri sendiri, itulah sebabnya ada beberapa metode yang memungkinkan proses terpisah untuk saling berkomunikasi, baik untuk bertukar data atau mengendalikan satu sama lain. Istilah umum yang mengacu pada ini adalah <emphasis>inter-process communication</emphasis>, atau disingkat IPC.
			</para>
			 <para>
				Sistem IPC yang paling sederhana adalah menggunakan berkas. Proses yang ingin mengirim data menulis ke berkas (dengan nama diketahui sebelumnya), sementara renerima hanya harus membuka berkas dan mebaca isinya.
			</para>
			 <indexterm>
				<primary><emphasis>pipe</emphasis></primary>
			</indexterm>
			 <para>
				Dalam kasus dimana Anda tidak ingin menyimpan data pada disk, Anda dapat menggunakan <emphasis>pipe</emphasis>, yang hanya merupakan objek dengan dua ujung; byte yang ditulis dalam satu ujung dapat dibaca di ujung yang lain. Jika ujungnya dikendalikan oleh proses terpisah, ini mengarah ke saluran komunikasi antar-proses yang sederhana dan nyaman. Pipa dapat diklasifikasikan menjadi dua kategori: pipa bernama, dan pipa anonim. Sebuah pipa bernama diwakili oleh sebuah entri pada sistem berkas (meskipun data yang ditransmisikan tidak disimpan di sana), sehingga kedua proses dapat membukanya secara independen jika lokasi dari pipa bernama diketahui sebelumnya. Dalam kasus dimana proses-proses yang berkomunikasi saling terkait (misalnya, induk dan proses anaknya), proses induk juga dapat membuat pipa anonim sebelum fork, dan anak mewarisi itu. Kedua proses kemudian akan dapat bertukar data melalui pipa tanpa perlu sistem berkas.
			</para>
			 <sidebar> <title><emphasis>DALAM PRAKTEK</emphasis> Contoh konkret</title>
			 <para>
				Mari kita menjelaskan secara rinci apa yang terjadi ketika suatu perintah kompleks (suatu <emphasis>pipa</emphasis>) dijalankan dari shell. Kita berasumsi kita memiliki proses <command>bash</command> (shell pengguna standar pada Debian), dengan <emphasis>pid</emphasis> 4374; ke shell ini, kita ketik perintah: <command>ls | sort</command> .
			</para>
			 <para>
				Shell pertama menafsirkan perintah yang diketikkan. Dalam kasus kita, ia mengerti ada dua program (<command>ls</command> dan <command>sort</command>), dengan data yang mengalir dari satu ke yang lain (dilambangkan oleh karakter <userinput>|</userinput>, dikenal sebagai <emphasis>pipa</emphasis>). <command>bash</command> pertama menciptakan pipa tanpa nama (yang awalnya ada hanya dalam proses <command>bash</command> itu sendiri).
			</para>
			 <para>
				Kemudian shell meng-klon dirinya sendiri; ini mengantar ke sebuah proses <command>bash</command> baru, dengan <emphasis>pid</emphasis> #4521 (<emphasis>pid</emphasis> adalah bilangan abstrak, dan umumnya tidak punya arti khusus). Proses #4521 mewarisi pipa, yang berarti itu dapat menulis ke sisi “masukan”; <command>bash</command> mengalihkan stream keluaran standarnya ke masukan pipa ini. Kemudian itu menjalankan (dan menggantikan dirinya sendiri dengan) program <command>ls</command>, yang menampilkan daftar isi dari direktori saat ini. Karena <command>ls</command> menulis ke keluaran standarnya, dan keluaran ini sebelumnya telah dialihkan, hasilnya secara efektif dikirim ke dalam pipa.
			</para>
			 <para>
				Sebuah operasi serupa yang terjadi untuk perintah ke dua: <command>bash</command> meng-klon dirinya sendiri lagi, mengarah ke proses <command>bash</command> baru dengan pid #4522. Karena itu juga proses anak dari #4374, itu juga mewarisi pipa; <command>bash</command> kemudian menghubungkan masukan standar ke keluaran pipa, lalu mengeksekusi (dan menggantikan dirinya sendiri dengan) perintah <command>sort</command>, yang mengurutkan masukan dan menampilkan hasilnya.
			</para>
			 <para>
				Semua potongan teka-teki sekarang siap: <command>ls</command> membaca direktori saat ini dan menulis daftar berkas ke dalam pipa; <command>sort</command> membaca daftar ini, mengurutkan berdasarkan abjad, dan menampilkan hasilnya. Proses nomor #4521 dan #4522 kemudian berakhir, dan #4374 (yang menunggu mereka selama operasi), melanjutkan kendali dan menampilkan sapaan yang memungkinkan pengguna untuk mengetik perintah baru.
			</para>
			 </sidebar> <para>
				Tidak semua komunikasi antar-proses digunakan untuk memindahkan data. Dalam banyak situasi, satu-satunya informasi yang perlu ditransmisikan adalah pesan kontrol seperti “jeda eksekusi” atau “melanjutkan eksekusi”. Unix (dan Linux) menyediakan mekanisme yang dikenal sebagai <emphasis>sinyal</emphasis>, dimana suatu proses dapat sekedar mengirim sinyal tertentu (dipilih dari daftar sinyal yang telah ditentukan) ke proses lain. Satu-satunya persyaratan adalah mengetahui <emphasis>pid</emphasis> dari target.
			</para>
			 <para>
				Untuk komunikasi yang lebih kompleks, ada juga mekanisme yang memungkinkan proses untuk membuka akses, atau berbagi, bagian dari memori yang dialokasikan untuk proses lain. Memori yang sekarang dipakai bersama di antara mereka dapat digunakan untuk memindahkan data antar proses.
			</para>
			 <para>
				Akhirnya, koneksi jaringan juga dapat membantu proses-proses berkomunikasi; proses-proses ini bahkan dapat berjalan di komputer yang berbeda, mungkin terpisah ribuan kilometer.
			</para>
			 <para>
				Sudah biasa bagi sistem mirip Unix untuk, sedikit banyak, menggunakan semua mekanisme ini.
			</para>

		</section>
		 <section id="sect.libraries">
			<title>Pustaka</title>
			 <indexterm>
				<primary>perpustakaan (fungsi)</primary>
			</indexterm>
			 <para>
				Pustaka fungsi memainkan peran penting dalam sistem operasi mirip Unix. Mereka bukan program yang utuh, karena mereka tidak dapat dieksekusi sendiri, tetapi merupakan koleksi fragmen kode yang dapat digunakan oleh program standar. Di antara pustaka umum, Anda dapat menemukan:
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						pustaka C standar (<emphasis>glibc</emphasis>), yang berisi fungsi-fungsi dasar seperti untuk membuka berkas atau koneksi jaringan, dan yang lain memfasilitasi interaksi dengan kernel;
					</para>

				</listitem>
				 <listitem>
					<para>
						toolkit grafis, seperti Gtk+ dan Qt, memungkinkan banyak program untuk menggunakan kembali objek grafis yang mereka sediakan;
					</para>

				</listitem>
				 <listitem>
					<para>
						pustaka <emphasis>libpng</emphasis>, yang memungkinkan memuat, menafsirkan, dan menyimpan gambar dalam format PNG.
					</para>

				</listitem>

			</itemizedlist>
			 <para>
				Berkat pustaka tersebut, aplikasi dapat menggunakan kembali kode yang ada. Pengembangan aplikasi disederhanakan karena banyak aplikasi dapat menggunakan kembali fungsi yang sama. Dengan pustaka yang sering dikembangkan oleh orang yang berbeda, perkembangan global dari sistem lebih dekat dengan filosofi sejarah Unix.
			</para>
			 <sidebar> <title><emphasis>BUDAYA</emphasis> Cara Unix: satu hal pada suatu waktu</title>
			 <para>
				Satu dari konsep fundamental yang mendasari keluarga sistem operasi Unix adalah bahwa setiap alat mesti hanya melakukan satu hal, dan melakukannya dengan baik; aplikasi kemudian dapat memakai lagi alat-alat ini untuk membangun lebih banyak logika tingkat lanjut di atasnya. Filosofi ini dapat dilihat dalam banyak inkarnasi. Skrip shell mungkin adalah contoh terbaik: mereka merangkai urutan yang kompleks dari alat-alat yang sangat sederhana (seperti misalnya <command>grep</command>, <command>wc</command>, <command>sort</command>, <command>uniq</command>, dan seterusnya). Implementasi lain dari filosofi ini dapat dilihat dalam pustaka kode: pustaka <emphasis>libpng</emphasis> memungkinkan membaca dan menulis citra-citra PNG, dengan opsi-opsi lain dan dalam cara-cara yang berbeda, tapi hanya melakukan itu; tidak ada pertanyaan untuk memasukkan fungsi-fungsi yang menampilkan atau menyunting citra.
			</para>
			 </sidebar> <para>
				Selain itu, pustaka ini sering dirujuk sebagai “pustaka bersama”, karena kernel bisa hanya memuat mereka ke dalam memori sekali, bahkan jika beberapa proses menggunakan pustaka yang sama pada waktu yang sama. Hal ini memungkinkan penghematan memori, bila dibandingkan dengan situasi (hipotetis) sebaliknya dimana kode untuk pustaka akan dimuat sebanyak proses yang menggunakannya.
			</para>

		</section>

	</section>
</appendix>

