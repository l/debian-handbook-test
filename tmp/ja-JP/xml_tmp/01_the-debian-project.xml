<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="the-debian-project">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-the-debian-project.png" scalefit="1" />
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>目的</keyword>
      <keyword>方針</keyword>
      <keyword>運営</keyword>
      <keyword>ボランティア</keyword>
    </keywordset>
  </chapterinfo>
  <title>Debian プロジェクト</title>
  <highlights>
    <para>Debian の技術について深く掘り下げる前に、Debian プロジェクトの本質、目的、方針、運営の仕方について少し見てみましょう。</para>
  </highlights>
  <section id="sect.what-is-debian">
    <title>Debian とは?</title>
    <indexterm><primary sortas="ダンタイ">団体</primary></indexterm>

    <sidebar>
      <title><emphasis>CULTURE</emphasis> Debian という名前の由来</title>

      <para>これを説明するにはこの補注だけで十分です。すなわち、Debian は何かの頭文字を並べたものではありません。Debian という名前は、実際には 2 人のファーストネームを短縮したものです。具体的には Ian Murdock と、当時彼のガールフレンドだった Debra のファーストネームを短縮したものです。Debra と Ian で Debian というわけです。</para>
    </sidebar>

    <para>Debian は GNU/Linux ディストリビューションです。ディストリビューションとは何かについては<xref linkend="sect.role-of-distributions" />で詳しく議論していますが、ここでは以下の通り述べるだけに留めます。GNU/Linux ディストリビューションとは完全なオペレーティングシステムで、インストールと管理に必要なソフトウェアとシステムを備えており、Linux カーネルと (特に GNU プロジェクトからの) フリーソフトウェアを基盤にしています。</para>

    <para>Ian Murdock が FSF の指導の下で Debian を作った 1993 年、彼は <emphasis>Debian マニフェスト</emphasis>の中で、彼の求める自由なオペレーティングシステムは 2 つの重要な要件を満たさなければならない、という明確な目標を設定しました。1 つ目は品質です。Debian は Linux カーネルからの信頼に値するべく、非常に注意深く開発されるでしょう。2 つ目は非商用ディストリビューションであるということです。Debian は主要な商用ディストリビューションと比較しても、十分に信頼できるものになるでしょう。彼の考えによれば、この 2 つの野望は Linux や GNU プロジェクトとよく似た Debian 開発工程に従うことでのみ達成されます。つまり、ピアレビューにより Debian プロジェクトは継続して改善され続けるでしょう。</para>

    <sidebar>
      <title><emphasis>CULTURE</emphasis> GNU という FSF のプロジェクト</title>
      <indexterm><primary>GNU</primary></indexterm>
      <indexterm><primary>GNU</primary><secondary>is Not Unix</secondary></indexterm>

      <para>GNU プロジェクトとは、偶像化されているリーダー Dr. Richard M. Stallman が創設したフリーソフトウェア財団 (FSF) が開発あるいは支援するさまざまなフリーソフトウェアを指します。GNU は「GNU is Not Unix」を意味する再帰的頭字語です。</para>
    </sidebar>

    <sidebar>
      <title><emphasis>CULTURE</emphasis> Richard Stallman</title>
      <indexterm><primary>Stallman, Richard</primary></indexterm>
      <indexterm><primary>RMS</primary></indexterm>

      <para><acronym>FSF</acronym> の創設者であり GPL ライセンスの著者でもある Richard M. Stallman (イニシャルで RMS と呼ばれることが多い) は、フリーソフトウェア運動のカリスマ的なリーダーです。彼自身は強硬的な姿勢のおかげで全員から高い評価を得ているわけではありませんが、彼が行ったフリーソフトウェアに対する技術的でない貢献 (特に法律的、哲学的な水準において) は全員から尊敬を集めています。</para>
    </sidebar>
    <section>
      <title>マルチプラットフォームオペレーティングシステム</title>
      <indexterm><primary>メタディストリビューション</primary></indexterm>

      <sidebar>
        <title><emphasis>COMMUNITY</emphasis> Ian Murdock の旅</title>
        <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Ian Murdock</secondary></indexterm>
        <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Ian Murdock</secondary></indexterm>
        <indexterm><primary>Progeny</primary></indexterm>

	<para>Debian プロジェクトの創設者である Ian Murdock は 1993 年から 1996 年までの間、最初の Debian プロジェクトリーダーを務めました。Ian は Debian プロジェクトリーダーの職を Bruce Perens に譲った後、公人としての役割を減らし、フリーソフトウェアコミュニティの裏方の仕事に戻り、Debian の派生ディストリビューションをマーケティングする目的で Progeny を作りました。残念なことにこのベンチャー事業は商業的に失敗し、事業の展開は頓挫しました。Progeny は単なるサービスプロバイダとして辛うじて数年間運営されましたが、最終的に 2007 年 4 月に破産しました。Progeny が始めたプロジェクトのうち、まだ残っているものは、自動的にハードウェアを検出するツールである <emphasis>discover</emphasis> だけです。</para>
        <para>Ian Murdock は 2015 年 12 月 28 日にサンフランシスコで亡くなりました。Ian は死の直前に気がかりなツイートを連続投稿しており、その中で警察から暴行を受けたとしていました。そして 2016 年 1 月には彼の死因が自殺と判定されたことが発表されました。</para>
      </sidebar>

      
      <para>草創期の理念に忠実であり続けている Debian は大きな成功を収め、今日では驚異的な規模に達しています。提供されている 12 種類のアーキテクチャは、10 種類のハードウェアアーキテクチャと 2 種類のカーネルにおよびます (カーネルについては Linux と FreeBSD ですが、FreeBSD ベースの移植版は公式サポートアーキテクチャではありません)。さらに、Debian には 25,000 種類を超えるソースパッケージがあるため、Debian ですぐに利用できるソフトウェアは、家庭であれ企業であれ、どのような要求でもほぼ満たすことができます。</para>

      <para>ディストリビューション全体の規模が大きいのが不便なこともあります: 標準的な PC 向けの完全版をインストールするために、14 枚もの DVD-ROM を配布するのは本当に無意味なことです…。このため、Debian は次第に「メタディストリビューション」として捉えられるようになってきています。メタディストリビューションとは、特定の利用者向けにさらに限定的な用途に適したディストリビューション (たとえば、従来のデスクトップ用途向けの Debian-Desktop、学術環境で利用される教育および教育学的利用向けの Debian-Edu、医学的応用向けの Debian-Med、幼児向けの Debian-Junior など) を作るための基盤になるディストリビューションを意味しています。サブプロジェクトについての節により完全なリストが載っていますので、<xref linkend="sect.sub-projects" />を参照してください。</para>

      <para>Debian を構成する要素は明確に定義された枠組みに従って整理されているため、さまざまな「サブディストリビューション」間で問題なく互換性が保証されています。サブディストリビューションは、Debian での新バージョンのリリース要綱に従います。サブディストリビューションは Debian と同じ基盤の上に成り立っているため、Debian リポジトリから入手できるアプリケーションを使って簡単に拡張し、洗練し、特徴を出すことが可能です。</para>
      <indexterm><primary>サブプロジェクト</primary></indexterm>

      <para>特定の Debian ツール、これらすべてのおかげで、サブディストリビューションは Debian から供される基盤を利用できます: <command>debian-cd</command> は、事前に選択したパッケージだけを含む CD-ROM 群を作成するためにずっと使われているツールです。<command>debian-installer</command> は、モジュール式のインストーラーであり、特別な用途向けに簡単に適応させることができます。<command>APT</command> は、さまざまな場所からパッケージをインストールしてもシステム全体の整合性を保証してくれるツールです。</para>

      <sidebar>
        <title><emphasis>TOOL</emphasis> Debian CD-ROM の作成</title>
        <indexterm><primary><command>debian-cd</command></primary></indexterm>

	<para><command>debian-cd</command> は、すぐに使えるインストールメディア (CD、DVD、Blu-Ray など) の ISO イメージを作成します。このソフトウェアに関するあらゆる問題は、<email>debian-cd@lists.debian.org</email> メーリングリストで (英語で) 話し合われています。公式の Debian ISO ビルドを管理している Steve McIntyre がこのチームを率いています。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>BACK TO BASICS</emphasis> 各コンピュータに対するアーキテクチャ</title>

	<para>「アーキテクチャ」という用語は、コンピュータの種類 (最もよく知られているのは Mac や PC) を表しています。それぞれのアーキテクチャは主にプロセッサによって区別され、通常異なるプロセッサ間には互換性がありません。これらのハードウェアの違いは動作の違いを意味しており、すなわち個々のアーキテクチャに対して別々にソフトウェアをコンパイルする必要があるということです。</para>
        <indexterm><primary>アーキテクチャ</primary></indexterm>
        <indexterm><primary>プロセッサ</primary></indexterm>

	<para>Debian で利用できる多くのソフトウェアは、移植可能なプログラミング言語で書かれています: つまり、同じソースコードをさまざまなアーキテクチャに対してコンパイルできます。実際において、一般に特定のアーキテクチャに対してコンパイルされた実行バイナリは、他のアーキテクチャ上では動作しません。</para>

	<para>個々のプログラムは、ソースコードを書くことで作成されているのを思い出してください。このソースコードはテキストファイルであり、特定のプログラミング言語の規則に従って書かれています。ソフトウェアを使えるようになる前に、ソースコードをコンパイルする必要があります。これはコードをバイナリ (プロセッサが実行できる機械語命令) に変換するのを意味します。それぞれのプログラミング言語には、コンパイルを実行するために個別のコンパイラがあります (たとえば C 言語には <command>gcc</command> があります)。</para>
        <indexterm><primary>ソース</primary><secondary>コード</secondary></indexterm>
        <indexterm><primary>バイナリコード</primary></indexterm>
        <indexterm><primary>コンパイル</primary></indexterm>
        <indexterm><primary>コンパイラ</primary></indexterm>
      </sidebar>

      <sidebar>
        <title><emphasis>TOOL</emphasis> インストーラ</title>
        <indexterm><primary><command>debian-installer</command></primary></indexterm>

	<para><command>debian-installer</command> は、Debian をインストールするためのプログラムの名前です。<command>debian-installer</command> はモジュール式に設計されているため、多様なインストール状況を広くサポートすることが可能です。<command>debian-installer</command> の開発は Cyril Brulebois の指揮の下に <email>debian-boot@lists.debian.org</email> メーリングリストで調整されています。</para>
      </sidebar>
    </section>
    <section>
      <title>フリーソフトウェアの品質</title>

      <para>Debian はフリーソフトウェアのすべての原則に従い、準備が整うまで新バージョンをリリースしません。開発者は、締め切りに間に合わせる目的で決められたスケジュールに従うことを強制されません。Debian が安定版のリリースに長い時間をかけている点はたびたび苦情の対象になってきましたが、Debian の伝説的な信頼性はフリーソフトウェアの原則を守ることで確保されてきました。すなわち「安定版」を冠する完全なディストリビューションにとっては、テストに長い時間をかけることが必須なのです。</para>

      <para>Debian は品質に関して妥協しません: すべての既知のクリティカルバグは新しいバージョンで修正されます。たとえバグ修正が当初計画されていたリリース日を遅らせることになったとしても、です。</para>
    </section>
    <section>
      <title>法律的枠組み: 非営利組織</title>

      <para>法律的に言えば Debian は米国の非営利なボランティア組織が管理するプロジェクトです。Debian プロジェクトにはおよそ千人の <emphasis>Debian 開発者</emphasis>がいますが、はるかに多くの貢献者 (翻訳者、バグ報告者、アーティスト、一時的な開発者など) が集まっています。</para>

      <para>Debian は自身の使命を実現させるために、多くのスポンサーが提供するインターネットに接続された多数のサーバを含む巨大なインフラを持っています。</para>

      <sidebar>
        <title><emphasis>COMMUNITY</emphasis> Debian の裏方 (SPI) と現地支部</title>
        <indexterm><primary sortas="ダンタイ">団体</primary></indexterm>
        <indexterm><primary>SPI</primary></indexterm>
        <indexterm><primary>Debian France</primary></indexterm>
        <indexterm><primary>Software in the Public Interest</primary></indexterm>

	<para>Debian は自分名義のサーバを所有していません。なぜなら Debian は <emphasis>Software in the Public Interest</emphasis> 内の 1 プロジェクトに過ぎず、SPI がハードウェアと財務的な側面 (寄付、ハードウェアの購入など) を管理しているからです。SPI は当初 Debian プロジェクト専用として設立されましたが、今では他のフリーソフトウェアプロジェクトも SPI と提携しています。そのようなプロジェクトにはとりわけ、PostgreSQL データベース、Freedesktop.org (GNOME や KDE Plasma のような現代的なグラフィカルデスクトップ環境でのさまざまな要素を標準化するプロジェクト)、Libre Office オフィススイートなどが挙げられます。<ulink type="block" url="http://www.spi-inc.org/" /></para>

	<para>SPI に加えて、アメリカ合衆国に中央集権化することなく Debian 用の資金を提供する目的で、さまざまな現地組織が Debian と緊密に連携しています。具体的には、そのような組織は Debian 用語で言うところの「Trusted Organizations」としても知られています。この構造を取ることで法外な国際送金コストを避け、一極集中を避けるという Debian プロジェクトの性質を満足させることが可能になっています。</para>

	<para>「Trusted Organizations」の数はかなり少ないですが、Debian の普及を目標に掲げる Debian 関連組織は数多く存在します。たとえば <emphasis>Debian France</emphasis>、<emphasis>Debian-ES</emphasis>、<emphasis>debian.ch</emphasis> ですが、その他にも世界中に存在します。どうかご遠慮なく現地組織に参加し Debian プロジェクトを支援してください!<ulink type="block" url="https://wiki.debian.org/Teams/Auditor/Organizations" /><ulink type="block" url="https://france.debian.net/" /><ulink type="block" url="http://www.debian-es.org/" /><ulink type="block" url="https://debian.ch/" /></para>
      </sidebar>
    </section>
  </section>
  <section id="sect.foundation-documents">
    <title>基本文書</title>
    <indexterm><primary sortas="キホンブンショ">基本文書</primary></indexterm>

    <para>最初のリリースから数年後、Debian はフリーソフトウェアプロジェクトが従うべき指針を定めました。この指針を細心の注意を払って決定したことで、すべてのメンバーが同じ目標に進むようになり、秩序的かつ平和的に成長するようになりました。Debian 開発者になるためには、どんな候補者もプロジェクトの基本文書に確立されている指針を支持し遵守することを認めて、それを証明しなければいけません。</para>

    <para>Debian の開発工程は定期的に議論されていますが、これらの基本文書は広く合意が得られているため、めったに変わりません。Debian 憲章は基本文書の安定度に関するまた別の点を保障しています。つまり、いかなる修正案であっても承認には 4 分の 3 の特定多数票が必要であるということを保障しています。</para>

    <section id="sect.social-contract">
      <title>ユーザに向けた約束</title>
      <indexterm><primary sortas="シャカイケイヤク">社会契約</primary></indexterm>
      <indexterm><primary sortas="ケイヤク、シャカイ">契約、社会</primary></indexterm>

      <para>Debian プロジェクトには「社会契約」もあります。Debian 社会契約はオペレーティングシステムの開発のみを対象にしている Debian プロジェクトの中でどのように位置づけられているのでしょうか? これは非常に単純です。すなわち Debian はユーザに役立ち、この考えをさらに進めて、社会に役立つように活動します。Debian 社会契約は Debian プロジェクトが負う責任を要約しています。それでは Debian 社会契約の内容をより詳しく見ていきましょう。</para>

      <orderedlist>
        <listitem>
	  <para>Debian は 100% 自由なものであり続けます。</para>

	  <para>これが第一のルールです。Debian は今もこれからも完全にフリーソフトウェアだけを使います。その上、Debian プロジェクト内のすべてのソフトウェア開発は他人からの束縛を受けません。</para>

          <sidebar>
            <title><emphasis>PERSPECTIVE</emphasis> ソフトウェア以外の要素に対するルール</title>

	    <para>Debian 社会契約の最初のバージョンには「Debian は 100% フリー<emphasis>ソフトウェア</emphasis>であり続けます」とありました。2004 年 4 月にバージョン 1.1 を批准したことに伴い、<emphasis>ソフトウェア</emphasis>という単語は条文から削除されました。この行為はソフトウェアのみならず、Debian がオペレーティングシステムの一部として提供したいと望んでいる、文書やその他の要素に対する自由を達成するための意思を表しています。</para>

	    <para>この変更は単なる編集だったのですが、実際のところは、一部の問題がある文書が削除されるなど、多くの影響をおよぼしました。さらに、ドライバが内部で数多くのファームウェアを使うようになったことにより問題が引き起こされました。なぜなら、多くのファームウェアは自由なものではありませんが対応するハードウェアを適切に操作するためには不可欠なものだからです。</para>
          </sidebar>
        </listitem>
        <listitem>
	  <para>Debian プロジェクトはフリーソフトウェアコミュニティに成果を還元します。</para>

	  <para>Debian プロジェクトが寄与して Debian ディストリビューションに組み込まれた成果はどんなことでも、元の作者 (「上流」と呼ばれる) に還元されます。一般に Debian は独立して作業をするのではなく、コミュニティと協力するのです。</para>

          <sidebar>
            <title><emphasis>COMMUNITY</emphasis> 上流開発者とは Debian 開発者のこと?</title>
            <indexterm><primary sortas="ジョウリュウカイハツシャ">上流開発者</primary></indexterm>
            <indexterm><primary sortas="カイハツシャ、ジョウリュウ">開発者、上流</primary></indexterm>
            <indexterm><primary sortas="ジョウリュウ">上流</primary></indexterm>

	    <para>「上流開発者」という用語はある著作物の作者/開発者を意味しており、彼らが著作物を制作し開発しています。一方で、「Debian 開発者」は存在する著作物を使い、その著作物を Debian パッケージにします (「Debian メンテナ」という用語がより適しています)。</para>

	    <para>実際のところ、上流開発者と Debian メンテナの違いは明確でないことが多いです。Debian メンテナはパッチを書くこともあり、その著作物のすべてのユーザは Debian メンテナの書いたパッチによる恩恵を受けます。一般に、Debian は Debian におけるそのパッケージの責任者が「上流」開発にも参加することを推奨しています (パッケージ責任者は、あるプログラムの単なるユーザではなく、貢献者になるのです)。</para>
          </sidebar>
        </listitem>
        <listitem>
	  <para>Debian プロジェクトは問題を隠しません。</para>

	  <para>Debian は完全なものではありません、修正するべき新しい問題が毎日見つかっています。Debian プロジェクトはバグ報告データベースのすべてを常時公開しており、誰でもこれを見ることができます。オンラインに提出されたバグ報告はすぐさま他の人にも読めるようになります。</para>
        </listitem>
        <listitem>
	  <para>Debian プロジェクトはユーザとフリーソフトウェアを最優先に考えます。</para>

	  <para>これは最も定義が難しい条項です。Debian はこの条文に従って、偏った考え方の下に決断を下します。すなわち Debian はたとえ開発者から見れば簡単な解決策であったとしてもユーザが使いにくくなるような解決策ならばそれを採用せず、たとえ実装が困難であったとしてもユーザが簡潔と感じるような解決策を採用します。これはユーザとフリーソフトウェアの利益を最優先事項と考えていることを意味しています。</para>
        </listitem>
        <listitem>
	  <para>Debian プロジェクトのフリーソフトウェア基準に合致しない著作物。</para>

	  <para>Debian はユーザから一部の自由ではないプログラムを使いたいとの要求を受け入れ、ユーザがこう考えることに理解を示しています。そのため、Debian プロジェクトは、再配布することには支障がないものの自由ではないソフトウェアの Debian パッケージを配布するために、自分たちのインフラの一部を使うことを認めています。</para>

          <sidebar>
            <title><emphasis>COMMUNITY</emphasis> non-free セクションに賛成か反対か?</title>
            <indexterm><primary>non-free</primary></indexterm>
            <indexterm><primary>セクション</primary><secondary>non-free</secondary></indexterm>

	    <para>自由ではないソフトウェア (すなわち「non-free」セクション、補注<xref linkend="sidebar.sections" />をご覧ください) を受け入れる枠組みを維持するという約束は Debian コミュニティの中でしばしば議論の対象になります。</para>

	    <para>枠組みの維持に反対する人は、こうすることでフリーソフトウェアに対する公平性が軽視されるようになり、フリーソフトウェアだけを提供するという原則にも違反している、と異論を唱えます。賛成する人は、ほとんどの non-free パッケージは「ほぼ自由なもの」であり、高々 1 つか 2 つの厄介な例外 (最もよくある例外はソフトウェアの商用利用の禁止) があるために自由ではないものにされていると、明言しています。このような著作物を non-free ブランチで配布することは、作者に対する間接的な説明 (main セクションに彼らの著作物を含めることができれば、著作物はより広く知られて使われるようになる) の役割を果たしています。このようにして Debian プロジェクトは、著作物をより広く使われるようにするためには著作物のライセンスを変更することが必要であると、作者に対して丁寧に依頼しているのです。</para>

	    <para>2004 年に non-free セクションは初めて完全に削除されました。これは実りのない試みで、もう一度議題に挙がることはないでしょう。なぜなら non-free セクションには、単純に main セクションに含めるパッケージに新たに要求された条件を満たしていなかったために移動されていた数多くの有益な文書が含まれていたからです。特に GNU プロジェクトが作成した特定のソフトウェア (特に、Emacs と Make) に関する文書ファイルはこれに該当していました。</para>

	    <para>non-free セクションを存続していることが原因で、Debian とフリーソフトウェア財団との間には時折摩擦が生まれます。フリーソフトウェア財団が Debian をオペレーティングシステムとして公的に推奨しないのはこれが主な理由です。</para>
          </sidebar>
        </listitem>
      </orderedlist>
    </section>
    <section id="sect.dfsg">
      <title>Debian フリーソフトウェアガイドライン</title>
      <indexterm><primary sortas="フリーソフトウェアキジュン">フリーソフトウェア基準</primary></indexterm>
      <indexterm><primary>DFSG</primary></indexterm>
      <indexterm><primary>Debian フリーソフトウェアガイドライン</primary></indexterm>
      <indexterm><primary>フリーソフトウェア</primary></indexterm>

      <para>Debian フリーソフトウェアガイドラインは、あるソフトウェアが Debian に含めることができるほど「十分に自由なもの」であると認めるか否かの基準を定義しています。もしあるプログラムのライセンスがこの基準に合致するならば、main セクションに含めることが可能です。これに対して、合致しないものの自由な配布が認められているならば、non-free セクションに含めることが可能です。non-free セクションは公式には Debian の一部ではなく、ユーザ向けに提供されている付加サービスです。</para>

      <para>Debian フリーソフトウェアガイドラインは Debian におけるセクションの選択基準だけにとどまらず、フリーソフトウェアの屋台骨になり、「Open Source Definition」の基礎を担う役割を果たし続けています。歴史的なことを言えば、Debian フリーソフトウェアガイドラインは「フリーソフトウェア」の概念を定義した最初の正式なものの 1 つと言えます。</para>

      <para>GNU 一般公衆利用許諾書、BSD ライセンス、Artistic ライセンスは伝統的で自由なライセンスの例であり、以下のテキストで言及する 9 個の事項に従います。以下に Debian ウェブサイトで公開されているものをそのまま引用します。<ulink type="block" url="http://www.debian.org/social_contract#guidelines" /></para>
      <orderedlist>
        <listitem>
          <formalpara>
            <title>自由な再配布。</title>

	    <para>Debian を構成する要素が従うライセンスは対象のソフトウェアを複数の異なる提供元からのプログラムを含むソフトウェア集約的ディストリビューションの構成要素として自由に販売または配布することを制限してはいけません。さらにこのライセンスは販売の際に使用料およびその他の料金を要求してはいけません。</para>
          </formalpara>

          <sidebar>
            <title><emphasis>BACK TO BASICS</emphasis> 自由なライセンス</title>
            <indexterm><primary>ライセンス</primary><secondary>BSD</secondary></indexterm>
            <indexterm><primary>BSD ライセンス</primary></indexterm>
            <indexterm><primary>ライセンス</primary><secondary>GPL</secondary></indexterm>
            <indexterm><primary>GPL</primary></indexterm>
            <indexterm><primary>GNU</primary><secondary sortas="イッパンコウシュウリヨウキョダクショ">一般公衆利用許諾書</secondary></indexterm>
            <indexterm><primary sortas="イッパンコウシュウリヨウキョダクショ">一般公衆利用許諾書</primary></indexterm>
            <indexterm><primary>ライセンス</primary><secondary>artistic</secondary></indexterm>
            <indexterm><primary>artistic ライセンス</primary></indexterm>

	    <para>GNU GPL、BSD ライセンス、Artistic ライセンスは各々が全く別物であるにも関わらず Debian フリーソフトウェアガイドラインに適合します。</para>

	    <para>FSF (フリーソフトウェア財団) が利用し推進する GNU GPL は最も一般的なライセンスです。GPL の主な特徴は、再配布される派生物にも GPL が適用されるということです。つまり、GPL コードを組み込んでいたり利用しているプログラムは GPL の定める条件に従って配布されなければいけないのです。それゆえ GPL ではプロプライエタリなアプリケーションで GPL コードを再利用することを禁止しています。このことにより GPL ライセンスに適合しないフリーソフトウェアで GPL コードを再利用すると重大な問題になります。それゆえ GPL の下に配布されているライブラリと別のフリーソフトウェアライセンスの下に公開されているプログラムをリンクするのは不可能な場合があります。他方で、GPL は米国法の下でとても強い力を発揮します。FSF の弁護士は GPL の起草からずっと参加し続け、通常は違反者に対して法廷で争わずに FSF と友好的な合意に到達するよう強いることを続けています。<ulink type="block" url="http://www.gnu.org/copyleft/gpl.html" /></para>

	    <para>BSD ライセンスは最も制限が緩いライセンスです。つまり、プロプライエタリアプリケーションで修正 BSD コードを利用することなど、どんなことでも許されています。<ulink type="block" url="http://www.opensource.org/licenses/bsd-license.php" /></para>

	    <para>最後に、Artistic ライセンスは GNU GPL と BSD ライセンスの妥協案です。つまり、プロプライエタリアプリケーションにコードを統合することは許可されていますが、いかなる変更も公開しなければいけません。<ulink type="block" url="http://www.opensource.org/licenses/artistic-license-2.0.php" /></para>

	    <para>GNU GPL、BSD ライセンス、Artistic ライセンスの完全な原文は Debian システムの <filename>/usr/share/common-licenses/</filename> に置かれています。</para>
          </sidebar>
        </listitem>
        <listitem>
          <formalpara>
            <title>ソースコード。</title>

	    <para>プログラムは自身のソースコードを含まなければならず、さらにコンパイルされた形だけでなくソースコードを配布することも許可しなければいけません。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>二次著作物。</title>

	    <para>ライセンスは修正物および派生物を作成することを許可しなければいけませんし、修正物および派生物のライセンスは元になったソフトウェアのライセンスと同じ条件の下に再配布することも許可しなければいけません。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>作者のソースコードの整合性保証。</title>

	    <para>ライセンスにおいて修正した形でソースコードを再配布することを制限するには、ライセンスはビルド時にプログラムを修正する目的でソースコードと一緒に「パッチファイル」を配布することを<emphasis>必ず</emphasis>許可しなければいけません。ライセンスは修正されたソースコードからビルドしたソフトウェアの配布を明確に許可していなければいけません。ライセンスは二次著作物が元のソフトウェアと異なる名前もしくはバージョン番号を使うことを要求できます (<emphasis>これは妥協案です。Debian グループはすべての著者に対して、ソースやバイナリに限らずいかなるファイルに対する変更も制限しないように勧めています</emphasis>)。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>個人や団体に対する平等性。</title>

	    <para>ライセンスはいかなる個人および団体も差別してはいけません。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>活動分野に対する平等性。</title>

	    <para>ライセンスは特定の活動分野でプログラムを利用することについて制限を加えてはいけません。たとえば、プログラムが商用や遺伝子研究で利用されることを制限してはいけません。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>ライセンスの配布。</title>

	    <para>プログラムに付随する権利は、そのプログラムを受け取ったすべての人に対しても追加のライセンスを要求することなく適用されなければいけません。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>ライセンスは Debian にだけ当てはまるものであってはいけません。</title>

	    <para>プログラムに付随する権利は、そのプログラムが Debian システムの一部であるかどうかに依存してはいけません。プログラムが Debian から分離され、Debian に依存することなくプログラムのライセンスの定める条件に従って利用および配布される場合であっても、プログラムの再配布に関わるすべての関係者はそのプログラムが Debian システムで使われる場合に許されるのと同一の権利を持つべきです。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>ライセンスは他のソフトウェアを汚染してはいけません。</title>

	    <para>ライセンスはそのライセンスに従うソフトウェアと一緒に配布されている別のソフトウェアに制限を加えてはいけません。たとえば、ライセンスは同じ媒体を通じて配布されるすべての他のプログラムがフリーソフトウェアでなければいけないと主張してはいけません。</para>
          </formalpara>

          <sidebar>
            <title><emphasis>BACK TO BASICS</emphasis> コピーレフト</title>
            <indexterm><primary>コピーレフト</primary></indexterm>
            <indexterm><primary sortas="チョサクケン">著作権</primary></indexterm>

	    <para>コピーレフトとは、著作物とその派生物の利用をプロプライエタリソフトウェアのように制限するというよりもむしろ、自由に利用することを保証するために著作権を利用するという原則です。コピーレフトとは「コピーライト」という用語のダジャレになっています。Richard Stallman は、ダジャレの好きな彼の友人から次のように書いた彼宛の封筒を受け取った際に、この概念を発見しました。「copyleft: all rights reversed (コピーレフト、すなわちすべての権利は逆さにされています)」。コピーレフトは元の著作物およびその変更版 (通常はプログラム) の配布に際して定められた最初の権利のすべてが維持されることを強制します。つまり、もしプログラムがコピーレフトライセンスで公開されたプログラムからコードを派生させているなら、そのプログラムをプロプライエタリソフトウェアとして配布することができないということを意味しています。</para>

	    <para>最もよく知られているコピーレフトライセンス群はもちろん GNU GPL とその派生物、そして GNU LGPL (GNU Lesser General Public License)、GNU FDL (GNU Free Documentation License) などです。残念なことにこれらのコピーレフトライセンスは通常相互に互換性のないものです。それ故、これらのうちのどれか 1 つを利用するのが最良です。</para>
          </sidebar>
        </listitem>
      </orderedlist>

      <sidebar id="sidebar.bruce-perens">
        <title><emphasis>COMMUNITY</emphasis> Bruce Perens、賛否の分かれるリーダー</title>
        <indexterm><primary>Bruce Perens</primary></indexterm>
        <indexterm><primary>Perens, Bruce</primary></indexterm>
        <indexterm><primary>オープンソース</primary></indexterm>

	<para>Bruce Perens は Ian Murdock の直後に Debian プロジェクトの 2 代目のリーダーになりました。彼は彼の活動的で独裁的な方針により非常に賛否の分かれるリーダーでした。それにも関わらず、彼は Debian の重要な貢献者であり続けています、Debian は特に彼のおかげで Ean Schuessler の独創的アイディアであるかの有名な「Debian フリーソフトウェアガイドライン」(DFSG) を編集することができました。その後、Bruce は DFSG から Debian に言及された部分を削除することにより DFSG を基にかの有名な「オープンソースの定義」を作りました。<ulink type="block" url="http://www.opensource.org/" /></para>

	<para>Bruce は非常に感情的になってプロジェクトを去りましたが、彼は Debian に強い愛着を持ち続けています。なぜなら彼は政治経済の領域に向けて Debian の普及を訴え続けているからです。彼はいまだに、アドバイスを与え、Debian を支持する最新の構想を示するために、時折メーリングリストに現れることがあります。</para>
        <indexterm><primary>コードネーム</primary></indexterm>
        <indexterm><primary sortas="ナマエ">名前</primary><secondary>コードネーム</secondary></indexterm>
        <indexterm><primary><emphasis role="distribution">Rex</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Buzz</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Bo</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Hamm</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Slink</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Potato</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Woody</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Sarge</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Etch</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Lenny</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Squeeze</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Wheezy</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Jessie</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Stretch</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Buster</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Bullseye</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Sid</emphasis></primary></indexterm>
        <indexterm><primary>トイストーリー</primary></indexterm>
        <indexterm><primary>Pixar</primary></indexterm>

	<para>最後に指摘しておきたい点は Bruce が Debian のバージョンに付けられるさまざまな「コードネーム」(1.1 — <emphasis role="distribution">Rex</emphasis>、1.2 — <emphasis role="distribution">Buzz</emphasis>、1.3 — <emphasis role="distribution">Bo</emphasis>、2.0 — <emphasis role="distribution">Hamm</emphasis>、2.1 — <emphasis role="distribution">Slink</emphasis>、2.2 — <emphasis role="distribution">Potato</emphasis>、3.0 — <emphasis role="distribution">Woody</emphasis>、3.1 — <emphasis role="distribution">Sarge</emphasis>、4.0 — <emphasis role="distribution">Etch</emphasis>、5.0 — <emphasis role="distribution">Lenny</emphasis>、6.0 — <emphasis role="distribution">Squeeze</emphasis>、7 — <emphasis role="distribution">Wheezy</emphasis>、8 — <emphasis role="distribution">Jessie</emphasis>、9 — <emphasis role="distribution">Stretch</emphasis>、10 (未リリース) — <emphasis role="distribution">Buster</emphasis>、11 (未リリース) — <emphasis role="distribution">Bullseye</emphasis>、<emphasis role="distribution">不安定版</emphasis> — <emphasis role="distribution">Sid</emphasis>) のモチーフを作ったという点です。これらは映画トイストーリーのキャラクター名から採られています。この全編コンピュータグラフィックスで構成されたアニメーション映画は、Bruce が Debian プロジェクトを率いていた当時に働いていた Pixar スタジオによって制作されました。「Sid」の名前は永久に<emphasis role="distribution">不安定版</emphasis>と関連付けられているため、特別な状態を意味しています。映画の中で、このキャラクターは常におもちゃを壊している隣の子供ですから、<emphasis role="distribution">不安定版</emphasis>に近づき過ぎないように注意してください。別の見方をすると <emphasis role="distribution">Sid</emphasis> は「Still In Development (いまだに開発中)」を意味する頭字語でもあります。</para>
      </sidebar>
    </section>
  </section>
  <section id="sect.debian-internals">
    <title>Debian プロジェクトの内部の仕組み</title>
    <indexterm><primary>Debian プロジェクト</primary><secondary sortas="ナイブノサギョウ">内部の作業</secondary></indexterm>
    <indexterm><primary>Debian プロジェクト</primary><secondary sortas="ナイブノソシキ">内部の組織</secondary></indexterm>

    <para>Debian プロジェクトによるたくさんの最終結果は、経験豊富な Debian 開発者によるインフラ整備作業、Debian パッケージに対する個人または共同作業、そしてユーザからのフィードバックの同時進行により成り立っています。</para>
    <section>
      <title>Debian 開発者</title>
      <indexterm><primary sortas="カイハツシャ">開発者</primary><secondary sortas="Debian カイハツシャ">Debian 開発者</secondary></indexterm>

      <para>Debian 開発者には公式プロジェクトメンバーとしてのさまざまな責任があります。Debian 開発者はプロジェクトの方針に重大な影響をおよぼします。一般に Debian 開発者は最低 1 つのパッケージに対して責任がありますが、時間に余裕がありそうしたいと思えば、多数のチームに参加することでプロジェクト内でより重い責任を負うことも自由にできます。<ulink type="block" url="https://www.debian.org/devel/people" /><ulink type="block" url="https://www.debian.org/intro/organization" /><ulink type="block" url="https://wiki.debian.org/Teams" /></para>

      <sidebar>
        <title><emphasis>TOOL</emphasis> 開発者データベース</title>
        <indexterm><primary sortas="カイハツシャ">開発者</primary><secondary sortas="カイハツシャデータベース">開発者データベース</secondary></indexterm>
        <indexterm><primary>データベース</primary><secondary sortas="カイハツシャデータベース">開発者データベース</secondary></indexterm>

	<para>Debian にはプロジェクトに登録されているすべての開発者と開発者に関連する情報 (アドレス、電話番号、緯度と経度といった地理座標など) のデータベースがあります。一部の情報 (姓名、国籍、プロジェクト内でのユーザ名、IRC ユーザ名、GnuPG 鍵など) は公開されておりウェブから入手することが可能です。<ulink type="block" url="https://db.debian.org/" /></para>

	<para>この地理座標を使えば、世界中にいる開発者全員の位置を載せた地図が作れます。Debian は本当の意味で国際的なプロジェクトです。つまり、すべての大陸に開発者がいます (しかしその大部分は「欧米」です)。</para>

        
        <figure>
          <title>世界的に広がる Debian 開発者</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/developers-map.png" scalefit="1" width="70%" />
            </imageobject>
          </mediaobject>
          <indexterm><primary sortas="セカイブンプ">世界分布</primary></indexterm>
        </figure>
      </sidebar>

      <para>パッケージメンテナンスは比較的厳格に管理された活動で、明確に文書化されており、もっと言えばルールが決められています。事実上、パッケージメンテナンスに関連するルールは <emphasis>Debian ポリシー</emphasis>の定めるすべての基準と適合します。幸いなことに、パッケージメンテナンスの作業を手助けする多くのツールが存在します。それゆえ、開発者は担当パッケージに固有の作業やたとえばバグ修正などのより複雑な作業に集中することが可能です。<ulink type="block" url="https://www.debian.org/doc/debian-policy/" /></para>

      <sidebar>
        <title><emphasis>BACK TO BASICS</emphasis> パッケージメンテナンス、開発者の作業</title>
        <indexterm><primary>メンテナンス</primary><secondary>パッケージメンテナンス</secondary></indexterm>
        <indexterm><primary>パッケージ</primary><secondary>メンテナンス</secondary></indexterm>

	<para>パッケージメンテナンスとはまず初めにあるプログラムを「パッケージング」することを必要とします。具体的に言うと、パッケージングとはあるプログラムをインストールする方法を定義することを意味しています。パッケージングすることにより、プログラムはインストール後すぐに動作するようになり、Debian プロジェクトが自身のために設定したルールを遵守するでしょう。この操作の結果が <filename>.deb</filename> ファイルに保存されています。事実上、プログラムのインストールに必要な作業とは、圧縮されたアーカイブを展開すること、インストール前およびインストール後にスクリプトを実行すること、だけです。</para>

	<para>パッケージングという最初の段階の後、メンテナンスサイクルが本当に始まります。ここでメンテナンスとは、Debian ポリシーの最新版に従うように更新を準備すること、ユーザから報告を受けたバグを修正すること、プログラムの新しい「上流」バージョン (開発を自然に継続したバージョン) を含めること、です。たとえば、最初のパッケージングの際、プログラムのバージョンが 1.2.3 だったとしましょう。数カ月の開発の後、オリジナルの作者は新しい安定版バージョン 1.4.0 を発表しました。この時点で、Debian メンテナはパッケージを更新するべきです。そうすればユーザは最新安定版の恩恵を受けられるようになります。</para>
      </sidebar>
      <indexterm><primary>Debian ポリシー</primary></indexterm>
      <indexterm><primary>Debian ポリシー</primary></indexterm>
      <indexterm><primary>ポリシー</primary></indexterm>

      <para>Debian プロジェクトの重要な要素である Debian ポリシーはパッケージの品質と Debian ディストリビューションの完全な相互運用性の両方を確保するための規範を定めています。Debian ポリシーのおかげで、Debian は巨大であるにも関わらずその一貫性を保っています。Debian ポリシーは不変の原則というわけではなく、<email>debian-policy@lists.debian.org</email> メーリングリストに寄せられた提案を練ることで絶え間なく進化しています。関係者全員からの同意を得られた修正は承認され、編集責任を持たないメンテナの小集団がこれを文章に反映します (この小集団ができることは、上に挙げたメーリングリストのメンバーである Debian 開発者から同意を得られた修正を反映させることだけです)。現在寄せられている修正の提案を読むにはバグ追跡システムをご確認ください。<ulink type="block" url="https://bugs.debian.org/debian-policy" /></para>

      <sidebar>
        <title><emphasis>COMMUNITY</emphasis> ポリシー編集手続き</title>

	<para>重要度を「wishlist」にして <emphasis role="pkg">debian-policy</emphasis> パッケージにバグ報告を投稿することにより、誰でも Debian ポリシーに修正を提案できます。その後の手続きは <filename>/usr/share/doc/debian-policy/Process.html</filename> に書かれています。すなわち Debian ポリシーに新しいルールを作ることで投稿された問題を解決しなければいけないと認知された場合、合意に達して提案が公表されるまで <email>debian-policy@lists.debian.org</email> メーリングリストで議論されます。この後、誰かが要求された修正に対する草稿を書いて、承認を求めるために (パッチレビューの形で) 投稿します。2 人の他の開発者が、提案された修正は以前の議論で達せられた合意を反映したものであると承認したら (彼らが修正に「賛同」したら) すぐに、<emphasis role="pkg">debian-policy</emphasis> パッケージメンテナの 1 人がこの提案を公式文書に反映させます。これらの手続きのどれか 1 つでも失敗したら、メンテナは提案を却下に分類して、バグを閉じます。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>DEBIAN POLICY</emphasis> 文書</title>
        <indexterm><primary sortas="ブンショ">文書</primary><secondary sortas="バショ">場所</secondary></indexterm>
        <indexterm><primary sortas="バショ">場所</primary><secondary sortas="ブンショ">文書</secondary></indexterm>
        <indexterm><primary><filename>/usr/share/doc/</filename></primary></indexterm>
        <indexterm><primary><filename>README.Debian</filename></primary></indexterm>
        <indexterm><primary><filename>NEWS.Debian.gz</filename></primary></indexterm>

	<para>各パッケージに関する文書は <filename>/usr/share/doc/<replaceable>package</replaceable>/</filename> に保存されています。多くの場合このディレクトリには <filename>README.Debian</filename> ファイルが含まれています。このファイルにはパッケージメンテナが行った Debian 特有の修正について説明が書かれています。つまり、メンテナの経験から恩恵を受けるためには、設定の前にこのファイルを読むことが賢明です。また、このディレクトリに含まれる <filename>changelog.Debian.gz</filename> ファイルにはあるバージョンから次のバージョンに更新した際に Debian メンテナが行った変更についての説明が書かれています。このファイルを <filename>changelog.gz</filename> ファイル (または同等のファイル、上流開発者が行った変更に関する説明が書かれたファイル) と混同してはいけません。<filename>copyright</filename> ファイルにはソフトウェアの作者とそのライセンスに関する情報が書かれています。最後に、このディレクトリに含まれる <filename>NEWS.Debian.gz</filename> と名付けられたファイルには Debian 開発者からの更新に関する重要な情報が含まれています。また、<emphasis>apt-listchanges</emphasis> がインストール済みの場合、パッケージのインストール時に <filename>changelog.Debian.gz</filename> および <filename>NEWS.Debian.gz</filename> に書かれた最新のエントリが自動的に表示されます。その他のファイルはここで注目しているソフトウェアに固有のファイルです。特に注目すべきは <filename>examples</filename> サブディレクトリで、ここには設定ファイルの例が含まれています。</para>
      </sidebar>

      <para>Debian ポリシーはパッケージングの技術的側面の大部分をカバーしています。Debian プロジェクトの大きさは組織の問題を引き起こします。この種の問題は Debian 憲章に即して対処されます。Debian 憲章は組織体制と意思決定の手段を定めています。これは言い換えれば、組織的な管理システムと言えます。</para>
      <indexterm><primary sortas="ケンショウ">憲章</primary></indexterm>
      <indexterm><primary>Debian プロジェクトリーダー</primary></indexterm>
      <indexterm><primary>DPL</primary></indexterm>
      <indexterm><primary>リーダー</primary><secondary sortas="ヤクワリ">役割</secondary></indexterm>
      <indexterm><primary>リーダー</primary><secondary sortas="センキョ">選挙</secondary></indexterm>

      <para>Debian 憲章はいくつかの役割と役職、併せてそれぞれに対する責任と権限を定義しています。特筆すべきは Debian 開発者は一般決議に投票することで最終決定を行う権限を常に持っているということです、重大な変化 (基本文書に影響をおよぼすような変化) を起こすには特定多数の 4 分の 3 (75%) が投票すること必要です。しかしながら、Debian 開発者は会議で自分たちを代表し、さまざまなチーム間の連携を確保する「Debian プロジェクトリーダー (DPL)」を毎年選びます。リーダーの選挙は常に活発な議論になります。リーダーの役割は何かの文書で正式に定義されているわけではありません。なぜなら通常、リーダー職の候補者はその役割を自分自身で定義し、それを提案するからです。実際のところ、リーダーの役割には開発者からの共感を得るように、メディアに対する代表者として働くこと、「内部」チーム間の連携をとること、プロジェクトに対する包括的な指導を提供すること、が含まれています。そして、DPL の見解は大多数のプロジェクトメンバーから暗黙のうちに容認されています。</para>

      <para>具体的に言えば、Debian プロジェクトリーダーは本当の意味での権力を持っています。さらに、賛否同数の場合にはリーダーの投票が決定票となります。その上、リーダーはまだ誰の権限下にもなっていない案件に判決を下したり、自身の権限の一部を委任したりすることが可能です。</para>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Ian Murdock</secondary></indexterm>
      <indexterm><primary>Perens, Bruce</primary></indexterm>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Ian Jackson</secondary></indexterm>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Wichert Akkerman</secondary></indexterm>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Ben Collins</secondary></indexterm>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Bdale Garbee</secondary></indexterm>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Martin Michlmayr</secondary></indexterm>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Branden Robinson</secondary></indexterm>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Anthony Towns</secondary></indexterm>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Sam Hocevar</secondary></indexterm>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Steve McIntyre</secondary></indexterm>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Stefano Zacchiroli</secondary></indexterm>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Lucas Nussbaum</secondary></indexterm>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Mehdi Dogguy</secondary></indexterm>
      <indexterm><primary sortas="ジンメイ">人名</primary><secondary>Chris Lamb</secondary></indexterm>

      <para>Debian が始まって以来ずっと Debian プロジェクトは止まることなく Debian プロジェクトリーダーに先導されてきました。現在までに DPL の職に就いた人は Ian Murdock、Bruce Perens、Ian Jackson、Wichert Akkerman、Ben Collins、Bdale Garbee、Martin Michlmayr、Branden Robinson、Anthony Towns、Sam Hocevar、Steve McIntyre、Stefano Zacchiroli、Lucas Nussbaum、Mehdi Dogguy、Chris Lamb です。</para>
      <indexterm><primary sortas="ギジュツイインカイ">技術委員会</primary></indexterm>

      <para>Debian 憲章では「技術委員会」もまた定義されています。技術委員会の本質的な役割とは、ある技術的な事柄に関して関係する開発者の間で合意に達しなかった場合に、その技術的な事柄の決裁を下すことです。また技術委員会の他の役割として、責任を負っている決定で間違いを犯す開発者に対する顧問役があります。ただし、技術委員会は問題になっているグループの一員から参加するように求められた場合のみ議論に参加するということに注意しなければいけません。</para>
      <indexterm><primary sortas="プロジェクトヒショ">プロジェクト秘書</primary></indexterm>

      <para>最後に、Debian 憲章では「プロジェクト秘書」の役職も定義しています。プロジェクト秘書はさまざまな選挙と一般決議に関連する投票の運営に責任を負っています。</para>

      <para>「一般決議」の手続きは Debian 憲章の中で最初の議論期間から最後の開票まで詳細に説明されています。この手続の最も興味深い側面は、現行の投票に関して言えば、開発者はさまざまな投票選択肢に対して選好の順序を付けなければいけないということと、<ulink url="https://en.wikipedia.org/wiki/Condorcet_method">コンドルセ方式</ulink> (より正確に言えば、シュルツ方式) に基づいて勝者が選ばれるということです。より詳しい情報は以下のページを参照してください。<ulink type="block" url="http://www.debian.org/devel/constitution.en.html" /></para>
      <indexterm><primary sortas="イッパンケツギ">一般決議</primary></indexterm>
      <indexterm><primary sortas="トウヒョウ">投票</primary></indexterm>

      <sidebar>
        <title><emphasis>CULTURE</emphasis> ののしり合戦、炎上する議論</title>
        <indexterm><primary sortas="ノノシリガッセン">ののしり合戦</primary></indexterm>
        <indexterm><primary sortas="ハクネツシタギロン">白熱した議論</primary></indexterm>

	<para>「ののしり合戦」とは極めて熱のこもった討論であり、多くの場合、合理的な議論が出尽くした後、双方が互いを攻撃して終わります。テーマによっては他のテーマに比べてより頻繁に論争を引き起こす場合があります (エディタの選択、「<command>vi</command> と <command>emacs</command> のどっちが好き?」、は昔からよく議論の的にされてきました)。あるテーマに対して一家言ある人々が非常に多いこと (参加者全員がそうである場合もあります) や質問内容が極めて個人的なものであることが原因で、多くの場合極めて素早く電子メールが交換されることになります。</para>

	<para>ののしり合戦からは一般的で特に有益な結論は何一つ生まれません。従って一般的には、ののしり合戦に関わらないこと、必要なら議論の内容を素早く流し読みするだけに留めておくこと (すべての内容を読むことは多大な時間を必要としすぎるでしょうから)、をお勧めします。</para>
      </sidebar>

      <para>たとえ Debian 憲章の規定する民主制が名ばかりのようなものであったとしても、毎日の現実は全く違ったものです。なぜなら Debian は当然ながらフリーソフトウェアにおける能動主義 (do-ocracy) のルールに従い、物事はそれを行った者がどのように行うかを決めるからです。問題に対処するさまざまな方法のそれぞれの価値を議論することは多くの時間を無駄にする可能性があります。つまり議論の結果最終的に選ばれるのは、現実的かつ要件を満足できる最初に提案された解決策になることでしょう…。このような解決策は、一人の有能な人物が時間をかけて努力しなければ、導き出されるものではありません。</para>

      <para>Debian プロジェクト内で自分の地位を高めるにはたった一つの方法しかありません。すなわち、何か有益なことをして、それがうまくいったことを示すことです。多くの Debian「管理」チームはチーム内メンバーからの推薦で新メンバーを採用します。つまり、これまでの貢献が効果を挙げており、本人の能力が証明されているボランティアを好むということです。これらのチームの作業は公開されており、新しい貢献者がその作業を観察し手助けを開始するのに特権を必要としません。そのため、Debian は「業績主義」と言われています。</para>

      <sidebar>
        <title><emphasis>CULTURE</emphasis> 業績主義、知識の統治</title>
        <indexterm><primary sortas="ギョウセキシュギ">業績主義</primary></indexterm>

	<para>業績主義とは、最も高い業績をもつものが権力を行使するという政治の形態です。Debian においては、業績は能力を測る物差しであり、能力はプロジェクトの単独または複数のメンバーが過去の行動を観察して評価されます (元プロジェクトリーダーの Stefano Zacchiroli は「do-ocracy」の意味は「物事を成し遂げた人に与えられる権力」を意味すると言っています)。単に業績があるということで能力が一定のレベルに達していることを証明するのです。そして、一般に成果とはソースコードが入手できるフリーソフトウェアに対するもので、同業者はソースコードから成果の品質を評価することが容易に可能です。</para>
      </sidebar>

      <para>この効果的な運営方法のおかげで「重要な」Debian チーム内では貢献者の品質が保証されています。この方法は決して完璧ではありませんし、時々この運営方法を受け入れられない人もいます。チーム内で採用されている開発者の選択基準は少し気まぐれかもっと言えば不公平なものに見えるかもしれません。その上、チームから受けられるサービスに関して全員が同じ定義を共有しているとも限りません。新しい Debian パッケージを含めるのに 8 日間待たなければいけないのは受け入れがたいという人もいれば、なんの問題もなく 3 週間気長に待つという人もいます。そんなわけで、いくつかのチームが提供する「サービス品質」には常に不満の声が上げられています。</para>

      <sidebar>
        <title><emphasis>COMMUNITY</emphasis> 新しいメンテナの参加</title>
        <indexterm><primary>メンテナ</primary><secondary sortas="シンメンテナ">新メンテナ</secondary></indexterm>

	<para>新しい開発者の受け入れに責任を持つチームは最も定期的に批判されているチームです。ここ数年 Debian プロジェクトにはさらに多くの開発者が必要になっており、そのため今後 Debian プロジェクトは多くの開発者を受け入れることになるでしょう。われわれはこの方針を認めなければいけません。一部の人々はこの方針に不公平さを感じるかもしれません。しかし、Debian は自身がユーザに向けて作り出したすべての物に対して品質と整合性を保証するという原則を考慮すると、これが初めは小さな挑戦だったとしても 1,000 人を超えるコミュニティ内でその挑戦はより大きなものになります。われわれはこの点について自覚しなければいけません。</para>
        <indexterm><primary>DAM</primary></indexterm>
        <indexterm><primary>Debian アカウントマネージャ</primary></indexterm>

	<para>その上、受け入れ手続きの最終的な判断は小さなチームである Debian アカウントマネージャによる立候補者の審査に委ねられています。マネージャはボランティアを Debian 開発者コミュニティに受け入れるか拒否するかについて最終的な決定権を持っているため、特に批判を浴びるのです。実際問題として、マネージャはある候補者がプロジェクトの活動についてより多くを学ぶまでの間、その候補者の受け入れを遅らせなければならないことがあります。もちろん、候補者は現在の開発者を支援することで、公式開発者として受け入れられる前に Debian に対して貢献することも可能です。</para>
      </sidebar>
    </section>
    <section>
      <title>ユーザの積極的役割</title>

      <para>読者の皆様の中には Debian プロジェクト内で働く人の中でも特にユーザに言及する必要があるのではないかと感じる方がいらっしゃるかもしれません。これはごく当たり前の感覚です。なぜなら Debian プロジェクトではユーザが重要な役割を果たしているからです。「受け身」の状態から一歩進んで、Debian の開発版を使い、バグ報告を提出して問題を指摘するユーザもいます。さらに深く立ち入り、重要度「wishlist」のバグ報告を提出することで改善案を投稿したり、「パッチ」と呼ばれるソースコードの修正を投稿するユーザもいます (補注<xref linkend="sidebar.patch" />をご覧ください)。</para>

      <sidebar id="sidebar.bts">
        <title><emphasis>TOOL</emphasis> バグ追跡システム</title>
        <indexterm><primary>システム</primary><secondary sortas="バグツイセキシステム">バグ追跡システム</secondary></indexterm>
        <indexterm><primary>BTS</primary></indexterm>
        <indexterm><primary sortas="バグツイセキシステム">バグ追跡システム</primary></indexterm>
        <indexterm><primary><literal>bugs.debian.org</literal></primary></indexterm>

	<para>Debian バグ追跡システム (Debian BTS) はプロジェクトで広く使われています。公開部分 (ウェブインターフェース) を使ってユーザは報告されたバグをすべて見ることが可能です、必要であれば、さまざまな基準に従ってソート済みのバグリストを表示することが可能です。ここで基準とは、影響を受けるパッケージ、重要度、状態、報告者のアドレス、パッケージの責任を負うメンテナのアドレス、タグなどです。あるバグに関連するすべての議論の完全な履歴リストを閲覧することも可能です。</para>

	<para>内部的には Debian BTS は電子メールを基礎に使っています。すなわち、BTS に保存されているすべての情報は関係するさまざまな人が送信したメッセージに基づいています。<email>12345@bugs.debian.org</email> 宛に送信された電子メールはバグ番号 12345 のバグに関する連絡履歴に割り当てられます。議論を終わらせる理由を説明したメッセージを <email>12345-done@bugs.debian.org</email> 宛に書くことで、権限のある人がバグを「閉じる」ことがあります (バグを閉じるのは、報告された問題が解決されたか、もはやその問題に意味がない場合です)。新しいバグを報告するには、問題になっているパッケージの特定に必要である特殊な書式に従い、<email>submit@bugs.debian.org</email> 宛に電子メールを送ってください。アドレス <email>control@bugs.debian.org</email> はあるバグに関連するすべての「メタ情報」を編集するために設けられています。</para>

	<para>Debian BTS には他にも機能的特色 (バグにラベル付けするための便利なタグ機能など) があります。詳しい情報を見るには以下の URL を参照してください。<ulink type="block" url="https://www.debian.org/Bugs/" /></para>
      </sidebar>

      <sidebar>
        <title><emphasis>VOCABULARY</emphasis> バグの重要度</title>
        <indexterm><primary sortas="ジュウヨウド">重要度</primary></indexterm>
        <indexterm><primary>バグ</primary><secondary sortas="ジュウヨウド">重要度</secondary></indexterm>

	<para>バグの重要度とは堅苦しく言うと報告された問題の重要性の度合いを意味しています。現実的には、すべてのバグの重要性は同一ではありません。たとえばマニュアルの誤植とサーバソフトウェアのセキュリティ脆弱性の重要度は全く違います。</para>

	<para>Debian はバグの重要度を類型化するために等級の意味を拡大して使用しています。それぞれのレベルは、重要度の選択がしやすいよう、明確に定義されています。<ulink type="block" url="https://www.debian.org/Bugs/Developer#severities" /></para>
      </sidebar>

      <para>加えて、Debian の提供するサービスに満足している数多くのユーザが彼ら自身の手でプロジェクトに貢献をしたいと思っています。プログラミングに関する専門知識のレベルが十分でない人は翻訳や文書のレビューを行うことで手助けを行うことを選ぶかもしれません。このような作業を行うために各言語に特有の問題を議論するためのメーリングリストがあります。<ulink type="block" url="https://lists.debian.org/i18n.html" /><ulink type="block" url="https://www.debian.org/international/" /></para>

      <sidebar>
        <title><emphasis>BACK TO BASICS</emphasis> i18n (国際化) と l10n (地域化) とは?</title>
        <indexterm><primary sortas="コクサイカ">国際化</primary></indexterm>
        <indexterm><primary sortas="チイキカ">地域化</primary></indexterm>
        <indexterm><primary>i18n</primary></indexterm>
        <indexterm><primary>l10n</primary></indexterm>

	<para>「i18n」と「l10n」は「internationalization (国際化)」と「localization (地域化)」の略語です。それぞれの単語の最初と最後の文字を取って、両者に挟まれた文字をその文字数で表しています。</para>

	<para>あるプログラムの「国際化を行う」ということは、そのプログラムを翻訳 (地域化) できるように変更を加えることを含んでいます。これは最初ある言語で動くように書かれたプログラムを一部書き換えて、どんな言語でも動くようにすることを伴います。</para>

	<para>あるプログラムの「地域化を行う」ということは、元のメッセージ (英語の場合が多い) を他の言語に翻訳することを含んでいます。地域化を行うには先にプログラムを国際化しておかなければいけません。</para>

	<para>まとめると、国際化とはソフトウェアを翻訳するための準備で、翻訳することにより地域化が行われます。</para>
      </sidebar>

      <sidebar id="sidebar.patch">
        <title><emphasis>BACK TO BASICS</emphasis> パッチ、修正を送る方法</title>
        <indexterm><primary><command>patch</command></primary></indexterm>
        <indexterm><primary>パッチ</primary></indexterm>
        <indexterm><primary><command>diff</command></primary></indexterm>

	<para>パッチとは単独または複数のファイルに対する変更内容を記述したファイルです。具体的に言うと、パッチはコードを修正後の内容に置き換えるために、コードから削除された行と追加された行と (時々) それらの行位置の目印となるテキスト (これは行番号が変わった場合に変更の場所を特定するためのものです) のリストを含んでいます。</para>

	<para>パッチファイルの提供する修正を適用するためのツールは <command>patch</command> と呼ばれています。パッチファイルを作成するためのツールは <command>diff</command> と呼ばれており、以下のように使います。</para>

        <screen><computeroutput>$ </computeroutput><userinput>diff -u file.old file.new &gt;file.patch</userinput></screen>

	<para><filename>file.patch</filename> ファイルには <filename>file.old</filename> の内容を <filename>file.new</filename> の内容に変更するための指示が含まれています。われわれはこのパッチファイルを送信することができ、受け取った人はパッチファイルを適用して <filename>file.new</filename> を再作成することが可能です、これを行うには以下のようにします。</para>

        <screen><computeroutput>$ </computeroutput><userinput>patch -p0 file.old &lt;file.patch</userinput></screen>

	<para>こうすることで <filename>file.old</filename> ファイルは <filename>file.new</filename> と全く同じものになります。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>TOOL</emphasis> <command>reportbug</command> を使ったバグ報告</title>
        <indexterm><primary><command>reportbug</command></primary></indexterm>
        <indexterm><primary>バグ</primary><secondary sortas="バグホウコク">バグ報告</secondary></indexterm>
        <indexterm><primary sortas="バグホウコク">バグ報告</primary></indexterm>

	<para><command>reportbug</command> ツールは Debian パッケージに対するバグ報告を簡単に送信できるようにするためのものです。<command>reportbug</command> は問題になっているバグが既に報告されていないかを確認する際に役立ち、同じバグがシステムに報告されることを防いでいます。<command>reportbug</command> はユーザに可能な限り正確な報告をさせるために、重要度の定義を表示します (開発者は後から必要になればいつでもレベルを微調整することが可能です)。<command>reportbug</command> はバグ報告を適切な書式に整形する機能と内容をユーザが編集できる機能を提供しているので、<command>reportbug</command> を使えばユーザはバグ報告の正確な書式を知らなくても完全なバグ報告を書くことが可能です。その後、この報告は電子メールサーバを経由して送信されます (デフォルトでは Debian が運営するリモートサーバを使いますが、<command>reportbug</command> はローカルサーバを使うことも可能です)。</para>

	<para><command>reportbug</command> はどちらかと言えば開発版で使用すべきツールです。なぜなら、報告されたバグは開発版で修正されるからです。実際のところ、Debian の安定版では、セキュリティ更新やその他の重要な更新 (たとえば、あるパッケージが全く動かない) などのごく少数の例外を除いて、修正を歓迎しません。そんなわけで Debian パッケージの深刻でないバグの修正は次の安定版まで待たなければいけません。</para>
      </sidebar>

      <para>ユーザの行動の仕方によって、上で述べたすべての貢献の仕組みはさらに効果的なものになります。孤立したユーザの集合体から一歩進んで、ユーザ間の交流が数多く起こるコミュニティこそが本物のコミュニティなのです。ユーザ議論用のメーリングリストである <email>debian-user@lists.debian.org</email> では素晴らしい活動がなされています (<xref linkend="solving-problems" />ではこの件に関して詳細に議論しています)。</para>

      <para>ユーザは自分に直接影響をおよぼす技術的な問題について互いに助け合ったり、技術的な問題を抱える誰かを助けたりするだけでなく、Debian プロジェクトに貢献するための最良の方法を話し合い、Debian プロジェクトを前進させる手助けをしています。このような議論はしばしば改良を提案するものとなります。</para>

      <para>Debian は自己アピールによる普及キャンペーンに資金を使わないため、Debian のユーザは Debian の普及に重要な役割を果たし、Debian の評判は口コミで伝わることが保障されています。</para>

      <para>この方法は極めてうまくいきます。なぜならフリーソフトウェアコミュニティのあらゆる層に Debian の支持者がいるからです。すなわち、地域の LUG「Linux ユーザグループ」が企画したインストールパーティ (ベテランユーザが新しいユーザにシステムのインストールの補助を行うワークショップ) から、Linux などについて取り扱う大きな技術会議のアソシエーションブースにまで、Debian の支持者がいるということです。</para>

      <para>ボランティアがポスター、パンフレット、ステッカーなどのプロジェクトの宣伝に役立つ資料を作っています。この宣伝資料は誰もが利用できるようにされており、Debian はウェブサイトでこの宣伝資料を無制限に提供しています。<ulink type="block" url="https://www.debian.org/events/material" /></para>
    </section>
    <section>
      <title>チームとサブプロジェクト</title>

      <para>Debian は最初からずっと、ソースパッケージの概念を中心に組織化され続けており、ソースパッケージにはそのメンテナとメンテナのグループがいます。多くの作業チームは長い時間をかけて生まれ続けており、最近サブプロジェクトの周りで成長している最新の一連のチームとともに、インフラの運営および特定のパッケージに依存しないタスク (品質保証、Debian ポリシー、インストーラなど) の管理を保証しています。</para>
      <section id="sect.sub-projects">
        <title>現存する Debian サブプロジェクト</title>

	<para>人それぞれ好みの Debian があります! サブプロジェクトは Debian を特定のニーズに適応させることに興味を持つボランティアのグループです。特定の領域 (教育、医療、マルチメディア制作など) を対象としたプログラム群の選定にとどまらず、サブプロジェクトは既存パッケージの改良、不足ソフトウェアのパッケージング、インストーラの適応作業、特定文書の作成などにも従事しています。</para>

        <sidebar>
          <title><emphasis>VOCABULARY</emphasis> サブプロジェクトと派生ディストリビューション</title>
          <indexterm><primary>サブプロジェクト</primary></indexterm>
          <indexterm><primary sortas="ハセイディストリビューション">派生ディストリビューション</primary></indexterm>

	  <para>派生ディストリビューションの開発工程とは、Debian の特定のバージョンを土台としてそれにたくさんの変更を加えることです。派生ディストリビューションを支える基礎構造は Debian プロジェクトとは全く別物です。また、Debian のように改良に貢献するポリシーを定める必要はありません。この違いは、派生ディストリビューションが Debian から「分岐」した理由、派生ディストリビューションが開発の上流側でなされた改良の恩恵を受けるために Debian と自身のソースを定期的に再同期しなければいけない理由、を説明します。</para>

	  <para>一方でサブプロジェクトは分岐できません、なぜなら特定の目的に対して適用するためにサブプロジェクトで行ったすべての作業は直接的に Debian の改善になるからです。</para>

	  <para>Debian から派生したディストリビューションはたくさんありますが、最も知られているものは間違いなく Ubuntu でしょう。派生ディストリビューションの詳細と Debian との関連性における立ち位置について学ぶには<xref linkend="derivative-distributions" />をご覧ください。</para>
        </sidebar>

        
	<para>以下は現存するサブプロジェクトを一部抜粋したものです。</para>
        <itemizedlist>
          <listitem>
	    <para>Debian-Junior。これは Ben Armstrong によって作成され、子供向けに魅力的で使いやすい Debian システムを提供しています。</para>
          </listitem>
          <listitem>
	    <para>Debian-Edu。これは Petter Reinholdtsen によって作成され、学問の世界向けに特化したディストリビューションの作成を重視しています。</para>
          </listitem>
          <listitem>
	    <para>Debian Med。これは Andreas Tille によって作成され、医療分野に特化しています。</para>
          </listitem>
          <listitem>
            <para>Debian Multimedia。これは音声およびマルチメディア制作を取り扱います。</para>
          </listitem>
          <listitem>
            <para>Debian-Desktop。これはデスクトップを重視しデフォルトテーマのアートワーク作成の調整役を務めています。</para>
          </listitem>
          <listitem>
            <para>Debian GIS。これは地理情報システムのアプリケーションとユーザの面倒を見ています。</para>
          </listitem>
          <listitem>
            <para>最後に Debian Accessibility。これは障がいのある人々の要求に合致するよう Debian を改良しています。</para>
          </listitem>
        </itemizedlist>

	<para>Debian サブプロジェクトの数は時間が経過するに従って増え続け、Debian サブプロジェクトの良さに対する認識を改良し続けることは間違いありません。既存の Debian のインフラはサブプロジェクトを完全にサポートしているので、実質的にサブプロジェクトが真の付加価値を上げるための作業に集中することを可能にしています。サブプロジェクトは Debian プロジェクト内で開発しているため Debian との同期について心配することはありません。</para>
      </section>
      <section>
        <title>管理チーム</title>

	<para>多くの管理チームは比較的閉鎖的で新メンバーの採用は現メンバーからの選出で決まります。管理チームの一員になる最良の手段は現在のメンバーを賢明に手伝うこと、つまり自分が管理チームの目標と流儀を理解していることをはっきり示すことです。</para>

	<para>ftpmaster は Debian パッケージの公式アーカイブの責任者です。ftpmaster はあるプログラムのメンテナンスを担当しており、このプログラムは開発者が送信したパッケージを受け取り、いくつかの事項を確認した後にパッケージを自動的に参照基準サーバ (<literal>ftp-master.debian.org</literal>) に保存しています。</para>

	<para>ftpmaster はまた、パッケージデータベースの中に新しいパッケージを追加する前に、Debian がこのパッケージを配布しても問題ないことを確認するために、このパッケージのライセンスを確認します。開発者がパッケージの削除を希望する場合、開発者はバグ追跡システムから <emphasis>ftp.debian.org</emphasis>「擬似パッケージ」に対してバグ報告を行い、ftpmaster と連絡を取ります。</para>
        <indexterm><primary>ftpmaster</primary></indexterm>

        <sidebar>
          <title><emphasis>VOCABULARY</emphasis> 擬似パッケージ、監視ツール</title>
          <indexterm><primary sortas="ギジパッケージ">擬似パッケージ</primary></indexterm>

	  <para>バグ追跡システムは、当初バグ報告を Debian パッケージと関連付けるために設計されましたが、その他の問題の管理にも非常に実用的であると証明し続けています。ここでその他の問題の管理とは、特定の Debian パッケージに関係しない解決すべき問題をリストアップしたり、作業を管理することです。一部のチームでは「擬似パッケージ」を使うことで、チームが実在のパッケージに関連がなくとも、バグ追跡システムを使うことができています。誰でも対処が必要な問題を報告できます。たとえば、BTS の <emphasis>ftp.debian.org</emphasis> エントリは、公式パッケージアーカイブに関する問題を報告し追跡するため、もしくはパッケージの削除要求を出すために利用されます。同様に、<emphasis>www.debian.org</emphasis> 擬似パッケージは Debian ウェブサイトの誤りを指摘するためのもので、<emphasis>lists.debian.org</emphasis> ではメーリングリストに関するすべての問題を扱います。</para>
        </sidebar>

        <sidebar id="sidebar.fusionforge">
          <title><emphasis>TOOL</emphasis> FusionForge、共同開発における万能ナイフ</title>
          <indexterm><primary><literal>alioth</literal></primary></indexterm>
          <indexterm><primary>FusionForge</primary></indexterm>

	  <para>FusionForge は <literal>www.sourceforge.net</literal>、<literal>alioth.debian.org</literal>、<literal>savannah.gnu.org</literal> などと同様のサイトを作成できるプログラムです。FusionForge はプロジェクトをホストし、容易に共同開発を行うためのさまざまなサービスを提供します。各プロジェクトは専用の仮想領域を持ち、ここにはウェブサイト、一般にバグやパッチを追跡するための「チケット発行」システム、検査ツール、ファイルストレージ、フォーラム、リポジトリのバージョン操作システム、メーリングリスト、その他のさまざまな関連サービスが含まれています。</para>

	  <para><literal>alioth.debian.org</literal> は Debian の FusionForge サーバで、Alexander Wirt、Stephen Gran、Roland Mas が管理しています。Debian 開発者が 1 人以上参加しているプロジェクトならなんでもここでホストすることが可能です。<ulink type="block" url="http://alioth.debian.org/" /></para>

	  <para>FusionForge にはいろいろな種類のサービスが含まれているため、その内部はかなり複雑であるにも関わらず、FusionForge は比較的簡単にインストールできます。これは Roland Mas と Christian Bayle が <emphasis role="pkg">fusionforge</emphasis> Debian パッケージに対して行った非常に優れた成果のおかげです。</para>
        </sidebar>

	<para id="dsa-team"><emphasis>Debian システム管理者</emphasis> (DSA) チーム (<email>debian-admin@lists.debian.org</email>) は、読者の皆様の予想通り、Debian プロジェクトが利用する多くのサーバのシステム管理に対して責任があります。DSA チームは、すべての基盤サービス (DNS、ウェブ、電子メール、シェルなど) を最適に機能させること、Debian 開発者から要求のあったソフトウェアをインストールすること、セキュリティ関連の予防策を適用すること、を保証します。<ulink type="block" url="https://dsa.debian.org" /></para>
        <indexterm><primary><emphasis>debian-admin</emphasis></primary></indexterm>
	<indexterm><primary sortas="DSA (Debian システムカンリシャ)">DSA (Debian システム管理者)</primary></indexterm>

        <sidebar>
          <title><emphasis>TOOL</emphasis> Debian パッケージトラッカー</title>
          <indexterm><primary sortas="パッケージツイセキシステム">パッケージ追跡システム</primary></indexterm>
          <indexterm><primary>システム</primary><secondary sortas="パッケージツイセキシステム">パッケージ追跡システム</secondary></indexterm>
          <indexterm><primary>Debian パッケージトラッカー</primary></indexterm>
          <indexterm><primary>トラッカー</primary><secondary>Debian パッケージトラッカー</secondary></indexterm>
          <indexterm><primary>パッケージ</primary><secondary>Debian パッケージトラッカー</secondary></indexterm>
          <indexterm><primary>PTS</primary></indexterm>
          <indexterm><primary>DDPO</primary></indexterm>
          <indexterm><primary sortas="Debian カイハツシャノパッケージイチラン">Debian 開発者のパッケージ一覧</primary></indexterm>

	  <para>Debian パッケージトラッカーは Raphaël の業績の一つです。Debian パッケージトラッカーの基本的な考え方は、あるパッケージに対して、可能な限り多くの情報を単一のページに集中させることです。こうすることで、ユーザは素早くプログラムの状態を確認し、完了させなければいけない作業を特定し、プログラムの開発に支援を申し出ることが可能です。そのため、このページには、すべてのバグ統計、それぞれのディストリビューションで利用できるバージョン、<emphasis role="distribution">テスト版</emphasis>ディストリビューションにおけるパッケージの作業進行状況、パッケージ説明文と debconf テンプレートの翻訳状況、新しい上流開発版を入手できるか否か、最新の Debian ポリシーに対する違反通知、メンテナに関する情報、その他メンテナが含めたいと望んだ情報、が集められています。<ulink type="block" url="https://tracker.debian.org/" /></para>

	  <para>電子メール購読サービスがこのウェブインターフェースを完全なものにします。電子メール購読サービスは情報を選別して自動的に送信します。ここで情報とは、バグおよびバグに関連する議論、Debian サーバから新しいバージョンが利用できるか否か、査読待ちの新しい翻訳などを指します。</para>

	  <para>熟練ユーザは一度パッケージ追跡システムの機能を十分よく理解したら、すべての情報をしっかりと追いかけ、より一層 Debian プロジェクトに貢献することが可能です。</para>

	  <para>もう一つのウェブインターフェースは <emphasis>Debian Developer's Packages Overview</emphasis> (DDPO) として知られています。DDPO はある開発者が責任を持つすべての Debian パッケージの概要を提供します。<ulink type="block" url="https://qa.debian.org/developer.php" /></para>

	  <para>Debian パッケージトラッカーと Debian 開発者のパッケージ一覧は Debian の品質保証に責任を負うグループ (このグループは Debian QA として知られています) によって開発および管理されているツールです。</para>
          <indexterm><primary sortas="ホショウ">保証</primary><secondary sortas="ヒンシツホショウ">品質保証</secondary></indexterm>
          <indexterm><primary sortas="ヒンシツ">品質</primary><secondary sortas="ホショウ">保証</secondary></indexterm>
        </sidebar>

	<para><emphasis>listmaster</emphasis> はメーリングリストを運営する電子メールサーバを管理します。新しいメーリングリストを作成し、宛先が不明なメールを処理 (配送失敗通知) し、スパムフィルタ (迷惑メールフィルタ) をメンテナンスするのは <emphasis>listmaster</emphasis> の役目です。</para>
        <indexterm><primary>listmaster</primary></indexterm>

        <sidebar>
          <title><emphasis>CULTURE</emphasis> メーリングリストの流量に関する統計データ</title>
          <indexterm><primary>リスト</primary><secondary>メーリングリスト</secondary></indexterm>
	  <indexterm><primary>メーリングリスト</primary></indexterm>

          
	  <para>メーリングリストがプロジェクトの活発度を証明する最良の方法であることは間違いありません。なぜならプロジェクト内で起きたことをすべて記録しているからです。われわれのメーリングリストに関するいくつかの統計調査がそれを雄弁に語っています (統計調査は 2017 年に行われました)。統計調査の結果によれば、Debian は 250 を超えるメーリングリストをホストしており、合計で 217,000 個のユニークアドレスが登録されています。毎月 27,000 通のメッセージが送信され、毎日 476,000 通の電子メールが配送されています。</para>
        </sidebar>

	<para>Debian が提供する各サービスには専属の管理チームがあり、ほとんどの場合そのサービスを設置したボランティア (しばしばサービスで利用しているツールをプログラムしたボランティア) がチームのメンバーになっています。これに当てはまるケースとして、バグ追跡システム (BTS)、パッケージトラッカー、<literal>alioth.debian.org</literal> (FusionForge サーバ、補注<xref linkend="sidebar.fusionforge" />を参照してください)、<literal>qa.debian.org</literal> で利用できるサービス、<literal>lintian.debian.org</literal>、<literal>buildd.debian.org</literal>、<literal>cdimage.debian.org</literal> などがあります。</para>
      </section>
      <section>
        <title>開発チーム、横断チーム</title>

	<para>管理チームとは異なり、開発チームの門戸は外部の貢献者に向けてかなり大きく開かれています。Debian の使命がソフトウェアを作成することではないとしても、Debian プロジェクトは目標を達成するために特定のプログラムを必要としています。もちろん、フリーソフトウェアライセンスの下で開発されたそれらのソフトウェアはフリーソフトウェア世界の他の場所で保証されている方法を活用します。</para>

        <sidebar id="sidebar.git">
          <title><emphasis>CULTURE</emphasis> Git</title>
          <indexterm><primary>Git</primary></indexterm>
          <indexterm><primary sortas="コウセイカンリ">構成管理</primary></indexterm>

	  <para>Git は複数のファイルに対して共同で作業を行う際のツールで、同時に変更の履歴を管理するツールでもあります。通常 Git が管理対象とするファイルはプログラムのソースコードなどのテキストファイルです。もし数人が同じファイルに対して一緒に作業を行った場合、<command>git</command> がマージできるのは、同じファイルの別の場所に行われた修正だけです。それ以外の場合、手作業で「衝突」を解決しなければいけません。</para>

          <para>Git は分散型システムで、各ユーザが変更の完全な履歴が保存された作業リポジトリを持っています。中央リポジトリはプロジェクトをダウンロードしたり (<command>git clone</command>)、完了した作業を他の人と共有する (<command>git push</command>) ために使われます。作業リポジトリには中央リポジトリと同様にファイルの複数のバージョンが保存されていますが、ある時点で作業することが可能なのは一つのバージョンだけです。そしてこれはワーキングコピーと呼ばれています (<command>git checkout</command> を使えば、ワーキングコピーを他のバージョンに切り替えることが可能です)。Git を使うことで、ワーキングコピーに対して行われた変更内容を表示したり (<command>git diff</command>)、バージョン履歴に新しいエントリを追加してリポジトリ内にワーキングコピーの状態を保存したり (<command>git commit</command>)、他のユーザが並行して行った変更内容を含めるためにワーキングコピーを更新したり (<command>git pull</command>)、後から簡単に構成を呼び出すことができるように履歴内に特定の構成の状態を保存したり (<command>git tag</command>)、することが可能です。</para>

	  <para>Git を使うことで、あるプロジェクトの各バージョン同士を干渉させることなく、複数の並行バージョンを簡単に取り扱うことが可能になります。これは<emphasis>ブランチ (枝)</emphasis> と呼ばれています。このように木で例えることはかなり正確です、なぜならプログラムは同じトランク (幹) に対して開発が始まっているからです。節目 (バージョン 1.0 など) に到達したら、2 つのブランチで開発が続けられます。具体的に言えば、開発ブランチでは次のメジャーリリースを準備し、メンテナンスブランチではバージョン 1.0 に対する更新と修正を管理します。</para>

          <indexterm><primary sortas="バージョンカンリシステム (VCS)">バージョン管理システム (VCS)</primary></indexterm>
          <para>Git は現在最も人気のあるバージョン管理システムですが、Git 以外にバージョン管理システムの選択肢がないというわけではありません。歴史的に言えば、CVS (並行バージョンシステム) が初めて広く使われたツールでした。しかし、CVS にあった数多くの制限により、さらに現代的で自由なバージョン管理システムが開発されることになりました。これらの中では特に <command>subversion</command> (<command>svn</command>)、<command>git</command>、<command>bazaar</command> (<command>bzr</command>)、<command>mercurial</command> (<command>hg</command>) が有名です。<ulink type="block" url="http://www.nongnu.org/cvs/" /><ulink type="block" url="http://subversion.apache.org/" /><ulink type="block" url="http://git-scm.com/" /><ulink type="block" url="http://bazaar.canonical.com/" /><ulink type="block" url="http://mercurial.selenic.com/" /></para>
          <indexterm><primary><command>subversion</command></primary></indexterm>
          <indexterm><primary><command>svn</command></primary></indexterm>
          <indexterm><primary><command>git</command></primary></indexterm>
          <indexterm><primary><command>bzr</command></primary></indexterm>
          <indexterm><primary><command>hg</command></primary></indexterm>
          <indexterm><primary><command>mercurial</command></primary></indexterm>
          <indexterm><primary><command>cvs</command></primary></indexterm>
        </sidebar>

	<para>Debian は自分用に小さなソフトウェアを開発し続けていますが、一部のプログラムは重要な役割を担っており、そのようなプログラムの名声は Debian プロジェクトよりも大きく広がっています。Debian パッケージ管理プログラムの <command>dpkg</command> (実際のところ、これは Debian PacKaGe の 略称で、「dee-package」と発音されます) と、任意の Debian パッケージとそのパッケージが依存しているパッケージを、更新後のシステムの継続性を保障しながら、自動的にインストールする <command>apt</command> (名前は Advanced Package Tool の頭字語) がそのよい例です。一方で、これらのプログラムの働きを全面的に理解するには極めて高いプログラミング能力が必要であるため、チームの規模は極めて小さなものです。</para>

	<para>Debian インストールプログラム <command>debian-installer</command> の開発チームは最も重要なチームです。2001 年の構想以来ずっと、開発チームは極めて重要度の高い作業を達成し続けています。たくさんの異なるアーキテクチャに Debian をインストールできるたった 1 つのプログラムを書くのは難しいため、数多くの貢献者が必要でした。それぞれのアーキテクチャではそれぞれ異なる起動メカニズムと異なるブートローダを使っています。この作業のすべては Cyril Brulebois の指揮の下 <email>debian-boot@lists.debian.org</email> メーリングリストで組織的に行われています。<ulink type="block" url="http://www.debian.org/devel/debian-installer/" /><ulink type="block" url="http://joeyh.name/blog/entry/d-i_retrospective/" /></para>

	<para><command>debian-cd</command> プログラム (とても小さい) のチームはさらにいっそう控えめな目的を持っています。数多くの「小」貢献者は自分が担当しているアーキテクチャに対して責任を負っています。なぜなら主開発者はアーキテクチャに固有のすべての細かな差異や CD-ROM からインストーラを起動する正確な方法を知ることはできないからです。</para>

	<para>多くのチームは他のチームと一緒にパッケージングを行わなければいけません。たとえば <email>debian-qa@lists.debian.org</email> は Debian プロジェクトのあらゆるレベルで品質を保証しようと試みます。<email>debian-policy@lists.debian.org</email> メーリングリストはあちこちからの提案に従って Debian ポリシーを成長させます。アーキテクチャごとの違いに対して責任を負うチーム (<email>debian-<replaceable>architecture</replaceable>@lists.debian.org</email>) はすべてのパッケージをコンパイルし、必要ならばパッケージを自分たちが担当しているアーキテクチャに適合するよう書き換えます。</para>

	<para>メンテナンスを保証する際に 1 チームの負担が大きくなりすぎないよう、最も重要なパッケージに対しては別のチームが管理しています。そのようなケースとして、C ライブラリと <email>debian-glibc@lists.debian.org</email>、C コンパイラと <email>debian-gcc@lists.debian.org</email>、Xorg と <email>debian-x@lists.debian.org</email> (このグループは X Strike Force としても知られています) の関係が挙げられます。</para>
      </section>
    </section>
  </section>

  <section id="sect.follow-debian-news">
    <title>Debian ニュースを追いかける</title>

    <para>既に述べた通り、Debian プロジェクトは極めて分散的で有機的な方法で発展しています。その結果、プロジェクトの内部で起きた出来事について絶えず情報を得るようにすると、終わらない洪水のような通知に圧倒されるかもしれません。</para>

    <para>Debian に関する最も重要なニュースだけを知りたいのなら、<email>debian-announce@lists.debian.org</email> メーリングリストを購読することをお勧めします。このメーリングリストは極めて流量が少なく (1 年に数通程度)、たとえば新しい安定版のリリース、新しいプロジェクトリーダーの選挙、年 1 回の Debian カンファレンスなど、最重要の発表だけが載せられます。<ulink type="block" url="https://lists.debian.org/debian-announce/" /></para>

    <indexterm><primary>Debian プロジェクトニュース</primary></indexterm>
    <para>Debian に関するより一般的 (定期的) なニュースは <email>debian-news@lists.debian.org</email> を通じて送られます。このメーリングリストの流量もまた極めて合理的 (通常 1 カ月に数通) で、準定期的な「Debian プロジェクトニュース (DPN)」はこのメーリングリストを通じて発信されます。プロジェクトニュースには、プロジェクトで起きたことに関するさまざまなちょっとした情報が載せられています。<ulink type="block" url="https://lists.debian.org/debian-news/" /></para>

    <sidebar>
      <title><emphasis>COMMUNITY</emphasis> 広報チーム</title>
      <para>Debian 公式の連絡チャンネルは Debian 広報チームのボランティアによって管理されています。広報チームのメンバーは Debian プロジェクトリーダーの代理人であり、連絡チャンネルに投稿されたニュースと告知をチェックしています。その他の多くのボランティが広報チームに貢献しています。たとえば、「Debian プロジェクトニュース」の記事を書いたり、マイクロブログサービス (<ulink url="https://micronews.debian.org/">micronews.debian.org</ulink>) を盛り上げることで貢献しています。<ulink type="block" url="https://wiki.debian.org/Teams/Publicity" /></para>
    </sidebar>

    <para>Debian の進化およびある時点に個々のチームで何が起きているのかについてより詳しい情報を得るには、<email>debian-devel-announce@lists.debian.org</email> メーリングリストを参照してください。その名前が意味する通り、送られてくる告知は恐らく開発者がより興味を持ちそうなものでしょう、しかしこのメーリングリストを使って、関係者はより具体的なチームで起きていることに対して常に (安定版がリリースされた時だけでなく) 目を離さないでいることも可能です。<email>debian-announce@lists.debian.org</email> はユーザが見ることができる結果についてニュースを配信するのに対して、<email>debian-devel-announce@lists.debian.org</email> はその結果がどのようにして引き起こされたかについてニュースを配信します。注釈として、「d-d-a」(<email>debian-devel-announce@lists.debian.org</email> は時々そう呼ばれます) だけは Debian 開発者ならば誰でも必ず購読しなければいけません。<ulink type="block" url="https://lists.debian.org/debian-devel-announce/" /></para>

    <para>Debian の公式ブログ (<ulink url="https://bits.debian.org">bits.debian.org</ulink>) もまた良い情報源の一つです。公式ブログは興味深いニュースのほとんどを取り上げています。ニュースの中には広報チームが注目しているさまざまなメーリングリストで発表されたニュースやコミュニティメンバーが寄稿したその他の重要なニュースなどがあります。すべての Debian 開発者は発表に値すると感じたニュースを寄稿することが可能です。このため、プロジェクト全体に注目しているとは言うものの、Debian の公式ブログは有益な本質を提供しています。</para>

    <indexterm><primary>Planet Debian</primary></indexterm>
    <para>Planet Debian にはより非公式な情報ソースがあり、Debian 貢献者が自分のブログに投稿した記事が収集されています。収集されるブログ記事の内容は Debian 開発の話題に限ったものではありませんが、貢献者たちは、コミュニティの中で何が起きているか、メンバーが何をする予定であるか、について見解を示します。<ulink type="block" url="https://planet.debian.org/" /></para>

    <indexterm><primary>マイクロブログ</primary></indexterm>
    <indexterm><primary>Identi.ca</primary></indexterm>
    <indexterm><primary>Twitter</primary></indexterm>
    <indexterm><primary>Facebook</primary></indexterm>
    <indexterm><primary>Google+</primary></indexterm>
    <indexterm><primary>ソーシャルネットワーク</primary></indexterm>
    <indexterm><primary>ネットワーク</primary><secondary>ソーシャルネットワーク</secondary></indexterm>
    <para>Debian プロジェクトはソーシャルネットワーク上でも頻繁に活動しています。Debian の公式アカウントが存在するソーシャルネットワークサービスはフリーソフトウェアで作り上げられたサービス (<emphasis>pump.io</emphasis> で動く Identi.ca マイクロブログサービス) だけですが、多くの Debian 貢献者が Twitter アカウント、Facebook ページ、Google+ ページなどを盛り上げています。<ulink type="block" url="https://identi.ca/debian" /><ulink type="block" url="https://twitter.com/debian" /><ulink type="block" url="https://www.facebook.com/debian" /><ulink type="block" url="https://plus.google.com/111711190057359692089" /></para>
  </section>

  <section id="sect.role-of-distributions">
    <title>ディストリビューションの役割</title>
    <indexterm><primary>Linux ディストリビューション</primary><secondary sortas="ヤクワリ">役割</secondary></indexterm>

    <para>GNU/Linux ディストリビューションには 2 つの目標があります。すなわち、自由なオペレーティングシステムをコンピュータにインストールすること (既にシステムが存在しているか否かは関係ありません)、そしてすべてのユーザからの必要性を満足する広範なソフトウェアを提供すること、です。</para>
    <section>
      <title>インストーラ、<command>debian-installer</command></title>

      <para><command>debian-installer</command> は可能な限り一般性を保ちつつモジュール式に設計されており、上で述べた 1 つ目の目標を達成しています。<command>debian-installer</command> は多様なインストール状況に対応しており、一般に、特定の事例向けに作られた派生物がインストーラを作成することを非常に容易にしています。</para>

      <para><command>debian-installer</command> はそのモジュール性のためにとても複雑なものになっており、開発者が <command>debian-installer</command> の詳細を探ることが難しくなっているかもしれません。しかし、グラフィカルとテキストモードのどちらを使っても、ユーザ体験は同じ状態が保たれています。インストール時に感じる疑問の数を減らすために、多大な努力が費やされました。特に自動ハードウェア検出ソフトウェアはこれに大きく貢献しました。</para>

      <para>ここで興味を持って注目すべき点は、Debian から派生したディストリビューションは一般化と全く違う姿勢を取り、提供するインストーラをさらに制限して (i386 と amd64 アーキテクチャに限定していることが多いです)、初心者にとってさらに使いやすくしているという点です。他方で、パッケージの中身に関して言えば、派生ディストリビューションはこれを改変し過ぎないようにしています。なぜなら、そうすることで提供されているさまざまなソフトウェアから互換性問題を起こさずに可能な限り大きな恩恵を受けることができるからです。</para>
    </section>
    <section>
      <title>ソフトウェアライブラリ</title>

      
      <para>量的な意味で、25,000 を超えるソースパッケージを備える Debian がリーダーなのは間違いありません。質的な意味で、Debian の安定度と整合性の評判を支えているのは Debian のポリシーと新しい安定版のリリース前に設けられる長いテスト期間のおかげであることは間違いありません。入手可能性に関する限り、Debian のすべては世界中に存在する多くのミラーを通じてオンライン上で入手でき、更新は 6 時間ごとに配信されます。</para>

      <para>多くの小売業者がインターネット上で DVD-ROM を極めて低価格 (通常実費のみ) で販売していますし、この CD-ROM「イメージ」は自由にダウンロードすることも可能です。Debian の欠点は 1 つしかありません。すなわち、新しい安定版のリリース頻度が低いことです (開発には 2 年以上かかる場合もあります)。この欠点により新しいソフトウェアが導入される時期が後ろにずれます。</para>

      <para>新しいフリーソフトウェアプログラムの多くは素早く開発版に組み込まれます。こうすることで開発版では新しいソフトウェアをインストールできます。新しいソフトウェアを組み込むために数多くの依存パッケージを更新しなければいけない状況の場合、Debian の安定版用にプログラムを再コンパイルすることも可能です (この話題に関するより詳しい情報は<xref linkend="debian-packaging" />を参照してください)。</para>
    </section>
  </section>
  <section id="sect.release-lifecycle">
    <title>リリースライフサイクル</title>
    <indexterm><primary>ライフサイクル</primary></indexterm>
    <indexterm><primary sortas="フアンテイバン"><emphasis role="distribution">不安定版</emphasis></primary></indexterm>
    <indexterm><primary sortas="テストバン"><emphasis role="distribution">テスト版</emphasis></primary></indexterm>
    <indexterm><primary sortas="アンテイバン"><emphasis role="distribution">安定版</emphasis></primary></indexterm>
    <indexterm><primary sortas="ジッケンバン"><emphasis role="distribution">実験版</emphasis></primary></indexterm>
    <indexterm><primary sortas="キュウアンテイバン"><emphasis role="distribution">旧安定版</emphasis></primary></indexterm>
    <indexterm><primary sortas="ゼンキュウアンテイバン"><emphasis role="distribution">前旧安定版</emphasis></primary></indexterm>

    <para>Debian プロジェクトはある時点でそれぞれのプログラムの 3 種類から 6 種類の異なるバージョンを持っており、<emphasis role="distribution">実験版</emphasis>、<emphasis role="distribution">不安定版</emphasis>、<emphasis role="distribution">テスト版</emphasis>、<emphasis role="distribution">安定版</emphasis>、<emphasis role="distribution">旧安定版</emphasis>、<emphasis role="distribution">前旧安定版</emphasis>、のように名づけられています。各バージョンは開発の異なる段階に相当します。違いを十分に理解するために、どのような順序でプログラムが最初のパッケージングから Debian の安定版に組み込まれるかを見てみましょう。</para>

    <sidebar>
      <title><emphasis>VOCABULARY</emphasis> リリース</title>
      <indexterm><primary>リリース</primary></indexterm>

      <para>Debian プロジェクトにおいて「リリース」という用語はディストリビューションの特定のバージョンを示しています (たとえば「不安定リリース」は「不安定版」を意味しています)。さらに、新しいバージョン (安定版) の公開を一般に発表することも意味しています。</para>
    </sidebar>
    <section>
      <title><emphasis role="distribution">実験版</emphasis>状態</title>

      <para>最初に特殊な例である<emphasis role="distribution">実験版</emphasis>ディストリビューションについて見てみましょう。具体的に言えば、これは現在開発中のソフトウェアに相当する Debian パッケージのグループで、名前の示す通り開発を終えている必要はありません。すべてのパッケージがこのステップを踏む必要はありませんが、一部の開発者はより経験豊富な (優れた) ユーザからのフィードバックを得るためにパッケージをここに追加します。</para>

      <para>別の側面から話をすると、<emphasis role="distribution">実験版</emphasis>ディストリビューションは基盤パッケージに対する重要な変更を組み込む際によく使われます。この変更にバグが含まれていた場合、その基盤パッケージを<emphasis role="distribution">不安定版</emphasis>に組み込むと深刻な影響をおよぼすかもしれません。そんなわけで、<emphasis role="distribution">実験版</emphasis>は完全に隔離されたディストリビューションになっており、<emphasis role="distribution">実験版</emphasis>に含まれるパッケージは決して他のバージョンに移行することはありません (メンテナまたは ftpmaster からの介入という例外を除きます)。また、<emphasis role="distribution">実験版</emphasis>は自己完結していません。具体的に言えば、<emphasis role="distribution">実験版</emphasis>の中には既存のパッケージの一部だけが含まれており、基盤システムは含まれません。それゆえ<emphasis role="distribution">実験版</emphasis>は通常、<emphasis role="distribution">不安定版</emphasis>などの自己完結している他のディストリビューションと組み合わせて利用されます。</para>
    </section>
    <section>
      <title><emphasis role="distribution">不安定版</emphasis>状態</title>

      <para>典型的なパッケージの場合に戻りましょう。メンテナが<emphasis role="distribution">不安定版</emphasis>用にコンパイルされた最初のパッケージを作成し、<literal>ftp-master.debian.org</literal> サーバに置きます。その後、ftpmaster がパッケージを検査検証します。その後、ソフトウェアは<emphasis role="distribution">不安定版</emphasis>ディストリビューションで利用できるようになります。<emphasis role="distribution">不安定版</emphasis>ディストリビューションは深刻なバグを心配するよりも、最新のパッケージを使うことを望むユーザが使う「最先端の」ディストリビューションです。そのようなユーザが最新のプログラムを見つけてテストします。</para>

      <para>ユーザはバグに遭遇すると、バグをパッケージメンテナに報告します。メンテナは定期的に修正済みバージョンを用意し、<literal>ftp-master.debian.org</literal> サーバにアップロードします。</para>

      <para>新たに更新されたパッケージはすべて、6 時間以内に世界中に存在するすべての Debian アーカイブミラーで更新されます。そしてユーザが修正をテストし、変更したことで生じる別の問題を探します。いくつかの更新は素早くなされるかもしれません。これらの間に自動ビルドロボットが活動を始めます。多くの場合、メンテナは古い PC を一台だけ持っており、amd64 (または i386) アーキテクチャで自分が担当しているパッケージをコンパイルしています (メンテナが source-only アップロードを選択した場合、パッケージのコンパイルは必要ありません)。自動ビルドロボットはコンパイル作業を引き受け、すべての他のアーキテクチャ向けのバージョンを自動的にコンパイルします。いくつかアーキテクチャではコンパイルが失敗するかもしれません。その場合、メンテナは問題の内容を含んだバグ報告を受け取り、このバグは次のバージョンで修正されます。問題となっているアーキテクチャの専門家がバグを発見した場合、そのバグ報告にはすぐに使えるパッチが添えられているかもしれません。</para>
      <indexterm><primary sortas="ジドウビルドロボット">自動ビルドロボット</primary></indexterm>

      <figure>
        <title>自動ビルドロボットによるパッケージのコンパイル</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/autobuilder.png" scalefit="1" width="75%" />
          </imageobject>
        </mediaobject>
      </figure>

      <sidebar>
        <title><emphasis>QUICK LOOK</emphasis> <command>buildd</command>、Debian パッケージ再コンパイルロボット</title>
        <indexterm><primary><command>buildd</command></primary></indexterm>
        <indexterm><primary>ビルドデーモン</primary></indexterm>

	<para><emphasis>buildd</emphasis> は「ビルドデーモン」の略語です。<emphasis>buildd</emphasis> は Debian パッケージの新しいバージョンを自分が稼働しているアーキテクチャ上で自動的に再コンパイルします (可能な限りクロスコンパイルを避けます)。</para>

	<para>このため、<literal>arm64</literal> アーキテクチャ用のバイナリを作成するために、Debian プロジェクトは <literal>arm64</literal> マシンを利用できる状態にしています。<emphasis>buildd</emphasis> プログラムはマシン上で常に起動しており、Debian 開発者の送信したソースパッケージから <literal>arm64</literal> 用のバイナリパッケージを作成します。</para>

	<para><emphasis>buildd</emphasis> というソフトウェアは Debian 向けの自動ビルドロボットを提供しているすべてのコンピュータで使われます。転じて、<emphasis>buildd</emphasis> という用語はこれらのマシンを表すために使われることが多く、ほとんどの場合これらのマシンは自動ビルド専用機として準備されています。</para>
      </sidebar>
    </section>
    <section>
      <title><emphasis role="distribution">テスト版</emphasis>への移行</title>

      <para>しばらくするとパッケージは成熟するでしょう。さらにすべてのアーキテクチャ上でパッケージがコンパイルされ、パッケージに対して最後に行った変更から十分な時間が経過するでしょう。こうなると、そのパッケージは将来<emphasis role="distribution">テスト版</emphasis>ディストリビューションに組み込まれる対象になります。つまり<emphasis role="distribution">不安定版</emphasis>に含まれる一部のパッケージは定量化できる基準に従って選ばれます。毎日あるプログラムが、以下に示す一定の品質水準を保証する要素を基に、<emphasis role="distribution">テスト版</emphasis>に組み込むためのパッケージを自動的に選びます。</para>
      <orderedlist>
        <listitem>
	  <para>深刻なバグがないこと、もしくは現時点で<emphasis role="distribution">テスト版</emphasis>に組み込まれているバージョンよりもバグの数が少ないこと。</para>
        </listitem>
        <listitem>
	  <para><emphasis role="distribution">不安定版</emphasis>に組み込まれてから少なくとも 10 日が経過していること。10 日という時間は深刻な問題が発見されて報告されるのに十分な時間です。</para>
        </listitem>
        <listitem>
	  <para>公式にサポートされているすべてのアーキテクチャ上でコンパイルに成功していること。</para>
        </listitem>
        <listitem>
	  <para><emphasis role="distribution">テスト版</emphasis>で依存関係が満たされていること。依存関係が満たされていない場合、依存パッケージの準備ができ次第そのパッケージと一緒に<emphasis role="distribution">テスト版</emphasis>に組み込まれます。</para>
        </listitem>
      </orderedlist>

      <para>この移行システムが完全無欠でないことは明らかです。それどころか、深刻なバグは通常<emphasis role="distribution">テスト版</emphasis>に組み込まれたパッケージから見つかります。とは言うものの、この移行システムは有効です。さらに<emphasis role="distribution">テスト版</emphasis>は<emphasis role="distribution">不安定版</emphasis>に比べて問題がはるかに少なく、多くの人にとって安定性と新規性の良い妥協案です。</para>

      <sidebar>
        <title><emphasis>NOTE</emphasis> <emphasis role="distribution">テスト版</emphasis>の制限</title>

	<para><emphasis role="distribution">テスト版</emphasis>は原理的には極めて面白いのですが、<emphasis role="distribution">テスト版</emphasis>には実用上いくつかの問題があります。具体的には、単一のパッケージがパッケージ間の相互依存性のもつれを完全に独力で解決するのはほぼ不可能であるという問題です。パッケージ同士が互いに依存し合っていると、数多くのパッケージを同時に移行することが必要になる場合がありますが、一部の依存パッケージが定期的に更新されていると、それは不可能です。一方で、関連するパッケージ群を識別するスクリプトが関連パッケージのリストを作成しようと熱心に働いています (スクリプトは NP 完全問題を解いているのですが、ありがたいことに、いくつかの良い経験則が知られています)。そのため、このスクリプトに手作業で情報を渡したり手引することでリスト結果に影響をおよぼすことが可能です。具体的には、スクリプトに対してパッケージのグループを示唆したり一時的に依存関係が壊れることになったとしても特定のパッケージをあるグループ内に含めるよう強要することで、これを行います。この機能はリリースマネージャとその助手でも利用しやすいものです。</para>

	<para>NP 完全問題はデータのサイズ (コードの長さ (桁数) や関連する要素の数が含まれます) によってはアルゴリズムに指数関数的な複雑性があるということを思い出してください。NP 完全問題を解く唯一の方法はすべての可能性を頻繁に検査することですが、そうするには膨大な財力が必要です。経験則で得られるのは近似解ですが十分な解です。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>COMMUNITY</emphasis> リリースマネージャ</title>
        <indexterm><primary>リリースマネージャ</primary></indexterm>
        <indexterm><primary sortas="アンテイバンリリースマネージャ">安定版リリースマネージャ</primary></indexterm>

	<para>リリースマネージャは重い責任を伴う重要な役職です。事実上、リリースマネージャが新しい Debian 安定版のリリースを管理し、<emphasis role="distribution">テスト版</emphasis>が<emphasis role="distribution">安定版</emphasis>の品質基準に達するまでの開発工程を決めます。さらにリリースマネージャは暫定的な (必ずしも従う必要はない) スケジュールも定義します。</para>

	<para>安定版リリースマネージャ (通常 SRM と略されます) は現在の Debian 安定版に対する更新を管理、選別します。安定版リリースマネージャはセキュリティパッチを組み込み、個々の場合に応じて、安定版に含まれるパッケージをしきりに更新したいと感じている Debian 開発者から送られてくるすべての組み込み提案を検査します。</para>
      </sidebar>
    </section>
    <section>
      <title><emphasis role="distribution">テスト版</emphasis>から<emphasis role="distribution">安定版</emphasis>への昇格</title>

      <para>われわれのパッケージが今現在<emphasis role="distribution">テスト版</emphasis>に組み込まれたと仮定しましょう。パッケージに改善の余地がある限り、パッケージのメンテナはそのパッケージを改善し続け、<emphasis role="distribution">不安定版</emphasis>からの一連の手順を最初からやり直さなければいけません (その後<emphasis role="distribution">テスト版</emphasis>までは素早く組み込まれることが多いです。ただしこれはパッケージが大きく修正されておらず、すべての依存関係が<emphasis role="distribution">テスト版</emphasis>で満たされている場合に限ります)。パッケージが完成の域に達すると、メンテナの作業は完了です。次のステップは<emphasis role="distribution">安定版</emphasis>ディストリビューションへの組み込みです、実際のところこれはリリースマネージャが選んだ時点における<emphasis role="distribution">テスト版</emphasis>の単純なコピーです。理想的にはこの決断はインストーラの準備が整った時点、そしてすべての<emphasis role="distribution">テスト版</emphasis>に含まれるプログラムで既知の致命的バグが解決された時点に行われます。</para>

      <para>実際にはこのような理想的瞬間は絶対に来ないので、Debian は妥協しています。具体的に言えば、メンテナが時間通りにバグを修正できなかったパッケージを削除したり、多数のプログラムが数個のバグを抱えた状態でディストリビューションをリリースすることに同意したりします。リリースマネージャは事前にフリーズ期間をアナウンスし、<emphasis role="distribution">テスト版</emphasis>への更新はこの期間中に承認されなければいけません。フリーズ期間を設ける目的は、バージョンが新しくなる更新 (と新たなバグの混入) を禁止し、現在のバージョンに対するバグ修正の更新だけを受け入れることです。</para>

      <figure>
        <title>パッケージがさまざまな Debian バージョンの間を移行される様子</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/release-cycle.png" width="60%" />
          </imageobject>
        </mediaobject>
      </figure>

      <sidebar>
        <title><emphasis>VOCABULARY</emphasis> フリーズ: 最終工程</title>
        <indexterm><primary>フリーズ</primary></indexterm>

	<para>フリーズ期間中には<emphasis role="distribution">テスト版</emphasis>ディストリビューションの開発が妨げられ、更新が自動的に行われなくなります。フリーズ期間中にはリリースマネージャだけが、自身の基準に従って、パッケージを変更する権限を持っています。この目的は新しいバージョンによって新しいバグが混入するのを防ぐことにあります。加えて、更新は完全に検査され、重大なバグの修正を除き変更は認められません。</para>
      </sidebar>

      <para>新しい安定版がリリースされるとそれ以降は、安定版リリースマネージャが安定版に対するすべての追加的開発を管理します (追加的開発は「リビジョン」と呼ばれます。たとえばバージョン 7 のリビジョンは 7.1、7.2、7.3 などです)。これらの更新にはすべてのセキュリティパッチおよび最も重要と判断された修正が体系的に組み込まれています (パッケージのメンテナが安定版に修正を組み込んでもらうためには修正を望む問題の重大性を安定版リリースマネージャに証明しなければいけません)。</para>

      <para>最後に、仮想パッケージが安定版ディストリビューションに組み込まれます。ここに到達するまでには大変な苦労があり、Debian 安定版のリリースが極めてゆっくりと進む理由がお分かりになったと思います。安定版リリースの遅さは品質評価に貢献します。しかも、大多数のユーザは同時に利用できる 3 つのディストリビューションのうち 1 つを使えば満足です。システム管理者は、何よりもまず彼らのサーバの安定性を重要視しており、最新バージョンの GNOME は必要ありません。従ってシステム管理者は Debian <emphasis role="distribution">安定版</emphasis>を選んで、それに満足するでしょう。エンドユーザは、強固な安定性よりも最新バージョンの GNOME や KDE Plasma に興味があり、Debian <emphasis role="distribution">テスト版</emphasis>を選ぶでしょう。<emphasis role="distribution">テスト版</emphasis>は深刻な問題が少なく、比較的新しいソフトウェアが使えるという意味で<emphasis role="distribution">安定版</emphasis>と<emphasis role="distribution">不安定版</emphasis>の良い妥協点です。最後に、開発者と経験豊富なユーザが先駆者となり、Debian <emphasis role="distribution">不安定版</emphasis>になされたすべての最新の開発を真っ先にテストし、面倒事とプログラムの新しいバージョンにつきものであるバグに苦しむという危険を冒します。人それぞれ好みの Debian があるのです!</para>

      <sidebar>
        <title><emphasis>CULTURE</emphasis> GNOME と KDE Plasma、グラフィカルデスクトップ環境</title>

	<para>GNOME (GNU Network Object Model Environment) と KDE が開発した Plasma はフリーソフトウェア世界で最も人気のあるグラフィカルデスクトップ環境です。デスクトップ環境とは、グラフィカルインターフェースに対する最も一般的な操作を簡単に管理できるようにするための、プログラム集です。一般にデスクトップ環境には、ファイルマネージャ、オフィススイート、ウェブブラウザ、電子メールプログラム、マルチメディアアクセサリなどが含まれています。最も明らかな違いは使用しているグラフィカルライブラリの違いにあります。具体的に言えば、GNOME は GTK+ (LGPL のフリーソフトウェア) を使い、KDE コミュニティは Qt (企業が支援するプロジェクト、現在は GPL と商用ライセンスの両方で利用できます) を使っています。<ulink type="block" url="https://www.gnome.org/" /><ulink type="block" url="https://www.kde.org/" /></para>
      </sidebar>

      <figure>
        <title>Debian によってパッケージングされたプログラムが時系列順に通過する経路</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/package-lifecycle.png" scalefit="1" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
    <section>
      <title><emphasis role="distribution">旧安定版</emphasis>と<emphasis role="distribution">前旧安定版</emphasis>状態</title>
      <indexterm><primary sortas="チョウキサポート (LTS)">長期サポート (LTS)</primary></indexterm>
      <indexterm><primary>サポート</primary><secondary sortas="チョウキサポート (LTS)">長期サポート (LTS)</secondary></indexterm>
      <para>各<emphasis role="distribution">安定版</emphasis>リリースの寿命は約 5 年と予定されており、<emphasis role="distribution">安定版</emphasis>は 2 年ごとにリリースされます。ある時点において最大で 3 種類のサポートされるリリースが存在することになります。新しい安定版がリリースされた時点で、古い安定版は<emphasis role="distribution">旧安定版</emphasis>になり、さらに旧安定版は<emphasis role="distribution">前旧安定版</emphasis>になります。</para>
      <para>Debian リリースの長期サポート (LTS) は最近の新たな取り組みです。Debian LTS チームの設立には Debian LTS プロジェクトに参加している各貢献者と企業が懸命に取り組みました。Debian セキュリティチームがサポートしない古いリリースはこの新しい Debian LTS チームの管理下に移ります。</para>
      <para>Debian セキュリティチームは現在の<emphasis role="distribution">安定版</emphasis>リリースと<emphasis role="distribution">旧安定版</emphasis>リリースのセキュリティサポートを担当します (旧安定版に対してサポートが保証される期間は現在の安定版のリリース後 1 年間です)。Debian セキュリティチームによるセキュリティサポート期間は各リリースにつきおよそ 3 年間になります。Debian LTS チームはセキュリティサポートの最後の 2 年間を担当します。そうすれば各リリースは少なくとも 5 年間のサポートを受けることが可能ですし、ユーザはバージョン N から N+2 にアップグレードを行うことが可能になります。<ulink type="block" url="https://wiki.debian.org/LTS" /></para>
      <sidebar>
        <title><emphasis>COMMUNITY</emphasis> LTS の取り組みを支援する企業</title>
        <para>長期サポートは Debian が行うには難しい約束です。なぜなら、ボランティアは面白くない作業を避ける傾向にあるからです。さらに、5 年前のソフトウェアのセキュリティサポートを提供することは、多くの貢献者にとって、新しい上流開発版のパッケージングや新しい機能の開発に比べればずっとつまらない作業です。</para>
        <para>Debian LTS プロジェクトを実現させるために、Debian LTS プロジェクトはある事実に期待しました。それは、長期サポートは特に企業にとって重要であり、企業は喜んでセキュリティサポートのコストを負担するという事実です。</para>
        <para>Debian LTS プロジェクトは 2014 年 6 月に始まりました。一部の組織は雇用者が Debian LTS プロジェクトに非常勤で貢献することを認めていますし、また別の組織は対価を支払わない限りどの Debian 貢献者も関心を寄せることのないような作業に対価を支払うことにより Debian LTS プロジェクトを資金面で援助しています。LTS に関する作業に対価を望む多くの Debian 貢献者が Freexian (Raphaël Hertzog の企業) の下に集まり、明確な資金援助の枠組みが作成されました。<ulink type="block" url="https://www.freexian.com/services/debian-lts.html" /></para>
        <para>Debian LTS チーム内でも、ボランティアは自分が関心をもつパッケージに対して作業しますが、有給の貢献者は自分の出資者が使っているパッケージを優先して作業します。</para>
        <para>Debian LTS プロジェクトは常に新しい出資者を探しています。読者の皆様の企業はどうですか? 読者の皆様は雇用者が長期サポートに非常勤で作業することを認めることが可能ですか? セキュリティサポートにわずかな予算を割り当てることが可能ですか?<ulink type="block" url="https://wiki.debian.org/LTS/Funding" /></para>
      </sidebar>
    </section>
  </section>
</chapter>
