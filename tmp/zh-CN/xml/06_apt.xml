<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="apt" lang="zh-CN">
	<chapterinfo>
		 <keywordset>
			<keyword>高级包管理工具(Advanced Packaging Tool)</keyword>
			 <keyword>apt-get</keyword>
			 <keyword>apt-cache</keyword>
			 <keyword>aptitude</keyword>
			 <keyword>synaptic</keyword>
			 <keyword>sources.list</keyword>
			 <keyword>apt-cdrom</keyword>

		</keywordset>

	</chapterinfo>
	 <title>维护和更新：APT 工具</title>
	 <highlights> <para>
		Debian 之所以如此受系统管理员欢迎，是因为项目提供的软件极易安装，整个系统的更新也极为简单。这一独特的优点主要得归功于 <emphasis>APT</emphasis> 程序，其特性在 Falcot 公司得到系统管理员们热情的研究。
	</para>
	 </highlights> <para>
		<indexterm><primary>APT</primary></indexterm> 是高级软件包管理器 <indexterm><primary>Advanced Package Tool</primary></indexterm> 的缩写。它的‘高级’之处在于对软件包的管理方法不同。APT并不是简单地独立评估每个包，而是将包看做一个整体系统，根据现有的和兼容的已有包找到最佳组合（包括依赖于这个软件包的其他包）。
	</para>
	 <sidebar> <title><emphasis>关键词</emphasis> 软件源和源代码软件包</title>
	 <para>
		<emphasis>源</emphasis>这个词的意思会有一些模糊不清。一个源代码软件包- 是一个包含有源程序代码的包，—不要和软件源相混淆—这是指一个包所在的仓库（网站，FTP服务器，CD-ROM光驱，本地磁盘等等）。
	</para>
	 </sidebar> <para>
		APT需要一个”软件源列表“：文件<filename>/etc/apt/sources.list</filename>会列出发布 Debian 软件包不同的仓库（或软件源）。接下来APT会从每一个软件源导入所发布的软件包列表。这个过程是通过下载 <filename>Packages.xz</filename>或使用不同压缩方法的变体(比如<filename>Packages.gz</filename>或者<filename>.bz2</filename>) )文件（若是二进制包的仓库）和<filename>Sources.xz</filename>文件（若是软件包源的仓库），并分析这两个文件内容。如果文件的旧版本已经存在，APT仅下载更新的部分（参见：sidebar <xref linkend="sidebar.apt-pdiff" />）。
	</para>
	 <indexterm>
		<primary><filename>Packages.xz</filename></primary>
	</indexterm>
	 <indexterm>
		<primary><filename>Sources.xz</filename></primary>
	</indexterm>
	 <sidebar> <title><emphasis>回到基础</emphasis> <command>gzip</command>, <command>bzip2</command>, <command>LZMA</command> 和<command>XZ</command> 压缩</title>
	 <indexterm>
		<primary><command>gzip</command></primary>
	</indexterm>
	 <indexterm>
		<primary><command>bzip2</command></primary>
	</indexterm>
	 <indexterm>
		<primary><command>lzma</command></primary>
	</indexterm>
	 <indexterm>
		<primary><command>xz</command></primary>
	</indexterm>
	 <para>
		文件名后缀<filename>.gz</filename> 表示文件经过<command>gzip</command>工具的压缩。<command>gzip</command> 是一个经典的 Unix 命令，用于快速高效压缩文件。一些新的压缩工具更为有效，但需要更多内存和时间来完成压缩和解压。按照出现的次序，这些工具有：<command>bzip2</command> （生成文件名后缀为<filename>.bz2</filename>），<command>lzma</command>（生成文件名后缀为<filename>.lzma</filename>）和<command>xz</command>（生成文件名后缀为<filename>.xz</filename>）。
	</para>
	 </sidebar> <section id="sect.apt-sources.list">
		<title>写入<filename>sources.list</filename>文件</title>
		 <indexterm>
			<primary><filename>sources.list</filename></primary>
		</indexterm>
		 <indexterm>
			<primary>源</primary>
			<secondary>软件包</secondary>
		</indexterm>
		 <indexterm>
			<primary>软件包</primary>
			<secondary>源</secondary>
		</indexterm>
		 <indexterm>
			<primary><filename>/etc/apt/sources.list</filename></primary>
		</indexterm>
		 <section>
			<title>句法</title>
			 <para>
				<filename>/etc/apt/sources.list</filename> 文件中每个有效的代码行包括对源的描述，由三个被空格分开的部分组成。
			</para>
			 <para>
				第一个区域指示源的类型：
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						“<literal>deb</literal>” 表示二进制软件包，
					</para>

				</listitem>
				 <listitem>
					<para>
						“<literal>deb-src</literal>”表示源代码包。
					</para>

				</listitem>

			</itemizedlist>
			 <para>
				第二个区域表示源的基本 URL （结合文件 <filename>Packages.gz</filename> 中给出的文件名，必须是有效URL的全称）：此区域存在于一个 Debian 镜像或其他任何由第三方所建的软件源文档中。这个 URL 可以用 <literal>file://</literal> 起始来表示系统里安装了本地仓库，或以 <literal>http://</literal> 表示仓库可通过网络服务器来获取，或用 <literal>ftp://</literal> 表示软件源在一个 FTP 服务器上。URL 还可以用 起始表示从 <literal>cdrom:</literal> 开始安装。因基于网络的安装愈来愈流行，这个方法已不那么常用了。
			</para>
			 <para>
				最后这一区域的句法取决于仓库的结构。从最简单的例子开始，你可以很简单地描述一个软件源的子目录 （必须用到结尾处的斜线）（通常用 “<filename>./</filename>” 表示子目录不存在 - 这个软件源就位于给定的 URL上）。 不过一般来讲，仓库的结构类似于一个 Debian 的镜像， 包括很多分支，每一分支有很多组成部分。通常命名选定的分支（由 “codename” 来命名 - 参看附栏中的目录<xref linkend="sidebar.bruce-perens" /> 或是由对应的 “suites” — <literal>stable</literal>, <literal>testing</literal>, <literal>unstable</literal> ），然后命名下面的组成部分（或分区）（从<literal>main</literal>, <literal>contrib</literal> 和<literal>non-free</literal>中选择） 来激活一个典型的 Debian 镜像。
			</para>
			 <sidebar id="sidebar.sections"> <title><emphasis>关键词</emphasis> <literal>main</literal>, <literal>contrib</literal> 和 <literal>non-free</literal> 存档</title>
			 <indexterm>
				<primary>部分</primary>
				<secondary><literal>main</literal></secondary>
			</indexterm>
			 <indexterm>
				<primary><literal>main</literal>,部分</primary>
			</indexterm>
			 <indexterm>
				<primary>部分</primary>
				<secondary><literal>contrib</literal></secondary>
			</indexterm>
			 <indexterm>
				<primary><literal>contrib</literal>, 部分</primary>
			</indexterm>
			 <indexterm>
				<primary>部分</primary>
				<secondary><literal>non-free</literal></secondary>
			</indexterm>
			 <indexterm>
				<primary><literal>non-free</literal>,部分</primary>
			</indexterm>
			 <indexterm>
				<primary>（仓库的）组成 </primary>
			</indexterm>
			 <para>
				Debian 根据开发者所选定的许可声明，使用这三部分来区分不同的软件包。<literal>Main</literal> 收集了完全遵守Debian 免费软件指南的所有软件包。
			</para>
			 <para>
				<literal>non-free</literal> 文档有所不同，它包括没有（ 完全）遵循上述原则，未受约束但仍然被发布的软件。这种文档为使用者提供服务，但不是 Debian 的官方组成部分- 不过 Debian 从来都提倡优先使用自由软件。这类文档的存在代表了一个来自 Richard M. Stallman 的重要问题，也阻碍了自由软件基金会向用户推荐 Debian.
			</para>
			 <para>
				<literal>Contrib</literal> (贡献)是一类没有一些非自由元件就不能正常运作的开源软件。这类元件会是来自非自由 <literal>non-free</literal> 部分的软件， 或非自由文件如游戏 ROMs, 控制台BIOS等。<literal>Contrib</literal> 也包括需要专利元件来编译的自由软件。早先的例子是OpenOffice.org 办公软件套装，曾经需要带专利的 Java 环境来运行。
			</para>
			 </sidebar> <sidebar> <title><emphasis>TIP</emphasis> <filename>/etc/apt/sources.list.d/*.list</filename> 文件</title>
			 <para>
				如果很多个软件包的源库在被引用，将它们分成多个文件会很实用。每一部分存在<filename>/etc/apt/sources.list.d/<replaceable>文件名</replaceable>.list</filename> （参见边栏<xref linkend="sidebar.directory.d" />)。
			</para>
			 </sidebar> <indexterm>
				<primary><command>apt-cdrom</command></primary>
			</indexterm>
			 <para>
				<literal>cdrom</literal> 条目描述了你所有的CD/DVD光盘。 与其他条目不同，因为一个CD光盘需要插入光驱中，并且每次只能读一张，所以并不总是可用。因此这种仓库管理起来稍有不同，需要加在<command>apt-cdrom</command> 程序中，经常与<literal>add</literal> 参数一起执行。后者会要求驱动中插入光盘，并会浏览内容，寻找<filename>Packages</filename> 文件。这些文件会用于更新可用软件包的数据库（此过程由<command>apt update</command> 命令执行）。 自此， 如果某软件包需要光盘，APT 可发出要求插入光驱。
			</para>

		</section>
		 <section>
			<title>给<emphasis role="distribution">Stable</emphasis> 使用者的仓库</title>
			 <para>
				下面是一个标准的<filename>sources.list</filename>文件，它被用于 <emphasis role="distribution">Stable</emphasis> 版本的 Debian 系统：
			</para>
			 <example id="example.stable-sources-list">
				<title><filename>/etc/apt/sources.list</filename> 给 Debian Stable 使用者的文件</title>
				 
<programlisting># Security updates
deb http://security.debian.org/ jessie/updates main contrib non-free
deb-src http://security.debian.org/ jessie/updates main contrib non-free

## Debian mirror

# Base repository
deb http://ftp.debian.org/debian jessie main contrib non-free
deb-src http://ftp.debian.org/debian jessie main contrib non-free

# Stable updates
deb http://ftp.debian.org/debian jessie-updates main contrib non-free
deb-src http://ftp.debian.org/debian jessie-updates main contrib non-free

# Stable backports
deb http://ftp.debian.org/debian jessie-backports main contrib non-free
deb-src http://ftp.debian.org/debian jessie-backports main contrib non-free</programlisting>

			</example>
			 <para>
				此文件列出了 与Debian <emphasis role="distribution">Jessie</emphasis> 版本相关软件包的所有来源（此手册写作当前<emphasis role="distribution">稳定</emphasis>版本）。我们不希望当下一个稳定版本发布时，所有基于它的分支在我们控制范围外被改变，因此决定用“Jessie” 而不是用相对应的 “stable““ 稳定” 的别名（<literal>stable</literal>, <literal>stable-updates</literal>, <literal>stable-backports</literal>）来命名。
			</para>
			 <para>
				大多数软件包来源于“基础仓库”，它拥有所有的软件包，但极少更新（大概每两个月根据“点发布”更新）。其他仓库不完全（不包括所有软件包），不过可以支持更新（软件包是较新版本）。接下来的几章将会介绍这些仓库管理的目的和规则。
			</para>
			 <para>
				请注意，当你所需要的软件包版本存在于几个仓库中时，在文件<filename>sources.list</filename>中所列出的第一个会被使用。因此，非官方来源的包一般在此文件末尾处。
			</para>
			 <para>
				本节提到的<emphasis role="distribution">稳定Stable</emphasis> 对于<emphasis role="distribution">Oldstable</emphasis> 一样适用。后者只是同时维护的较旧<emphasis role="distribution">Stable</emphasis> 版本。
			</para>
			 <section id="sect.security-updates">
				<title>安全更新</title>
				 <indexterm>
					<primary><literal>security.debian.org</literal></primary>
				</indexterm>
				 <indexterm>
					<primary>安全更新</primary>
				</indexterm>
				 <indexterm>
					<primary>更新</primary>
					<secondary>安全更新</secondary>
				</indexterm>
				 <para>
					安全更新一般不在 Debian 镜像通常所在的网络上，而是在<literal>security.debian.org</literal>（位于<link linkend="dsa-team"> Debian 系统管理员Debian System Administrators</link>维护的小范围网络）。其上的文档包括为那些<emphasis role="distribution">稳定</emphasis>版本准备的安全更新（由 Debian 安全团队和/或软件包维护者预备）。
				</para>
				 <para>
					服务器上也有针对<emphasis role="distribution">测试版</emphasis>的安全更新。这类更新经常通过从<emphasis role="distribution">非稳定版</emphasis>流入<emphasis role="distribution">测试版</emphasis>，因此单独存在于服务器上的更新不常见。
				</para>

			</section>
			 <section id="sect.stable-updates">
				<title>稳定更新</title>
				 <indexterm>
					<primary>稳定更新</primary>
				</indexterm>
				 <indexterm>
					<primary><literal>稳定-更新</literal></primary>
				</indexterm>
				 <indexterm>
					<primary>更新</primary>
					<secondary>稳定更新</secondary>
				</indexterm>
				 <para>
					稳定更新对安全性不敏感，在下一个稳定版本点发布前，它还是很重要，需要推送给使用者。
				</para>
				 <para>
					这个仓库的典型例子包括修复在发布前无法修复的严重漏洞和后续更新引入的漏洞。根据紧急性，它还包含长期的软件包更新，比如<emphasis role="pkg">spamassassin</emphasis> 的广告监测规则，<emphasis role="pkg">clamav</emphasis>病毒库，或是各个时区的夏令时规则（<emphasis role="pkg">tzdata</emphasis>）。
				</para>
				 <para>
					实际上，这个仓库是 <literal>计划-更新proposed-updates</literal> 的子库，是由稳定更新管理员小心选定的。
				</para>

			</section>
			 <section id="sect.proposed-updates">
				<title>计划更新</title>
				 <indexterm>
					<primary><literal>计划-更新</literal></primary>
				</indexterm>
				 <indexterm>
					<primary><literal>被提议的稳定更新</literal></primary>
				</indexterm>
				 <para>
					一旦发布，<emphasis role="distribution">稳定</emphasis>分布只每两个月更新一次。接下来的更新在<literal>计划更新</literal>仓库里准备（由稳定发布管理员监督）。
				</para>
				 <para>
					这个仓库中通常有安全更新和稳定更新的文档，还有更多：软件包维护者可能在这里修复一些不需要马上发布的重要的漏洞。
				</para>
				 <para>
					任何人都可以使用这个仓库在正式发布前来检测更新。下面的摘录使用<literal>jessie-proposed-updates</literal>别名。因为<literal>wheezy-proposed-updates</literal> 也存在，别名的使用更清楚更一致（对于<emphasis role="distribution">Oldstable</emphasis>更新来讲）：
				</para>
				 
<programlisting>deb http://ftp.debian.org/debian jessie-proposed-updates main contrib non-free</programlisting>

			</section>
			 <section id="sect.backports">
				<title>向后移植到稳定版(Stable Backports)</title>
				 <indexterm>
					<primary><literal>stable-backports</literal></primary>
				</indexterm>
				 <indexterm>
					<primary>backport</primary>
				</indexterm>
				 <indexterm>
					<primary>updates</primary>
					<secondary>backports</secondary>
				</indexterm>
				 <para>
					<literal>stable-backports</literal>仓库存放“软件包的向后移植版本”。该术语指的是一些近期发布的软件针对旧的发行版重新编译的包，这里所指的旧发行版通常是指<emphasis role="distribution">稳定（Stable）</emphasis>的发行版本。
				</para>
				 <para>
					当发行版本经过一段时间后，大量的软件项目都发布了新的软件版本，但它们都没有整合进入当前的<emphasis role="distrubution">稳定版</emphasis>（它仅接受能够解决最重要问题的那些修改，例如安全问题相关）。因为<emphasis role="distribution">测试版</emphasis>和<emphasis role="distribution">不稳定版</emphasis>均具有一定风险，软件包维护者有时会针对<emphasis role="distribution">稳定版</emphasis>提供近期发布的软件的重新编译版本，这样做可以将可能存在的不稳定因素限制在一小部分经过选择的软件包之间，因而具有一定的优势。 <ulink type="block" url="http://backports.debian.org" />
				</para>
				 <para>
					<literal>stable-backports</literal>仓库与通常的Debian镜像共同存在，但是<emphasis role="distribution">Squeeze</emphasis>对应的仓库仍然在一个单独的服务器（<literal>backports.debian.org</literal>）上存放，且需要增加以下特殊的<filename>sources.list</filename>条目才能使用：
				</para>
				 <indexterm>
					<primary><literal>backports.debian.org</literal></primary>
				</indexterm>
				 
<programlisting>deb http://backports.debian.org/debian-backports squeeze-backports main contrib non-free</programlisting>
				 <para>
					<literal>stable-backports</literal>里的软件包(Backports)通常是从<emphasis role="distribution">Testing</emphasis>版本创建的。这确保一旦下一个稳定的Debian版本可用，所有安装的backports都可以升级到相应的稳定版本。
				</para>
				 <para>
					尽管该仓库提供软件包较新的版本，APT 只会在您给出明确指示的情况下再安装它们（或者除非您已经在系统上安装了对应 backport(向后移植软件）的稍旧的版本）：
				</para>
				 
<screen><computeroutput>$ </computeroutput><userinput>sudo apt-get install <replaceable>package</replaceable>/jessie-backports
</userinput><computeroutput>$ </computeroutput><userinput>sudo apt-get install -t jessie-backports <replaceable>package</replaceable>
</userinput></screen>

			</section>

		</section>
		 <section>
			<title>给<emphasis role="distribution">测试</emphasis>/<emphasis role="distribution">非稳定</emphasis> 版本用户的仓库</title>
			 <para>
				下面是一个标准 <filename>sources.list</filename>文件，用于系统运行 Debian <emphasis role="distribution">测试</emphasis>或<emphasis role="distribution">非稳定</emphasis> 版本：
			</para>
			 <example id="example.testing-sources-list">
				<title>Debian <emphasis role="distribution">Testing</emphasis>/<emphasis role="distribution">Unstable</emphasis> 用户的 <filename>/etc/apt/sources.list</filename>文件</title>
				 
<programlisting>
↵
# Unstable↵
deb http://ftp.debian.org/debian unstable main contrib non-free↵
deb-src http://ftp.debian.org/debian unstable main contrib non-free↵
↵
# Testing↵
deb http://ftp.debian.org/debian testing main contrib non-free↵
deb-src http://ftp.debian.org/debian testing main contrib non-free↵
↵
# Stable↵
deb http://ftp.debian.org/debian stable main contrib non-free↵
deb-src http://ftp.debian.org/debian stable main contrib non-free↵
↵
# Security updates↵
deb http://security.debian.org/ stable/updates main contrib non-free↵
deb http://security.debian.org/ testing/updates main contrib non-free↵
deb-src http://security.debian.org/ stable/updates main contrib non-free↵
deb-src http://security.debian.org/ testing/updates main contrib non-free↵</programlisting>

			</example>
			 <para>
				APT 通过<filename>sources.list</filename> 文件来从<emphasis role="distribution">非稳定</emphasis>安装软件包。如果这不是你所需要的，用<literal>APT::Default-Release</literal> 设置（参见 <xref linkend="sect.apt-upgrade" />）来指示 APT 从另一分布获取软件包（一般用 <emphasis role="distribution">测试</emphasis>）。
			</para>
			 <para>
				应该纳入这些典藏库，即使一个也该这么做。<emphasis role="distribution">测试版</emphasis> 用户将感谢管理者从 <emphasis role="distribution">不稳定版</emphasis> 中挑选修改过的套件，当 <emphasis role="distribution">测试版</emphasis> 受到错误的干扰时。反过来说，被无预期错误干扰的 <emphasis role="distribution">不稳定版</emphasis> 用户，可能降级至他们 (若以此工作) 使用的 <emphasis role="distribution">测试版</emphasis> 套件。
			</para>
			 <para>
				<emphasis role="distribution">稳定版</emphasis> 的内容较有争议，但可接触被发展版移除的套件。同时也确保取得尚未被修改的最新套件。
			</para>
			 <section>
				<title><emphasis role="distribution">实验</emphasis> 仓库</title>
				 <indexterm>
					<primary><emphasis role="distribution">实验</emphasis></primary>
				</indexterm>
				 <para>
					<emphasis role="distribution">实验性</emphasis> 典藏所的套件是所有 Debian 镜射站的内容，包括因为品质关系尚未被纳入 <emphasis role="distribution">不稳定版</emphasis> 的套件 — 通常是发展中的软件版本或前置版 (alpha、beta、待发布…)。修改过的套件多少有点问题，可送至此处。在高端用户的协助下，维护者努力找出该等问题。经过第一阶段后，把套件移至 <emphasis role="distribution">不稳定版</emphasis>，更多的用户以更详细的方式测试它。
				</para>
				 <para>
					不在乎系统崩盘并有能力自行修复的用户，就会取用 <emphasis role="distribution">实验性</emphasis> 的套件。用户导入此等套件并测试其功能、检查是否满足其需求。这就是 Debian 的诉求，加入 APT 的 <filename>sources.list</filename> 内，并不表示该套件可顺利使用，应加入这一个行：
				</para>
				 <informalexample> 
<programlisting>deb http://ftp.debian.org/debian experimental main contrib non-free↵</programlisting>
				 </informalexample>
			</section>

		</section>
		 <section>
			<title>非官方来源： <literal>mentors.debian.net</literal></title>
			 <indexterm>
				<primary><literal>mentors.debian.net</literal></primary>
			</indexterm>
			 <para>
				高级用户们为一些重新编译过的软件建立了众多的非官方的 Debian 软件源(Ubuntu 使用他们的个人包存档服务)，程序员提供他们编写的软件提供给所有人，甚至有 Debian 开发人员在线提供他们的软件包的预版本。
			</para>
			 <para>
				<literal>mentors.debian.net</literal>站点比较有意思（虽然它只提供源码包）。它搜集Debian开发者候选人员制作的软件包，以及那些希望创建Debian软件包又不想经历成为Debian开发者整套流程的那些志愿者的软件包。这些软件包提供时没有任何质量保证；请确保您在将它们用于生产环境之前检查它们的来源和完整性并进行测试。
			</para>
			 <sidebar> <title><emphasis>社区</emphasis> <literal>debian.net</literal> 站点</title>
			 <indexterm>
				<primary><emphasis>debian.net</emphasis></primary>
			</indexterm>
			 <para>
				<emphasis>debian.net</emphasis> 域名不是一个 Debian 项目的官方源。每个 Debian 开发者都可基于自己用途而使用此域名。这些网址包含一些非官方服务（有时为个人站点），其主机不属于项目本身而由 Debian 开发者设置，甚至还有将要迁移到<emphasis>debian.org</emphasis>的项目原型。有两个理由来解释为什么这些项目原型会留在<emphasis>debian.net</emphasis>：或者是没有人做出足够的努力将其迁移到官方服务（ 位于<emphasis>debian.org</emphasis> 域名上，具备一定维护保证），或者是服务争议太大以至于无法官方化。
			</para>
			 </sidebar> <para>
				安装一个包意味着需要给包的创建者以 root 权限，因为其决定了以该身份运行的初始化脚本的内容。官方的 Debian 包由志愿者创建，志愿者经过指派和评估，且能封装软件包，因而软件包的来源与完整性可以确认。
			</para>
			 <para>
				一般地，需当心来源未知以及并非位于官方 Debian 服务器之一上的软件包：评估包创建者的可信度，并检查包的完整性。<ulink type="block" url="http://mentors.debian.net/" />
			</para>
			 <sidebar id="sidebar.snapshot.debian.org"> <title><emphasis>进阶</emphasis>旧包版本： <literal>snapshot.debian.org</literal></title>
			 <indexterm>
				<primary><literal>snapshot.debian.org</literal></primary>
			</indexterm>
			 <para>
				<literal>snapshot.debian.org</literal>服务，于 2010 年 4 月引入，可用于“时间回溯”及查找软件包的旧版本。例如，它可用于识别某个回溯的软件包版本，更具体地，在等待回溯修复时可以回到先前的版本。
			</para>
			 </sidebar>
		</section>
		 <section>
			<title>Debian 软件包 缓存 代理</title>
			 <indexterm>
				<primary>缓存代理</primary>
			</indexterm>
			 <indexterm>
				<primary>缓存，代理</primary>
			</indexterm>
			 <para>
				当一整个网络的机器被配置为使用同样的远程服务器并下载同样的更新包时，管理员会知晓有一个当作网络-本地间缓存器的中介代理是有好处的（参见侧边栏<xref linkend="sidebar.cache" />）。
			</para>
			 <para>
				您可以配置 APT 使用一个“标准”的代理（参见<xref linkend="sect.apt-config" /> 获取 APT 相关内容，参见<xref linkend="sect.http-ftp-proxy" />获取代理相关内容），Debian 体系提供了一个解决问题的更佳手段。本段中所述的专用软件比普通的代理缓存更加智能，因为它们可依赖于 APT 软件源的特定结构（例如，它们了解单独的文件在什么时间废弃与否，并由此来调整在保持阶段的时间）。
			</para>
			 <indexterm>
				<primary><emphasis role="pkg">apt-cacher</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="pkg">apt-cacher-ng</emphasis></primary>
			</indexterm>
			 <para>
				<emphasis role="pkg">apt-cacher</emphasis>与<emphasis role="pkg">apt-cacher-ng</emphasis>的工作方式类似代理缓存服务器。对于外部请求，APT 的<filename>sources.list</filename> 保持不变，但是 APT 被配置为把它们作为代理使用。
			</para>
			 <indexterm>
				<primary><emphasis role="pkg">approx</emphasis></primary>
			</indexterm>
			 <para>
				另一方面，<emphasis role="pkg">approx</emphasis>，工作方式则类似一个 HTTP 服务器，其在它的顶级 URL 地址上“镜像”任意数量的远程软件源。这些顶级目录与远程 URL 之间的映射存储于<filename>/etc/approx/approx.conf</filename>中：
			</para>
			 
<programlisting>
↵
# &lt;name&gt; &lt;repository-base-url&gt;↵
debian   http://ftp.debian.org/debian↵
security http://security.debian.org↵</programlisting>
			 <para>
				<emphasis role="pkg">approx</emphasis> 通过inetd (参见<xref linkend="sect.inetd" />)默认在9999端口运行，并需要用户调整<filename>sources.list</filename> 文件来指向 approx 服务器：
			</para>
			 
<programlisting># 指向本地 approx 服务器的sources.list 范例
deb http://apt.falcot.com:9999/security jessie/updates main contrib non-free
deb http://apt.falcot.com:9999/debian jessie main contrib non-free
</programlisting>

		</section>

	</section>
	 <section id="sect.apt-get">
		<title><command>aptitude</command>、<command>apt-get</command>和 <command>apt</command> 命令</title>
		 <indexterm>
			<primary><command>apt</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>apt-get</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>aptitude</command></primary>
		</indexterm>
		 <para>
			APT 是个原先有图形接口的大计划。以包括核心应用程序的程序库为基础，且包括第一个前端 — 命令行指令 — <command>apt-get</command>。<command>apt</command> 是 APT 的第二个命令行指令包括若干处理错误的 <command>apt-get</command>。
		</para>
		 <para>
			其他众多的图形界面以外部项目形式出现：<command>synaptic</command>，<command>aptitude</command>（它同时包含文本模式界面和图形界面 — 即使尚未完成），<command>wajig</command>，等等。最为推荐的界面，<command>apt</command>，会在本节案例中使用。注意，尽管如此，<command>apt-get</command>与 <command>aptitude</command>的命令行语法也仍与之非常类似。在<command>apt</command>、<command>apt-get</command>、<command>aptitude</command>存在较大差异时，将会详述差异。
		</para>
		 <section>
			<title>开端</title>
			 <para>
				对于 APT 的任何操作，需要更新可用包的列表；这可以简单地通过<command>apt update</command>来完成。取决于您连接的速度，该操作需要花费一定时间，因为这包括下载一定数量的<filename>软件包</filename>/<filename>源代码</filename>/<filename>翻译-<replaceable>语言代码</replaceable></filename>文件，这些文件随着 Debian 的开发而逐渐变大（对于<literal>main</literal>部分，至少有 10MB 数据）。当然，从光盘中安装无需任何下载 — 此情况下，操作是十分迅速的。
			</para>
			 <indexterm>
				<primary><command>apt update</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>apt-get update</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>aptitude update</command></primary>
			</indexterm>

		</section>
		 <section>
			<title>安装和卸载</title>
			 <indexterm>
				<primary>软件包</primary>
				<secondary>安装</secondary>
			</indexterm>
			 <indexterm>
				<primary>软件包</primary>
				<secondary>卸载</secondary>
			</indexterm>
			 <indexterm>
				<primary>安装</primary>
				<secondary>软件包安装</secondary>
			</indexterm>
			 <indexterm>
				<primary>卸载一个软件包</primary>
			</indexterm>
			 <para>
				通过APT，软件包可以从系统中添加或移除，命令分别为<command>apt install<replaceable>软件包</replaceable></command>、<command>apt remove<replaceable>软件包</replaceable></command>。在以上两种情况中，APT 将会自动安装必要的依赖包或者删除依赖于删除包的软件包。<command>apt purge<replaceable>软件包</replaceable></command>命令包含一个彻底删除 — 相关的配置文件也会被删除。
			</para>
			 <indexterm>
				<primary><command>apt install </command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>apt remove</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>apt purge</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>apt-get install </command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>apt-get remove</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>apt-get purge</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>aptitude install</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>aptitude remove</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>aptitude purge</command></primary>
			</indexterm>
			 <sidebar> <title><emphasis>TIP</emphasis> 多次安装同一批软件包</title>
			 <para>
				在几台电脑上安装同一批软件包会很实用。这很容易做到。
			</para>
			 <para>
				首先，从电脑中取得所安装软件包的列表作为用于复制的“模板”。
			</para>
			 
<screen><computeroutput>$ </computeroutput><userinput>dpkg --get-selections &gt;pkg-list</userinput>↵</screen>
			 <para>
				<filename>pkg-list</filename> 文件内容是已安装套件的清单。然后，用以下的指令把 <filename>pkg-list</filename> 文件复制在欲更新的电脑：
			</para>
			 
<screen>## Update dpkg's database of known packages↵
# <userinput>avail=`mktemp`</userinput>↵
# <userinput>apt-cache dumpavail &gt; "$avail"</userinput>↵
# <userinput>dpkg --merge-avail "$avail"</userinput>↵
# <userinput>rm -f "$avail"</userinput>↵
## Update dpkg's selections↵
# <userinput>dpkg --set-selections &lt; pkg-list</userinput>↵
## Ask apt-get to install the selected packages↵
# <userinput>apt-get dselect-upgrade</userinput>↵</screen>
			 <para>
				第一个命令记录在 dpkg 库中可用的软件包列表，然后 <command>dpkg --set-selections</command> 恢复选中你想要安装的包，<command>apt-get</command> 的激活执行所需要的操作！<command>aptitude</command> 没有这样的命令。
			</para>
			 </sidebar> <sidebar> <title><emphasis>TIP</emphasis> 同时进行卸载和安装</title>
			 <para>
				在命令 <command>apt</command> (或 <command>apt-get</command>、或 <command>aptitude</command>) 加入后缀就可以同时安装指定的套件与移除其他套件。在 <command>apt install</command> 命令加入 “<literal>-</literal>” 及希望移除的套件名称。在 <command>apt remove</command> 命令加入 “<literal>+</literal>” 及希望安装的套件名称。
			</para>
			 <para>
				下面的例子展示两种不同方法来安装<replaceable>package1</replaceable> 和卸载<replaceable>package2</replaceable>。
			</para>
			 
<screen># <userinput>apt install <replaceable>package1</replaceable> <replaceable>package2-</replaceable></userinput>↵
[...]↵
# <userinput>apt remove <replaceable>package1+</replaceable> <replaceable>package2</replaceable></userinput>↵
[...]↵</screen>
			 <para>
				此方法也可用于把不同的软件包排除在外，比如由于<literal>Recommends</literal>造成的。一般，依赖解决者会用此作为寻找其他办法的线索。
			</para>
			 </sidebar> <sidebar> <title><emphasis>技巧</emphasis> <command>apt --reinstall</command> 和 <command>aptitude reinstall</command></title>
			 <indexterm>
				<primary>重新安装</primary>
			</indexterm>
			 <para>
				在软件包中的文件发生移除或更改时，系统有时候可能会受损。恢复这些文件最简单的方法是重装受影响的软件包。不幸的是，包系统会认为后者已安装而拒绝重新安装；为了避免此情况，使用<command>apt</command>和<command>apt-get</command>命令的<literal> --reinstall</literal>选项。如下命令会重新安装<emphasis role="pkg">postfix</emphasis>，即使它已存在：
			</para>
			 
<screen><computeroutput># </computeroutput><userinput>apt --reinstall install postfix</userinput></screen>
			 <para>
				<command>aptitude</command>命令行略微不同，但可通过<command>aptitude reinstall postfix</command>获得同样的结果。
			</para>
			 <para>
				该问题不与<command>dpkg</command>同时出现，但管理员极少直接使用它。
			</para>
			 <para>
				注意！使用<command>apt --reinstall</command>命令恢复受到攻击时变更的软件包，不会当然地恢复系统原本的样子。<xref linkend="sect.dealing-with-compromised-machine" />详述了受损系统要采取的必要步骤。
			</para>
			 </sidebar> <para>
				如果文件 <filename>sources.list</filename> 提及了数个发布版本，可以指定要安装软件包的版本。要求特定版本号可以通过 <command>apt install <replaceable>package</replaceable>=<replaceable>version</replaceable></command>，但以标明其初始发行版本 (<emphasis role="distribution">Stable</emphasis>, <emphasis role="distribution">Testing</emphasis> 或者 <emphasis role="distribution">Unstable</emphasis>）的方式— 通过 <command>apt install <replaceable>package</replaceable>/<replaceable>distribution</replaceable></command> — 更为推荐。倘若 <filename>sources.list</filename>文件所述软件源之一仍可用的情况下，通过此命令可以回溯一个软件包的旧版本 (比如您知晓其情况良好的情况)。否则，<literal>snapshot.debian.org</literal> 归档可以补救(参阅侧边栏r <xref linkend="sidebar.snapshot.debian.org" />)。
			</para>
			 <example>
				<title>安装 <emphasis role="pkg">spamassassin（垃圾邮件过滤）</emphasis> 的 <emphasis role="distribution">unstable</emphasis> 版本</title>
				 
<screen><computeroutput># </computeroutput> <userinput>apt install spamassassin/unstable</userinput></screen>

			</example>
			 <sidebar> <title><emphasis>更进一步</emphasis> <filename>.deb</filename> 文件的缓存</title>
			 <para>
				APT 在<filename> /var/cache/apt/archives/</filename> 目录中保存每个下载的<filename> .deb</filename>文件的副本。在频繁更新的情况下，该目录下每个软件包的数个版本可能会占用大量磁盘空间；您应当经常整理它们。可以使用如下两个命令：<command>apt-get clean</command>完全清空整个目录；<command>apt-get autoclean</command>仅移除不会再下载的软件包（因为它们已从 Debian 镜像中消失）和明显无用的软件包（配置参数<literal>APT::Clean-Installed</literal>可以阻止移除安装中的<filename>.deb</filename>文件）。注意<command>apt</command>不支持上述命令。
			</para>
			 </sidebar>
		</section>
		 <section id="sect.apt-upgrade">
			<title>系统升级</title>
			 <indexterm>
				<primary>升级</primary>
				<secondary>系统升级</secondary>
			</indexterm>
			 <indexterm>
				<primary><command>apt upgrade</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>apt-get upgrade</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>aptitude safe-upgrade</command></primary>
			</indexterm>
			 <para>
				常规升级是推荐的，因为它们包含最新的安全更新。要升级，可使用<command>apt upgrade</command>、<command>apt-get upgrade</command>、<command>aptitude safe-upgrade</command>（当然需在<command>apt update</command>之后）。该命令会查找要升级的已安装包，同时不移除任何包。也就是说，目标是确保可能的侵入式升级最小化。<command>apt-get</command>命令略苛刻于 <command>aptitude</command> 或 <command>apt</command>命令，因为它会拒绝安装未预先安装的软件包。
			</para>
			 <sidebar id="sidebar.apt-pdiff"> <title><emphasis>TIP</emphasis> 增量更新</title>
			 <para>
				如先前所述，<command>apt update</command> 命令的目标是为每个软件包源码下载相应的<filename>软件包</filename>（或<filename>源码</filename>）文件。然而，即使经过 <command>bzip2</command> 压缩，这些文件仍会相当大(针对 <emphasis role="distribution">Jessie</emphasis> 的 <foreignphrase>main</foreignphrase> 部分的 <filename> Packages.xz </filename> 占用空间超过6MB）。如果您想要频繁更新，上述下载将花费较多时间。
			</para>
			 <para>
				为了加快处理速度，APT 可以下载只有变动内容的 “diff” 文件，而不是整个文件。官方的 Debian 镜射网站发行此等文件列出 <filename>Packages</filename> 文件及其后续版本的不同处。每次升级与每周升级分别都有对应的文件。每个供 <emphasis role="distribution">不稳定版</emphasis> 的 “diff” 文件只有几十 KB 大小，所以每周使用 <command>apt update</command> 命令需要下载的数据不会太大。<emphasis role="distribution">稳定版</emphasis> 与 <emphasis role="distribution">测试版</emphasis> 的分行版，只有极小的改变。
			</para>
			 <para>
				然而，有的时候仍需要下载整个 <filename>套件</filename> 文件，尤其是上回升级是很久以前的事且不适合增量式升级。若网络速度极快但机器的处理器性能不足以应付升级，下载省下的时间还不足以弥补电脑计算新版版的时间 (从旧版开始逐一地升级)。在这种情况下，可以使用配置参数 <literal>Acquire::Pdiffs</literal> 并设置为 <literal>false</literal>。
			</para>
			 </sidebar> <para>
				<command>apt</command> 会选择最新的版本号 (除了来自 <emphasis role="distribution">实验版</emphasis> 与 <emphasis role="distribution">稳定反向植入版</emphasis>，其缺省忽略版本号)。若指定 <emphasis role="distribution">测试版</emphasis> 或 <emphasis role="distribution">不稳定版</emphasis> 于 <filename>sources.list</filename> 内，则 <command>apt upgrade</command> 会把 <emphasis role="distribution">稳定版</emphasis> 系统切换至 <emphasis role="distribution">测试版</emphasis> 或 <emphasis role="distribution">不稳定版</emphasis>，这些都不是您要的。
			</para>
			 <para>
				搜索升级的套件时需把特定的发行版告知 <command>apt</command>，采用 <literal>-t</literal> 或 <literal>--target-release</literal> 选项，然后是发行版的名称 (如：<command>apt -t stable upgrade</command>)。为了避免每次使用 <command>apt</command> 都需指定版本，可以把, you can add <literal>APT::Default-Release "stable";</literal> 加在 <filename>/etc/apt/apt.conf.d/local</filename> 之内。
			</para>
			 <indexterm>
				<primary><command>apt full-upgrade</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>apt dist-upgrade</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>apt-get dist-upgrade</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>aptitude dist-upgrade</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>aptitude full-upgrade</command></primary>
			</indexterm>
			 <para>
				对于非常重要的升级，如从一个 Debian 主版本变更为下一版本，你需要使用<command>apt full-upgrade</command>。使用此命令，<command>apt</command>将会完全升级，即使必须移除一些废弃包或者安装新的依赖包。这也适用于日常使用 Debian <emphasis role="distribution"> Unstable</emphasis>并每天跟随其演化的用户。它是如此简便以至于几乎无需解释：APT的声誉基于此项强大的功能。
			</para>
			 <para>
				不同于 <command>apt</command> 与 <command>aptitude</command>，<command>apt-get</command> 不知道 <command>full-upgrade</command> 命令。反而，您应使用 <command>apt-get dist-upgrade</command> (”升级发行版”)，此古老且知名的命令也被 <command>apt</command> 与 <command>aptitude</command> 接受给读者相当的便利。
			</para>

		</section>
		 <section id="sect.apt-config">
			<title>配置选项</title>
			 <indexterm>
				<primary>APT</primary>
				<secondary>配置</secondary>
			</indexterm>
			 <indexterm>
				<primary><filename>apt.conf.d/</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>/etc/apt/apt.conf.d/</filename></primary>
			</indexterm>
			 <para>
				除了已提及的配置细目，还可在 <filename>/etc/apt/apt.conf.d/</filename> 文件夹内增加 APT 的其他配置。让 APT 告知 <command>dpkg</command> 忽略由 <literal>DPkg::options { "--force-overwrite"; }</literal> 引发的错误。
			</para>
			 <para>
				若祗能经由代理服务器近用网页，添加像这样的一列 <literal>Acquire::http::proxy "http://<replaceable>yourproxy</replaceable>:3128"</literal>。对 FTP 代理服务器，用 <literal>Acquire::ftp::proxy "ftp://<replaceable>yourproxy</replaceable>"</literal>。更多的配置选项，参考 <citerefentry><refentrytitle>apt.conf</refentrytitle>
				<manvolnum>5</manvolnum></citerefentry> 手册页以 <command>man apt.conf</command> 命令 (手删的详情，见 <xref linkend="sect.manual-pages" />) 查看。
			</para>
			 <sidebar id="sidebar.directory.d"> <title><emphasis>基本</emphasis> 结尾是 <filename>.d</filename> 的文件夹名称</title>
			 <indexterm>
				<primary><filename>.d</filename></primary>
			</indexterm>
			 <para>
				结尾是 <filename>.d</filename> 数据使用机会愈来愈多。每个文件夹内的配置档系供多个文件使用。所以，在 <filename>/etc/apt/apt.conf.d/</filename> 内的文件都是供 APT 配置之用。APT 以字顺方式纳入他们，最后一个文件可以修正在前的配置。
			</para>
			 <para>
				此结构对机器的管理者与套件维护带来若干弹性。确实，管理者容易修改软件的配置，祗需在有问题的文件夹添加文件而不必变动既有的文件。需要调整另个软件的配置，以确保与既有软件相依，套件维护者以同样的方法就能达成。Debian 的政策禁止修改其他套件的配置档 — 只有被授权者才能修改。套件升级时，用户应保留选择配置档版本的权力。外部修改此文件时将启动该选项，管理者就知道是外来的修改。
			</para>
			 <para>
				没有 <filename>.d</filename> 文件夹时，外部套件就不能在没有修改配置档的前提下修改程序设置。所以，必须邀请用户选择修改方式，并列出在文件 <filename>/usr/share/doc/<replaceable>package</replaceable>/README.Debian</filename> 内的选项。
			</para>
			 <para>
				视应用程序的需要，可直接使用或由外部脚本管理 <filename>.d</filename> 文件夹，将所有文件串联成一个配置档。更动文件夹内容后，必须再运行脚本，才能纳入该等变动。还有一件重要的事，千万不要直接运行自动生成的配置档，因为下次运行脚本后将失去所有的东西。受到环境的限制才被迫选择指定的方法 (直接使用 <filename>.d</filename> 文件夹或由该文件夹产生的文件)，不论何种方法，配置的弹性收益远大于其带来的复杂性。Exim 4 邮件服务器是产生文件方法的范例之一：可用多个文件 (<filename>/etc/exim4/conf.d/*</filename>) 配置串联成 <filename>/var/lib/exim4/config.autogenerated</filename> 再由 <command>update-exim4.conf</command> 命令运行。
			</para>
			 </sidebar>
		</section>
		 <section id="sect.apt.priorities">
			<title>包的优先级管理</title>
			 <para>
				配置 APT 最重要的层面之一是管理每个套件来源的优先性。例如，从 <emphasis role="distribution">测试版</emphasis>、<emphasis role="distribution">不稳定</emphasis> 或 <emphasis role="distribution">实验版</emphasis> 中选取一个或多个套件。可以指令每个套件的优先性 (视其版本或发行版，同个套件可以有多个优先性)。这些优先性将影响 APT 的行为：每个套件总是选择最优先的版本 (除非旧于已安装的版本或优先性小于 1000)。
			</para>
			 <indexterm>
				<primary>APT</primary>
				<secondary><foreignphrase>pinning</foreignphrase></secondary>
			</indexterm>
			 <indexterm>
				<primary>pinning, APT pinning</primary>
			</indexterm>
			 <indexterm>
				<primary>软件包</primary>
				<secondary>优先级</secondary>
			</indexterm>
			 <indexterm>
				<primary>优先性</primary>
				<secondary>套件优先性</secondary>
			</indexterm>
			 <indexterm>
				<primary>APT</primary>
				<secondary>偏好</secondary>
			</indexterm>
			 <indexterm>
				<primary><filename>偏好</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>/etc/apt/preferences</filename></primary>
			</indexterm>
			 <para>
				APT 设置若干缺省的优先性。已安装套件版本的优先性是 100。未安装版本缺省优先性为 500，若是另个发布的目标则可跳至 990 (以 <literal>-t</literal> 命令行选项或 <literal>APT::Default-Release</literal> 配置指令调整)。
			</para>
			 <para>
				于 <filename>/etc/apt/preferences</filename> 文件内添加款目的方式，指名受影响套件名称、版本、出处及其新的优先性。
			</para>
			 <para>
				APT 永远不会安装旧版的套件 (就是套件的版本编号小于已安装的套件)，除非其优先性高于 1000。APT 总是安装优先性最高的套件。若两个套件的优先性相同，APT 安装最新的 (其版本编号较高)。若同版本的两个套件优先性相同但内容不同，APT 安装还没有安装的版本 (包括没有递增修订编号的套件，通常是需要的)。
			</para>
			 <para>
				更具体地说，永远不会安装优先性小于 0 的套件。没有安装其他版本时，将安装优先性在 0 与 100 之间的套件。其他发行版没有更新版本或可用的版本时，安装优先性在 100 与 500 之间的套件。在目标发行版内没有更新的版本时，安装优先性在 501 与 990 之间的套件。已安装的版本不是更新时，安装优先性在 990 与 1000 之间的套件。即使使强迫 APT 降级也要安装优先性高于greater than 1000 的套件。
			</para>
			 <para>
				APT 检查 <filename>/etc/apt/preferences</filename> 时，首先考量最精确的款目 (通常是指定的套件)，然后是较通用的 (包括发行版内的所有套件)。存在多个通用款目时，选用第一个。可用的选项包括套件名称及其源文件。每个套件来源包括 <filename>发布</filename> 文件，由 APT 与 <filename>套件</filename> 文件同时下载。指定来源 (通常 “Debian” 的官方镜射站套件，但也可以是个人的或机构的第三方典藏所)。给予发行版名称 (通常是 Debian 提供标准发行版内的 <emphasis role="distribution">稳定版</emphasis>、<emphasis role="distribution">测试版</emphasis>、<emphasis role="distribution">不稳定版</emphasis> 或 <emphasis role="distribution">实验版</emphasis>) 及其版本 ( 8 就是 Debian 的 <emphasis role="distribution">Jessie</emphasis>)。接着以实例查看其语法。
			</para>
			 <sidebar> <title><emphasis>特例</emphasis><emphasis role="distribution">实验性</emphasis>的优先性</title>
			 <indexterm>
				<primary><emphasis role="distribution">实验</emphasis></primary>
			</indexterm>
			 <para>
				若把 <emphasis role="distribution">Experimental</emphasis> 列在 <filename>sources.list</filename> 文件内，几乎不会安装对应套件因为其 APT 优先性为1。当然这是特例，避免用户意外安装 <emphasis role="distribution">Experimental</emphasis> 套件。这些套件祗能以指令 <command>aptitude install <replaceable>套件名称</replaceable>/experimental</command> 安装 — 用户键入此指令时自然知道其风险。还是有可能 (虽然 <emphasis>不</emphasis> 建议) 把 <emphasis role="distribution">Experimental</emphasis> 内的套件视为其他发行版而给予优先性 100。在 <filename>/etc/apt/preferences</filename> 文件内给予特定的款目就行了：
			</para>
			 <informalexample> 
<programlisting>Package: *
Pin: release a=experimental
Pin-Priority: 500</programlisting>
			 </informalexample> </sidebar> <para>
				暂时假设您祗需用到 Debian 稳定版的套件。除非特别指明，不会安装其他版本的套件。可以在 <filename>/etc/apt/preferences</filename> 文件内写入以上的款目：
			</para>
			 <informalexample> 
<programlisting>Package: *
Pin: release a=stable
Pin-Priority: 900

Package: *
Pin: release o=Debian
Pin-Priority: -10</programlisting>
			 </informalexample> <para>
				<literal>a=stable</literal> 设置发行版的名称。<literal>o=Debian</literal> 限制来自 “Debian” 的套件。
			</para>
			 <para>
				假设若干服务器内的程序使用 Perl 5.14 且不希望被升级为其他版本。您需用到此款目：
			</para>
			 <informalexample> 
<programlisting>Package: perl
Pin: version 5.14*
Pin-Priority: 1001</programlisting>
			 </informalexample> <para>
				此配置档的参考文档在手册的 <citerefentry><refentrytitle>apt_preferences</refentrytitle>
				<manvolnum>5</manvolnum></citerefentry>，以 <command>man apt_preferences</command> 命令就可看到。
			</para>
			 <sidebar> <title><emphasis>秘诀</emphasis> 在 <filename>/etc/apt/preferences</filename> 内的评论</title>
			 <indexterm>
				<primary><literal>解释</literal></primary>
			</indexterm>
			 <indexterm>
				<primary><literal>Pin</literal></primary>
			</indexterm>
			 <indexterm>
				<primary><literal>Pin-Priority</literal></primary>
			</indexterm>
			 <para>
				<filename>/etc/apt/preferences</filename> 文件没有放置评论的官方语法，但可以在每个款目的 “<literal>Explanation</literal>” 字段置入若干说明：
			</para>
			 <informalexample> 
<programlisting>Explanation: The package xserver-xorg-video-intel provided
Explanation: in experimental can be used safely
Package: xserver-xorg-video-intel
Pin: release a=experimental
Pin-Priority: 500</programlisting>
			 </informalexample> </sidebar>
		</section>
		 <section id="sect.apt-mix-distros">
			<title>在多个发行版工作</title>
			 <para>
				<command>apt</command> 是很奇妙的工具，可从其他发行版提取套件。例如，安装 <emphasis role="distribution">稳定版</emphasis> 系统之后，或许想要在不偏离系统原来状态下，试试 <emphasis role="distribution">测试版</emphasis> 或 <emphasis role="distribution">不稳定版</emphasis> 的套件。
			</para>
			 <para>
				混用不同版本套件出问题时，Even if you will occasionally encounter problems while mixing packages from different distributions, <command>apt</command> 可以处理得极为恰当把风险降到最低。最好的方法是把所有的发行版置于 <filename>/etc/apt/sources.list</filename> 文件内 (某些人总是置入三个发行版，不过还是要记得 <emphasis role="distribution">不稳定版</emphasis> 是有经验用户的专属。) 且在 <literal>APT::Default-Release</literal> 参数中设置偏好的发行版 (见 <xref linkend="sect.apt-upgrade" />) 。
			</para>
			 <para>
				假设 <emphasis role="distribution">稳定版</emphasis> 是您的参考版本，但是 <emphasis role="distribution">测试版</emphasis> 与 <emphasis role="distribution">不稳定版</emphasis> 也列在 <filename>sources.list</filename> 文件内。在这个情况下，您可使用 <command>apt install <replaceable>套件名称</replaceable>/testing</command> 安装来自 <emphasis role="distribution">测试版</emphasis> 的套件。若因相依性未满足而安装失败，可以在 <emphasis role="distribution">测试版</emphasis> 内加入 <literal>-t testing</literal> 参数。同样的方式也适用于 <emphasis role="distribution">不稳定版</emphasis>。
			</para>
			 <para>
				在此情况下，除了已经被其他发行版升级之外，升级 (<command>upgrade</command> 与 <command>full-upgrade</command>) 祗在 <emphasis role="distribution">稳定版</emphasis> 内完成：其他的升级在各自的发行版内处理。稍后以 APT 缺省的优先性说明此行为。请使用 <command>apt-cache policy</command> (见专栏 <xref linkend="sidebar.apt-cache-policy" />) 查看指定的优先性。
			</para>
			 <para>
				每件事都围绕在 APT 祗处理高于或等于已安装版本号套件的前提下 (假设 <filename>/etc/apt/preferences</filename> 还未强迫优先性高于 1000 的某些套件)。
			</para>
			 <sidebar id="sidebar.apt-cache-policy"> <title><emphasis>秘诀</emphasis> <command>apt-cache policy</command></title>
			 <para>
				运行 <command>apt-cache policy</command> 显示每个套件来源缺省的优先性，就能了解优先性的机制。也可使用 <command>apt-cache policy <replaceable>套件名称</replaceable></command> 命令显示指定套件所有可用版本的优先性。
			</para>
			 </sidebar> <para>
				假设从Let's assume that you have installed version 1 of a first package from <emphasis role="distribution">稳定版</emphasis> 安装第一个套件的第一版且从and that version 2 and 3 are available respectively in <emphasis role="distribution">测试版</emphasis> 与 <emphasis role="distribution">不稳定版</emphasis> 安装同套件的第二版与第三版水。已安装的版本优先性为 100 但在but the version available in <emphasis role="distribution">稳定版</emphasis> (相同的) 优先性为 990 (因为它是目标发布版的一部份)。在 <emphasis role="distribution">测试版</emphasis> 与 <emphasis role="distribution">不稳定版</emphasis> 的套件其优先性为 500 (缺省不安装版本的优先性)。获选者为优先性 990 的版本1。套件 “留在 <emphasis role="distribution">稳定版</emphasis> 内”。
			</para>
			 <para>
				另个套件的例子，已从 <emphasis role="distribution">测试版</emphasis> 安装版本 2。版本 1 在 <emphasis role="distribution">稳定版</emphasis> 且版本 3 在 <emphasis role="distribution">不稳定版</emphasis>。因为优先性小于已安装的版本，所以版本 1 (优先性为 990 — 小于 1000) 已作废。祗剩下优先性为 500 的版本 2 与版本 3。在此情况下，APT 选择较新的版本，即使用 <emphasis role="distribution">不稳定版</emphasis>。若不要已安装自 <emphasis role="distribution">测试版</emphasis> 的套件，可以移殖至 <emphasis role="distribution">不稳定版</emphasis>，必须指定来自于 <emphasis role="distribution">不稳定版</emphasis> 优先性小于 500 (例如 490) 的套件。修改 <filename>/etc/apt/preferences</filename> 文件即可：
			</para>
			 
<programlisting>Package: *
Pin: release a=unstable
Pin-Priority: 490</programlisting>

		</section>
		 <section id="sect.automatic-tracking">
			<title>自动追踪已安装的套件</title>
			 <para>
				<command>apt</command> 的必要功能之一是经由相依性追踪已安装的套件。这些套件称为 “自动”，且通常包括其程序库。
			</para>
			 <para>
				有了这些信息后，移除套件时，套件管理者可以计算该等不再需要的自动套件 (因为没有 “手动安装” 套件相依于他)。<command>apt-get autoremove</command> 会清除该等套件。<command>aptitude</command> 与 <command>apt</command> 没有这个命令：辨认之后，前者自动移除它们，而用户不需手动运行后者命令。所有的情况下，在清除消息中列出所有影响到的套件。
			</para>
			 <indexterm>
				<primary><command>apt-mark auto</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>apt-mark manual</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>aptitude markauto</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>aptitude unmarkauto</command></primary>
			</indexterm>
			 <para>
				把套件标记为自动是个好习惯，不需要时就被自动移除。<command>apt-mark auto <replaceable>套件名称</replaceable></command> 会标记该套件为自动而 <command>apt-mark manual <replaceable>套件名称</replaceable></command> 则不标记。<command>aptitude markauto</command> 与 <command>aptitude unmarkauto</command> 作用相同祗是功能较多 (见 <xref linkend="sect.aptitude" />)。命令交互接口的 <command>aptitude</command> 也可查看多个套件的 “自动旗标”。
			</para>
			 <indexterm>
				<primary><command>aptitude why</command></primary>
			</indexterm>
			 <para>
				自动安装套件出现在系统内。系由于从命令行取得该等信息，可使用 <command>aptitude why <replaceable>套件名称</replaceable></command> (<command>apt</command> 与 <command>apt-get</command> 没有类似的功能)：
			</para>
			 
<screen><computeroutput>$ </computeroutput><userinput>aptitude why python-debian
</userinput><computeroutput>i   aptitude         Recommends apt-xapian-index         
i A apt-xapian-index Depends    python-debian (&gt;= 0.1.15)
</computeroutput></screen>
			 <sidebar> <title><emphasis>其他</emphasis> <command>deborphan</command> 与 <command>debfoster</command></title>
			 <indexterm>
				<primary><command>deborphan</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>debfoster</command></primary>
			</indexterm>
			 <para>
				早年 <command>apt</command>、<command>apt-get</command> 与 <command>aptitude</command> 还不能追踪自动套件时，以另外两个指令产不必要套件清单：<command>deborphan</command> 与 <command>debfoster</command>。
			</para>
			 <para>
				<command>deborphan</command> 是两者中最基础的。扫瞄 <literal>libs</literal> 与 <literal>oldlibs</literal> 区块 (没有补充命令) 在已安装套件中，寻找不再相依于其他套件者。其结果做为移除非必要套件的依据。
			</para>
			 <para>
				<command>debfoster</command> 还有其他用法，极类似 APT：维护一个已安装的套件以及需要互调用的套件清单。系统内出现新的套件且 <command>debfoster</command> 不知道它需要那些套件，则在屏幕显示其相依的套件清单。此程序提供新的选择：移除套件 (或许连同相依者)，标记为必要，或暂时忽略它。
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.apt-cache">
		<title>The <command>apt-cache</command> 命令</title>
		 <indexterm>
			<primary><command>apt-cache</command></primary>
		</indexterm>
		 <indexterm>
			<primary>APT</primary>
			<secondary>套件搜索</secondary>
		</indexterm>
		 <indexterm>
			<primary>APT</primary>
			<secondary>显示标头</secondary>
		</indexterm>
		 <indexterm>
			<primary>搜索套件</primary>
		</indexterm>
		 <indexterm>
			<primary>套件</primary>
			<secondary>搜索</secondary>
		</indexterm>
		 <para>
			<command>apt-cache</command> 命令可显示 APT 内部数据库里的多种信息。这些信息是从 <filename>sources.list</filename> 文件内聚集不同来源的缓存。于运行 <command>apt update</command> 运作时产生的。
		</para>
		 <sidebar id="sidebar.cache"> <title><emphasis>术语</emphasis> 缓存</title>
		 <para>
			缓存是一种暂存系统，近用方法昂贵 (讲究性能) 时，用于加快常用数据的取用速度。这个概念应用范围极广，从微处理器核心至高端保存系统。
		</para>
		 <para>
			在 APT 的环境，参照 <filename>套件名称</filename> 文件是他们在 Debian 镜射站的位置。也就是说，近用数据库套件时，每次都通过网络读取，极无劾率。所以，APT 在其文件内保存一个复本 (在 <filename>/var/lib/apt/lists/</filename>) 每次搜索在地的文件即可。同样的，<filename>/var/cache/apt/archives/</filename> 保存已经下载的套件避免在移除后又需要时的重复下载行为。
		</para>
		 </sidebar> <indexterm>
			<primary><command>apt show</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>apt search</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>apt-cache show</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>apt-cache search</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>aptitude show</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>aptitude search</command></primary>
		</indexterm>
		 <para>
			<command>apt-cache</command> 命令可以做键词套件搜索 <command>apt-cache search <replaceable>键词</replaceable></command>。也能显示套件标头的可用版本 <command>apt-cache show <replaceable>套件名称</replaceable></command>。这个命令提供套件说明、其相依性、维护者名称等。<command>apt search</command>、<command>apt show</command>、<command>aptitude search</command>、<command>aptitude show</command> 都以同样方式运作。
		</para>
		 <sidebar> <title><emphasis>其他</emphasis> <command>axi-cache</command></title>
		 <indexterm>
			<primary><command>axi-cache</command></primary>
		</indexterm>
		 <indexterm>
			<primary><emphasis role="pkg">apt-xapian-index</emphasis></primary>
		</indexterm>
		 <para>
			<command>apt-cache search</command> 是基础的工具，应用在 <command>grep</command> 套件描述。输入过多键词可能送回大量结果或完全无数据。
		</para>
		 <para>
			<command>axi-cache search <replaceable>术语</replaceable></command>，反过来说，提供更好的结果，以相关性排序。使用 <emphasis>Xapian</emphasis> 搜索引擎且它是 <emphasis role="pkg">apt-xapian-index</emphasis> 套件的一部份索引所有套件的信息 (更多的是，就像是来自所有 Debian 套件的 <filename>.desktop</filename> 档)。显示标签 (见专栏 <xref linkend="sidebar.debtags" />) 并在毫秒之间送回结果。
		</para>
		 
<screen>$ <userinput>axi-cache search package use::searching</userinput>
105 results found.
Results 1-20:
100% packagesearch - GUI for searching packages and viewing package information
98% debtags - Enables support for package tags
94% debian-goodies - Small toolbox-style utilities 
93% dpkg-awk - Gawk script to parse /var/lib/dpkg/{status,available} and Packages
93% goplay - games (and more) package browser using DebTags
[...]
87% apt-xapian-index - maintenance and search tools for a Xapian index of Debian packages
[...]
More terms: search debian searching strigi debtags bsearch libbsearch
More tags: suite::debian works-with::software:package role::program interface::commandline implemented-in::c++ admin::package-management use::analysing
`axi-cache more' will give more results
</screen>
		 </sidebar> <indexterm>
			<primary><command>apt-cache policy</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>apt-cache dumpavail</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>apt-cache pkgnames</command></primary>
		</indexterm>
		 <para>
			有些功能极少用到。例如，<command>apt-cache policy</command> 显示套件来源及个别套件的优先性。另个例子是<command>apt-cache dumpavail</command> 显示所有套件全部版本的标头。<command>apt-cache pkgnames</command> 显示出现在缓存至少一次的套件清单。
		</para>

	</section>
	 <section id="sect.apt-frontends">
		<title>前置：<command>aptitude</command>、<command>synaptic</command></title>
		 <indexterm>
			<primary><command>aptitude</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>synaptic</command></primary>
		</indexterm>
		 <indexterm>
			<primary>APT</primary>
			<secondary>接口</secondary>
		</indexterm>
		 <para>
			APT 是 C++ 写成程序，甚原代码在 <command>libapt-pkg</command> 共享程序库内。以此共享程序库创建读者接口 (前置)，因为很容易再利用在程序库内的原代码。过去 <command>apt-get</command> 祗当做 <command>libapt-pkg</command> 的测试前置，但此事实也渐趋模糊。
		</para>
		 <section id="sect.aptitude">
			<title><command>aptitude</command></title>
			 <para>
				<command>aptitude</command> 是交互程序，可用于终端机的半图形模式可浏览已安装与可得套件，搜索所有可用信息，并选择安装或移除的套件。此程序专为管理者而设计，缺省的对象比 <command>apt-get</command> 的对象更聪慧，且其接口更容易理解。
			</para>
			 <figure>
				<title>The <command>aptitude</command> 套件管理者</title>
				 <mediaobject>
					<imageobject>
						<imagedata fileref="images/aptitude.png" format="PNG" scalefit="1" width="75%" />
					</imageobject>

				</mediaobject>

			</figure>
			 <para>
				开始的时候，<command>aptitude</command> 依状态显示所有的套件 (已安装、未安装、或已安装在不在镜射站 — 其他的区块显示工作、虚拟套件、与最近才出现在镜射站的添加套件)。还有其他的查看方法，提供主题式浏览。所有的情况下，<command>aptitude</command> 在屏幕显示各主题与套件的清单。以树状组织主题，可以用 <keycombo><keycap>Enter</keycap></keycombo>、<keycombo><keycap>[</keycap></keycombo> 与 <keycombo><keycap>]</keycap></keycombo> 按键展开与收起枝叶。<keycombo><keycap>+</keycap></keycombo> 应用于标示可安装的套件，<keycombo><keycap>-</keycap></keycombo> 标示可移除的套件与 <keycombo><keycap>_</keycap></keycombo> 标示可清除的套件 (这些按键也可用遟主题，对应的行动适用于主题的所有套件)。<keycombo><keycap>u</keycap></keycombo> 用于更新可用套件清单与 <keycombo action="simul"><keycap>Shift</keycap><keycap>u</keycap></keycombo> 准备全系统的更新。<keycombo><keycap>g</keycap></keycombo> 切换摘要查看要求的改变 (并再次键入 <keycombo><keycap>g</keycap></keycombo> 纳入此等改变)，与 <keycombo><keycap>q</keycap></keycombo> 离开现在的查看。若您在初始的查看，将关闭 <command>aptitude</command>。
			</para>
			 <sidebar> <title><emphasis>文档</emphasis> <command>aptitude</command></title>
			 <para>
				此区块不包括使用 <command>aptitude</command> 的详情，祗专注于提供急救用的工具包。<command>aptitude</command> 的文档较完整，建议您使用 <emphasis role="pkg">aptitude-doc-en</emphasis> 套件内的完整手册 (见 <filename>/usr/share/doc/aptitude/html/en/index.html</filename>)。
			</para>
			 </sidebar> <para>
				键入 <keycombo><keycap>/</keycap></keycombo> 及搜索的键词，就能搜索套件。键词对应至套件的名称，也可应用于描述内容 (若前置 <literal>~d</literal>、区块 (前置 <literal>~s</literal>) 或文档内的其他字词。同样的键词可以筛选显示套件的清单：键入 <keycombo><keycap>l</keycap></keycombo> 键 (如同在 <foreignphrase>limit</foreignphrase> 之内) 与其他键词。
			</para>
			 <para>
				管理 Debian 套件的 “自动旗标” (见 <xref linkend="sect.automatic-tracking" />)，对 <command>aptitude</command> 而言是小事一椿。可以用 <keycombo action="simul"><keycap>Shift</keycap> <keycap>m</keycap></keycombo> 浏览已安装并标示为自动的套件或以 <keycombo><keycap>m</keycap></keycombo> 键移除标示。在套件清单内，“自动套件” 标示为 “A”。此功能也可简单看到机器内正在使用的套件，不必看那些程序库与相依性繁琐的细节。相关的键词可以与 <keycombo><keycap>l</keycap></keycombo> (启动筛选模式) 一起使用的是 <literal>~i!~M</literal>。它的作用是祗看已安装的套件 (<literal>~i</literal>) 不是被标示为自动(<literal>!~M</literal>) 的套件。
			</para>
			 <sidebar> <title><emphasis>工具</emphasis> 在命令行接口使用 <command>aptitude</command></title>
			 <para>
				经由命令行或交互接口可以近用 <command>aptitude</command> 大部份的功能。命令行看来像是 <command>apt-get</command> 与 <command>apt-cache</command>。
			</para>
			 <para>
				也能从命令行近用 <command>aptitude</command> 的高端功能。使用交互版相同的套件搜索模式。例如，清除 “手动安装” 套件、在地安装的程序不再需要程序库或 Perl 模块，就可把对应的套件标示为自动：
			</para>
			 
<screen><computeroutput># </computeroutput><userinput>aptitude markauto '~slibs|~sperl'</userinput></screen>
			 <para>
				从这里您可看到 <command>aptitude</command> 搜索模式系统的威力，即时选取 <literal>libs</literal> 与 <literal>perl</literal> 区块的所有套件。
			</para>
			 <para>
				小心对应，部份套件被标记为自动且其他套件均未相依于它们，该等套件就会被自动移除 (经过确认程序)。
			</para>
			 </sidebar> <section>
				<title>管理推荐、建议与工作</title>
				 <para>
					<command>aptitude</command> 另个有趣的功能是尊重套件间的建议，但给使用以个案方式选择不安装的自由。例如，<emphasis role="pkg">gnome</emphasis> 套件建议 <emphasis role="pkg">gdebi</emphasis> (及其他选择)。选择前者安装时，后者也被选取 (若未安装在系统内则标记为自动)。键入 <keycombo><keycap>g</keycap></keycombo> 将使其更明显：<emphasis role="pkg">gdebi</emphasis> 显示在满足相依性的自动安装套件清单里的待决摘要画面。然而，在确认前可以不选择，而自行决定不要安装。
				</para>
				 <para>
					此推荐追踪功能不适用于更新。例如，若 <emphasis role="pkg">gnome</emphasis> 新版建议一个不包括稍前版本的套件，就不会安装它。然而，还是列在屏幕，管理者仍可点击并安装它。
				</para>
				 <para>
					同时把套件间的建议列入考量，但调整入特别的情况。例如，自从 <emphasis role="pkg">gnome</emphasis> 建议 <emphasis role="pkg">dia-gnome</emphasis>，后者显示在屏幕的待决区 (其他套件的建议区)。这样子，就能看见且管理者可以决定是否把它们列入考量。毕竟祗是建议而不是相依或提议，套件仍不会被列入自动 — 需要读者的人工介入 (因此，套件不会被标示为自动)。
				</para>
				 <para>
					在同样的精神下，记得 <command>aptitude</command> 以智能的手法使用工作的概念。在屏幕的套件清单中显示工作，可以安装或移除选定的完整工作，或浏览包括选定较小工作的套件清单。
				</para>

			</section>
			 <section>
				<title>较佳的解决算法</title>
				 <para>
					总结本段的内容，在解决困难情境时，<command>aptitude</command> 的演算较 <command>apt-get</command> 更为复杂。需要运行一组工作且可能带领至另个支离的系统，<command>aptitude</command> 评估若干可能的状况以递减关联的方式呈现。然而，这些算法不是失败的证明。幸运的是，总有手动选择运行的可能。现在的选择带领至矛盾的地方时，屏幕的上方就指出若干 “破碎” 的套件 (and you can directly navigate to those packages by pressing <keycombo><keycap>b</keycap></keycombo>)。就可能以人工方式创建解决此问题的方案。尤其是，可以按 <keycombo><keycap>Enter</keycap></keycombo> 键选取近用多个可用的版本。选定的版本可以解决问题，就勇敢不迟疑地使用其功能。破碎套件渐趋于零后，您可安全地进入待决区的摘要画面，于使用前再次确认。
				</para>
				 <sidebar> <title><emphasis>说明</emphasis> <command>aptitude</command> 的记录档</title>
				 <para>
					如同 <command>dpkg</command>，<command>aptitude</command> 追踪运行动作存在其记录档内 (<filename>/var/log/aptitude</filename>)。然而，两个命令分别在不同层次工作，各自的记录档有不同的信息。当 <command>dpkg</command> 记录对各别套件的一步步运作，<command>aptitude</command> 则记录系统更新之类的高端运作。
				</para>
				 <para>
					小心，记录档祗包括 <command>aptitude</command> 工作的摘要。若另个前端 (或即使是 <command>dpkg</command> 自身) 祗是偶而用到，则 <command>aptitude</command> 的记录档将祗包括工作的部份，所以不能依赖它创建系统的过去。
				</para>
				 </sidebar>
			</section>

		</section>
		 <section>
			<title><command>synaptic</command></title>
			 <para>
				<command>synaptic</command> 是 Debian 的套件图形管理器，在 GTK+/GNOME 的基础上提供清楚有效的图形接口。它以很多的立即可用筛选器提供快速近用添加的套件、安装套件、可升级套件、过时套件等。经由这些清单浏览，选定对套件的工作 (安装、升级、移除、清除)；不会立即运行此等工作，但把它们放入工作清单。单键按下可运行的工作，接着就可运行。
			</para>
			 <figure>
				<title><command>synaptic</command> 套件管理器</title>
				 <mediaobject>
					<imageobject>
						<imagedata fileref="images/synaptic.png" format="PNG" scalefit="1" width="75%" />
					</imageobject>

				</mediaobject>

			</figure>

		</section>

	</section>
	 <section id="sect.package-authentication">
		<title>检查套件真伪</title>
		 <indexterm>
			<primary>套件</primary>
			<secondary>真伪检查</secondary>
		</indexterm>
		 <indexterm>
			<primary>套件</primary>
			<secondary>纹章</secondary>
		</indexterm>
		 <indexterm>
			<primary>套件</primary>
			<secondary>签章</secondary>
		</indexterm>
		 <indexterm>
			<primary>签名</primary>
			<secondary>软件包签名</secondary>
		</indexterm>
		 <indexterm>
			<primary>真伪</primary>
			<secondary>套件真伪</secondary>
		</indexterm>
		 <para>
			Falcot 公司的管理极重视安全。因此，他们祗安装 Debian 保证无窜改的套件。电脑怪客可能在合法的套件巾加入若干恶意代码。若安装了这种套件，就会运行怪客要它做的事，包括泄露密码或隐私信息。为避过这个风险，Debian 有个机制在安装时避过此纂改的风险，祗安装来自官方维护者的套件且未经第三方修改。
		</para>
		 <para>
			以一连串的密码学哈希与签章构成密封的作品。签章文件是由 Debian 镜射站提供的 <filename>发布</filename> 文件。包括 <filename>套件</filename> 文件清单 (包括压缩格式的 <filename>套件名称.gz</filename> 与 <filename>套件名称.xz</filename>，以及增量版)，与它们的 MD5、SHA1 与 SHA256 哈希，确保文件不曾被篡改。这些 <filename>套件</filename> 文件包括镜射站提供的 Debian 套件清单，以及其哈希，足以保证套件内容不曾被篡改。
		</para>
		 <indexterm>
			<primary><command>apt-key</command></primary>
		</indexterm>
		 <indexterm>
			<primary><emphasis role="pkg">debian-archive-keyring</emphasis></primary>
		</indexterm>
		 <indexterm>
			<primary><filename>/etc/apt/trusted.gpg.d/</filename></primary>
		</indexterm>
		 <indexterm>
			<primary><filename>Release.gpg</filename></primary>
		</indexterm>
		 <para>
			可信任的钥匙由 <command>apt-key</command> 命令管理，置于 <emphasis role="pkg">apt</emphasis> 套件内。此程序维护 GnuPG 公钥的钥匙圈，用于确认来自镜射站 <filename>Release.gpg</filename> 文件的签名档。可用于人工添加钥匙 (使用非官方的镜射站时)。然而，只有官方的 Debian 钥匙才需要它。经由 <emphasis role="pkg">debian-archive-keyring</emphasis> 套件 (把对应的钥匙圈置于 <filename>/etc/apt/trusted.gpg.d</filename>) 自动保持这些钥匙的最新状态。然而，第一个安装此套件的人要小心：即使被另个人签署，此签署不能被外部确认。谨慎的管理者应在安装新套件前，检查导入钥匙的指纹，然后才能相信它：
		</para>
		 
<screen role="scale"># <userinput>apt-key fingerprint</userinput>
/etc/apt/trusted.gpg.d/debian-archive-jessie-automatic.gpg
----------------------------------------------------------
pub   4096R/2B90D010 2014-11-21 [expires: 2022-11-19]
      Key fingerprint = 126C 0D24 BD8A 2942 CC7D  F8AC 7638 D044 2B90 D010
uid                  Debian Archive Automatic Signing Key (8/jessie) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-jessie-security-automatic.gpg
-------------------------------------------------------------------
pub   4096R/C857C906 2014-11-21 [expires: 2022-11-19]
      Key fingerprint = D211 6914 1CEC D440 F2EB  8DDA 9D6D 8F6B C857 C906
uid                  Debian Security Archive Automatic Signing Key (8/jessie) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-jessie-stable.gpg
-------------------------------------------------------
pub   4096R/518E17E1 2013-08-17 [expires: 2021-08-15]
      Key fingerprint = 75DD C3C4 A499 F1A1 8CB5  F3C8 CBF8 D6FD 518E 17E1
uid                  Jessie Stable Release Key &lt;debian-release@lists.debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-squeeze-automatic.gpg
-----------------------------------------------------------
pub   4096R/473041FA 2010-08-27 [expires: 2018-03-05]
      Key fingerprint = 9FED 2BCB DCD2 9CDF 7626  78CB AED4 B06F 4730 41FA
uid                  Debian Archive Automatic Signing Key (6.0/squeeze) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-squeeze-stable.gpg
--------------------------------------------------------
pub   4096R/B98321F9 2010-08-07 [expires: 2017-08-05]
      Key fingerprint = 0E4E DE2C 7F3E 1FC0 D033  800E 6448 1591 B983 21F9
uid                  Squeeze Stable Release Key &lt;debian-release@lists.debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-wheezy-automatic.gpg
----------------------------------------------------------
pub   4096R/46925553 2012-04-27 [expires: 2020-04-25]
      Key fingerprint = A1BD 8E9D 78F7 FE5C 3E65  D8AF 8B48 AD62 4692 5553
uid                  Debian Archive Automatic Signing Key (7.0/wheezy) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-wheezy-stable.gpg
-------------------------------------------------------
pub   4096R/65FFB764 2012-05-08 [expires: 2019-05-07]
      Key fingerprint = ED6D 6527 1AAC F0FF 15D1  2303 6FB2 A1C2 65FF B764
uid                  Wheezy Stable Release Key &lt;debian-release@lists.debian.org&gt;</screen>
		 <sidebar> <title><emphasis>实务上</emphasis> 添加可信任的钥匙</title>
		 <indexterm>
			<primary>可信任的钥匙</primary>
		</indexterm>
		 <indexterm>
			<primary>钥匙</primary>
			<secondary>APT 的认可钥匙</secondary>
		</indexterm>
		 <para>
			将第三方套件来源加入 <filename>sources.list</filename> 文件后，必须告知 APT 信任对应的 GPG 认证密钥 (否则将继续抱怨且无法确认来自该典藏所的套件)。第一步是取得公钥。多半以一个小小的纯文本档做为公钥，在下面的例子里，我们称它为 <filename>key.asc</filename>。
		</para>
		 <para>
			管理者可以运行 <command>apt-key add &lt; key.asc</command>，添加认证密钥。也可以使用 <command>synaptic</command> 图形接口：它的 “认证” 分页在 <menuchoice><guimenu>设置</guimenu> <guisubmenu>保存库</guisubmenu></menuchoice> 菜单内，可以从 <filename>key.asc</filename> 文件导入钥匙。
		</para>
		 <indexterm>
			<primary><emphasis role="pkg">gui-apt-key</emphasis></primary>
		</indexterm>
		 <para>
			想要有专属且详细的可信任钥，可以使用 <command>gui-apt-key</command> (在同名套件内)，以图形接口管理可信任钥。
		</para>
		 </sidebar> <para>
			适当的钥纳入钥匙圈后，APT 将检查签章后才会运行任何危险的操作，若要求安装的套件其认证不明确时，前端将出现警示消息。
		</para>

	</section>
	 <section id="sect.dist-upgrade">
		<title>升级至下个稳定发行版</title>
		 <para>
			Debian 知名的功能之一是可升级至下个稳定版:<foreignphrase>dist-upgrade</foreignphrase> — 知名的句子 — 相当促进 Debian 的名声。除了极少的例外，升级电脑系统祗需几分钟的时间，或暂十来分钟，依照从套件保存库下载的速度而定.
		</para>
		 <section>
			<title>建议进程</title>
			 <para>
				Debian 各稳定版之间存在相当的差异，升级前应仔细阅读发布说明。
			</para>
			 <sidebar> <title><emphasis>基本</emphasis> 发布说明</title>
			 <para>
				操作系统 (更寛广的说，任何软件都在内) 的发布说明是一份描述软件概况的文档，特别关照指定的版本。相对于完成的软件文档，这些文档相当简短，通常列出前版之后新生成的功能。也提供升级的进程、对前版用户的警示、以及若干错误更正。
			</para>
			 <para>
				发布说明是在线的：当前稳定版的发布说明使用固定的 URL，旧版的发布说明可在其代码名下找到:<ulink type="block" url="http://www.debian.org/releases/stable/releasenotes" /> <ulink type="block" url="http://www.debian.org/releases/wheezy/releasenotes" />
			</para>
			 </sidebar> <para>
				本段内容专注于由 <emphasis role="distribution">Wheezy</emphasis> 系统升级至 <emphasis role="distribution">Jessie</emphasis>。这是系统的主要运作；不是 100% 无风险，必须先备份重要的数据才升级。
			</para>
			 <para>
				减少安装的套件，祗安装绝对必要的套件，才能让升级容易 (且简短)。相关的工具包括 <command>aptitude</command>、<command>deborphan</command> 与 <command>debfoster</command> (见 <xref linkend="sect.automatic-tracking" />)。例如，您可使用以下命令，再使用 <command>aptitude</command> 的交互模式再检查并微调该移除的套件：
			</para>
			 
<screen># <userinput>deborphan | xargs aptitude --schedule-only remove</userinput></screen>
			 <para>
				接着开始升级了。首先修改 <filename>/etc/apt/sources.list</filename> 文件的内容，告诉 APT 从 <emphasis role="distribution">Jessie</emphasis> 而不是从 <emphasis role="distribution">Wheezy</emphasis> 提取套件。若文件内只有 <emphasis role="distribution">Stable</emphasis> 而不是指名代码，则不需要修改，因为 <emphasis role="distribution">Stable</emphasis> 总是指向 Debian 最新的发布版。修改或不修改都一样，必须重新加载可用套件数据库 (使用 <command>apt update</command> 命令或 <command>synaptic</command> 图形接口的重新加载钮)。
			</para>
			 <para>
				注册这些添加的套件来源后，首先运行最低量的升级 <command>apt upgrade</command>。以两阶段升级，减缓套件管理工具的工作并确保使用最新的套件，纳入完整发行版升级所需的错误更正与改进。
			</para>
			 <para>
				第一次升级完成后，就该处理升级本身，<command>apt full-upgrade</command>、<command>aptitude</command>、或 <command>synaptic</command>均可。采用之前应小心检查建议的举措：应添加建议的套件或移除建议且不再需要的套件。任何情况下，前端都应与 <emphasis role="distribution">Jessie</emphasis> 系统兼容且是最新的。所以，必须耐心地等待下载必要的套件，回复 Debconf 的问题以及在地的配置档，然后等 APT 完成它的工作。
			</para>

		</section>
		 <section>
			<title>处理升级后的问题</title>
			 <para>
				仅管 Debian 管理者已经尽力做好份内的工作，主系统的升级仍可能卡卡的不如想像中顺利。软件的新版本可能无法与旧的兼容 (例如，可能改变缺省行为或数据格式)。同时，尽管在 Debian 发布前做为详尽的测试，还是有若干漏网的错误。
			</para>
			 <para>
				可以先安装 <emphasis role="pkg">apt-listchanges</emphasis> package, 套件，在套件升级前先显示可能问题。由套件维护者编辑的这些信息且置于 <filename>/usr/share/doc/<replaceable>套件名</replaceable>/NEWS.Debian</filename> 文件名内，供用户参考。阅读该等文件 (可能经由 <emphasis role="pkg">apt-listchanges</emphasis>) 应有助于归避不好的意外。
			</para>
			 <para>
				新版的软件不见得都能顺利运作。不够普及或未经详实测试就会出现这种现象；在稳定版里，最后升级的软件常常后悔。碰到这种情形，首先应查看错误追踪系统 <literal>https://bugs.debian.org/<replaceable>套件名称</replaceable></literal>，寻找别人提报的踪迹。若尚未被提报，就应动手提报它 <command>reportbug</command>。若已被提报，错误报告与相关的消息就是处理该错误很好的信息来源：
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						有时已有补丁，且该补丁可从错误报告中获取；此时，您可以在本地重新编译以得到一个修复了问题的版本（参见 <xref linkend="sect.rebuilding-package" />）；
					</para>

				</listitem>
				 <listitem>
					<para>
						否则，用户可能找到另个解决问题的方法且在报告内分享；
					</para>

				</listitem>
				 <listitem>
					<para>
						再不然，维护者可能已准备并公开修订套件。
					</para>

				</listitem>

			</itemizedlist>
			 <para>
				很严重的错误，将有特别的套件供稳定版使用。在这种情况下，修订后的套件位于 Debian 镜射站的 <literal>proposed-updates</literal> 区块 (见 <xref linkend="sect.proposed-updates" />)。对应的款目暂时加在 <filename>sources.list</filename> 文件内，可用 <command>apt</command> 或 <command>aptitude</command> 命令安装升级套件。
			</para>
			 <para>
				修订套件尚未被稳定版管理者认可时，就不会出现在此区块。用户必须自己动手认可它。虽然列在此的套件尚未可得，但至少已知在审查中。<ulink type="block" url="https://release.debian.org/proposed-updates/stable.html" />
			</para>

		</section>

	</section>
	 <section id="sect.regular-upgrades">
		<title>保持系统在最新状态</title>
		 <para>
			Debian 发行版永远处于动态、持续变化中。大部份的变化在 <emphasis role="distribution">测试版</emphasis> 与 <emphasis role="distribution">不稳定版</emphasis> 中，即使是 <emphasis role="distribution">稳定版</emphasis> 也随时在更新中，主要是安全相关的修订。不论运行那个版本，都需保持在最新的版本，才能用到最新的状态及修订错误。
		</para>
		 <para>
			最好定期运行升级与更新，虽然很琐碎却是必要的。幸运的是，这种重复性的工作可以自动运行，有很多任务具可以使用。
		</para>
		 <para>
			第一个工具是 <command>apticron</command>，位于同名套件中。主要作用是每日运行一个脚本 (经由 <command>cron</command>)。这个脚本更新可用套件清单，若已安装的套件不在此清单内，则发送电子邮件列出该等套件清单，并指出在新版中可用的套件。明显地，此套件的对象是 Debian <emphasis role="distribution">稳定版</emphasis> 的用户，对其他版本的用户而言，此清单太长了。取得可更新清单后，<command>apticron</command> 自动下载它们。不会安装它们 — 那是管理者的权限与工作 — 但已下载的套件可以在地 (于 APT 缓存内) 安装，速度快多了。
		</para>
		 <para>
			同时管理多部电脑的管理者一定很感谢被通知有待升级的套件，但升级本身还是很繁琐的工作，所有有另个 <filename>/etc/cron.daily/apt</filename> 脚本 (在 <emphasis role="pkg">apt</emphasis> 套件内) 可用。此脚本亦是由 <command>cron</command> 每日运行 (且不是交互式)。以 APT 配置变量 (保存在文件内的 <filename>/etc/apt/apt.conf.d/</filename>) 控制其运作。主要的变量是：
		</para>
		 <variablelist>
			<varlistentry>
				<term><literal>APT::Periodic::Update-Package-Lists</literal></term>
				 <listitem>
					<para>
						此选项允许您指定重新加载的频率。<command>apticron</command> 也可以在无变量的前提下运行，因为 <command>apticron</command> 本来就已在运行中。
					</para>

				</listitem>

			</varlistentry>
			 <varlistentry>
				<term><literal>APT::Periodic::Download-Upgradeable-Packages</literal></term>
				 <listitem>
					<para>
						再次地，此选项指定频率 (以日计)，此时实际地下载套件。同样地，用户不需指定运行 <command>apticron</command>。
					</para>

				</listitem>

			</varlistentry>
			 <varlistentry>
				<term><literal>APT::Periodic::AutocleanInterval</literal></term>
				 <listitem>
					<para>
						此选项包括 <command>apticron</command> 没有的功能。指定过时套件 (未被任何发行版参照) 移出 APT 缓存的时机。如此一来，APT 缓存的容量就保持在合理的范围，不必再担心其工作负担。
					</para>

				</listitem>

			</varlistentry>
			 <varlistentry>
				<term><literal>APT::Periodic::Unattended-Upgrade</literal></term>
				 <listitem>
					<indexterm><primary><emphasis role="pkg">unattended-upgrades</emphasis></primary></indexterm> <para>
						启用此选项后，逐日启用的脚本将运行 <command>unattended-upgrade</command> (从 <emphasis role="pkg">unattended-upgrades</emphasis> 套件中取用) — 如其名称所示 — 可自动化升级同套件 (缺省祗运行安全性升级，但可在 <filename>/etc/apt/apt.conf.d/50unattended-upgrades</filename> 内客制化它)。运行 <command>dpkg-reconfigure -plow unattended-upgrades</command> 时可以设置此选项。
					</para>

				</listitem>

			</varlistentry>

		</variablelist>
		 <para>
			其他的选项允许更精细地控制清空缓存。未完全列出，但可在 <filename>/etc/cron.daily/apt</filename> 脚本中查看。
		</para>
		 <indexterm>
			<primary><emphasis role="pkg">gnome-packagekit</emphasis></primary>
		</indexterm>
		 <para>
			这些工具在服务器运作正常，但桌面用户则习惯于交互式系统。所以，“Debian 桌面环境” 安装 <emphasis role="pkg">gnome-packagekit</emphasis> (至少适用于使用 GNOME 桌面环境者)。需要升级时在桌面环境的通知区块有个图标；按下该图标则运行 <command>gpk-update-viewer</command> 命令，简化的升级接口。浏览可用的升级，读取相关套件的说明以及对应的 <filename>changelog</filename> 款目，并选择升级的部份。
		</para>
		 <figure>
			<title>使用 <command>gpk-update-viewer</command> 升级</title>
			 <mediaobject>
				<imageobject>
					<imagedata fileref="images/gnome-packagekit.png" format="PNG" scalefit="1" width="70%" />
				</imageobject>

			</mediaobject>

		</figure>

	</section>
	 <section id="sect.automatic-upgrades">
		<title>自动升级</title>
		 <indexterm>
			<primary>升级</primary>
			<secondary>系统自动升级</secondary>
		</indexterm>
		 <indexterm>
			<primary>自动升级</primary>
		</indexterm>
		 <para>
			Falcot Corp 虽有多部电脑但人力有限，其管理者试图尽可能地自动升级。必须在无人为介入情况下处理升级事宜。
		</para>
		 <section>
			<title>配置 <command>dpkg</command></title>
			 <para>
				如稍早提过的 (见专栏 <xref linkend="sidebar.questions-conffiles" />)，<command>dpkg</command> 可在不必确认的情况下取代原来的配置档 (以 <literal>--force-confdef --force-confold</literal> 选项运行该功能)。然而，有三个交互来源：有些来自 APT 自身、有些由 <command>debconf</command> 处理、还有的是由套件配置脚本运行。
			</para>

		</section>
		 <section>
			<title>配置 APT</title>
			 <para>
				APT 的例子很简单：<literal>-y</literal> 选项 (或 <literal>--assume-yes</literal>) 告诉 APT 面对所有的问题时，答案都是 “yes”。
			</para>

		</section>
		 <section>
			<title>配置 <command>debconf</command></title>
			 <para>
				<command>debconf</command> 需要较详细的说明。此程序原本的设计就是控制给用户看到的相关性及数量，以及显示的方法。问题需有最小的优先权；拥有最小优先权以上的问题才显示。<command>debconf</command> 缺省的答案 (由套件维护者设置) 会略过。
			</para>
			 <para>
				其他的相关配置元素是前端用到的接口。若选择 <literal>noninteractive</literal>，就停用所有的用户交互。若套件试图显示信息性说明，则以电子邮件送给管理者。
			</para>
			 <para>
				配置 <command>debconf</command> 时，用到 <command>dpkg-reconfigure</command> 工具，它是来自 <emphasis role="pkg">debconf</emphasis> 套件；相关的命令是 <command>dpkg-reconfigure debconf</command>。配置值可能是在需要时暂时取代的环境变量 (例如，<varname>DEBIAN_FRONTEND</varname> 控制接口，如同在 <citerefentry><refentrytitle>debconf</refentrytitle>
				<manvolnum>7</manvolnum></citerefentry> 手册页面所述)。
			</para>

		</section>
		 <section>
			<title>处理命令行接口</title>
			 <para>
				最后一个交互来源，以及最难摆脱的，是 <command>dpkg</command> 运行的配置脚本。不幸的是，没有标准的解法且没有较佳的答案。
			</para>
			 <para>
				通常的做法是，把标准的输入由空白内容的 <filename>/dev/null</filename> 文件转向给 <command><replaceable>命令</replaceable> &lt;/dev/null</command>，或由新的键入字符串取代。以上的方法都不是 100 % 可靠，但它们可以转至缺省的答案，因为大部份的脚本已考量到无默认值的答案。
			</para>

		</section>
		 <section>
			<title>神奇的组合</title>
			 <para>
				把前述的元素组合起来，就可能设计出一个可处理自动升级的小而可靠脚本。
			</para>
			 <example id="example.non-interactive-upgrade">
				<title>无交互升级脚本</title>
				 
<programlisting>export DEBIAN_FRONTEND=noninteractive
yes '' | apt-get -y -o DPkg::options::="--force-confdef" -o DPkg::options::="--force-confold" dist-upgrade</programlisting>

			</example>
			 <sidebar> <title><emphasis>实务</emphasis> Falcot Corp 个案</title>
			 <para>
				Falcot 公司采用异质系统电脑，运行多种功能。管理者必须为每部电脑挑选最适合的解决方案。
			</para>
			 <para>
				事实上，安装 <emphasis role="distribution">Jessie</emphasis> 的服务器脑采用上述的 “奇特组合”，并且自动更新。只有最挑剔的服务器 (如防火墙) 才以 <command>apticron</command> 设置，所以总是在管理员的监控下更新。
			</para>
			 <para>
				办公室的桌机也可安装 <emphasis role="distribution">Jessie</emphasis>，但加装 <emphasis role="pkg">gnome-packagekit</emphasis>，所以用户可以自行更新。没有用户介入的更新，电脑可能出现无预期的结果，可能让用户摸不清头绪。
			</para>
			 <para>
				在实验室里，有些安装 <emphasis role="distribution">测试版</emphasis> — 就是使用最新版的软件 — 的电脑也不会自动更新。管理者必须配置 APT 才能更新它们；决定更新时 (手动)，列出重新加载套件清单并避免下载繁琐的部件，管理者就能专注在真正有用的部件。
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.searching-packages">
		<title>搜索套件</title>
		 <para>
			Debian 纳入的软件愈来愈多，出现自相矛盾的现象：Debian 的工具可以处理大部份的工作，但很难在众多的套件中找到适合的工具。没有适当的方式搜索 (或找到) 正确的工具始终是个问题。幸运的是，此问题已经几乎全部解决了。
		</para>
		 <para>
			最琐碎的搜索可能是找到正确的套件名称。若 <command>apt show <replaceable>套件名称</replaceable></command> 送回结果，表示该套件存在。不幸的是，必须知道或猜对套件名称，却几乎是不可能的.
		</para>
		 <sidebar> <title><emphasis>秘诀</emphasis> 套件命名惯例</title>
		 <para>
			部份类型的套件遵循惯例命多；祗要知道该惯例就能够猜到正确的套件名称。例如，Perl 模块，惯例是称呼为 <literal>XML::Handler::Composer</literal> 上游的套件名就是 <emphasis role="pkg">libxml-handler-composer-perl</emphasis>。从 Python 启用 <command>gconf</command> 系统的程序库就是套件 <emphasis role="pkg">python-gconf</emphasis>。不幸的是即使套件管理者努力选择上游发展者的惯例，仍无法猜中所有套件的通俗惯例。
		</para>
		 </sidebar> <para>
			搜索纯文本的套件名称，虽然有限但成功率较高。还可以搜索套件说明的内容：除了搜索套件名称、键词之外，还可搜索其说明。<command>apt-cache</command> 与 <command>axi-cache</command> 是此等搜索的工具；例如，<command>apt-cache search video</command> 将找出名称或说明内有键词 “video” 的套件。
		</para>
		 <para>
			更复杂的搜索，需要更有力的工具，如 <command>aptitude</command> 是其中之一。<command>aptitude</command> 可搜索套件元数据字段的内容。例如，以下的范例搜索含有 <literal>kino</literal> 字样的套件名称，其说明包括 <literal>video</literal> 与维护者名字为 <literal>paul</literal>：
		</para>
		 
<screen>$ <userinput>aptitude search kino~dvideo~mpaul</userinput>
p   kino  - Non-linear editor for Digital Video data
$ <userinput>aptitude show kino</userinput>
Package: kino
State: not installed
Version: 1.3.4-2.1+b1
Priority: extra
Section: video
Maintainer: Paul Brossier &lt;piem@debian.org&gt;
Architecture: amd64
Uncompressed Size: 8,472 k
Depends: libasound2 (&gt;= 1.0.16), libatk1.0-0 (&gt;= 1.12.4), libavc1394-0 (&gt;=
         0.5.3), libavcodec56 (&gt;= 6:11~beta1) | libavcodec-extra-56 (&gt;=
         6:11~beta1), libavformat56 (&gt;= 6:11~beta1), libavutil54 (&gt;=
         6:11~beta1), libc6 (&gt;= 2.14), libcairo2 (&gt;= 1.2.4), libdv4,
         libfontconfig1 (&gt;= 2.11), libfreetype6 (&gt;= 2.2.1), libgcc1 (&gt;=
         1:4.1.1), libgdk-pixbuf2.0-0 (&gt;= 2.22.0), libglade2-0 (&gt;= 1:2.6.4-2~),
         libglib2.0-0 (&gt;= 2.12.0), libgtk2.0-0 (&gt;= 2.24.0), libice6 (&gt;=
         1:1.0.0), libiec61883-0 (&gt;= 1.2.0), libpango-1.0-0 (&gt;= 1.14.0),
         libpangocairo-1.0-0 (&gt;= 1.14.0), libpangoft2-1.0-0 (&gt;= 1.14.0),
         libquicktime2 (&gt;= 2:1.2.2), libraw1394-11, libsamplerate0 (&gt;= 0.1.7),
         libsm6, libstdc++6 (&gt;= 4.9), libswscale3 (&gt;= 6:11~beta1), libx11-6,
         libxext6, libxml2 (&gt;= 2.7.4), libxv1, zlib1g (&gt;= 1:1.1.4)
Recommends: ffmpeg, curl
Suggests: udev | hotplug, vorbis-tools, sox, mjpegtools, lame, ffmpeg2theora
Conflicts: kino-dvtitler, kino-timfx, kinoplus
Replaces: kino-dvtitler, kino-timfx, kinoplus
Provides: kino-dvtitler, kino-timfx, kinoplus
Description: Non-linear editor for Digital Video data
 Kino allows you to record, create, edit, and play movies recorded with DV
 camcorders. This program uses many keyboard commands for fast navigating and
 editing inside the movie. 
 
 The kino-timfx, kino-dvtitler and kinoplus sets of plugins, formerly
 distributed as separate packages, are now provided with Kino.
Homepage: http://www.kinodv.org/

Tags: field::arts, hardware::camera, implemented-in::c, implemented-in::c++,
      interface::x11, role::program, scope::application, suite::gnome,
      uitoolkit::gtk, use::editing, use::learning, works-with::video,
      x11::application</screen>
		 <para>
			此搜索祗找到一个套件，<emphasis role="pkg">kino</emphasis>，满足全部三个条件。
		</para>
		 <para>
			这种多条件的搜索较为刚性，所以很少人用它。因此发明新的标签系统，以不同角度处理搜索。套件的标签在其他情况之外多了专题性分类，通称为 “层面性分类”。以前述的 <emphasis role="pkg">kino</emphasis> 为例，套件标签指出 Kino 是处理影像的 Gnome 级软件，主要功能为编辑。
		</para>
		 <para>
			浏览此分类系统可协助搜索对应的已知需求；即使收到一堆 (合理数量) 结果，还可以用人工方式再搜索。可以使用 <literal>~G</literal> 搜索模式于 <command>aptitude</command> 内，但可以再简化浏览标签管理的网站：<ulink type="block" url="http://debtags.alioth.debian.org/cloud/" />
		</para>
		 <indexterm>
			<primary><emphasis role="pkg">debtags</emphasis></primary>
		</indexterm>
		 <indexterm>
			<primary>标签</primary>
		</indexterm>
		 <para>
			以 <literal>works-with::video</literal> 及 <literal>use::editing</literal> 标签可找出若干套件，包括 <emphasis role="pkg">kino</emphasis> 与 <emphasis role="pkg">pitivi</emphasis> 影像编辑器。愈来愈多人使用这种分类系统，在此基础上，套件管理者创建更有效的接口。
		</para>
		 <para>
			总的来说，最好的工具取决于搜索时你所期望达到的复杂程度：
		</para>
		 <itemizedlist>
			<listitem>
				<para>
					<command>apt-cache</command> 只能通过软件包名称和描述信息来进行搜索，对于搜索符合少量关键词的特定软件包十分方便；
				</para>

			</listitem>
			 <listitem>
				<para>
					当搜索条件包括软件包之间的关系或者像维护者名称的其它元数据时，<command>synaptic</command>将更加有用；
				</para>

			</listitem>
			 <listitem>
				<para>
					当需要基于标签来搜索时，<command>packagesearch</command> 是一个很好用的工具，可以根据若干条件（包括软件包中包含的文件名）进行软件包搜索的图形化专用工具。命令行下则使用 <command>axi-cache</command>。
				</para>
				 <indexterm>
					<primary><emphasis role="pkg">packagesearch</emphasis></primary>
				</indexterm>
				 <indexterm>
					<primary><command>axi-cache</command></primary>
				</indexterm>

			</listitem>
			 <listitem>
				<para>
					最后，当搜索涉及有逻辑操作的复杂的表达式时，首选工具为 <command>aptitude</command> 的搜索语法，尽管有点晦涩难用但功能相当强大，它有命令行和交互两种模式。
				</para>

			</listitem>

		</itemizedlist>

	</section>
</chapter>

