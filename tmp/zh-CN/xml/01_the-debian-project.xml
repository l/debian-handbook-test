<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="the-debian-project" lang="zh-CN">
	<chapterinfo>
		 <keywordset>
			<keyword>客观的</keyword>
			 <keyword>意味着</keyword>
			 <keyword>操作</keyword>
			 <keyword>志愿者</keyword>

		</keywordset>

	</chapterinfo>
	 <title>Debian 项目</title>
	 <highlights> <para>
		在深入涉及到相关技术之前，让我们看一看什么是 Debian 项目，它的目标、意义是什么以及它是如何运转的。
	</para>
	 </highlights> <section id="sect.what-is-debian">
		<title>什么是 Debian？</title>
		 <indexterm>
			<primary>联系</primary>
		</indexterm>
		 <sidebar> <title><emphasis>文化</emphasis> Debian 名称的起源</title>
		 <para>
			没有什么特别的：Debian 不是一个缩写词。它的名字实际上是两个姓氏的组合：Ian Murdock，和他那时的女朋友，Debra。所以就有了 Debra + Ian = Debian。
		</para>
		 </sidebar> <para>
			Debian 是一个 GNU/Linux 的发行版。我们稍后将会详细地讨论什么是发行版<xref linkend="sect.role-of-distributions" />。但是当前情况下，我们暂且将其简单地归纳为一个完整的操作系统，包括软件和系统的安装及管理，所有的这些都基于 Linux 内核和自由软件（尤其是来自 GNU 项目的自由软件）。
		</para>
		 <para>
			当他在自由软件基金会（FSF）的领导下于1993年创建 Debian 时，Ian Murdock 有清晰的目标，他在 <emphasis>Debian Manifesto</emphasis> 中对其作了阐述。他所追求的自由操作系统将有两个首要的特性。第一点是质量：Debian 将在最大的关怀与努力下进行开发，以与 Linux 内核相配。另外，它同样将是一个非商业化的发行版，足够可靠而能够和主流商业发行版相竞争。在他眼里，这两个雄心壮志只能以开放 Debian 开发过程的方式达成，正如 Linux 和 GNU 工程所做的那样。因此，互帮互查将能够持续地改进这个项目。
		</para>
		 <sidebar> <title><emphasis>文化</emphasis> GNU，自由软件基金会（FSF）的工程</title>
		 <indexterm>
			<primary>GNU</primary>
		</indexterm>
		 <indexterm>
			<primary>GNU</primary>
			<secondary> 不是 Unix（is Not Unix）</secondary>
		</indexterm>
		 <para>
			GNU 工程是一系列由自由软件基金会（FSF）开发或赞助的自由软件，由其标志性领袖，理查德·M·斯托曼（Richard M. Stallman）发起。GNU 是一个递归缩写，代表“GNU 不是 Unix（GNU is Not Unix）”。
		</para>
		 </sidebar> <sidebar> <title><emphasis>文化</emphasis> 理查德·斯托曼</title>
		 <indexterm>
			<primary>理查德·斯托曼</primary>
		</indexterm>
		 <indexterm>
			<primary>RMS</primary>
		</indexterm>
		 <para>
			<acronym>FSF</acronym> 的建立者和 GPL 许可证的作者，理查德·M·斯托曼（通常用他的名称首字母指代，即 RMS）是自由软件运动的一个魅力领导人物。因其具有毫不妥协的态度，并不是所有人都对他表示赞美。但他对自由软件的非技术性贡献（尤其是法律和哲学层面）则被所有人所尊重。
		</para>
		 </sidebar> <section>
			<title>一个多平台操作系统</title>
			 <indexterm>
				<primary>超发行版</primary>
			</indexterm>
			 <sidebar> <title><emphasis>社区</emphasis> 伊恩·默多克的旅程</title>
			 <indexterm>
				<primary>伊恩·默多克</primary>
			</indexterm>
			 <indexterm>
				<primary>伊恩·默多克</primary>
			</indexterm>
			 <indexterm>
				<primary>Progeny</primary>
			</indexterm>
			 <para>
				伊恩·默多克是 Debian 项目的创立者，也是该项目从1993年至1996年的第一任领导者。在把接力棒交给 Bruce Perens 之后，伊恩不经常参与公众活动。他回到了自由软件社区的背后工作，为了尝试商业发行一个 Debian 的衍生发行版建立了 Progeny 公司。遗憾的是，这次冒险尝试是一个商业失败，开发活动也被放弃了。公司在经历了几年的摸爬滚打之后，以一个服务提供商的身份最终于2007年的4月破产。在 Progeny 发起的各个项目中，只有 <emphasis>discover</emphasis> 继续存在。这是一个自动硬件检查工具。
			</para>
			 </sidebar> <para>
				Debian 依然坚持初衷，伴随诸多的成功以达到巨大的规模。它所提供的12个架构包括10个硬件架构和2个内核（Linux 与 FreeBSD，尽管基于 FreeBSD 的版本不在官方支持架构集合之内）。此外有超过21,000软件包适用于各种需求，不管是家用级的还是企业级的。
			</para>
			 <para>
				发行版的超大体积很不方便：用84张 CD-ROM 光盘在标准个人电脑上安装完整的版本是很不合理的……这就是 Debian 渐渐被看作所谓“超发行版”的原因，人们可以从中抽取针对特别受众的特定版本：用于传统办公的 Debian-Desktop 版本，用于学术环境的教育与教学的 Debian-Edu 版本，用于医学应用的 Debian-Med 版本，供青少年使用的 Debian-Junior 版本，等等。更完整的子项目清单可在专门的章节找到，请参阅 <xref linkend="sect.sub-projects" />。
			</para>
			 <para>
				这些 Debian 的组成部分由定义清晰的框架组织而成，保证“子发行版”之间互相兼容、互不干扰。它们都采用一致的方案释放出新版本。同时它们都基于相同的基础构建而成，可以轻松地使用 Debian 仓库中的软件进行扩展、完善和个性化配置。
			</para>
			 <indexterm>
				<primary>子项目</primary>
			</indexterm>
			 <para>
				所有 Debian 的工具都遵循这个指导方向：<command>debian-cd</command> 已经存在很长时间了，它可以用来创建一组光盘，其中仅包含一系列预先选择的软件包；<command>debian-installer</command> 也是一个模块化的安装工具，易于适应不同的需求。<command>APT</command> 可以使用不同的来源安装软件包，同时保证系统整体的一致性。
			</para>
			 <sidebar> <title><emphasis>工具</emphasis> 创建 Debian 安装光盘</title>
			 <indexterm>
				<primary><command>debian-cd</command></primary>
			</indexterm>
			 <para>
				<command>debian-cd</command> 创建即时可用的安装媒介（如 CD、DVD、蓝光等等）的 ISO 镜像。所有关于这个软件的讨论（使用英文）均在 <email>debian-cd@lists.debian.org</email> 这个邮件列表中进行。这个团队由 Steve Mclntyre 领导，他同时控制着官方的 Debian 镜像构建过程。
			</para>
			 </sidebar> <sidebar> <title><emphasis>基本知识</emphasis> 每台电脑，都有它的架构</title>
			 <para>
				术语 “architecture（架构）” 表明了计算机的类型（最为人所知的就是 Mac 或是 PC 了）。每一种架构的主要区别在于它使用的处理器，通常不同的处理器之间是不能兼容的。这些硬件的不同包含了大量不同的操作方法，因此需要为每种不同的架构分别编译软件。
			</para>
			 <indexterm>
				<primary>架构</primary>
			</indexterm>
			 <indexterm>
				<primary>处理器</primary>
			</indexterm>
			 <para>
				Debian 项目中可获取的大多数的软件都是用可移植编程语言编写的：相同的源代码可以为不同的架构编译。事实上，一个可执行的二进制文件，通常都是为特定的架构编译的，在不同的架构的机器上几乎不能起任何作用。
			</para>
			 <para>
				重申每一个程序是由源代码编写而成的；这些源代码就是包含了各种所使用的编程语言的指令的文本文件。在你可以使用软件之前，源代码需要被编译，目的是把代码转换成二进制文件（一系列处理器可以执行的机器指令）。每一种编程语言都有一个特定的编译器来执行这个操作（例如：<command>gcc</command> 是C语言的编译器）。
			</para>
			 <indexterm>
				<primary>源</primary>
				<secondary>代码</secondary>
			</indexterm>
			 <indexterm>
				<primary>二进制代码</primary>
			</indexterm>
			 <indexterm>
				<primary>编译</primary>
			</indexterm>
			 <indexterm>
				<primary>编译器</primary>
			</indexterm>
			 </sidebar> <sidebar> <title><emphasis>工具</emphasis> 安装程序</title>
			 <indexterm>
				<primary><command>debian-installer</command></primary>
			</indexterm>
			 <para>
				<command>debian-installer</command> 是 Debian 安装程序的名字。它的模块化设计令他可以应用于各种各样的安装场景。开发工作在 Cyril Brulebois 的指导下沟通协调于 <email>debian-boot@lists.debian.org</email> 邮件列表。
			</para>
			 </sidebar>
		</section>
		 <section>
			<title>自由软件的质量</title>
			 <para>
				Debian 遵循所有的自由软件的原则，在充分准备好之前新版本不会释出。开发者不会因为一些时间表而被强制的跟随一个随意的截止日期。人们经常抱怨 Debian 的稳定释出之间的时间间隔过长，但是这样的谨慎同样也保证了 Debian 一贯的可靠性：在赋予全发行版“稳定”标签之前长时间的测试确实是必要的。
			</para>
			 <para>
				Debian 不会在质量问题上妥协：众所周知严重的 bug 都会在新版本中得到解决，即使需要推迟已经公布的释出日期。
			</para>

		</section>
		 <section>
			<title>法律框架：非营利组织</title>
			 <para>
				从法律上来说，Debian 是一个由美国的非营利志愿者协会管理的项目。这个项目大约有一千左右的 <emphasis>Debian 开发者</emphasis>，但是聚集了远超这个数的贡献者（翻译者，bug 报告者，艺术家，临时开发者等）。
			</para>
			 <para>
				为了它的使命能成为现实，Debian 拥有一个巨大的基础架构，拥有许多由赞助者提供的服务器连接在因特网上。
			</para>
			 <sidebar> <title><emphasis>社区</emphasis> 在 Debian 的背后有 SPI（Software in the Public Interest）与当地分支机构的帮助</title>
			 <indexterm>
				<primary>联系</primary>
			</indexterm>
			 <indexterm>
				<primary>SPI</primary>
			</indexterm>
			 <indexterm>
				<primary>Debian 法国</primary>
			</indexterm>
			 <indexterm>
				<primary>Software in the Public Interest</primary>
			</indexterm>
			 <para>
				在 Debian 的名下不拥有任何的服务器，因为它只是一个 <emphasis>Software in the Public Interest</emphasis> 协会内的项目，并且由 SPI 进行硬件管理与财务管理（捐赠，支付硬件费用等）。SPI 在一开始设立的时候只是为了 Debian 项目，这个协会现在也主持着其它的软件项目，尤其是 PostgreSQL 数据库，Freedesktop.org（为了标准化现代桌面图形化环境的各个部分的项目，如GNOME与KDE）和 Libre Office 办公套件。<ulink type="block" url="http://www.spi-inc.org/" />
			</para>
			 <para>
				在 SPI 之外，各种地区协会与 Debian 密切协作来为 Debian 项目筹措资金，使得不必要所有事情都集中在美国；在 Debian 项目的语汇中这些协会被称作 “可信组织” 。这样的设置避免了过高的国际交流成本，同时也契合了项目本身的去中心化的理念。
			</para>
			 <para>
				虽然可信组织的列表是相当的短，有许多以促进 Debian 项目为目标的 Debian 相关的协会存在：<emphasis>Debian 法国</emphasis>，<emphasis>Debian 西班牙</emphasis>，<emphasis>Debian 瑞士</emphasis>，与世界各地的其他协会。不要犹豫加入你所在的当地协会来支持 Debian 项目吧！<ulink type="block" url="http://wiki.debian.org/Teams/Auditor/Organizations" /><ulink type="block" url="http://france.debian.net/" /><ulink type="block" url="http://www.debian-es.org/" /><ulink type="block" url="http://debian.ch/" />
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.foundation-documents">
		<title>基金会文档</title>
		 <indexterm>
			<primary>基金会文档</primary>
		</indexterm>
		 <para>
			在项目发起的几年之后，Debian 确定了需要遵循自由软件项目形式的原则。这个慎重而积极的决定使得项目有序而稳定的成长并且确保了所有的成员向同一个方向前进。要成为一个 Debian 的开发者，任何的候选人必须承诺并且证明他们能够支持并且坚守建立在项目的基础文档上的原则。
		</para>
		 <para>
			开发程序被不断的争论，然而这些基础文档被广泛的接受，因此很少更改。Debian 的组织架构也为这些稳定性提供了额外的保证：任何修订案都需要获得四分之三的有效多数的同意才能获得通过。
		</para>
		 <section id="sect.social-contract">
			<title>对用户的承诺</title>
			 <indexterm>
				<primary>社群契约</primary>
			</indexterm>
			 <indexterm>
				<primary>契约，社会</primary>
			</indexterm>
			 <para>
				这个项目同样也有一份“社会契约”。这样一个文本在这个项目中只是为了一个操作系统的开发而存在的么？答案很简单：Debian 为用户工作，更广泛的来说，是为了这个社会。这份契约总结了这个项目所承担的承诺。让我们从更详细的细节中来学习它们：
			</para>
			 <orderedlist>
				<listitem>
					<para>
						Debian 将始终是 100% 的自由软件。
					</para>
					 <para>
						准则一：Debian 是并且还将继续保持完全由自由软件组成。另外，所有由 Debian 项目开发的软件与它自身都会是自由软件。
					</para>
					 <sidebar> <title><emphasis>视角</emphasis> 在软件之外</title>
					 <para>
						第一版的 Debian 社会契约告诉我们“Debian 将会始终保持100%的自由<emphasis>软件</emphasis>”。软件这个词的弃用（在2004年正式启用的1.1版社会契约中）指出了实现自由的愿景，不仅仅是在软件上，也同时在 Debian 期望与操作系统一起提供的文档和其它的要素中。
					</para>
					 <para>
						这个改变，仅仅是作为对编辑的影响，事实上，由数不清的影响，特别是要移除一些成问题的文档。此外，在驱动中使用固件的增长带来了问题：许多是非自由的，然而在适当的操作与固件的通信中又是必需的。
					</para>
					 </sidebar>
				</listitem>
				 <listitem>
					<para>
						我们会回馈自由软件社区。
					</para>
					 <para>
						任何被整合到发行版中的由 Debian 项目贡献的改进都会被反馈到作者（称为“上游”）。通常的，Debian 会与社区合作而不是独立工作。
					</para>
					 <sidebar> <title><emphasis>社区</emphasis> 上游作者，或是Debian开发者？</title>
					 <indexterm>
						<primary>上游作者</primary>
					</indexterm>
					 <indexterm>
						<primary>作者，上游</primary>
					</indexterm>
					 <indexterm>
						<primary>上游</primary>
					</indexterm>
					 <para>
						术语“上游作者”指的是工作中的作者/开发者，是编写与开发软件的人员。另一方面，“Debian 开发者”使用更直观的工作来使软件加入到 Debian 包中（术语“Debian 维护者”更为适当一些）。
					</para>
					 <para>
						在实践中，区分往往不是那么的清晰。Debian 维护者可能会写一个补丁，这样的工作可以使所有人都受益。通常来讲，Debian 鼓励负责 Debian 中对应软件包的人员同时参与到“上游”开发工作中去（然后，他们也就变成了贡献者，而不是仅仅被限制为一个程序使用者的角色）。
					</para>
					 </sidebar>
				</listitem>
				 <listitem>
					<para>
						我们不隐藏问题。
					</para>
					 <para>
						Debian 不是完美的，事实上，每天我们都会发现需要修复的新问题。我们将始终对公众开放完整的缺陷报告数据库。人们在线提交的报告也会尽快对其他人可见。
					</para>

				</listitem>
				 <listitem>
					<para>
						用户和自由软件是我们优先考虑的事。
					</para>
					 <para>
						这个承诺更加难以定义。Debian 规定，如下，当必须要作一个带有一定偏向的决定时，会抛弃那个对开发来说更为方便而会损害用户体验的方案，选择一个更加优雅的方案，即使它会更加的难以实现。这意味着用户与自由软件的利益将会被优先考虑。
					</para>

				</listitem>
				 <listitem>
					<para>
						不符合我们的自由软件规范的作品。
					</para>
					 <para>
						Debian 接受并且理解用户可能需要使用一些非自由软件程序。这就是 Debian 允许混合使用了项目中的部分基础架构与非自由软件的程序可以被安全的再次分发的原因。
					</para>
					 <sidebar> <title><emphasis>社区</emphasis> 是支持还是反对 non-free 区块的呢？</title>
					 <indexterm>
						<primary>非自由（non-free）</primary>
					</indexterm>
					 <indexterm>
						<primary>区块</primary>
						 <secondary>non-free</secondary>
					</indexterm>
					 <para>
						维护一个允许容纳非自由软件的体系的承诺（如“non-free”章节，请看侧边栏<xref linkend="sidebar.sections" />）总是 Debian 社区中的辩论的主题。
					</para>
					 <para>
						反对者指责这相当于让人们远离自由软件，同时这也与只服务于自由软件的原则相背。支持者总是声称大多数的非自由软件包都是“几乎是自由的”，仅仅是被一两条恼人的限制性条件所限制（最常见的就是禁止软件的商业使用）。通过在非自由分支中分发这些软件包，我们相当于间接的向作者解释，如果这些软件包能被包含在主分区中，便可以被更多的人所知并且使用。因此，我们是在礼貌而委婉地提出希望他们能够为了达到这样的目的而改变其许可证。
					</para>
					 <para>
						经过2004年首次不成功的尝试后，对不自由分区的彻底移除已经不太可能再次提上日程了。其中一个有很重要的原因，是这个分区包含了许多仅仅是因为不满足主分区新的要求而被移动至此的重要文档。对GNU计划所提供的某些软件文档来说尤其如此（特指Emacs和Make）。
					</para>
					 <para>
						non-free软件分区就这样一直存在，并成为了与自由软件基金会之间不时产生摩擦的导火索。这也是基金会拒绝正式推荐Debian作为自由软件操作系统的主要原因。
					</para>
					 </sidebar>
				</listitem>

			</orderedlist>

		</section>
		 <section id="sect.dfsg">
			<title>Debian 自由软件指导方针</title>
			 <indexterm>
				<primary>自由软件原则</primary>
			</indexterm>
			 <indexterm>
				<primary>Debian自由软件指导方针 (Debian Free Software Guidelines, DFSG)</primary>
			</indexterm>
			 <indexterm>
				<primary>Debian 自由软件指导方针</primary>
			</indexterm>
			 <indexterm>
				<primary>自由</primary>
				<secondary>软件</secondary>
			</indexterm>
			 <para>
				这个参考文档定义了哪些软件是“足够自由”而可以包含于 Debian 中。如果某个程序的许可证与这些原则相符合，它便能被收录在 main 部分中；如果有所冲突，但是至少允许自由分发的话，它可能被收录于 non-free 部分。正式地来说，non-free 不是 Debian 的组成部分；它属于向用户提供的额外服务。
			</para>
			 <para>
				这些条文不仅仅是Debian的选择标准，也成为了有关自由软件方面的权威解释，同时，它也作为“开源”的基础定义。因此，它成为了“自由软件”概念最早的正式定义之一。
			</para>
			 <para>
				GNU通用公共许可协议、BSD许可协议和还有艺术许可协议，这些都是传统自由软件的许可协议，它们遵循自由软件指导方针中所提到的9个要点。在下面的链接中你会找到发布在Debian网站上的这些许可协议的文本。<ulink type="block" url="http://www.debian.org/social_contract#guidelines" />
			</para>
			 <orderedlist>
				<listitem>
					<formalpara>
						<title>自由的再次发行。</title>
						 <para>
							Debian组件的许可协议不得限制任何一方将此软件作为含有若干不同来源的程序的一套软件集合中的一个组件用于销售或者捐赠。该许可证不得向诸如此类销售行为的销售方索取专利费或者其它费用。
						</para>

					</formalpara>
					 <sidebar> <title><emphasis>回到起点</emphasis>自由许可协议</title>
					 <indexterm>
						<primary>许可协议</primary>
						<secondary>BSD</secondary>
					</indexterm>
					 <indexterm>
						<primary>BSD许可协议</primary>
					</indexterm>
					 <indexterm>
						<primary>许可协议</primary>
						<secondary>GNU通用公共许可协议</secondary>
					</indexterm>
					 <indexterm>
						<primary>GNU通用公共许可协议</primary>
					</indexterm>
					 <indexterm>
						<primary>GNU</primary>
						<secondary>通用公共许可协议</secondary>
					</indexterm>
					 <indexterm>
						<primary>通用公共许可协议</primary>
					</indexterm>
					 <indexterm>
						<primary>许可协议</primary>
						<secondary>艺术</secondary>
					</indexterm>
					 <indexterm>
						<primary>artistic许可协议</primary>
					</indexterm>
					 <para>
						GNU通用公共许可协议，BSD许可协议，以及Artistic许可协议，虽然它们各不相同，但是它们都符合Debian自由软件指导方针。
					</para>
					 <para>
						GNU通用公共许可协议，由自由软件基金会（FSF）使用并推广，是最为常见的许可协议。它的主要特点是，它同样适用于任何被重分发的衍生作品：一个程序，如果它以使用了由GNU通用公共许可协议许可的代码，那么它在分发时也必须遵从GNU通用公共许可协议的条款。因此，它禁止了软件在私有软件中的任何重用行为。这对想要重用GNU通用公共许可协议许可的代码，却使用了不兼容的许可协议的软件造成了严重问题。例如：有时候无法将一个以另一个自由软件协议分发的程序和以GNU通用公共软件许可协议分发的库进行链接。另一方面，这一许可协议在美国法律中相当稳靠：自由软件基金会的律师们参与起草了该许可协议，也时常迫使违规者与自由软件基金会签订和解协议以避免法庭诉讼。<ulink type="block" url="http://www.gnu.org/copyleft/gpl.html" />
					</para>
					 <para>
						BSD许可协议是最为宽松的：任何操作都被允许，包括将修改后的由BSD许可协议许可的代码使用在私有软件中。微软甚至也使用过BSD许可协议的代码：他们基于BSD内核中的TCP/IP层源代码在Windows NT中实现了同样的功能。<ulink type="block" url="http://www.opensource.org/licenses/bsd-license.php" />
					</para>
					 <para>
						最后，艺术许可协议则在这两种协议间达成了某种妥协：允许在私有软件中使用未经修改的代码，但是任何修改的部分则必须公开。<ulink type="block" url="http://www.opensource.org/licenses/artistic-license-2.0.php" />
					</para>
					 <para>
						这些许可协议的完整文本可以在任一Debian系统的<filename>/usr/share/common-licenses/</filename>中找到。
					</para>
					 </sidebar>
				</listitem>
				 <listitem>
					<formalpara>
						<title>源代码。</title>
						 <para>
							程序必须包含源代码，并且必须允许以已编译二进制文件形式和源代码的形式分发。
						</para>

					</formalpara>

				</listitem>
				 <listitem>
					<formalpara>
						<title>衍生作品。</title>
						 <para>
							许可协议必须允许代码修改和衍生作品，并且必须允许这些作品以和原软件相同的许可协议条款进行分发。
						</para>

					</formalpara>

				</listitem>
				 <listitem>
					<formalpara>
						<title>作者源码的完整性。</title>
						 <para>
							The license may restrict source code from being distributed in modified form <emphasis>only</emphasis> if the license allows the distribution of “patch files” with the source code for the purpose of modifying the program at build time. The license must explicitly permit distribution of software built from modified source code. The license may require derived works to carry a different name or version number from the original software (<emphasis>This is a compromise. The Debian group encourages all authors not to restrict any files, source or binary, from being modified</emphasis>).
						</para>

					</formalpara>

				</listitem>
				 <listitem>
					<formalpara>
						<title>不歧视个人或群体。</title>
						 <para>
							许可协议禁止歧视任何个人或群体。
						</para>

					</formalpara>

				</listitem>
				 <listitem>
					<formalpara>
						<title>不歧视各领域的贡献者。</title>
						 <para>
							The license must not restrict anyone from making use of the program in a specific field of endeavor. For example, it may not restrict the program from being used in a business, or from being used for genetic research.
						</para>

					</formalpara>

				</listitem>
				 <listitem>
					<formalpara>
						<title>许可协议的分发。</title>
						 <para>
							The rights attached to the program must apply to all to whom the program is redistributed without the need for execution of an additional license by those parties.
						</para>

					</formalpara>

				</listitem>
				 <listitem>
					<formalpara>
						<title>许可协议不应限定于 Debian。</title>
						 <para>
							属于程序的权利，不应取决于该程序是否是 Debian 的一部分。如果某个程序是从 Debian 中提取出的，而又没有基于 Debian 进行分发或者应用于 Debian，但是根据该程序许可协议的条款，所有程序的使用者，包括程序被再分发之后的使用者，依然都享有该程序在 Debian 系统中相同的权利。
						</para>

					</formalpara>

				</listitem>
				 <listitem>
					<formalpara>
						<title>许可协议禁止损害其他软件。</title>
						 <para>
							许可证禁止限制那些和软件许可一起分发的软件。例如，许可证禁止要求在同一媒介上分发的所有其他程序都必须是自由软件。
						</para>

					</formalpara>
					 <sidebar> <title><emphasis>回到基础</emphasis>著佐权</title>
					 <indexterm>
						<primary>著佐权</primary>
					</indexterm>
					 <indexterm>
						<primary>著作权</primary>
					</indexterm>
					 <para>
						著佐权的原则在于使用著作权来保障作品及其衍生品的自由，而不是如同专有软件的情况那样限制使用的权利。它也是对“著佐权”术语的文字游戏。Richard Stallman 从他的喜欢说双关语的朋友给他写的一封信那里获得了这一灵感，信的内容是这样的：“著佐权：所有权利反转”。著佐权强制保护原始作品（通常是程序）或者修改的作品版本分发的最初的自由。如果某一程序的代码是基于著佐权发布下的程序衍生而来的，那么它就不可能作为专有程序再被分发。
					</para>
					 <para>
						最广为人知的著佐权许可证，当然是 GNU 通用公共许可证以及它的衍生版本，GNU 宽通用公共许可证 (GNU LGPL) 和 GNU 自由文档许可证 (GNU FDL)。不幸的是，著佐权许可证通常来说是不互相兼容的。因此，最好只使用其中一个。
					</para>
					 </sidebar>
				</listitem>

			</orderedlist>
			 <sidebar id="sidebar.bruce-perens"> <title><emphasis>社区</emphasis> Bruce Perens，一位有争议的领导者</title>
			 <indexterm>
				<primary>Bruce Perens</primary>
			</indexterm>
			 <indexterm>
				<primary>Perens, Bruce</primary>
			</indexterm>
			 <indexterm>
				<primary>Open Source</primary>
			</indexterm>
			 <para>
				Bruce Perens was the second leader of the Debian project, just after Ian Murdock. He was very controversial in his dynamic and authoritarian methods. He nevertheless remains an important contributor to Debian, to whom Debian is especially indebted for the editing of the famous “Debian Free Software Guidelines” (DFSG), an original idea of Ean Schuessler. Subsequently, Bruce would derive from it the famous “Open Source Definition”, removing all references to Debian from it. <ulink type="block" url="http://www.opensource.org/" />
			</para>
			 <para>
				His departure from the project was quite emotional, but Bruce has remained strongly attached to Debian, since he continues to promote this distribution in political and economic spheres. He still sporadically appears on the e-mail lists to give his advice and present his latest initiatives in favor of Debian.
			</para>
			 <indexterm>
				<primary>codename</primary>
			</indexterm>
			 <indexterm>
				<primary>name</primary>
				<secondary>codename</secondary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Rex</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Buzz</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Bo</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Hamm</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Slink</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Potato</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Woody</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Sarge</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Etch</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Lenny</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Squeeze</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Wheezy</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Jessie</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Stretch</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Buster</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="distribution">Sid</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary>Toy Story</primary>
			</indexterm>
			 <indexterm>
				<primary>Pixar</primary>
			</indexterm>
			 <para>
				Last anecdotal point, it was Bruce who was responsible for inspiring the different “codenames” for Debian versions (1.1 — <emphasis role="distribution">Rex</emphasis>, 1.2 — <emphasis role="distribution">Buzz</emphasis>, 1.3 — <emphasis role="distribution">Bo</emphasis>, 2.0 — <emphasis role="distribution">Hamm</emphasis>, 2.1 — <emphasis role="distribution">Slink</emphasis>, 2.2 — <emphasis role="distribution">Potato</emphasis>, 3.0 — <emphasis role="distribution">Woody</emphasis>, 3.1 — <emphasis role="distribution">Sarge</emphasis>, 4.0 — <emphasis role="distribution">Etch</emphasis>, 5.0 — <emphasis role="distribution">Lenny</emphasis>, 6.0 — <emphasis role="distribution">Squeeze</emphasis>, 7 — <emphasis role="distribution">Wheezy</emphasis>, 8 — <emphasis role="distribution">Jessie</emphasis>, 9 (not released yet) — <emphasis role="distribution">Stretch</emphasis>, 10 (not released yet) — <emphasis role="distribution">Buster</emphasis>, <emphasis role="distribution">Unstable</emphasis> — <emphasis role="distribution">Sid</emphasis>). They are taken from the names of characters in the Toy Story movie. This animated film entirely composed of computer graphics was produced by Pixar Studios, with whom Bruce was employed at the time that he led the Debian project. The name “Sid” holds particular status, since it will eternally be associated with the <emphasis role="distribution">Unstable</emphasis> branch. In the film, this character was the neighbor child, who was always breaking toys — so beware of getting too close to <emphasis role="distribution">Unstable</emphasis>. Otherwise, <emphasis role="distribution">Sid</emphasis> is also an acronym for “Still In Development”.
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.debian-internals">
		<title>The Inner Workings of the Debian Project</title>
		 <indexterm>
			<primary>operations, internal</primary>
		</indexterm>
		 <indexterm>
			<primary>organization, internal</primary>
		</indexterm>
		 <para>
			The abundant end results produced by the Debian project derive simultaneously from the work on the infrastructure performed by experienced Debian developers, from the individual or collective work of developers on Debian packages, and from user feedback.
		</para>
		 <section>
			<title>The Debian Developers</title>
			 <indexterm>
				<primary>developers</primary>
				<secondary>Debian developers</secondary>
			</indexterm>
			 <para>
				Debian developers have various responsibilities, and as official project members, they have great influence on the direction the project takes. A Debian developer is generally responsible for at least one package, but according to their available time and desire, they are free to become involved in numerous teams, acquiring, thus, more responsibilities within the project. <ulink type="block" url="http://www.debian.org/devel/people" /> <ulink type="block" url="http://www.debian.org/intro/organization" /> <ulink type="block" url="http://wiki.debian.org/Teams" />
			</para>
			 <sidebar> <title><emphasis>TOOL</emphasis> Developer's database</title>
			 <indexterm>
				<primary>developers</primary>
				<secondary>developer's database</secondary>
			</indexterm>
			 <indexterm>
				<primary>database</primary>
				<secondary>developer's database</secondary>
			</indexterm>
			 <para>
				Debian has a database including all developers registered with the project, and their relevant information (address, telephone, geographical coordinates such as longitude and latitude, etc.). Some of the information (first and last name, country, username within the project, IRC username, GnuPG key, etc.) is public and available on the Web. <ulink type="block" url="http://db.debian.org/" />
			</para>
			 <para>
				The geographical coordinates allow the creation of a map locating all of the developers around the globe. Debian is truly an international project: its developers can be found on all continents, although the majority are in “Western countries”.
			</para>
			 <figure>
				<title>World-wide distribution of Debian developers</title>
				 <mediaobject>
					<imageobject>
						<imagedata fileref="images/developers-map.png" format="PNG" scalefit="1" width="70%" />
					</imageobject>

				</mediaobject>
				 <indexterm>
					<primary>world-wide distribution</primary>
				</indexterm>

			</figure>
			 </sidebar> <para>
				Package maintenance is a relatively regimented activity, very documented or even regulated. It must, in effect, comply with all the standards established by the <emphasis>Debian Policy</emphasis>. Fortunately, there are many tools that facilitate the maintainer's work. The developer can, thus, focus on the specifics of their package and on more complex tasks, such as squashing bugs. <ulink type="block" url="http://www.debian.org/doc/debian-policy/" />
			</para>
			 <sidebar> <title><emphasis>回到起点</emphasis> 包的维护，开发者的工作</title>
			 <indexterm>
				<primary>maintenance</primary>
				<secondary>package maintenance</secondary>
			</indexterm>
			 <indexterm>
				<primary>package</primary>
				<secondary>maintenance</secondary>
			</indexterm>
			 <para>
				Maintaining a package entails, first, “packaging” a program. Specifically, this means to define the means of installation so that, once installed, this program will operate and comply with the rules which the Debian project sets for itself. The result of this operation is saved in a <filename>.deb</filename> file. Effective installation of the program will then require nothing more than extraction of this compressed archive and execution of some pre-installation or post-installation scripts contained therein.
			</para>
			 <para>
				After this initial phase, the maintenance cycle truly begins: preparing updates to follow the latest version of the Debian Policy, fixing bugs reported by users, and including new “upstream” versions of the program which naturally continues to develop simultaneously. For instance, at the time of the initial packaging, the program was at version 1.2.3. After some months of development, the original authors release a new stable version, numbered 1.4.0. At this point, the Debian maintainer should update the package, so that users can benefit from its latest stable version.
			</para>
			 </sidebar> <indexterm>
				<primary>Debian Policy</primary>
			</indexterm>
			 <indexterm>
				<primary>Debian Policy</primary>
			</indexterm>
			 <indexterm>
				<primary>policy</primary>
			</indexterm>
			 <para>
				The Policy, an essential element of the Debian Project, establishes the norms ensuring both the quality of the packages and perfect interoperability of the distribution. Thanks to this Policy, Debian remains consistent despite its gigantic size. This Policy is not fixed in stone, but continuously evolves thanks to proposals formulated on the <email>debian-policy@lists.debian.org</email> mailing list. Amendments that are agreed upon by all interested parties are accepted and applied to the text by a small group of maintainers who have no editorial responsibility (they only include the modifications agreed upon by the Debian developers that are members of the above-mentioned list). You can read current amendment proposals on the bug tracking system: <ulink type="block" url="http://bugs.debian.org/debian-policy" />
			</para>
			 <sidebar> <title><emphasis>COMMUNITY</emphasis> Policy editorial process</title>
			 <para>
				任何人都可以通过对<emphasis role="pkg">debian-policy</emphasis> 包提交严重性为“愿望”的漏洞来申请修改 Debian 政策的新提议。随后的流程可以在<filename>/usr/share/doc/debian-policy/Process.html</filename>中找到：如果所揭示的问题需要通过在 Debian 政策中添加新的条款来解决，那么在 <email>debian-policy@lists.debian.org</email>邮件列表上就会开始对此进行讨论。当达成一致意见后，就会产生一个新提议。一份新起草的政策修正条款会被提交审阅（以补丁的方式）。只要当有两名其他开发者认为，新起草的修改条款和之前讨论的内容保持一致（他们支持这一新修正条款），那么这一提议就会被某一位<emphasis role="pkg">debian-policy</emphasis> 包维护者更新进正式的文件中。如果这一流程在上述的任一阶段失败了，那么维护者就会关闭这一漏洞，注明该提案被拒绝。
			</para>
			 </sidebar> <sidebar> <title><emphasis>DEBIAN 政策</emphasis> 文档</title>
			 <indexterm>
				<primary>documentation</primary>
				<secondary>location</secondary>
			</indexterm>
			 <indexterm>
				<primary>location of the documentation</primary>
			</indexterm>
			 <indexterm>
				<primary><filename>/usr/share/doc/</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>README.Debian</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>NEWS.Debian.gz</filename></primary>
			</indexterm>
			 <para>
				每一个包的说明文档保存在<filename>/usr/share/doc/<replaceable>软件包名称</replaceable>/</filename>路径下。这一目录通常包含一个<filename>README.Debian</filename>文件。该文件描述了包维护者为Debian所做的特定调整。因此，在做任何配置前最好先读一下这个文件，从包维护者的经验中获益。我们还可以找到一个名为<filename>changelog.Debian.gz</filename>的文件，它描述了Debian维护者在各个软件包版本之间所做的更改。请不要将这个文件和<filename>changelog.gz</filename>文件（或类似名称的文件）混淆，后者是由上游开发者提供的，描述了上游的修订日志。<filename>copyright</filename>文件包含了软件作者和软件适用的授权条款的信息。最后，我们还可能找到名为<filename>NEWS.Debian.gz</filename>的文件，Debian开发者可以使用它发布有关更新的重要信息；如果<emphasis>apt-listchanges</emphasis>已在系统上安装，则这些信息将在更新时自动显示。所有其它的文件都和特定的软件包相关。我们特别指出可能存在名为<filename>examples</filename>的子目录，它通常包含了配置文件的示例。
			</para>
			 </sidebar> <para>
				The Policy provides considerable cover of the technical aspects of packaging. The size of the project also raises organizational problems; these are dealt with by the Debian Constitution, which establishes a structure and means for decision making. In other words, a formal governance system.
			</para>
			 <indexterm>
				<primary>constitution</primary>
			</indexterm>
			 <indexterm>
				<primary>Debian Project Leader</primary>
			</indexterm>
			 <indexterm>
				<primary>DPL</primary>
			</indexterm>
			 <indexterm>
				<primary>leader</primary>
				<secondary>role</secondary>
			</indexterm>
			 <indexterm>
				<primary>leader</primary>
				<secondary>election</secondary>
			</indexterm>
			 <para>
				Debian 宪章定义了一些角色和职位，以及各自的职责和权力。值得特别指出的是，通过投票决议，Debian 开发者们总是拥有最终的决定权。对于重大的修改（例如会对基金会文档产生影响的），只有当有效票数超过四分之三（75%）时，才会通过。然而，开发者们每年都会选举一位“领导人”作为他们的会议代表，同时领导人也会在内部的各个团队协调沟通。这一选举总是伴随着一段紧张激烈的讨论过程。领导人的角色并没有在任何官方文件内被定义：参选的候选人常常会提出自己对于该职位的理解和定位。在实际工作中，领导人角色包括媒体发言人，协调内部团队，对项目提供总体领导。每一位开发者都参与其中，因为大多数项目成员都认同了 Debian 项目领导人的观点。
			</para>
			 <para>
				特别的，领导人拥有真正的特权；他们的投票可以解决票数相等的问题；他们可以对某个尚未归属于任何人管辖名下的事件作出决定，同时可以将他们自己的一部分职责委托他人代为执行。
			</para>
			 <indexterm>
				<primary>伊恩·默多克</primary>
			</indexterm>
			 <indexterm>
				<primary>Perens, Bruce</primary>
			</indexterm>
			 <indexterm>
				<primary>Jackson, Ian</primary>
			</indexterm>
			 <indexterm>
				<primary>Akkerman, Wichert</primary>
			</indexterm>
			 <indexterm>
				<primary>Collins, Ben</primary>
			</indexterm>
			 <indexterm>
				<primary>Garbee, Bdale</primary>
			</indexterm>
			 <indexterm>
				<primary>Michlmayr, Martin</primary>
			</indexterm>
			 <indexterm>
				<primary>Robinson, Branden</primary>
			</indexterm>
			 <indexterm>
				<primary>Towns, Anthony</primary>
			</indexterm>
			 <indexterm>
				<primary>Hocevar, Sam</primary>
			</indexterm>
			 <indexterm>
				<primary>McIntyre, Steve</primary>
			</indexterm>
			 <indexterm>
				<primary>Zacchiroli, Stefano</primary>
			</indexterm>
			 <indexterm>
				<primary>Nussbaum, Lucas</primary>
			</indexterm>
			 <para>
				从项目发起以来发起以来，它经过了 Ian Murdock, Bruce Perens, Ian Jackson, Wichert Akkerman, Ben Collins, Bdale Garbee, Martin Michlmayr, Branden Robinson, Anthony Towns, SamHocevar, Steve Mclntyre, Stefano Zacchiroli 和 Lucas Nussbaum 的成功领导。
			</para>
			 <indexterm>
				<primary>技术委员会</primary>
			</indexterm>
			 <para>
				The constitution also defines a “technical committee”. This committee's essential role is to decide on technical matters when the developers involved have not reached an agreement between themselves. Otherwise, this committee plays an advisory role for any developer who fails to make a decision for which they are responsible. It is important to note that they only get involved when invited to do so by one of the parties in question.
			</para>
			 <indexterm>
				<primary>the project secretary</primary>
			</indexterm>
			 <para>
				最后，宪章定义了一个“项目秘书”的职位，这一角色负责组织各种选举和决议的投票。
			</para>
			 <para>
				The “general resolution” procedure is fully detailed in the constitution, from the initial discussion period to the final counting of votes. For further details see: <ulink type="block" url="http://www.debian.org/devel/constitution.en.html" />
			</para>
			 <indexterm>
				<primary>general resolution</primary>
			</indexterm>
			 <indexterm>
				<primary>vote</primary>
			</indexterm>
			 <sidebar> <title><emphasis>CULTURE</emphasis> Flamewar, the discussion that catches fire</title>
			 <indexterm>
				<primary>flamewar</primary>
			</indexterm>
			 <indexterm>
				<primary>heated debate</primary>
			</indexterm>
			 <para>
				A “flamewar” is an exceedingly impassioned debate, which frequently ends up with people attacking each other once all reasonable argumentation has been exhausted on both sides. Certain themes are more frequently subject to polemics than others (the choice of text editor, “do you prefer <command>vi</command> or <command>emacs</command>?”, is an old favorite). The matters often provoke very rapid e-mail exchanges due to the sheer number of people with an opinion on the matter (everyone) and the very personal nature of such questions.
			</para>
			 <para>
				Nothing particularly useful generally comes from such discussions; the general recommendation is to stay out of such debates, and maybe rapidly skim through their content, since reading them in full would be too time-consuming.
			</para>
			 </sidebar> <para>
				Even if this constitution establishes a semblance of democracy, the daily reality is quite different: Debian naturally follows the free software rules of the do-ocracy: the one who does things gets to decide how to do them. A lot of time can be wasted debating the respective merits of various ways to approach a problem; the chosen solution will be the first one that is both functional and satisfying… which will come out of the time that a competent person did put into it.
			</para>
			 <para>
				This is the only way to earn one's stripes: do something useful and show that one has worked well. Many Debian “administrative” teams operate by co-optation, preferring volunteers who have already effectively contributed and proved their competence. The public nature of the work of those teams makes it possible for new contributors to observe and start helping without any special privilege. This is why Debian is often described as a “meritocracy”.
			</para>
			 <sidebar> <title><emphasis>CULTURE</emphasis> Meritocracy, the reign of knowledge</title>
			 <indexterm>
				<primary>meritocracy</primary>
			</indexterm>
			 <para>
				Meritocracy is a form of government in which authority is exercised by those with the greatest merit. For Debian, merit is a measure of competence, which is, itself, assessed by observation of past actions by one or more others within the project (Stefano Zacchiroli, a former project leader, speaks of “do-ocracy”, meaning “power to those who get things done”). Their simple existence proves a certain level of competence; their achievements generally being free software, with available source code, which can easily be reviewed by peers to assess their quality.
			</para>
			 </sidebar> <para>
				This effective operational method guarantees the quality of contributors in the “key” Debian teams. This method is by no means perfect and occasionally there are those who do not accept this way of operating. The selection of developers accepted in the teams may appear a bit arbitrary, or even unfair. Furthermore, not everybody has the same definition of the service expected from these teams. For some, it is unacceptable to have to wait eight days for inclusion of a new Debian package, while others will wait patiently for three weeks without a problem. As such, there are regular complaints from the disgruntled about the “quality of service” from some teams.
			</para>
			 <sidebar> <title><emphasis>社区</emphasis> 新维护者的整合</title>
			 <indexterm>
				<primary>维护者</primary>
				<secondary>新维护者</secondary>
			</indexterm>
			 <para>
				负责批准新开发者加入事项的团队是最经常受到批评的。人们需要承认的是，经过多年的发展，Debian 项目开始变得越来越因为需求而去接纳一些程序员。一些人可能会在其中看见一些不公正的情况，但我们必须要承认的是，当一个超过 1000 人的社区需要去保证它所提供给用户的所有东西的质量与完整性时，这会比它在刚刚起步的时候要有挑战的多。
			</para>
			 <indexterm>
				<primary>Debian 账户管理员（DAM）</primary>
			</indexterm>
			 <indexterm>
				<primary>Debian 账户管理员</primary>
			</indexterm>
			 <para>
				Furthermore, the acceptance procedure is concluded by review of the candidacy by a small team, the Debian Account Managers. These managers are, thus, particularly exposed to criticism, since they have final say in the inclusion or rejection of a volunteer within the Debian developers community. In practice, sometimes they must delay the acceptance of a person until they have learned more about the operations of the project. One can, of course, contribute to Debian before being accepted as an official developer, by being sponsored by current developers.
			</para>
			 </sidebar>
		</section>
		 <section>
			<title>The Active Role of Users</title>
			 <para>
				One might wonder if it is relevant to mention the users among those who work within the Debian project, but the answer is a definite yes: they play a critical role in the project. Far from being “passive”, some users run development versions of Debian and regularly file bug reports to indicate problems. Others go even further and submit ideas for improvements, by filing a bug report with a severity level of “wishlist”, or even submit corrections to the source code, called “patches” (see sidebar <xref linkend="sidebar.patch" />).
			</para>
			 <sidebar id="sidebar.bts"> <title><emphasis>工具</emphasis> 缺陷跟踪系统</title>
			 <indexterm>
				<primary>系统</primary>
				<secondary>缺陷跟踪系统</secondary>
			</indexterm>
			 <indexterm>
				<primary>缺陷跟踪系统（BTS）</primary>
			</indexterm>
			 <indexterm>
				<primary>缺陷跟踪系统</primary>
			</indexterm>
			 <indexterm>
				<primary><literal>bugs.debian.org</literal></primary>
			</indexterm>
			 <para>
				The Debian Bug Tracking System (Debian BTS) is used by large parts of the project. The public part (the web interface) allows users to view all bugs reported, with the option to display a sorted list of bugs selected according to various criteria, such as: affected package, severity, status, address of the reporter, address of the maintainer in charge of it, tag, etc. It is also possible to browse the complete historical listing of all discussions regarding each of the bugs.
			</para>
			 <para>
				Below the surface, the Debian BTS is e-mail based: all information that it stores comes from messages sent by the various persons involved. Any e-mail sent to <email>12345@bugs.debian.org</email> will, thus, be assigned to the history for bug number 12345. Authorized persons may “close” a bug by writing a message describing the reasons for the decision to close to <email>12345-done@bugs.debian.org</email> (a bug is closed when the indicated problem is resolved or no longer relevant). A new bug is reported by sending an e-mail to <email>submit@bugs.debian.org</email> according to a specific format which identifies the package in question. The address <email>control@bugs.debian.org</email> allows editing of all the “meta-information” related to a bug.
			</para>
			 <para>
				The Debian BTS has other functional features, as well, such as the use of tags for labeling bugs. For more information, see <ulink type="block" url="http://www.debian.org/Bugs/" />
			</para>
			 </sidebar> <sidebar> <title><emphasis>VOCABULARY</emphasis> Severity of a bug</title>
			 <indexterm>
				<primary>severity</primary>
			</indexterm>
			 <indexterm>
				<primary>bug</primary>
				<secondary>severity</secondary>
			</indexterm>
			 <para>
				The severity of a bug formally assigns a degree of gravity to the reported problem. Effectively, not all bugs have the same importance; for instance, a typo in a manual page is not comparable to a security vulnerability in server software.
			</para>
			 <para>
				Debian uses an extended scale to describe the severity of a bug. Each level is defined precisely in order to facilitate the selection thereof. <ulink type="block" url="http://www.debian.org/Bugs/Developer#severities" />
			</para>
			 </sidebar> <para>
				Additionally, numerous satisfied users of the service offered by Debian like to make a contribution of their own to the project. As not everyone has appropriate levels of expertise in programming, they may choose to assist with the translation and review of documentation. There are language-specific mailing lists to coordinate this work. <ulink type="block" url="https://lists.debian.org/i18n.html" /> <ulink type="block" url="http://www.debian.org/international/" />
			</para>
			 <sidebar> <title><emphasis>BACK TO BASICS</emphasis> What are i18n and l10n?</title>
			 <indexterm>
				<primary>internationalization</primary>
			</indexterm>
			 <indexterm>
				<primary>localization</primary>
			</indexterm>
			 <indexterm>
				<primary>i18n</primary>
			</indexterm>
			 <indexterm>
				<primary>l10n</primary>
			</indexterm>
			 <para>
				“i18n” and “l10n” are the abbreviations for the words “internationalization” and “localization”, respectively, preserving the initial and last letter of each word, and the number of letters in the middle.
			</para>
			 <para>
				To “internationalize” a program consists of modifying it so that it can be translated (localized). This involves partially rewriting a program initially written to work in one language in order to be able to open it to all languages.
			</para>
			 <para>
				To “localize” a program consists of translating the original messages (frequently in English) to another language. For this, it must have already been internationalized.
			</para>
			 <para>
				In summary, internationalization prepares the software for translation, which is then executed by localization.
			</para>
			 </sidebar> <sidebar id="sidebar.patch"> <title><emphasis>BACK TO BASICS</emphasis> Patch, the way to send a fix</title>
			 <indexterm>
				<primary><command>patch</command></primary>
			</indexterm>
			 <indexterm>
				<primary>patch</primary>
			</indexterm>
			 <indexterm>
				<primary><command>diff</command></primary>
			</indexterm>
			 <para>
				A patch is a file describing changes to be made to one or more reference files. Specifically, it will contain a list of lines to be removed or added to the code, as well as (sometimes) lines taken from the reference text, replacing the modifications in context (they allow identification of the placement of the changes if the line numbers have changed).
			</para>
			 <para>
				The tool used for applying the modifications given in such a file is simply called <command>patch</command>. The tool that creates it is called <command>diff</command>, and is used as follows:
			</para>
			 
<screen><computeroutput>$ </computeroutput><userinput>diff -u file.old file.new &gt;file.patch</userinput></screen>
			 <para>
				The <filename>file.patch</filename> file contains the instructions for changing the content of <filename>file.old</filename> into <filename>file.new</filename>. We can send it to someone, who can then use it to recreate <filename>file.new</filename> from the two others, like this:
			</para>
			 
<screen><computeroutput>$ </computeroutput><userinput>patch -p0 file.old &lt;file.patch</userinput></screen>
			 <para>
				The file, <filename>file.old</filename>, is now identical to <filename>file.new</filename>.
			</para>
			 </sidebar> <sidebar> <title><emphasis>TOOL</emphasis> Report a bug with <command>reportbug</command></title>
			 <indexterm>
				<primary><command>reportbug</command></primary>
			</indexterm>
			 <indexterm>
				<primary>bug</primary>
				<secondary>report a bug</secondary>
			</indexterm>
			 <indexterm>
				<primary>提交bug</primary>
			</indexterm>
			 <para>
				The <command>reportbug</command> tool facilitates sending bug reports on a Debian package. It helps making sure the bug in question hasn't already been filed, thus preventing redundancy in the system. It reminds the user of the definitions of the severity levels, for the report to be as accurate as possible (the developer can always fine-tune these parameters later, if needed). It helps writing a complete bug report without the user needing to know the precise syntax, by writing it and allowing the user to edit it. This report will then be sent via an e-mail server (local, by default, but <command>reportbug</command> can also use a remote server).
			</para>
			 <para>
				This tool first targets the development versions, which is where the bugs will be fixed. Effectively, changes are not welcome in a stable version of Debian, with very few exceptions for security updates or other important updates (if, for example, a package is not working at all). A correction of a minor bug in a Debian package must, thus, wait for the next stable version.
			</para>
			 </sidebar> <para>
				All of these contribution mechanisms are made more efficient by users' behavior. Far from being a collection of isolated persons, users are a true community within which numerous exchanges take place. We especially note the impressive activity on the user discussion mailing list, <email>debian-user@lists.debian.org</email> (<xref linkend="solving-problems" /> discusses this in greater detail).
			</para>
			 <para>
				Not only do users help themselves (and others) on technical issues that directly affect them, but they also discuss the best ways to contribute to the Debian project and help it move forward — discussions that frequently result in suggestions for improvements.
			</para>
			 <para>
				Since Debian does not expend funds on any self-promoting marketing campaigns, its users play an essential role in its diffusion, ensuring its fame via word-of-mouth.
			</para>
			 <para>
				This method functions quite well, since Debian fans are found at all levels of the free software community: from install parties (workshops where seasoned users assist newcomers to install the system) organized by local LUGs or “Linux User Groups”, to association booths at large tech conventions dealing with Linux, etc.
			</para>
			 <para>
				Volunteers make posters, brochures, stickers, and other useful promotional materials for the project, which they make available to everyone, and which Debian provides freely on its website: <ulink type="block" url="http://www.debian.org/events/material" />
			</para>

		</section>
		 <section>
			<title>Teams and Sub-Projects</title>
			 <para>
				Debian has been organized, right from the start, around the concept of source packages, each with its maintainer or group of maintainers. Many work teams have emerged over time, ensuring administration of the infrastructure, management of tasks not specific to any package in particular (quality assurance, Debian Policy, installer, etc.), with the latest series of teams growing up around sub-projects.
			</para>
			 <section id="sect.sub-projects">
				<title>Existing Debian Sub-Projects</title>
				 <para>
					To each their own Debian! A sub-project is a group of volunteers interested in adapting Debian to specific needs. Beyond the selection of a sub-group of programs intended for a particular domain (education, medicine, multimedia creation, etc.), sub-projects are also involved in improving existing packages, packaging missing software, adapting the installer, creating specific documentation, and more.
				</para>
				 <sidebar> <title><emphasis>VOCABULARY</emphasis> Sub-project and derivative distribution</title>
				 <indexterm>
					<primary>子项目</primary>
				</indexterm>
				 <indexterm>
					<primary>derivative distribution</primary>
				</indexterm>
				 <para>
					The development process for a derivative distribution consists in starting with a particular version of Debian and making a number of modifications to it. The infrastructure used for this work is completely external to the Debian project. There isn't necessarily a policy for contributing improvements. This difference explains how a derivative distribution may “diverge” from its origins, and why they have to regularly resynchronize with their source in order to benefit from improvements made upstream.
				</para>
				 <para>
					On the other hand, a sub-project can not diverge, since all the work on it consists of directly improving Debian in order to adapt it to a specific goal.
				</para>
				 <para>
					The most known distribution derived from Debian is, without a doubt, Ubuntu, but there are many. See <xref linkend="derivative-distributions" /> to learn about their particularities and their positioning in relationship to Debian.
				</para>
				 </sidebar> <para>
					Here is a small selection of current sub-projects:
				</para>
				 <itemizedlist>
					<listitem>
						<para>
							Debian-Junior, by Ben Armstrong, offering an appealing and easy to use Debian system for children;
						</para>

					</listitem>
					 <listitem>
						<para>
							Debian-Edu, by Petter Reinholdtsen, focused on the creation of a specialized distribution for the academic world;
						</para>

					</listitem>
					 <listitem>
						<para>
							Debian Med, by Andreas Tille, dedicated to the medical field;
						</para>

					</listitem>
					 <listitem>
						<para>
							Debian Multimedia which deals with audio and multimedia work;
						</para>

					</listitem>
					 <listitem>
						<para>
							Debian-Desktop which focuses on the desktop and coordinates artwork for the default theme;
						</para>

					</listitem>
					 <listitem>
						<para>
							Debian GIS which takes care of Geographical Information Systems applications and users;
						</para>

					</listitem>
					 <listitem>
						<para>
							Debian Accessibility, finally, improving Debian to match the requirements of people with disabilities.
						</para>

					</listitem>

				</itemizedlist>
				 <para>
					This list will most likely continue to grow with time and improved perception of the advantages of Debian sub-projects. Fully supported by the existing Debian infrastructure, they can, in effect, focus on work with real added value, without worrying about remaining synchronized with Debian, since they are developed within the project.
				</para>

			</section>
			 <section>
				<title>Administrative Teams</title>
				 <para>
					Most administrative teams are relatively closed and recruit only by cooptation. The best means to become a part of one is to intelligently assist the current members, demonstrating that you have understood their objectives and methods of operation.
				</para>
				 <para>
					The ftpmasters are in charge of the official archive of Debian packages. They maintain the program that receives packages sent by developers and automatically stores them, after some checks, on the reference server (<literal>ftp-master.debian.org</literal>).
				</para>
				 <para>
					They must also verify the licenses of all new packages, in order to ensure that Debian may distribute them, prior to including them in the corpus of existing packages. When a developer wishes to remove a package, they address this team through the bug tracking system and the <emphasis>ftp.debian.org</emphasis> “pseudo-package”.
				</para>
				 <indexterm>
					<primary>ftpmaster</primary>
				</indexterm>
				 <sidebar> <title><emphasis>VOCABULARY</emphasis> The pseudo-package, a monitoring tool</title>
				 <indexterm>
					<primary>pseudo-package</primary>
				</indexterm>
				 <para>
					The bug tracking system, initially designed to associate bug reports with a Debian package, has proved very practical to manage other matters: lists of problems to be resolved or tasks to manage without any link to a particular Debian package. The “pseudo-packages” allow, thus, certain teams to use the bug tracking system without associating a real package with their team. Everyone can, thus, report issues that needs to be dealt with. For instance, the BTS has a <emphasis>ftp.debian.org</emphasis> entry that is used to report and track problems on the official package archive or simply to request removal of a package. Likewise, the <emphasis>www.debian.org</emphasis> pseudo-package refers to errors on the Debian website, and <emphasis>lists.debian.org</emphasis> gathers all the problems concerning the mailing lists.
				</para>
				 </sidebar> <sidebar id="sidebar.fusionforge"> <title><emphasis>TOOL</emphasis> FusionForge, the Swiss Army Knife of collaborative development</title>
				 <indexterm>
					<primary><literal>alioth</literal></primary>
				</indexterm>
				 <indexterm>
					<primary>FusionForge</primary>
				</indexterm>
				 <para>
					FusionForge is a program that enables creation of sites similar to <literal>www.sourceforge.net</literal>, <literal>alioth.debian.org</literal>, or even <literal>savannah.gnu.org</literal>. It hosts projects and provides a range of services that facilitate collaborative development. Each project will have a dedicated virtual space there, including a web site, several “ticketing” systems to track — most commonly — bugs and patches, a survey tool, file storage, forums, version control system repositories, mailing lists and various other related services.
				</para>
				 <para>
					<literal>alioth.debian.org</literal> is Debian's FusionForge server, administered by Tollef Fog Heen, Stephen Gran, and Roland Mas. Any project involving one or more Debian developers can be hosted there. <ulink type="block" url="http://alioth.debian.org/" />
				</para>
				 <para>
					Although rather complex internally, due to the broad range of services that it provides, FusionForge is otherwise relatively easy to install, thanks to the exceptional work of Roland Mas and Christian Bayle on the <emphasis role="pkg">fusionforge</emphasis> Debian package.
				</para>
				 </sidebar> <para id="dsa-team">
					The <emphasis>Debian System Administrators</emphasis> (DSA) team (<email>debian-admin@lists.debian.org</email>), as one might expect, is responsible for system administration of the many servers used by the project. They ensure optimal functioning of all base services (DNS, Web, e-mail, shell, etc.), install software requested by Debian developers, and take all precautions in regards to security. <ulink type="block" url="https://dsa.debian.org" />
				</para>
				 <indexterm>
					<primary><emphasis>debian-admin</emphasis></primary>
				</indexterm>
				 <indexterm>
					<primary>DSA (Debian System Administrators)</primary>
				</indexterm>
				 <sidebar> <title><emphasis>TOOL</emphasis> Debian Package Tracker</title>
				 <indexterm>
					<primary>package tracking system</primary>
				</indexterm>
				 <indexterm>
					<primary>system</primary>
					<secondary>package tracking system</secondary>
				</indexterm>
				 <indexterm>
					<primary>Debian Package Tracker</primary>
				</indexterm>
				 <indexterm>
					<primary>tracker</primary>
					<secondary>Debian Package Tracker</secondary>
				</indexterm>
				 <indexterm>
					<primary>package</primary>
					<secondary>Debian Package Tracker</secondary>
				</indexterm>
				 <indexterm>
					<primary>PTS</primary>
				</indexterm>
				 <indexterm>
					<primary>DDPO</primary>
				</indexterm>
				 <indexterm>
					<primary>Debian Developer's Packages Overview</primary>
				</indexterm>
				 <para>
					This is one of Raphaël's creations. The basic idea is, for a given package, to centralize as much information as possible on a single page. Thus, one can quickly check the status of a program, identify tasks to be completed, and offer one's assistance. This is why this page gathers all bug statistics, available versions in each distribution, progress of a package in the <emphasis role="distribution">Testing</emphasis> distribution, the status of translations of descriptions and debconf templates, the possible availability of a new upstream version, notices of noncompliance with the latest version of the Debian Policy, information on the maintainer, and any other information that said maintainer wishes to include. <ulink type="block" url="https://tracker.debian.org/" />
				</para>
				 <para>
					An e-mail subscription service completes this web interface. It automatically sends the following selected information to the list: bugs and related discussions, availability of a new version on the Debian servers, new translations available for proofreading, etc.
				</para>
				 <para>
					Advanced users can, thus, follow all of this information closely and even contribute to the project, once they've got a good enough understanding of how it works.
				</para>
				 <para>
					Another web interface, known as <emphasis>Debian Developer's Packages Overview</emphasis> (DDPO), provides each developer a synopsis of the status of all Debian packages placed under their charge. <ulink type="block" url="https://qa.debian.org/developer.php" />
				</para>
				 <para>
					These two websites are tools developed and managed by the group responsible for quality assurance within Debian (known as Debian QA).
				</para>
				 <indexterm>
					<primary>assurance</primary>
					<secondary>quality assurance</secondary>
				</indexterm>
				 <indexterm>
					<primary>quality</primary>
					<secondary>assurance</secondary>
				</indexterm>
				 </sidebar> <para>
					The <emphasis>listmasters</emphasis> administer the e-mail server that manages the mailing lists. They create new lists, handle bounces (delivery failure notices), and maintain spam filters (unsolicited bulk e-mail).
				</para>
				 <indexterm>
					<primary>listmaster</primary>
				</indexterm>
				 <sidebar> <title><emphasis>CULTURE</emphasis> Traffic on the mailing lists: some figures</title>
				 <indexterm>
					<primary>lists</primary>
					<secondary>mailing lists</secondary>
				</indexterm>
				 <indexterm>
					<primary>邮件列表</primary>
				</indexterm>
				 <para>
					The mailing lists are, without a doubt, the best testimony to activity on a project, since they keep track of everything that happens. Some statistics (from 2015) regarding our mailing lists speak for themselves: Debian hosts more than 240 lists, totaling 212,000 individual subscriptions. The 27,000 messages sent each month generate 476,000 e-mails daily.
				</para>
				 </sidebar> <para>
					Each specific service has its own administration team, generally composed of volunteers who have installed it (and also frequently programmed the corresponding tools themselves). This is the case of the bug tracking system (BTS), the package tracker, <literal>alioth.debian.org</literal> (FusionForge server, see sidebar <xref linkend="sidebar.fusionforge" />), the services available on <literal>qa.debian.org</literal>, <literal>lintian.debian.org</literal>, <literal>buildd.debian.org</literal>, <literal>cdimage.debian.org</literal>, etc.
				</para>

			</section>
			 <section>
				<title>Development Teams, Transversal Teams</title>
				 <para>
					Unlike administrative teams, the development teams are rather widely open, even to outside contributors. Even if Debian does not have a vocation to create software, the project needs some specific programs to meet its goals. Of course, developed under a free software license, these tools make use of methods proven elsewhere in the free software world.
				</para>
				 <sidebar id="cadre-cvs"> <title><emphasis>CULTURE</emphasis> Git</title>
				 <indexterm>
					<primary>Git</primary>
				</indexterm>
				 <indexterm>
					<primary>configuration management</primary>
				</indexterm>
				 <para>
					Git is a tool for collaborative work on multiple files, while maintaining a history of modifications. The files in question are generally text files, such as a program's source code. If several people work together on the same file, <command>git</command> can only merge the alterations made if they were made to different portions of the file. Otherwise, these “conflicts” must be resolved by hand.
				</para>
				 <para>
					Git is a distributed system where each user has a repository with the complete history of changes. Central repositories are used to download the project (<command>git clone</command>) and to share the work done with others (<command>git push</command>). The repository can contain multiple versions of the files but only one version can be worked on at a given time: it's called the working copy (it can be changed to point to another version with <command>git checkout</command>). Git can show you the modifications made to the working copy (<command>git diff</command>), can store them in the repository by creating a new entry in the versions history (<command>git commit</command>), can update the working copy to include modifications made in parallel by other users (<command>git pull</command>), and can record a particular configuration in the history in order to be able to easily extract it later on (<command>git tag</command>).
				</para>
				 <para>
					Git makes it easy to handle multiple concurrent versions of a project in development without them interfering with each other. These versions are called <emphasis>branches</emphasis>. This metaphor of a tree is fairly accurate, since a program is initially developed on a common trunk. When a milestone has been reached (such as version 1.0), development continues on two branches: the development branch prepares the next major release, and the maintenance branch manages updates and fixes for version 1.0.
				</para>
				 <indexterm>
					<primary>Version Control System (VCS)</primary>
				</indexterm>
				 <para>
					Git is, nowadays, the most popular version control system but it is not the only one. Historically, CVS (Concurrent Versions System) was the first widely used tool but its numerous limitations contributed to the appearance of more modern free alternatives. These include, especially, <command>subversion</command> (<command>svn</command>), <command>git</command>, <command>bazaar</command> (<command>bzr</command>), and <command>mercurial</command> (<command>hg</command>). <ulink type="block" url="http://www.nongnu.org/cvs/" /> <ulink type="block" url="http://subversion.apache.org/" /> <ulink type="block" url="http://git-scm.com/" /> <ulink type="block" url="http://bazaar.canonical.com/" /> <ulink type="block" url="http://mercurial.selenic.com/" />
				</para>
				 <indexterm>
					<primary><command>subversion</command></primary>
				</indexterm>
				 <indexterm>
					<primary><command>svn</command></primary>
				</indexterm>
				 <indexterm>
					<primary><command>git</command></primary>
				</indexterm>
				 <indexterm>
					<primary><command>bzr</command></primary>
				</indexterm>
				 <indexterm>
					<primary><command>hg</command></primary>
				</indexterm>
				 <indexterm>
					<primary><command>mercurial</command></primary>
				</indexterm>
				 <indexterm>
					<primary><command>cvs</command></primary>
				</indexterm>
				 </sidebar> <para>
					Debian has developed little software of its own, but certain programs have assumed a starring role, and their fame has spread beyond the scope of the project. Good examples are <command>dpkg</command>, the Debian package management program (it is, in fact, an abbreviation of Debian PacKaGe, and generally pronounced as “dee-package”), and <command>apt</command>, a tool to automatically install any Debian package, and its dependencies, guaranteeing the consistency of the system after an upgrade (its name is an acronym for Advanced Package Tool). Their teams are, however, much smaller, since a rather high level of programming skill is required to gain an overall understanding of the operations of these types of programs.
				</para>
				 <para>
					The most important team is probably that for the Debian installation program, <command>debian-installer</command>, which has accomplished a work of momentous proportions since its conception in 2001. Numerous contributors were needed, since it is difficult to write a single program able to install Debian on a dozen different architectures. Each one has its own mechanism for booting and its own bootloader. All of this work is coordinated on the <email>debian-boot@lists.debian.org</email> mailing list, under the direction of Cyril Brulebois. <ulink type="block" url="http://www.debian.org/devel/debian-installer/" /> <ulink type="block" url="http://joeyh.name/blog/entry/d-i_retrospective/" />
				</para>
				 <para>
					The (very small) <command>debian-cd</command> program team has an even more modest objective. Many “small” contributors are responsible for their architecture, since the main developer can not know all the subtleties, nor the exact way to start the installer from the CD-ROM.
				</para>
				 <para>
					Many teams must collaborate with others in the activity of packaging: <email>debian-qa@lists.debian.org</email> tries, for example, to ensure quality at all levels of the Debian project. The <email>debian-policy@lists.debian.org</email> list develops Debian Policy according to proposals from all over the place. The teams in charge of each architecture (<email>debian-<replaceable>architecture</replaceable>@lists.debian.org</email>) compile all packages, adapting them to their particular architecture, if needed.
				</para>
				 <para>
					Other teams manage the most important packages in order to ensure maintenance without placing too heavy a load on a single pair of shoulders; this is the case with the C library and <email>debian-glibc@lists.debian.org</email>, the C compiler on the <email>debian-gcc@lists.debian.org</email> list, or Xorg on the <email>debian-x@lists.debian.org</email> (this group is also known as the X Strike Force).
				</para>

			</section>

		</section>

	</section>
	 <section id="sect.follow-debian-news">
		<title>Follow Debian News</title>
		 <para>
			As already mentioned, the Debian project evolves in a very distributed, very organic way. As a consequence, it may be difficult at times to stay in touch with what happens within the project without being overwhelmed with a never-ending flood of notifications.
		</para>
		 <para>
			If you only want the most important news about Debian, you probably should subscribe to the <email>debian-announce@lists.debian.org</email> list. This is a very low-traffic list (around a dozen messages a year), and only gives the most important announcements, such as the availability of a new stable release, the election of a new Project Leader, or the yearly Debian Conference. <ulink type="block" url="https://lists.debian.org/debian-announce/" />
		</para>
		 <indexterm>
			<primary>Debian Project News</primary>
		</indexterm>
		 <para>
			More general (and regular) news about Debian are sent to the <email>debian-news@lists.debian.org</email> list. The traffic on this list is quite reasonable too (usually around a handful of messages a month), and it includes the semi-regular “Debian Project News”, which is a compilation of various small bits of information about what happens in the project. Since all Debian developers can contribute these news when they think they have something noteworthy to make public, the DPN gives a valuable insight while staying rather focused on the project as a whole. <ulink type="block" url="https://lists.debian.org/debian-news/" />
		</para>
		 <sidebar> <title><emphasis>COMMUNITY</emphasis> The publicity and press teams</title>
		 <para>
			Debian's official communication channels are managed by volunteers of the Debian publicity team and of the press team. Members of the latter are delegates of the Debian Project Leader and handle official press releases. The publicity team is much less formal and welcomes contributions from everybody, be it to write articles for “Debian Project News” or to animate the <emphasis>@debian</emphasis> Identi.ca microblogging account. <ulink type="block" url="http://wiki.debian.org/Teams/Press" /> <ulink type="block" url="http://wiki.debian.org/Teams/Publicity" />
		</para>
		 </sidebar> <para>
			For more information about the evolution of Debian and what is happening at some point in time in various teams, there's also the <email>debian-devel-announce@lists.debian.org</email> list. As its name implies, the announcements it carries will probably be more interesting to developers, but it also allows interested parties to keep an eye on what happens in more concrete terms than just when a stable version is released. While <email>debian-announce@lists.debian.org</email> gives news about the user-visible results, <email>debian-devel-announce@lists.debian.org</email> gives news about how these results are produced. As a side note, “d-d-a” (as it is sometimes referred to) is the only list that Debian developers must be subscribed to. <ulink type="block" url="https://lists.debian.org/debian-devel-announce/" />
		</para>
		 <indexterm>
			<primary>Planet Debian</primary>
		</indexterm>
		 <para>
			A more informal source of information can also be found on Planet Debian, which aggregates articles posted by Debian contributors on their respective blogs. While the contents do not deal exclusively with Debian development, they provide a view into what is happening in the community and what its members are up to. <ulink type="block" url="http://planet.debian.org/" />
		</para>
		 <indexterm>
			<primary>microblog</primary>
		</indexterm>
		 <indexterm>
			<primary>Identi.ca</primary>
		</indexterm>
		 <indexterm>
			<primary>Twitter</primary>
		</indexterm>
		 <indexterm>
			<primary>Facebook</primary>
		</indexterm>
		 <indexterm>
			<primary>Google+</primary>
		</indexterm>
		 <indexterm>
			<primary>social networks</primary>
		</indexterm>
		 <indexterm>
			<primary>network</primary>
			<secondary>social networks</secondary>
		</indexterm>
		 <para>
			The project is also well represented on social networks. While Debian only has an official presence on platforms built with free software (like the Identi.ca microblogging platform, powered by <emphasis>pump.io</emphasis>), there are many Debian contributors who are animating Twitter accounts, Facebook pages, Google+ pages, and more. <ulink type="block" url="https://identi.ca/debian" /> <ulink type="block" url="https://twitter.com/debian" /> <ulink type="block" url="https://www.facebook.com/debian" /> <ulink type="block" url="https://plus.google.com/111711190057359692089" />
		</para>

	</section>
	 <section id="sect.role-of-distributions">
		<title>The Role of Distributions</title>
		 <indexterm>
			<primary>Linux distribution</primary>
			<secondary>role</secondary>
		</indexterm>
		 <para>
			A GNU/Linux distribution has two main objectives: install a free operating system on a computer (either with or without an existing system or systems), and provide a range of software covering all of the users' needs.
		</para>
		 <section>
			<title>The Installer: <command>debian-installer</command></title>
			 <para>
				The <command>debian-installer</command>, designed to be extremely modular in order to be as generic as possible, targets the first objective. It covers a broad range of installation situations and in general, greatly facilitates the creation of a derivative installer corresponding to a particular case.
			</para>
			 <para>
				This modularity, which also makes it very complex, may be daunting for the developers discovering this tool; but whether used in graphical or text mode, the user's experience is still similar. Great efforts have been made to reduce the number of questions asked at installation time, in particular thanks to the inclusion of automatic hardware detection software.
			</para>
			 <para>
				It is interesting to note that distributions derived from Debian differ greatly on this aspect, and provide a more limited installer (often confined to the i386 or amd64 architectures), but more user-friendly for the uninitiated. On the other hand, they usually refrain from straying too far from package contents in order to benefit as much as possible from the vast range of software offered without causing compatibility problems.
			</para>

		</section>
		 <section>
			<title>The Software Library</title>
			 <para>
				Quantitatively, Debian is undeniably the leader in this respect, with over 21,000 source packages. Qualitatively, Debian’s policy and long testing period prior to releasing a new stable version justify its reputation for stability and consistency. As far as availability, everything is available on-line through many mirrors worldwide, with updates pushed out every six hours.
			</para>
			 <para>
				Many retailers sell CD-ROMs on the Internet at a very low price (often at cost), the “images” for which are freely available for download. There is only one drawback: the low frequency of releases of new stable versions (their development sometimes takes more than two years), which delays the inclusion of new software.
			</para>
			 <para>
				Most new free software programs quickly find their way into the development version which allows them to be installed. If this requires too many updates due to their dependencies, the program can also be recompiled for the stable version of Debian (see <xref linkend="debian-packaging" /> for more information on this topic).
			</para>

		</section>

	</section>
	 <section id="sect.release-lifecycle">
		<title>Lifecycle of a Release</title>
		 <indexterm>
			<primary>lifecycle</primary>
		</indexterm>
		 <indexterm>
			<primary><emphasis role="distribution">Unstable</emphasis></primary>
		</indexterm>
		 <indexterm>
			<primary><emphasis role="distribution">Testing</emphasis></primary>
		</indexterm>
		 <indexterm>
			<primary><emphasis role="distribution">Stable</emphasis></primary>
		</indexterm>
		 <indexterm>
			<primary><emphasis role="distribution">实验</emphasis></primary>
		</indexterm>
		 <indexterm>
			<primary><emphasis role="distribution">Oldstable</emphasis></primary>
		</indexterm>
		 <indexterm>
			<primary><emphasis role="distribution">Oldoldstable</emphasis></primary>
		</indexterm>
		 <para>
			The project will simultaneously have three to six different versions of each program, named <emphasis role="distribution">Experimental</emphasis>, <emphasis role="distribution">Unstable</emphasis>, <emphasis role="distribution">Testing</emphasis>, <emphasis role="distribution">Stable</emphasis>, <emphasis role="distribution">Oldstable</emphasis>, and even <emphasis role="distribution">Oldoldstable</emphasis>. Each one corresponds to a different phase in development. For a good understanding, let us take a look at a program's journey, from its initial packaging to inclusion in a stable version of Debian.
		</para>
		 <sidebar> <title><emphasis>VOCABULARY</emphasis> Release</title>
		 <indexterm>
			<primary>release</primary>
		</indexterm>
		 <para>
			The term “release”, in the Debian project, indicates a particular version of a distribution (e.g., “unstable release” means “the unstable version”). It also indicates the public announcement of the launch of any new version (stable).
		</para>
		 </sidebar> <section>
			<title>The <emphasis role="distribution">Experimental</emphasis> Status</title>
			 <para>
				First let us take a look at the particular case of the <emphasis role="distribution">Experimental</emphasis> distribution: this is a group of Debian packages corresponding to the software currently in development, and not necessarily completed, explaining its name. Not everything passes through this step; some developers add packages here in order to get feedback from more experienced (or braver) users.
			</para>
			 <para>
				Otherwise, this distribution frequently houses important modifications to base packages, whose integration into <emphasis role="distribution">Unstable</emphasis> with serious bugs would have critical repercussions. It is, thus, a completely isolated distribution, its packages never migrate to another version (except by direct, express intervention of the maintainer or the ftpmasters). It is also not self-contained: only a subset of the existing packages are present in <emphasis role="distribution">Experimental</emphasis>, and it generally does not include the base system. This distribution is therefore mostly useful in combination with another, self-contained, distribution such as <emphasis role="distribution">Unstable</emphasis>.
			</para>

		</section>
		 <section>
			<title>The <emphasis role="distribution">Unstable</emphasis> Status</title>
			 <para>
				Let us turn back to the case of a typical package. The maintainer creates an initial package, which they compile for the <emphasis role="distribution">Unstable</emphasis> version and place on the <literal>ftp-master.debian.org</literal> server. This first event involves inspection and validation from the ftpmasters. The software is then available in the <emphasis role="distribution">Unstable</emphasis> distribution, which is the “cutting edge” distribution chosen by users who are more concerned with having up to date packages than worried about serious bugs. They discover the program and then test it.
			</para>
			 <para>
				If they encounter bugs, they report them to the package's maintainer. The maintainer then regularly prepares corrected versions, which they upload to the server.
			</para>
			 <para>
				Every newly updated package is updated on all Debian mirrors around the world within six hours. The users then test the corrections and search for other problems resulting from the modifications. Several updates may then occur rapidly. During these times, autobuilder robots come into action. Most frequently, the maintainer has only one traditional PC and has compiled their package on the amd64 (or i386) architecture; the autobuilders take over and automatically compile versions for all the other architectures. Some compilations may fail; the maintainer will then receive a bug report indicating the problem, which is then to be corrected in the next versions. When the bug is discovered by a specialist for the architecture in question, the bug report may come with a patch ready to use.
			</para>
			 <indexterm>
				<primary>autobuilder</primary>
			</indexterm>
			 <figure>
				<title>Compilation of a package by the autobuilders</title>
				 <mediaobject>
					<imageobject>
						<imagedata fileref="images/autobuilder.png" format="PNG" scalefit="1" width="75%" />
					</imageobject>

				</mediaobject>

			</figure>
			 <sidebar> <title><emphasis>QUICK LOOK</emphasis> <command>buildd</command>, the Debian package recompiler</title>
			 <indexterm>
				<primary><command>buildd</command></primary>
			</indexterm>
			 <indexterm>
				<primary>build daemon</primary>
			</indexterm>
			 <para>
				<emphasis>buildd</emphasis> is the abbreviation of “build daemon”. This program automatically recompiles new versions of Debian packages on the architectures on which it is hosted (cross-compilation is avoided as much as possible).
			</para>
			 <para>
				Thus, to produce binaries for the <literal>arm64</literal> architecture, the project has <literal>arm64</literal> machines available. The <emphasis>buildd</emphasis> program runs on them continuously and creates binary packages for <literal>arm64</literal> from source packages sent by Debian developers.
			</para>
			 <para>
				This software is used on all the computers serving as autobuilders for Debian. By extension, the term <emphasis>buildd</emphasis> frequently is used to refer to these machines, which are generally reserved solely for this purpose.
			</para>
			 </sidebar>
		</section>
		 <section>
			<title>Migration to <emphasis role="distribution">Testing</emphasis></title>
			 <para>
				A bit later, the package will have matured; compiled on all the architectures, it will not have undergone recent modifications. It is then a candidate for inclusion in the <emphasis role="distribution">Testing</emphasis> distribution — a group of <emphasis role="distribution">Unstable</emphasis> packages chosen according to some quantifiable criteria. Every day a program automatically selects the packages to include in <emphasis role="distribution">Testing</emphasis>, according to elements guaranteeing a certain level of quality:
			</para>
			 <orderedlist>
				<listitem>
					<para>
						lack of critical bugs, or, at least fewer than the version currently included in <emphasis role="distribution">Testing</emphasis>;
					</para>

				</listitem>
				 <listitem>
					<para>
						at least 10 days spent in <emphasis role="distribution">Unstable</emphasis>, which is sufficient time to find and report any serious problems;
					</para>

				</listitem>
				 <listitem>
					<para>
						successful compilation on all officially supported architectures;
					</para>

				</listitem>
				 <listitem>
					<para>
						dependencies that can be satisfied in <emphasis role="distribution">Testing</emphasis>, or that can at least be moved there together with the package in question.
					</para>

				</listitem>

			</orderedlist>
			 <para>
				This system is clearly not infallible; critical bugs are regularly found in packages included in <emphasis role="distribution">Testing</emphasis>. Still, it is generally effective, and <emphasis role="distribution">Testing</emphasis> poses far fewer problems than <emphasis role="distribution">Unstable</emphasis>, being for many, a good compromise between stability and novelty.
			</para>
			 <sidebar> <title><emphasis>NOTE</emphasis> Limitations of <emphasis role="distribution">Testing</emphasis></title>
			 <para>
				While very interesting in principle, <emphasis role="distribution">Testing</emphasis> does have some practical problems: the tangle of cross-dependencies between packages is such that a package can rarely move there completely on its own. With packages all depending upon each other, it is sometimes necessary to migrate a large number of packages simultaneously, which is impossible when some are uploading updates regularly. On the other hand, the script identifying the families of related packages works hard to create them (this would be an NP-complete problem, for which, fortunately, we know some good heuristics). This is why we can manually interact with and guide this script by suggesting groups of packages, or imposing the inclusion of certain packages in a group, even if this temporarily breaks some dependencies. This functionality is accessible to the Release Managers and their assistants.
			</para>
			 <para>
				Recall that an NP-complete problem is of an exponential algorithmic complexity according to the size of the data, here being the length of the code (the number of figures) and the elements involved. The only way to resolve it is frequently to examine all possible configurations, which could require enormous means. A heuristic is an approximate, but satisfying, solution.
			</para>
			 </sidebar> <sidebar> <title><emphasis>COMMUNITY</emphasis> The Release Manager</title>
			 <indexterm>
				<primary>Release Manager</primary>
			</indexterm>
			 <indexterm>
				<primary>Stable Release Manager</primary>
			</indexterm>
			 <para>
				Release Manager is an important title, associated with heavy responsibilities. The bearer of this title must, in effect, manage the release of a new, stable version of Debian, and define the process for development of <emphasis role="distribution">Testing</emphasis> until it meets the quality criteria for <emphasis role="distribution">Stable</emphasis>. They also define a tentative schedule (not always followed).
			</para>
			 <para>
				We also have Stable Release Managers, often abbreviated SRM, who manage and select updates for the current stable version of Debian. They systematically include security patches and examine all other proposals for inclusion, on a case by case basis, sent by Debian developers eager to update their package in the stable version.
			</para>
			 </sidebar>
		</section>
		 <section>
			<title>The Promotion from <emphasis role="distribution">Testing</emphasis> to <emphasis role="distribution">Stable</emphasis></title>
			 <para>
				Let us suppose that our package is now included in <emphasis role="distribution">Testing</emphasis>. As long as it has room for improvement, its maintainer must continue to improve it and restart the process from <emphasis role="distribution">Unstable</emphasis> (but its later inclusion in <emphasis role="distribution">Testing</emphasis> is generally faster: unless it changed significantly, all of its dependencies are already available). When it reaches perfection, the maintainer has completed their work. The next step is the inclusion in the <emphasis role="distribution">Stable</emphasis> distribution, which is, in reality, a simple copy of <emphasis role="distribution">Testing</emphasis> at a moment chosen by the Release Manager. Ideally this decision is made when the installer is ready, and when no program in <emphasis role="distribution">Testing</emphasis> has any known critical bugs.
			</para>
			 <para>
				Since this moment never truly arrives, in practice, Debian must compromise: remove packages whose maintainer has failed to correct bugs on time, or agree to release a distribution with some bugs in the thousands of programs. The Release Manager will have previously announced a freeze period, during which each update to <emphasis role="distribution">Testing</emphasis> must be approved. The goal here is to prevent any new version (and its new bugs), and to only approve updates fixing bugs.
			</para>
			 <figure>
				<title>A package's path through the various Debian versions</title>
				 <mediaobject>
					<imageobject>
						<imagedata fileref="images/release-cycle.png" format="PNG" width="60%" />
					</imageobject>

				</mediaobject>

			</figure>
			 <sidebar> <title><emphasis>VOCABULARY</emphasis> Freeze: the home straight</title>
			 <indexterm>
				<primary>freeze</primary>
			</indexterm>
			 <para>
				During the freeze period, development of the <emphasis role="distribution">Testing</emphasis> distribution is blocked; no more automatic updates are allowed. Only the Release Managers are then authorized to change packages, according to their own criteria. The purpose is to prevent the appearance of new bugs by introducing new versions; only thoroughly examined updates are authorized when they correct significant bugs.
			</para>
			 </sidebar> <para>
				After the release of a new stable version, the Stable Release Manager manages all further development (called “revisions”, ex: 7.1, 7.2, 7.3 for version 7). These updates systematically include all security patches. They will also include the most important corrections (the maintainer of a package must prove the gravity of the problem that they wish to correct in order to have their updates included).
			</para>
			 <para>
				At the end of the journey, our hypothetical package is now included in the stable distribution. This journey, not without its difficulties, explains the significant delays separating the Debian Stable releases. This contributes, over all, to its reputation for quality. Furthermore, the majority of users are satisfied using one of the three distributions simultaneously available. The system administrators, concerned above all about the stability of their servers, don't need the latest and greatest version of GNOME; they can choose Debian <emphasis role="distribution">Stable</emphasis>, and they will be satisfied. End users, more interested in the latest versions of GNOME or KDE than in rock-solid stability, will find Debian <emphasis role="distribution">Testing</emphasis> to be a good compromise between a lack of serious problems and relatively up to date software. Finally, developers and more experienced users may blaze the trail, testing all the latest developments in Debian <emphasis role="distribution">Unstable</emphasis> right out of the gate, at the risk of suffering the headaches and bugs inherent in any new version of a program. To each their own Debian!
			</para>
			 <sidebar> <title><emphasis>CULTURE</emphasis> GNOME and KDE, graphical desktop environments</title>
			 <para>
				GNOME (GNU Network Object Model Environment) and KDE (K Desktop Environment) are the two most popular graphical desktop environments in the free software world. A desktop environment is a set of programs grouped together to allow easy management of the most common operations through a graphical interface. They generally include a file manager, office suite, web browser, e-mail program, multimedia accessories, etc. The most visible difference resides in the choice of the graphical library used: GNOME has chosen GTK+ (free software licensed under the LGPL), and KDE has selected Qt (a company-backed project, available nowadays both under the GPL and a commercial license). <ulink type="block" url="http://www.gnome.org/" /> <ulink type="block" url="http://www.kde.org/" />
			</para>
			 </sidebar> <figure>
				<title>Chronological path of a program packaged by Debian</title>
				 <mediaobject>
					<imageobject>
						<imagedata fileref="images/package-lifecycle.png" format="PNG" scalefit="1" />
					</imageobject>

				</mediaobject>

			</figure>

		</section>
		 <section>
			<title>The <emphasis role="distribution">Oldstable</emphasis> and <emphasis role="distribution">Oldoldstable</emphasis> Status</title>
			 <indexterm>
				<primary>Long Term Support (LTS)</primary>
			</indexterm>
			 <indexterm>
				<primary>support</primary>
				<secondary>Long Term Support (LTS)</secondary>
			</indexterm>
			 <para>
				Each <emphasis role="distribution">Stable</emphasis> release has an expected lifetime of about 5 years and given that releases tend to happen every 2 years, there can be up to 3 supported releases at a given point of time. When a new stable release happens, the former release becomes <emphasis role="distribution">Oldstable</emphasis> and the one even before becomes <emphasis role="distribution">Oldoldstable</emphasis>.
			</para>
			 <para>
				This Long Term Support (LTS) of Debian releases is a recent initiative: individual contributors and companies joined forces to create the Debian LTS team. Older releases which are no longer supported by the Debian security team fall under the responsibility of this new team.
			</para>
			 <para>
				The Debian security team handles security support in the current <emphasis role="distribution">Stable</emphasis> release and also in the <emphasis role="distribution">Oldstable</emphasis> release (but only for as long as is needed to ensure one year of overlap with the current stable release). This amounts roughly to three years of support for each release. The Debian LTS team handles the last (two) years of security support so that each releases benefits from at least 5 years of support and so that users can upgrade from version N to N+2. <ulink type="block" url="https://wiki.debian.org/LTS" />
			</para>
			 <sidebar> <title><emphasis>COMMUNITY</emphasis> Companies sponsoring the LTS effort</title>
			 <para>
				Long Term Support is a difficult commitment to make in Debian because volunteers tend to avoid the work that is not very fun. And providing security support for 5 years old software is — for many contributors — a lot less fun than packaging new upstream versions or developing new features.
			</para>
			 <para>
				To bring this project to life, the project counted on the fact that long term support was particularly relevant for companies and that they would be willing to mutualize the cost of this security support.
			</para>
			 <para>
				The project started in june 2014: some organizations allowed their employees to contribute part-time to Debian LTS while others preferred to sponsor the project with money so that Debian contributors get paid to do the work that they would not do for free. Most Debian contributors willing to be paid to work on LTS got together to create a clear sponsorship offer managed by Freexian (Raphaël Hertzog's company): <ulink type="block" url="http://www.freexian.com/services/debian-lts.html" />
			</para>
			 <para>
				The Debian LTS team is not yet able to properly support all packages in Debian, hence the volunteers work on packages they care about while the paid contributors prioritize packages used by their sponsors.
			</para>
			 <para>
				The project is always looking for new sponsors: what about your company? can you let an employee work part-time on long term support? can you allocate a small budget for security support? <ulink type="block" url="https://wiki.debian.org/LTS/Funding" />
			</para>
			 </sidebar>
		</section>

	</section>
</chapter>

