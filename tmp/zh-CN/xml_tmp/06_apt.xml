<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="apt">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-apt.png" scalefit="1" />
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>高级包管理工具(Advanced Packaging Tool)</keyword>
      <keyword>apt-get</keyword>
      <keyword>apt-cache</keyword>
      <keyword>aptitude 更安全的apt</keyword>
      <keyword>新立得包管理器</keyword>
      <keyword>sources.list</keyword>
      <keyword>apt-cdrom</keyword>
    </keywordset>
  </chapterinfo>
  <title>维护和更新：APT 工具</title>
  <highlights>
    <para>Debian 之所以如此受系统管理员欢迎，是因为项目提供的软件极易安装，整个系统的更新也极为简单。这一独特的优点主要得归功于 <emphasis>APT</emphasis> 程序，其特性在 Falcot 公司得到系统管理员们热情的研究。</para>
  </highlights>

  <para><indexterm><primary>APT</primary></indexterm> 是高级软件包管理器 <indexterm><primary>Advanced Package Tool</primary></indexterm> 的缩写。它的‘高级’之处在于对软件包的管理方法不同。APT并不是简单地独立评估每个包，而是将包看做一个整体系统，根据现有的和兼容的已有包找到最佳组合（包括依赖于这个软件包的其他包）。</para>

  <sidebar>
    <title><emphasis>词汇</emphasis> 软件源和源代码软件包</title>

    <para><emphasis>源</emphasis>这个词的意思会有一些模糊不清。一个源代码软件包- 是一个包含有源程序代码的包，—不要和软件源相混淆—这是指一个包所在的仓库（网站，FTP服务器，CD-ROM光驱，本地磁盘等等）。</para>
  </sidebar>

  <para>APT需要一个”软件源列表“：文件<filename>/etc/apt/sources.list</filename>会列出发布 Debian 软件包不同的仓库（或软件源）。接下来APT会从每一个软件源导入所发布的软件包列表。这个过程是通过下载 <filename>Packages.xz</filename>或使用不同压缩方法的变体(比如<filename>Packages.gz</filename>或者<filename>.bz2</filename>) )文件（若是二进制包的仓库）和<filename>Sources.xz</filename>文件（若是软件包源的仓库），并分析这两个文件内容。如果文件的旧版本已经存在，APT仅下载更新的部分（参见：sidebar <xref linkend="sidebar.apt-pdiff" />）。</para>
  <indexterm><primary><filename>Packages.xz</filename></primary></indexterm>
  <indexterm><primary><filename>Sources.xz</filename></primary></indexterm>

  <sidebar>
    <title><emphasis>回到基础</emphasis> <command>gzip</command>, <command>bzip2</command>, <command>LZMA</command> 和<command>XZ</command> 压缩</title>
    <indexterm><primary><command>gzip</command></primary></indexterm>
    <indexterm><primary><command>bzip2</command></primary></indexterm>
    <indexterm><primary><command>lzma</command></primary></indexterm>
    <indexterm><primary><command>xz</command></primary></indexterm>

    <para>文件名后缀<filename>.gz</filename> 表示文件经过<command>gzip</command>工具的压缩。<command>gzip</command> 是一个经典的 Unix 命令，用于快速高效压缩文件。一些新的压缩工具更为有效，但需要更多内存和时间来完成压缩和解压。按照出现的次序，这些工具有：<command>bzip2</command> （生成文件名后缀为<filename>.bz2</filename>），<command>lzma</command>（生成文件名后缀为<filename>.lzma</filename>）和<command>xz</command>（生成文件名后缀为<filename>.xz</filename>）。</para>
  </sidebar>
  <section id="sect.apt-sources.list">
    <title>写入<filename>sources.list</filename>文件</title>
    <indexterm><primary><filename>sources.list</filename></primary></indexterm>
    <indexterm><primary>源</primary><secondary>软件包</secondary></indexterm>
    <indexterm><primary>软件包</primary><secondary>源</secondary></indexterm>
    <indexterm><primary><filename>/etc/apt/sources.list</filename></primary></indexterm>

    <section>
      <title>句法</title>

      <para><filename>/etc/apt/sources.list</filename> 文件中每个有效的代码行包括对源的描述，由三个被空格分开的部分组成。</para>

      <para>第一个区域指示源的类型：</para>
      <itemizedlist>
	<listitem>
	  <para>“<literal>deb</literal>” 表示二进制软件包，</para>
	</listitem>
	<listitem>
	  <para>“<literal>deb-src</literal>”表示源代码包。</para>
	</listitem>
      </itemizedlist>

      <para>第二个区域表示源的基本 URL （结合文件 <filename>Packages.gz</filename> 中给出的文件名，必须是有效URL的全称）：此区域存在于一个 Debian 镜像或其他任何由第三方所建的软件源文档中。这个 URL 可以用 <literal>file://</literal>  起始来表示系统里安装了本地仓库，或以 <literal>http://</literal> 表示仓库可通过网络服务器来获取，或用 <literal>ftp://</literal> 表示软件源在一个 FTP 服务器上。URL 还可以用  起始表示从 <literal>cdrom:</literal> 开始安装。因基于网络的安装愈来愈流行，这个方法已不那么常用了。</para>

      <para>最后这一区域的句法取决于仓库的结构。从最简单的例子开始，你可以很简单地描述一个软件源的子目录 （必须用到结尾处的斜线）（通常用  “<filename>./</filename>”  表示子目录不存在 - 这个软件源就位于给定的 URL上）。 不过一般来讲，仓库的结构类似于一个 Debian 的镜像， 包括很多分支，每一分支有很多组成部分。通常命名选定的分支（由 “codename” 来命名 - 参看附栏中的目录<xref linkend="sidebar.bruce-perens" /> 或是由对应的 “suites” — <literal>stable</literal>, <literal>testing</literal>, <literal>unstable</literal> ），然后命名下面的组成部分（或分区）（从<literal>main</literal>, <literal>contrib</literal> 和<literal>non-free</literal>中选择） 来激活一个典型的 Debian 镜像。</para>

      <sidebar id="sidebar.sections">
	<title><emphasis>关键词</emphasis> <literal>main</literal>, <literal>contrib</literal> 和 <literal>non-free</literal> 存档</title>
	<indexterm><primary>部分</primary><secondary><literal>main</literal></secondary></indexterm>
	<indexterm><primary><literal>main</literal>,部分</primary></indexterm>
	<indexterm><primary>部分</primary><secondary><literal>contrib</literal></secondary></indexterm>
	<indexterm><primary><literal>contrib</literal>, 部分</primary></indexterm>
	<indexterm><primary>部分</primary><secondary><literal>non-free</literal></secondary></indexterm>
	<indexterm><primary><literal>non-free</literal>,部分</primary></indexterm>
	<indexterm><primary>（仓库的）组成 </primary></indexterm>

	<para>Debian 根据开发者所选定的许可声明，使用这三部分来区分不同的软件包。<literal>Main</literal> 收集了完全遵守Debian 免费软件指南的所有软件包。</para>

	<para><literal>non-free</literal>  文档有所不同，它包括没有（ 完全）遵循上述原则，未受约束但仍然被发布的软件。这种文档为使用者提供服务，但不是 Debian 的官方组成部分- 不过 Debian 从来都提倡优先使用自由软件。这类文档的存在代表了一个来自 Richard M. Stallman 的重要问题，也阻碍了自由软件基金会向用户推荐 Debian.</para>

	<para><literal>Contrib</literal> (贡献)是一类没有一些非自由元件就不能正常运作的开源软件。这类元件会是来自非自由 <literal>non-free</literal>  部分的软件， 或非自由文件如游戏 ROMs, 控制台BIOS等。<literal>Contrib</literal> 也包括需要专利元件来编译的自由软件。早先的例子是OpenOffice.org 办公软件套装，曾经需要带专利的 Java 环境来运行。</para>
      </sidebar>

      <sidebar>
	<title><emphasis>TIP</emphasis> <filename>/etc/apt/sources.list.d/*.list</filename> 文件</title>

	<para>如果很多个软件包的源库在被引用，将它们分成多个文件会很实用。每一部分存在<filename>/etc/apt/sources.list.d/<replaceable>文件名</replaceable>.list</filename> （参见边栏<xref linkend="sidebar.directory.d" />)。</para>
      </sidebar>

      <indexterm><primary><command>apt-cdrom</command></primary></indexterm>
      <para><literal>cdrom</literal> 条目描述了你所有的CD/DVD光盘。 与其他条目不同，因为一个CD光盘需要插入光驱中，并且每次只能读一张，所以并不总是可用。因此这种仓库管理起来稍有不同，需要加在<command>apt-cdrom</command> 程序中，经常与<literal>add</literal> 参数一起执行。后者会要求驱动中插入光盘，并会浏览内容，寻找<filename>Packages</filename> 文件。这些文件会用于更新可用软件包的数据库（此过程由<command>apt update</command> 命令执行）。 自此， 如果某软件包需要光盘，APT 可发出要求插入光驱。</para>

    </section>
    <section>
      <title>给<emphasis role="distribution">Stable</emphasis> 使用者的仓库</title>
      
      <para>下面是一个标准的<filename>sources.list</filename>文件，它被用于 <emphasis role="distribution">Stable</emphasis>  版本的 Debian 系统：</para>

      
      <example id="example.stable-sources-list">
	<title><filename>/etc/apt/sources.list</filename> 给 Debian Stable 使用者的文件</title>

	<programlisting># Security updates
deb http://security.debian.org/ jessie/updates main contrib non-free
deb-src http://security.debian.org/ jessie/updates main contrib non-free

## Debian mirror

# Base repository
deb http://ftp.debian.org/debian jessie main contrib non-free
deb-src http://ftp.debian.org/debian jessie main contrib non-free

# Stable updates
deb http://ftp.debian.org/debian jessie-updates main contrib non-free
deb-src http://ftp.debian.org/debian jessie-updates main contrib non-free

# Stable backports
deb http://ftp.debian.org/debian jessie-backports main contrib non-free
deb-src http://ftp.debian.org/debian jessie-backports main contrib non-free</programlisting>
      </example>

      <para>此文件列出了 与Debian <emphasis role="distribution">Jessie</emphasis> 版本相关软件包的所有来源（此手册写作当前<emphasis role="distribution">稳定</emphasis>版本）。我们不希望当下一个稳定版本发布时，所有基于它的分支在我们控制范围外被改变，因此决定用“Jessie” 而不是用相对应的 “stable““ 稳定” 的别名（<literal>stable</literal>, <literal>stable-updates</literal>, <literal>stable-backports</literal>）来命名。</para>

      <para>大多数软件包来源于“基础仓库”，它拥有所有的软件包，但极少更新（大概每两个月根据“点发布”更新）。其他仓库不完全（不包括所有软件包），不过可以支持更新（软件包是较新版本）。接下来的几章将会介绍这些仓库管理的目的和规则。</para>

      <para>请注意，当你所需要的软件包版本存在于几个仓库中时，在文件<filename>sources.list</filename>中所列出的第一个会被使用。因此，非官方来源的包一般在此文件末尾处。</para>

      <para>本节提到的<emphasis role="distribution">稳定Stable</emphasis> 对于<emphasis role="distribution">Oldstable</emphasis> 一样适用。后者只是同时维护的较旧<emphasis role="distribution">Stable</emphasis> 版本。</para>

      <section id="sect.security-updates">
        <title>安全更新</title>
	<indexterm><primary><literal>security.debian.org</literal></primary></indexterm>
	<indexterm><primary>安全更新</primary></indexterm>
	<indexterm><primary>更新</primary><secondary>安全更新</secondary></indexterm>

	<para>安全更新一般不在 Debian 镜像通常所在的网络上，而是在<literal>security.debian.org</literal>（位于<link linkend="dsa-team"> Debian 系统管理员Debian System Administrators</link>维护的小范围网络）。其上的文档包括为那些<emphasis role="distribution">稳定</emphasis>版本准备的安全更新（由 Debian 安全团队和/或软件包维护者预备）。</para>

	<para>服务器上也有针对<emphasis role="distribution">测试版</emphasis>的安全更新。这类更新经常通过从<emphasis role="distribution">非稳定版</emphasis>流入<emphasis role="distribution">测试版</emphasis>，因此单独存在于服务器上的更新不常见。</para>
      </section>

      <section id="sect.stable-updates">
        <title>稳定更新</title>
	<indexterm><primary>稳定更新</primary></indexterm>
	<indexterm><primary><literal>稳定-更新</literal></primary></indexterm>
	<indexterm><primary>更新</primary><secondary>稳定更新</secondary></indexterm>

	<para>稳定更新对安全性不敏感，在下一个稳定版本点发布前，它还是很重要，需要推送给使用者。</para>

	<para>这个仓库的典型例子包括修复在发布前无法修复的严重漏洞和后续更新引入的漏洞。根据紧急性，它还包含长期的软件包更新，比如<emphasis role="pkg">spamassassin</emphasis> 的广告监测规则，<emphasis role="pkg">clamav</emphasis>病毒库，或是各个时区的夏令时规则（<emphasis role="pkg">tzdata</emphasis>）。</para>

	<para>实际上，这个仓库是 <literal>计划-更新proposed-updates</literal> 的子库，是由稳定更新管理员小心选定的。</para>
      </section>

      <section id="sect.proposed-updates">
        <title>计划更新</title>
        <indexterm><primary><literal>计划-更新</literal></primary></indexterm>
        <indexterm><primary><literal>被提议的稳定更新</literal></primary></indexterm>

	<para>一旦发布，<emphasis role="distribution">稳定</emphasis>分布只每两个月更新一次。接下来的更新在<literal>计划更新</literal>仓库里准备（由稳定发布管理员监督）。</para>

	<para>这个仓库中通常有安全更新和稳定更新的文档，还有更多：软件包维护者可能在这里修复一些不需要马上发布的重要的漏洞。</para>
	
	<para>任何人都可以使用这个仓库在正式发布前来检测更新。下面的摘录使用<literal>jessie-proposed-updates</literal>别名。因为<literal>wheezy-proposed-updates</literal> 也存在，别名的使用更清楚更一致（对于<emphasis role="distribution">Oldstable</emphasis>更新来讲）：</para>

        <programlisting>deb http://ftp.debian.org/debian jessie-proposed-updates main contrib non-free</programlisting>
      </section>

      <section id="sect.backports">
        <title>向后移植到稳定版(Stable Backports)</title>
        <indexterm><primary><literal>stable-backports</literal></primary></indexterm>
        <indexterm><primary>backport</primary></indexterm>
	<indexterm><primary>updates</primary><secondary>backports</secondary></indexterm>

	<para>The <literal>stable-backports</literal> repository hosts
	“package backports”. The term refers to a package of some recent
	software which has been recompiled for an older distribution,
	generally for <emphasis role="distribution">Stable</emphasis>.
	</para>

	<para>当发行版本经过一段时间后，大量的软件项目都发布了新的软件版本，但它们都没有整合进入当前的<emphasis role="distrubution">稳定版</emphasis>（它仅接受能够解决最重要问题的那些修改，例如安全问题相关）。因为<emphasis role="distribution">测试版</emphasis>和<emphasis role="distribution">不稳定版</emphasis>均具有一定风险，软件包维护者有时会针对<emphasis role="distribution">稳定版</emphasis>提供近期发布的软件的重新编译版本，这样做可以将可能存在的不稳定因素限制在一小部分经过选择的软件包之间，因而具有一定的优势。
<ulink type="block" url="http://backports.debian.org" /></para>

	
	<para><literal>stable-backports</literal>仓库与通常的Debian镜像共同存在，但是<emphasis role="distribution">Squeeze</emphasis>对应的仓库仍然在一个单独的服务器（<literal>backports.debian.org</literal>）上存放，且需要增加以下特殊的<filename>sources.list</filename>条目才能使用：</para>

        <indexterm><primary><literal>backports.debian.org</literal></primary></indexterm>
        <programlisting>deb http://backports.debian.org/debian-backports squeeze-backports main contrib non-free</programlisting>

	<para><literal>stable-backports</literal>里的软件包(Backports)通常是从<emphasis role="distribution">Testing</emphasis>版本创建的。这确保一旦下一个稳定的Debian版本可用，所有安装的backports都可以升级到相应的稳定版本。</para>

	<para>Even though this repository provides newer versions of
	packages, APT will not install them unless you give explicit
	instructions to do so (or unless you have already done so with a
	former version of the given backport): </para>

	<screen><computeroutput>$ </computeroutput><userinput>sudo apt-get install <replaceable>package</replaceable>/jessie-backports
</userinput><computeroutput>$ </computeroutput><userinput>sudo apt-get install -t jessie-backports <replaceable>package</replaceable>
</userinput></screen>

      </section>
    </section>

    <section>
      <title>给<emphasis role="distribution">测试</emphasis>/<emphasis role="distribution">非稳定</emphasis> 版本用户的仓库</title>

      <para>下面是一个标准 <filename>sources.list</filename>文件，用于系统运行 Debian <emphasis role="distribution">测试</emphasis>或<emphasis role="distribution">非稳定</emphasis> 版本：</para>

      <example id="example.testing-sources-list">
	<title>Debian <emphasis role="distribution">Testing</emphasis>/<emphasis role="distribution">Unstable</emphasis> 用户的 <filename>/etc/apt/sources.list</filename>文件</title>

	<programlisting>
↵
# Unstable↵
deb http://ftp.debian.org/debian unstable main contrib non-free↵
deb-src http://ftp.debian.org/debian unstable main contrib non-free↵
↵
# Testing↵
deb http://ftp.debian.org/debian testing main contrib non-free↵
deb-src http://ftp.debian.org/debian testing main contrib non-free↵
↵
# Stable↵
deb http://ftp.debian.org/debian stable main contrib non-free↵
deb-src http://ftp.debian.org/debian stable main contrib non-free↵
↵
# Security updates↵
deb http://security.debian.org/ stable/updates main contrib non-free↵
deb http://security.debian.org/ testing/updates main contrib non-free↵
deb-src http://security.debian.org/ stable/updates main contrib non-free↵
deb-src http://security.debian.org/ testing/updates main contrib non-free↵</programlisting>
      </example>

      <para>APT 通过<filename>sources.list</filename> 文件来从<emphasis role="distribution">非稳定</emphasis>安装软件包。如果这不是你所需要的，用<literal>APT::Default-Release</literal> 设置（参见 <xref linkend="sect.apt-upgrade" />）来指示 APT 从另一分布获取软件包（一般用 <emphasis role="distribution">测试</emphasis>）。</para>

      <para>There are good reasons to include all those repositories, even
      though a single one should be enough. <emphasis role="distribution">Testing</emphasis> users will appreciate the
      possibility to cherry-pick a fixed package from <emphasis role="distribution">Unstable</emphasis> when the version in
      <emphasis role="distribution">Testing</emphasis> is affected by an
      annoying bug. On the opposite, <emphasis role="distribution">Unstable</emphasis> users bitten by unexpected
      regressions have the possibility to downgrade packages to their
      (supposedly working) <emphasis role="distribution">Testing</emphasis> version.</para>

      <para>The inclusion of <emphasis role="distribution">Stable</emphasis>
      is more debatable but it often gives access to some packages which
      have been removed from the development versions. It also ensures that
      you get the latest updates for packages which have not been modified
      since the last stable release.</para>

      <section>
        <title><emphasis role="distribution">实验</emphasis> 仓库</title>
        <indexterm><primary><emphasis role="distribution">实验</emphasis></primary></indexterm>

	<para>The archive of <emphasis role="distribution">Experimental</emphasis> packages is present on
	all Debian mirrors, and contains packages which are not in the
	<emphasis role="distribution">Unstable</emphasis> version yet
	because of their substandard quality — they are often software
	development versions or pre-versions (alpha, beta, release
	candidate…). A package can also be sent there after undergoing
	subsequent changes which can generate problems. The maintainer then
	tries to uncover them with help from advanced users who can handle
	important issues. After this first stage, the package is moved into
	<emphasis role="distribution">Unstable</emphasis>, where it reaches
	a much larger audience and where it will be tested in much more
	detail.</para>

	<para><emphasis role="distribution">Experimental</emphasis> is
	generally used by users who do not mind breaking their system and
	then repairing it. This distribution gives the possibility to
	import a package which a user wants to try or use as the need
	arises. That is exactly how Debian approaches it, since adding it
	in APT's <filename>sources.list</filename> file does not lead to
	the systematic use of its packages. The line to be added is:</para>
        <informalexample>
          <programlisting>deb http://ftp.debian.org/debian experimental main contrib non-free↵</programlisting>
        </informalexample>
      </section>
    </section>

    <section>
      <title>非官方来源：  <literal>mentors.debian.net</literal></title>
      <indexterm><primary><literal>mentors.debian.net</literal></primary></indexterm>

      <para>There are numerous non-official sources of Debian packages set
      up by advanced users who have recompiled some software (Ubuntu made
      this popular with their Personal Package Archive service), by
      programmers who make their creation available to all, and even by
      Debian developers who offer pre-versions of their package online.</para>

      <para><literal>mentors.debian.net</literal>站点比较有意思（虽然它只提供源码包）。它搜集Debian开发者候选人员制作的软件包，以及那些希望创建Debian软件包又不想经历成为Debian开发者整套流程的那些志愿者的软件包。这些软件包提供时没有任何质量保证；请确保您在将它们用于生产环境之前检查它们的来源和完整性并进行测试。</para>

      <sidebar>
        <title><emphasis>社区</emphasis> <literal>debian.net</literal> 站点</title>
        <indexterm><primary><emphasis>debian.net</emphasis></primary></indexterm>

	<para><emphasis>debian.net</emphasis> 域名不是一个 Debian 项目的官方源。每个 Debian 开发者都可基于自己用途而使用此域名。这些网址包含一些非官方服务（有时为个人站点），其主机不属于项目本身而由 Debian 开发者设置，甚至还有将要迁移到<emphasis>debian.org</emphasis>的项目原型。有两个理由来解释为什么这些项目原型会留在<emphasis>debian.net</emphasis>：或者是没有人做出足够的努力将其迁移到官方服务（ 位于<emphasis>debian.org</emphasis> 域名上，具备一定维护保证），或者是服务争议太大以至于无法官方化。</para>
      </sidebar>

      <para>安装一个包意味着需要给包的创建者以 root 权限，因为其决定了以该身份运行的初始化脚本的内容。官方的 Debian 包由志愿者创建，志愿者经过指派和评估，且能封装软件包，因而软件包的来源与完整性可以确认。</para>

      <para>一般地，需当心来源未知以及并非位于官方 Debian 服务器之一上的软件包：评估包创建者的可信度，并检查包的完整性。<ulink type="block" url="http://mentors.debian.net/" /></para>

      <sidebar id="sidebar.snapshot.debian.org">
        <title><emphasis>进阶</emphasis>旧包版本： <literal>snapshot.debian.org</literal></title>
        <indexterm><primary><literal>snapshot.debian.org</literal></primary></indexterm>

	<para><literal>snapshot.debian.org</literal>服务，于 2010 年 4 月引入，可用于“时间回溯”及查找软件包的旧版本。例如，它可用于识别某个回溯的软件包版本，更具体地，在等待回溯修复时可以回到先前的版本。</para>
      </sidebar>
    </section>
    <section>
      <title>Debian 软件包 缓存 代理</title>
      <indexterm><primary>缓存代理</primary></indexterm>
      <indexterm><primary>缓存，代理</primary></indexterm>

      <para>当一整个网络的机器被配置为使用同样的远程服务器并下载同样的更新包时，管理员会知晓有一个当作网络-本地间缓存器的中介代理是有好处的（参见侧边栏<xref linkend="sidebar.cache" />）。</para>

      <para>您可以配置 APT 使用一个“标准”的代理（参见<xref linkend="sect.apt-config" /> 获取 APT 相关内容，参见<xref linkend="sect.http-ftp-proxy" />获取代理相关内容），Debian 体系提供了一个解决问题的更佳手段。本段中所述的专用软件比普通的代理缓存更加智能，因为它们可依赖于 APT 软件源的特定结构（例如，它们了解单独的文件在什么时间废弃与否，并由此来调整在保持阶段的时间）。</para>

      <indexterm><primary><emphasis role="pkg">apt-cacher</emphasis></primary></indexterm>
      <indexterm><primary><emphasis role="pkg">apt-cacher-ng</emphasis></primary></indexterm>
      <para><emphasis role="pkg">apt-cacher</emphasis>与<emphasis role="pkg">apt-cacher-ng</emphasis>的工作方式类似代理缓存服务器。对于外部请求，APT 的<filename>sources.list</filename> 保持不变，但是 APT 被配置为把它们作为代理使用。</para>
      
      <indexterm><primary><emphasis role="pkg">approx</emphasis></primary></indexterm>
      <para>另一方面，<emphasis role="pkg">approx</emphasis>，工作方式则类似一个 HTTP 服务器，其在它的顶级 URL 地址上“镜像”任意数量的远程软件源。这些顶级目录与远程 URL 之间的映射存储于<filename>/etc/approx/approx.conf</filename>中：</para>

      <programlisting>
↵
# &lt;name&gt; &lt;repository-base-url&gt;↵
debian   http://ftp.debian.org/debian↵
security http://security.debian.org↵</programlisting>

      <para><emphasis role="pkg">approx</emphasis> 通过inetd (参见<xref linkend="sect.inetd" />)默认在9999端口运行，并需要用户调整<filename>sources.list</filename> 文件来指向 approx 服务器：</para>

      <programlisting># 指向本地 approx 服务器的sources.list 范例
deb http://apt.falcot.com:9999/security jessie/updates main contrib non-free
deb http://apt.falcot.com:9999/debian jessie main contrib non-free
      </programlisting>
    </section>

  </section>
  <section id="sect.apt-get">
    <title><command>aptitude</command>、<command>apt-get</command>和 <command>apt</command> 命令</title>
    <indexterm><primary><command>apt</command></primary></indexterm>
    <indexterm><primary><command>apt-get</command></primary></indexterm>
    <indexterm><primary><command>aptitude</command></primary></indexterm>

    <para>APT is a vast project, whose original plans included a graphical
    interface. It is based on a library which contains the core
    application, and <command>apt-get</command> is the first front end —
    command-line based — which was developed within the project.
    <command>apt</command> is a second command-line based front end
    provided by APT which overcomes some design mistakes of
    <command>apt-get</command>.</para>

    <para>其他众多的图形界面以外部项目形式出现：<command>synaptic</command>，<command>aptitude</command>（它同时包含文本模式界面和图形界面 — 即使尚未完成），<command>wajig</command>，等等。最为推荐的界面，<command>apt</command>，会在本节案例中使用。注意，尽管如此，<command>apt-get</command>与
<command>aptitude</command>的命令行语法也仍与之非常类似。在<command>apt</command>、<command>apt-get</command>、<command>aptitude</command>存在较大差异时，将会详述差异。</para>
    <section>
      <title>开端</title>

      
      <para>对于 APT 的任何操作，需要更新可用包的列表；这可以简单地通过<command>apt update</command>来完成。取决于您连接的速度，该操作需要花费一定时间，因为这包括下载一定数量的<filename>软件包</filename>/<filename>源代码</filename>/<filename>翻译-<replaceable>语言代码</replaceable></filename>文件，这些文件随着 Debian 的开发而逐渐变大（对于<literal>main</literal>部分，至少有 10MB 数据）。当然，从光盘中安装无需任何下载 — 此情况下，操作是十分迅速的。</para>
      <indexterm><primary><command>apt update</command></primary></indexterm>
      <indexterm><primary><command>apt-get update</command></primary></indexterm>
      <indexterm><primary><command>aptitude update</command></primary></indexterm>
    </section>
    <section>
      <title>安装和卸载</title>
      <indexterm><primary>软件包</primary><secondary>安装</secondary></indexterm>
      <indexterm><primary>软件包</primary><secondary>卸载</secondary></indexterm>
      <indexterm><primary>安装</primary><secondary>软件包安装</secondary></indexterm>
      <indexterm><primary>卸载一个软件包</primary></indexterm>

      <para>通过APT，软件包可以从系统中添加或移除，命令分别为<command>apt install<replaceable>软件包</replaceable></command>、<command>apt remove<replaceable>软件包</replaceable></command>。在以上两种情况中，APT 将会自动安装必要的依赖包或者删除依赖于删除包的软件包。<command>apt purge<replaceable>软件包</replaceable></command>命令包含一个彻底删除 — 相关的配置文件也会被删除。</para>
      <indexterm><primary><command>apt install</command></primary></indexterm>
      <indexterm><primary><command>apt remove</command></primary></indexterm>
      <indexterm><primary><command>apt purge</command></primary></indexterm>
      <indexterm><primary><command>apt-get install </command></primary></indexterm>
      <indexterm><primary><command>apt-get remove</command></primary></indexterm>
      <indexterm><primary><command>apt-get purge</command></primary></indexterm>
      <indexterm><primary><command>aptitude install</command></primary></indexterm>
      <indexterm><primary><command>aptitude remove</command></primary></indexterm>
      <indexterm><primary><command>aptitude purge</command></primary></indexterm>

      <sidebar>
        <title><emphasis>TIP</emphasis> 多次安装同一批软件包</title>

	<para>在几台电脑上安装同一批软件包会很实用。这很容易做到。</para>

	<para>首先，从电脑中取得所安装软件包的列表作为用于复制的“模板”。</para>

        <screen><computeroutput>$ </computeroutput><userinput>dpkg --get-selections &gt;pkg-list</userinput>↵</screen>

	<para>The <filename>pkg-list</filename> file then contains the list
	of installed packages. Next, transfer the
	<filename>pkg-list</filename> file onto the computers you want to
	update and use the following commands:</para>

        <screen>## Update dpkg's database of known packages↵
# <userinput>avail=`mktemp`</userinput>↵
# <userinput>apt-cache dumpavail &gt; "$avail"</userinput>↵
# <userinput>dpkg --merge-avail "$avail"</userinput>↵
# <userinput>rm -f "$avail"</userinput>↵
## Update dpkg's selections↵
# <userinput>dpkg --set-selections &lt; pkg-list</userinput>↵
## Ask apt-get to install the selected packages↵
# <userinput>apt-get dselect-upgrade</userinput>↵</screen>

	<para>第一个命令记录在 dpkg 库中可用的软件包列表，然后 <command>dpkg --set-selections</command> 恢复选中你想要安装的包，<command>apt-get</command> 的激活执行所需要的操作！<command>aptitude</command> 没有这样的命令。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>TIP</emphasis> 同时进行卸载和安装</title>

        <para>It is possible to ask <command>apt</command> (or <command>apt-get</command>, or
	<command>aptitude</command>) to install certain packages and remove
	others on the same command line by adding a suffix. With an
	<command>apt install</command> command, add
	“<literal>-</literal>” to the names of the packages you wish to
	remove. With an <command>apt remove</command> command, add
	“<literal>+</literal>” to the names of the packages you wish to
	install.</para>

	<para>下面的例子展示两种不同方法来安装<replaceable>package1</replaceable> 和卸载<replaceable>package2</replaceable>。</para>

        <screen># <userinput>apt install <replaceable>package1</replaceable> <replaceable>package2-</replaceable></userinput>
[...]
# <userinput>apt remove <replaceable>package1+</replaceable> <replaceable>package2</replaceable></userinput>
[...]
</screen>

	<para>此方法也可用于把不同的软件包排除在外，比如由于<literal>Recommends</literal>造成的。一般，依赖解决者会用此作为寻找其他办法的线索。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>TIP</emphasis> <command>apt --reinstall</command> and <command>aptitude reinstall</command></title>
        <indexterm><primary>重新安装</primary></indexterm>

	<para>在软件包中的文件发生移除或更改时，系统有时候可能会受损。恢复这些文件最简单的方法是重装受影响的软件包。不幸的是，包系统会认为后者已安装而拒绝重新安装；为了避免此情况，使用<command>apt</command>和<command>apt-get</command>命令的<literal> --reinstall</literal>选项。如下命令会重新安装<emphasis role="pkg">postfix</emphasis>，即使它已存在：</para>

        <screen><computeroutput># </computeroutput><userinput>apt --reinstall install postfix</userinput>
</screen>

	<para><command>aptitude</command>命令行略微不同，但可通过<command>aptitude reinstall postfix</command>获得同样的结果。</para>

	<para>该问题不与<command>dpkg</command>同时出现，但管理员极少直接使用它。</para>

	<para>注意！使用<command>apt --reinstall</command>命令恢复受到攻击时变更的软件包，不会当然地恢复系统原本的样子。<xref linkend="sect.dealing-with-compromised-machine" />详述了受损系统要采取的必要步骤。</para>
      </sidebar>

      <para>如果文件 <filename>sources.list</filename> 提及了数个发布版本，可以指定要安装软件包的版本。要求特定版本号可以通过 <command>apt install <replaceable>package</replaceable>=<replaceable>version</replaceable></command>，但以标明其初始发行版本 (<emphasis role="distribution">Stable</emphasis>, <emphasis role="distribution">Testing</emphasis> 或者 <emphasis role="distribution">Unstable</emphasis>）的方式— 通过 <command>apt install <replaceable>package</replaceable>/<replaceable>distribution</replaceable></command> — 更为推荐。倘若 <filename>sources.list</filename>文件所述软件源之一仍可用的情况下，通过此命令可以回溯一个软件包的旧版本 (比如您知晓其情况良好的情况)。否则，<literal>snapshot.debian.org</literal> 归档可以补救(参阅侧边栏r <xref linkend="sidebar.snapshot.debian.org" />)。</para>

      <example>
        <title>安装 <emphasis role="pkg">spamassassin（垃圾邮件过滤）</emphasis> 的 <emphasis role="distribution">unstable</emphasis> 版本</title>

        <screen><computeroutput># </computeroutput> <userinput>apt install spamassassin/unstable</userinput></screen>
      </example>

      <sidebar>
        <title><emphasis>更进一步</emphasis> <filename>.deb</filename> 文件的缓存</title>

	<para>APT 在<filename>  /var/cache/apt/archives/</filename> 目录中保存每个下载的<filename> .deb</filename>文件的副本。在频繁更新的情况下，该目录下每个软件包的数个版本可能会占用大量磁盘空间；您应当经常整理它们。可以使用如下两个命令：<command>apt-get clean</command>完全清空整个目录；<command>apt-get autoclean</command>仅移除不会再下载的软件包（因为它们已从 Debian 镜像中消失）和明显无用的软件包（配置参数<literal>APT::Clean-Installed</literal>可以阻止移除安装中的<filename>.deb</filename>文件）。注意<command>apt</command>不支持上述命令。</para>
      </sidebar>
    </section>

    <section id="sect.apt-upgrade">
      <title>系统升级</title>
      <indexterm><primary>升级</primary><secondary>系统升级</secondary></indexterm>

      <indexterm><primary><command>apt upgrade</command></primary></indexterm>
      <indexterm><primary><command>apt-get upgrade</command></primary></indexterm>
      <indexterm><primary><command>aptitude safe-upgrade</command></primary></indexterm>
      <para>常规升级是推荐的，因为它们包含最新的安全更新。要升级，可使用<command>apt upgrade</command>、<command>apt-get upgrade</command>、<command>aptitude safe-upgrade</command>（当然需在<command>apt update</command>之后）。该命令会查找要升级的已安装包，同时不移除任何包。也就是说，目标是确保可能的侵入式升级最小化。<command>apt-get</command>命令略苛刻于 <command>aptitude</command> 或 <command>apt</command>命令，因为它会拒绝安装未预先安装的软件包。</para>

      <sidebar id="sidebar.apt-pdiff">
        <title><emphasis>TIP</emphasis> 增量更新</title>

	
	<para>As we explained earlier, the aim of the <command>apt
	update</command> command is to download for each package source the
	corresponding <filename>Packages</filename> (or
	<filename>Sources</filename>) file. However, even after a
	<command>bzip2</command> compression, these files can remain rather
	large (the <filename>Packages.xz</filename> for the
	<foreignphrase>main</foreignphrase> section of <emphasis role="distribution">Jessie</emphasis> takes more than 6 MB). If
	you wish to upgrade regularly, these downloads can take up a lot of
	time.</para>

	<para>To speed up the process APT can download “diff” files containing
	the changes since the previous update, as opposed to the entire
	file. To achieve this, official Debian mirrors distribute different
	files which list the differences between one version of the
	<filename>Packages</filename> file and the following version. They
	are generated at each update of the archives and a history of one
	week is kept. Each of these “diff” files only takes a few dozen
	kilobytes for <emphasis role="distribution">Unstable</emphasis>, so
	that the amount of data downloaded by a weekly <command>apt
	update</command> is often divided by 10. For distributions like
	<emphasis role="distribution">Stable</emphasis> and <emphasis role="distribution">Testing</emphasis>, which change less, the gain
	is even more noticeable.</para>

	<para>However, it can sometimes be of interest to force the
	download of the entire <filename>Packages</filename> file,
	especially when the last upgrade is very old and when the mechanism
	of incremental differences would not contribute much. This can also
	be interesting when network access is very fast but when the
	processor of the machine to upgrade is rather slow, since the time
	saved on the download is more than lost when the computer
	calculates the new versions of these files (starting with the older
	versions and applying the downloaded differences). To do that, you
	can use the configuration parameter
	<literal>Acquire::Pdiffs</literal> and set it to
	<literal>false</literal>.</para>
      </sidebar>

      <para><command>apt</command> will generally select the most
      recent version number (except for packages from <emphasis role="distribution">Experimental</emphasis> and
      <emphasis role="distribution">stable-backports</emphasis>, which are
      ignored by default whatever their version number). If you specified
      <emphasis role="distribution">Testing</emphasis> or <emphasis role="distribution">Unstable</emphasis> in your
      <filename>sources.list</filename>, <command>apt
      upgrade</command> will switch most of your <emphasis role="distribution">Stable</emphasis> system to <emphasis role="distribution">Testing</emphasis> or <emphasis role="distribution">Unstable</emphasis>, which might not be what you
      intended.</para>

      <para>To tell <command>apt</command> to use a specific
      distribution when searching for upgraded packages, you need to use
      the <literal>-t</literal> or <literal>--target-release</literal>
      option, followed by the name of the
      distribution you want (for example: <command>apt -t stable
      upgrade</command>). To avoid specifying this option every time
      you use <command>apt</command>, you can add
      <literal>APT::Default-Release "stable";</literal> in the file
      <filename>/etc/apt/apt.conf.d/local</filename>.</para>

      <indexterm><primary><command>apt full-upgrade</command></primary></indexterm>
      <indexterm><primary><command>apt dist-upgrade</command></primary></indexterm>
      <indexterm><primary><command>apt-get dist-upgrade</command></primary></indexterm>
      <indexterm><primary><command>aptitude dist-upgrade</command></primary></indexterm>
      <indexterm><primary><command>aptitude full-upgrade</command></primary></indexterm>

      <para>对于非常重要的升级，如从一个 Debian 主版本变更为下一版本，你需要使用<command>apt full-upgrade</command>。使用此命令，<command>apt</command>将会完全升级，即使必须移除一些废弃包或者安装新的依赖包。这也适用于日常使用 Debian <emphasis role="distribution"> Unstable</emphasis>并每天跟随其演化的用户。它是如此简便以至于几乎无需解释：APT的声誉基于此项强大的功能。</para>

      <para>Unlike <command>apt</command> and <command>aptitude</command>,
      <command>apt-get</command> doesn't know the
      <command>full-upgrade</command> command. Instead,
      you should use <command>apt-get dist-upgrade</command>
      (”distribution upgrade”), the historical and well-known
      command that <command>apt</command> and <command>aptitude</command>
      also accept for the convenience of users who got used to it.
      </para>
    </section>

    <section id="sect.apt-config">
      <title>配置选项</title>
      <indexterm><primary>APT</primary><secondary>配置</secondary></indexterm>
      <indexterm><primary><filename>apt.conf.d/</filename></primary></indexterm>
      <indexterm><primary><filename>/etc/apt/apt.conf.d/</filename></primary></indexterm>

      <para>Besides the configuration elements already mentioned, it is
      possible to configure certain aspects of APT by adding directives in
      a file of the <filename>/etc/apt/apt.conf.d/</filename> directory.
      Remember for instance that it is possible for APT to tell
      <command>dpkg</command> to ignore file conflict errors by specifying
      <literal>DPkg::options { "--force-overwrite"; }</literal>.</para>

      <para>If the Web can only be accessed through a proxy, add a line
      like <literal>Acquire::http::proxy
      "http://<replaceable>yourproxy</replaceable>:3128"</literal>. For an
      FTP proxy, write <literal>Acquire::ftp::proxy
      "ftp://<replaceable>yourproxy</replaceable>"</literal>. To discover
      more configuration options, read the
      <citerefentry><refentrytitle>apt.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>
      manual page with the <command>man apt.conf</command> command (for
      details on manual pages, see <xref linkend="sect.manual-pages" />).</para>

      <sidebar id="sidebar.directory.d">
        <title><emphasis>BACK TO BASICS</emphasis> Directories ending in <filename>.d</filename></title>
        <indexterm><primary><filename>.d</filename></primary></indexterm>

	<para>Directories with a <filename>.d</filename> suffix are used
	more and more often. Each directory represents a configuration file
	which is split over multiple files. In this sense, all of the files
	in <filename>/etc/apt/apt.conf.d/</filename> are instructions for
	the configuration of APT. APT includes them in alphabetical order,
	so that the last ones can modify a configuration element defined in
	one of the first ones.</para>

	<para>This structure brings some flexibility to the machine
	administrator and to the package maintainers. Indeed, the
	administrator can easily modify the configuration of the software
	by adding a ready-made file in the directory in question without
	having to change an existing file. Package maintainers use the same
	approach when they need to adapt the configuration of another
	software to ensure that it perfectly co-exists with theirs.
	The Debian policy explicitly forbids modifying
	configuration files of other packages — only users are allowed to
	do this. Remember that during a package upgrade, the user gets to
	choose the version of the configuration file that should be kept
	when a modification has been detected. Any external modification of
	the file would trigger that request, which would disturb the
	administrator, who is sure not to have changed anything.</para>

	<para>Without a <filename>.d</filename> directory, it is impossible
	for an external package to change the settings of a program without
	modifying its configuration file. Instead it must invite the user
	to do it themselves and lists the operations to be done in the file
	<filename>/usr/share/doc/<replaceable>package</replaceable>/README.Debian</filename>.</para>

	<para>Depending on the application, the <filename>.d</filename>
	directory is used directly or managed by an external script which
	will concatenate all the files to create the configuration file
	itself. It is important to execute the script after any change in
	that directory so that the most recent modifications are taken into
	account. In the same way, it is important not to work directly in
	the configuration file created automatically, since everything
	would be lost at the next execution of the script. The chosen
	method (<filename>.d</filename> directory used directly or a file
	generated from that directory) is usually dictated by implementation
	constraints, but in both cases the gains in terms of configuration
	flexibility more than make up for the small complications that they
	entail. The Exim 4 mail server is an example of the generated file
	method: it can be configured through several files
	(<filename>/etc/exim4/conf.d/*</filename>) which are concatenated
	into <filename>/var/lib/exim4/config.autogenerated</filename> by
	the <command>update-exim4.conf</command> command.</para>
      </sidebar>
    </section>
    <section id="sect.apt.priorities">
      <title>包的优先级管理</title>

      <para>One of the most important aspects in the configuration of APT
      is the management of the priorities associated with each package
      source. For instance, you might want to extend one distribution with
      one or two newer packages from <emphasis role="distribution">Testing</emphasis>, <emphasis role="distribution">Unstable</emphasis> or <emphasis role="distribution">Experimental</emphasis>. It is possible to assign
      a priority to each available package (the same package can have
      several priorities depending on its version or the distribution
      providing it). These priorities will influence APT's behavior: for
      each package, it will always select the version with the highest
      priority (except if this version is older than the installed one and
      if its priority is less than 1000).</para>
      <indexterm><primary>APT</primary><secondary><foreignphrase>pinning</foreignphrase></secondary></indexterm>
      <indexterm><primary>pinning, APT pinning</primary></indexterm>
      <indexterm><primary>package</primary><secondary>priority</secondary></indexterm>
      <indexterm><primary>priority</primary><secondary>package priority</secondary></indexterm>
      <indexterm><primary>APT</primary><secondary>preferences</secondary></indexterm>
      <indexterm><primary><filename>preferences</filename></primary></indexterm>
      <indexterm><primary><filename>/etc/apt/preferences</filename></primary></indexterm>

      <para>APT defines several default priorities. Each installed package
      version has a priority of 100. A non-installed version has a
      priority of 500 by default, but it can jump to 990 if it is part of
      the target release (defined with the <literal>-t</literal>
      command-line option or the <literal>APT::Default-Release</literal>
      configuration directive).</para>

      <para>You can modify the priorities by adding entries in the
      <filename>/etc/apt/preferences</filename> file with the names of the
      affected packages, their version, their origin and their new
      priority.</para>

      <para>APT will never install an older version of a package (that is,
      a package whose version number is lower than the one of the currently
      installed package) except if its priority is higher than 1000. APT
      will always install the highest priority package which follows this
      constraint. If two packages have the same priority, APT installs the
      newest one (whose version number is the highest). If two packages of
      same version have the same priority but differ in their content, APT
      installs the version that is not installed (this rule has been
      created to cover the case of a package update without the increment
      of the revision number, which is usually required).</para>

      <para>In more concrete terms, a package whose priority is less
      than 0 will never be installed. A package with a priority ranging
      between 0 and 100 will only be installed if no other version of the
      package is already installed. With a priority between 100 and 500,
      the package will only be installed if there is no other newer version
      installed or available in another distribution. A package of priority
      between 501 and 990 will only be installed if there is no newer
      version installed or available in the target distribution. With a
      priority between 990 and 1000, the package will be installed except
      if the installed version is newer. A priority greater than 1000 will
      always lead to the installation of the package even if it forces APT
      to downgrade to an older version.</para>

      <para>When APT checks <filename>/etc/apt/preferences</filename>, it
      first takes into account the most specific entries (often those
      specifying the concerned package), then the more generic ones
      (including for example all the packages of a distribution). If
      several generic entries exist, the first match is used. The available
      selection criteria include the package's name and the source
      providing it. Every package source is identified by the information
      contained in a <filename>Release</filename> file that APT downloads
      together with the <filename>Packages</filename> files. It
      specifies the origin (usually “Debian” for the packages of
      official mirrors, but it can also be a person's or an organization's
      name for third-party repositories). It also gives the name of the
      distribution (usually <emphasis role="distribution">Stable</emphasis>, <emphasis role="distribution">Testing</emphasis>, <emphasis role="distribution">Unstable</emphasis> or <emphasis role="distribution">Experimental</emphasis> for the standard
      distributions provided by Debian) together with its version (for
      example 8 for Debian <emphasis role="distribution">Jessie</emphasis>). Let's have a look at its
      syntax through some realistic case studies of this mechanism.</para>

      <sidebar>
        <title><emphasis>SPECIFIC CASE</emphasis> Priority of <emphasis role="distribution">experimental</emphasis></title>
        <indexterm><primary><emphasis role="distribution">实验</emphasis></primary></indexterm>

	<para>If you listed <emphasis role="distribution">Experimental</emphasis> in your
	<filename>sources.list</filename> file, the corresponding packages
	will almost never be installed because their default APT priority
	is 1. This is of course a specific case, designed to keep users
	from installing <emphasis role="distribution">Experimental</emphasis> packages by mistake.
	The packages can only be installed by typing <command>aptitude
	install <replaceable>package</replaceable>/experimental</command>
	— users typing this command can only be aware of the risks that
	they take. It is still possible (though <emphasis>not</emphasis>
	recommended) to treat packages of <emphasis role="distribution">Experimental</emphasis> like those of other
	distributions by giving them a priority of 500. This is done with
	a specific entry in
	<filename>/etc/apt/preferences</filename>:</para>
        <informalexample>
          <programlisting>Package: *
Pin: release a=experimental
Pin-Priority: 500
</programlisting>
        </informalexample>
      </sidebar>

      <para>Let's suppose that you only want to use packages from the
      stable version of Debian. Those provided in other versions should not
      be installed except if explicitly requested. You could write the
      following entries in the <filename>/etc/apt/preferences</filename>
      file:</para>
      <informalexample>
        <programlisting>Package: *
Pin: release a=stable
Pin-Priority: 900

Package: *
Pin: release o=Debian
Pin-Priority: -10
</programlisting>
      </informalexample>

      <para><literal>a=stable</literal> defines the name of the selected
      distribution. <literal>o=Debian</literal> limits the scope to
      packages whose origin is “Debian”.</para>

      <para>Let's now assume that you have a server with several local
      programs depending on the version 5.14 of Perl and that you want to
      ensure that upgrades will not install another version of it. You
      could use this entry:</para>
      <informalexample>
        <programlisting>Package: perl
Pin: version 5.14*
Pin-Priority: 1001
</programlisting>
      </informalexample>

      <para>The reference documentation for this configuration file is
      available in the manual page
      <citerefentry><refentrytitle>apt_preferences</refentrytitle><manvolnum>5</manvolnum></citerefentry>,
      which you can display with <command>man
      apt_preferences</command>.</para>

      <sidebar>
        <title><emphasis>TIP</emphasis> Comments in <filename>/etc/apt/preferences</filename></title>
        <indexterm><primary><literal>Explanation</literal></primary></indexterm>
        <indexterm><primary><literal>Pin</literal></primary></indexterm>
        <indexterm><primary><literal>Pin-Priority</literal></primary></indexterm>

	<para>There is no official syntax to put comments in the
	<filename>/etc/apt/preferences</filename> file, but some textual
	descriptions can be provided by putting one or more
	“<literal>Explanation</literal>” fields at the start of each
	entry:</para>
        <informalexample>
          <programlisting>Explanation: The package xserver-xorg-video-intel provided
Explanation: in experimental can be used safely
Package: xserver-xorg-video-intel
Pin: release a=experimental
Pin-Priority: 500
</programlisting>
        </informalexample>
      </sidebar>
    </section>
    <section id="sect.apt-mix-distros">
      <title>Working with Several Distributions</title>

      <para><command>apt</command> being such a marvelous tool, it is
      tempting to pick packages coming from other distributions. For
      example, after having installed a <emphasis role="distribution">Stable</emphasis> system, you might want to try
      out a software package available in <emphasis role="distribution">Testing</emphasis> or <emphasis role="distribution">Unstable</emphasis> without diverging too much
      from the system's initial state.</para>

      <para>Even if you will occasionally encounter problems while mixing
      packages from different distributions, <command>apt</command>
      manages such coexistence very well and limits risks very effectively.
      The best way to proceed is to list all distributions used in
      <filename>/etc/apt/sources.list</filename> (some people always put
      the three distributions, but remember that <emphasis role="distribution">Unstable</emphasis> is reserved for experienced
      users) and to define your reference distribution with the
      <literal>APT::Default-Release</literal> parameter (see <xref linkend="sect.apt-upgrade" />).</para>

      <para>Let's suppose that <emphasis role="distribution">Stable</emphasis> is your reference distribution
      but that <emphasis role="distribution">Testing</emphasis> and
      <emphasis role="distribution">Unstable</emphasis> are also listed in
      your <filename>sources.list</filename> file. In this case, you can
      use <command>apt install
      <replaceable>package</replaceable>/testing</command> to install a
      package from <emphasis role="distribution">Testing</emphasis>. If the
      installation fails due to some unsatisfiable dependencies, let it
      solve those dependencies within <emphasis role="distribution">Testing</emphasis> by adding the <literal>-t
      testing</literal> parameter. The same obviously applies to <emphasis role="distribution">Unstable</emphasis>.</para>

      <para>In this situation, upgrades (<command>upgrade</command>
      and <command>full-upgrade</command>) are done within <emphasis role="distribution">Stable</emphasis> except for packages already
      upgraded to another distribution: those will follow updates
      available in the other distributions. We will explain this behavior
      with the help of the default priorities set by APT below. Do not
      hesitate to use <command>apt-cache policy</command> (see sidebar <xref linkend="sidebar.apt-cache-policy" />) to
      verify the given priorities.</para>

      <para>Everything centers around the fact that APT only considers
      packages of higher or equal version than the installed one (assuming
      that <filename>/etc/apt/preferences</filename> has not been used to
      force priorities higher than 1000 for some packages).</para>

      <sidebar id="sidebar.apt-cache-policy">
        <title><emphasis>TIP</emphasis> <command>apt-cache policy</command></title>

	<para>To gain a better understanding of the mechanism of priority,
	do not hesitate to execute <command>apt-cache policy</command> to
	display the default priority associated with each package source.
	You can also use <command>apt-cache policy
	<replaceable>package</replaceable></command> to display the
	priorities of all available versions of a given package.</para>
      </sidebar>

      <para>Let's assume that you have installed version 1 of a first
      package from <emphasis role="distribution">Stable</emphasis> and that
      version 2 and 3 are available respectively in <emphasis role="distribution">Testing</emphasis> and <emphasis role="distribution">Unstable</emphasis>. The installed version has a
      priority of 100 but the version available in <emphasis role="distribution">Stable</emphasis> (the very same) has a priority
      of 990 (because it is part of the target release). Packages in
      <emphasis role="distribution">Testing</emphasis> and <emphasis role="distribution">Unstable</emphasis> have a priority of 500 (the
      default priority of a non-installed version). The winner is thus
      version 1 with a priority of 990. The package “stays in <emphasis role="distribution">Stable</emphasis>”.</para>

      <para>Let's take the example of another package whose version 2 has
      been installed from <emphasis role="distribution">Testing</emphasis>.
      Version 1 is available in <emphasis role="distribution">Stable</emphasis> and version 3 in <emphasis role="distribution">Unstable</emphasis>. Version 1 (of priority 990
      — thus lower than 1000) is discarded because it is lower than the
      installed version. This only leaves version 2 and 3, both of
      priority 500. Faced with this alternative, APT selects the newest
      version, the one from <emphasis role="distribution">Unstable</emphasis>.If you don't want a package
      installed from <emphasis role="distribution">Testing</emphasis> to
      migrate to <emphasis role="distribution">Unstable</emphasis>, you
      have to assign a priority lower than 500 (490 for example) to
      packages coming from <emphasis role="distribution">Unstable</emphasis>. You can modify
      <filename>/etc/apt/preferences</filename> to this effect:</para>

      <programlisting>Package: *
Pin: release a=unstable
Pin-Priority: 490
</programlisting>
    </section>
    <section id="sect.automatic-tracking">
      <title>Tracking Automatically Installed Packages</title>

      <para>One of the essential functionalities of
      <command>apt</command> is the tracking of packages installed
      only through dependencies. These packages are called “automatic”,
      and often include libraries for instance.</para>
      
      <para>With this information, when packages are removed, the package
      managers can compute a list of automatic packages that are
      no longer needed (because there is no “manually installed” packages
      depending on them). <command>apt-get autoremove</command> will get
      rid of those packages. <command>aptitude</command> and <command>apt</command> do not have
      this command: the former because it removes them automatically as
      soon as they are identified, and the latter probably because the
      user should not have to manually run such a command.
      In all cases, the tools display a clear message listing the affected
      packages.</para>

      <indexterm><primary><command>apt-mark auto</command></primary></indexterm>
      <indexterm><primary><command>apt-mark manual</command></primary></indexterm>
      <indexterm><primary><command>aptitude markauto</command></primary></indexterm>
      <indexterm><primary><command>aptitude unmarkauto</command></primary></indexterm>
      <para>It is a good habit to mark as automatic any package that you
      don't need directly so that they are automatically removed when they
      aren't necessary anymore. <command>apt-mark auto
      <replaceable>package</replaceable></command> will mark the given
      package as automatic whereas <command>apt-mark manual
      <replaceable>package</replaceable></command> does the
      opposite. <command>aptitude markauto</command> and
      <command>aptitude unmarkauto</command> work in the same way
      although they offer more features for marking many packages
      at once (see <xref linkend="sect.aptitude" />). The console-based
      interactive interface of <command>aptitude</command> also
      makes it easy to review the “automatic flag” on many packages.</para>

      <indexterm><primary><command>aptitude why</command></primary></indexterm>
      <para>People might want to know why an automatically installed
      package is present on the system. To get this information from the
      command line, you can use <command>aptitude why
        <replaceable>package</replaceable></command>
      (<command>apt</command> and <command>apt-get</command> have no
      similar feature):</para>

      <screen><computeroutput>$ </computeroutput><userinput>aptitude why python-debian
</userinput><computeroutput>i   aptitude         Recommends apt-xapian-index         
i A apt-xapian-index Depends    python-debian (&gt;= 0.1.15)
</computeroutput></screen>

      <sidebar>
	<title><emphasis>ALTERNATIVE</emphasis> <command>deborphan</command> and <command>debfoster</command></title>

	<indexterm><primary><command>deborphan</command></primary></indexterm>
	<indexterm><primary><command>debfoster</command></primary></indexterm>
        <para>In days where <command>apt</command>,
        <command>apt-get</command> and <command>aptitude</command> were
        not able to track automatic packages, there were two utilities
	producing lists of unnecessary packages:
	<command>deborphan</command> and
	<command>debfoster</command>.</para>

	<para><command>deborphan</command> is the most rudimentary of
	both. It simply scans the <literal>libs</literal> and
	<literal>oldlibs</literal> sections (in the absence of
	supplementary instructions) looking for the packages that are
	currently installed and that no other package depends on. The
	resulting list can then serve as a basis to remove unneeded
	packages.</para>

	<para><command>debfoster</command> has a more elaborate approach,
	very similar to APT's one: it maintains a
	list of packages that have been explicitly installed, and
	remembers what packages are really required between each
	invocation. If new packages appear on the system and if
	<command>debfoster</command> doesn't know them as required
	packages, they will be shown on the screen together with a list
	of their dependencies. The program then offers a choice: remove
	the package (possibly together with those that depend on it),
	mark it as explicitly required, or ignore it temporarily.</para>
      </sidebar>
    </section>
  </section>

  <section id="sect.apt-cache">
    <title>The <command>apt-cache</command> Command</title>
    <indexterm><primary><command>apt-cache</command></primary></indexterm>
    <indexterm><primary>APT</primary><secondary>package search</secondary></indexterm>
    <indexterm><primary>APT</primary><secondary>header display</secondary></indexterm>
    <indexterm><primary>search of packages</primary></indexterm>
    <indexterm><primary>package</primary><secondary>search</secondary></indexterm>

    <para>The <command>apt-cache</command> command can display much of the
    information stored in APT's internal database. This information is a
    sort of cache since it is gathered from the different sources listed in
    the <filename>sources.list</filename> file. This happens during the
    <command>apt update</command> operation.</para>

    <sidebar id="sidebar.cache">
      <title><emphasis>VOCABULARY</emphasis> Cache</title>

      <para>A cache is a temporary storage system used to speed up frequent
      data access when the usual access method is expensive
      (performance-wise). This concept can be applied in numerous
      situations and at different scales, from the core of microprocessors
      up to high-end storage systems.</para>

      <para>In the case of APT, the reference <filename>Packages</filename>
      files are those located on Debian mirrors. That said, it would be
      very ineffective to go through the network for every search that we
      might want to do in the database of available packages. That is why
      APT stores a copy of those files (in
      <filename>/var/lib/apt/lists/</filename>) and searches are done
      within those local files. Similarly,
      <filename>/var/cache/apt/archives/</filename> contains a cache of
      already downloaded packages to avoid downloading them again if you
      need to reinstall them after a removal.</para>
    </sidebar>

    <indexterm><primary><command>apt show</command></primary></indexterm>
    <indexterm><primary><command>apt search</command></primary></indexterm>
    <indexterm><primary><command>apt-cache show</command></primary></indexterm>
    <indexterm><primary><command>apt-cache search</command></primary></indexterm>
    <indexterm><primary><command>aptitude show</command></primary></indexterm>
    <indexterm><primary><command>aptitude search</command></primary></indexterm>
    <para>The <command>apt-cache</command> command can do keyword-based
    package searches with <command>apt-cache search
    <replaceable>keyword</replaceable></command>. It can also display the
    headers of the package's available versions with <command>apt-cache
    show <replaceable>package</replaceable></command>. This command
    provides the package's description, its dependencies, the name of its
    maintainer, etc. Note that <command>apt search</command>, <command>apt
    show</command>, <command>aptitude search</command>,
    <command>aptitude show</command> work in the same way.
    </para>

    <sidebar>
      <title><emphasis>ALTERNATIVE</emphasis> <command>axi-cache</command></title>
      <indexterm><primary><command>axi-cache</command></primary></indexterm>
      <indexterm><primary><emphasis role="pkg">apt-xapian-index</emphasis></primary></indexterm>

      <para><command>apt-cache search</command> is a very rudimentary tool,
      basically implementing <command>grep</command> on package's
      descriptions. It often returns too many results or none at all when
      you include too many keywords.</para>

      <para><command>axi-cache search <replaceable>term</replaceable></command>,
      on the other hand, provides better results, sorted by relevancy. It
      uses the <emphasis>Xapian</emphasis> search engine and is part of
      the <emphasis role="pkg">apt-xapian-index</emphasis> package whichs indexes
      all package information (and more, like the <filename>.desktop</filename>
      files from all Debian packages). It knows about tags
      (see sidebar <xref linkend="sidebar.debtags" />) and returns results in a matter
      of milliseconds.</para>

      <screen>$ <userinput>axi-cache search package use::searching</userinput>
105 results found.
Results 1-20:
100% packagesearch - GUI for searching packages and viewing package information
98% debtags - Enables support for package tags
94% debian-goodies - Small toolbox-style utilities 
93% dpkg-awk - Gawk script to parse /var/lib/dpkg/{status,available} and Packages
93% goplay - games (and more) package browser using DebTags
[...]
87% apt-xapian-index - maintenance and search tools for a Xapian index of Debian packages
[...]
More terms: search debian searching strigi debtags bsearch libbsearch
More tags: suite::debian works-with::software:package role::program interface::commandline implemented-in::c++ admin::package-management use::analysing
`axi-cache more' will give more results
      </screen>
    </sidebar>

    <indexterm><primary><command>apt-cache policy</command></primary></indexterm>
    <indexterm><primary><command>apt-cache dumpavail</command></primary></indexterm>
    <indexterm><primary><command>apt-cache pkgnames</command></primary></indexterm>
    <para>Some features are more rarely used. For instance,
    <command>apt-cache policy</command> displays the priorities of package
    sources as well as those of individual packages. Another example is
    <command>apt-cache dumpavail</command> which displays the headers of
    all available versions of all packages. <command>apt-cache
    pkgnames</command> displays the list of all the packages which appear
    at least once in the cache.</para>
  </section>

  <section id="sect.apt-frontends">
    <title>Frontends: <command>aptitude</command>, <command>synaptic</command></title>
    <indexterm><primary><command>aptitude</command></primary></indexterm>
    <indexterm><primary><command>synaptic</command></primary></indexterm>
    <indexterm><primary>APT</primary><secondary>interfaces</secondary></indexterm>

    <para>APT is a C++ program whose code mainly resides in the
    <command>libapt-pkg</command> shared library. Using a shared library
    facilitates the creation of user interfaces (front-ends), since the
    code contained in the library can easily be reused. Historically,
    <command>apt-get</command> was only designed as a test front-end for
    <command>libapt-pkg</command> but its success tends to obscure this
    fact.</para>
    <section id="sect.aptitude">
      <title><command>aptitude</command></title>

      <para><command>aptitude</command> is an interactive program that can
      be used in semi-graphical mode on the console. You can browse the
      list of installed and available packages, look up all the available
      information, and select packages to install or remove. The program is
      designed specifically to be used by administrators, so that its
      default behaviors are much more intelligent than
      <command>apt-get</command>'s, and its interface much easier to
      understand.</para>

      <figure>
        <title>The <command>aptitude</command> package manager</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/aptitude.png" scalefit="1" width="75%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>When it starts, <command>aptitude</command> shows a list of
      packages sorted by state (installed, non-installed, or installed but
      not available on the mirrors — other sections display tasks,
      virtual packages, and new packages that appeared recently on
      mirrors). To facilitate thematic browsing, other views are available.
      In all cases, <command>aptitude</command> displays a list combining
      categories and packages on the screen. Categories are organized
      through a tree structure, whose branches can respectively be unfolded
      or closed with the <keycombo><keycap>Enter</keycap></keycombo>,
      <keycombo><keycap>[</keycap></keycombo> and
      <keycombo><keycap>]</keycap></keycombo> keys.
      <keycombo><keycap>+</keycap></keycombo> should be used to mark a
      package for installation, <keycombo><keycap>-</keycap></keycombo> to
      mark it for removal and <keycombo><keycap>_</keycap></keycombo> to
      purge it (note than these keys can also be used for categories, in
      which case the corresponding actions will be applied to all the
      packages of the category). <keycombo><keycap>u</keycap></keycombo>
      updates the lists of available packages and <keycombo action="simul"><keycap>Shift</keycap><keycap>u</keycap></keycombo>
      prepares a global system upgrade.
      <keycombo><keycap>g</keycap></keycombo> switches to a summary view of
      the requested changes (and typing
      <keycombo><keycap>g</keycap></keycombo> again will apply the
      changes), and <keycombo><keycap>q</keycap></keycombo> quits the
      current view. If you are in the initial view, this will effectively
      close <command>aptitude</command>.</para>

      <sidebar>
        <title><emphasis>DOCUMENTATION</emphasis> <command>aptitude</command></title>

	<para>This section does not cover the finer details of using
	<command>aptitude</command>, it rather focuses on giving you a
	survival kit to use it. <command>aptitude</command> is rather well
	documented and we advise you to use its complete manual available
        in the <emphasis role="pkg">aptitude-doc-en</emphasis> package
        (see <filename>/usr/share/doc/aptitude/html/en/index.html</filename>).
	</para>
      </sidebar>

      <para>To search for a package, you can type
      <keycombo><keycap>/</keycap></keycombo> followed by a search pattern.
      This pattern matches the name of the package, but can also be applied
      to the description (if preceded by <literal>~d</literal>), to the
      section (with <literal>~s</literal>) or to other characteristics
      detailed in the documentation. The same patterns can filter the list
      of displayed packages: type the
      <keycombo><keycap>l</keycap></keycombo> key (as in
      <foreignphrase>limit</foreignphrase>) and enter the pattern.</para>

      <para>Managing the “automatic flag” of Debian packages (see <xref linkend="sect.automatic-tracking" />) is a breeze with
      <command>aptitude</command>. It is possible to browse the list of
      installed packages and mark packages as automatic with <keycombo action="simul"><keycap>Shift</keycap> <keycap>m</keycap></keycombo>
      or to remove the mark with the
      <keycombo><keycap>m</keycap></keycombo> key. “Automatic packages”
      are displayed with an “A” in the list of packages. This feature also
      offers a simple way to visualize the packages in use on a machine,
      without all the libraries and dependencies that you don't really
      care about. The related pattern that can be used with
      <keycombo><keycap>l</keycap></keycombo> (to activate the filter
      mode) is <literal>~i!~M</literal>. It specifies that you only want
      to see installed packages (<literal>~i</literal>) not marked as
      automatic (<literal>!~M</literal>).</para> 
      
      <sidebar>
	<title><emphasis>TOOL</emphasis> Using <command>aptitude</command> on the command-line interface</title>

	<para>Most of <command>aptitude</command>'s features are
	accessible via the interactive interface as well as via
	command-lines. These command-lines will seem familiar to regular
	users of <command>apt-get</command> and
	<command>apt-cache</command>.</para>

	<para>The advanced features of <command>aptitude</command> are
	also available on the command-line. You can use the same package
	search patterns as in the interactive version. For example, if you
	want to cleanup the list of “manually installed” packages, and if
	you know that none of the locally installed programs require any
	particular libraries or Perl modules, you can mark the
	corresponding packages as automatic with a single command:</para>

	<screen><computeroutput># </computeroutput><userinput>aptitude markauto '~slibs|~sperl'</userinput></screen>

	<para>Here, you can clearly see the power of the search pattern
	system of <command>aptitude</command>, which enables the instant
	selection of all the packages in the <literal>libs</literal> and
	<literal>perl</literal> sections.</para>

	<para>Beware, if some packages are marked as automatic and if no
	other package depends on them, they will be removed immediately
	(after a confirmation request).</para>
      </sidebar>

      <section>
        <title>Managing Recommendations, Suggestions and Tasks</title>

	<para>Another interesting feature of <command>aptitude</command> is
	the fact that it respects recommendations between packages while
	still giving users the choice not to install them on a case by case
	basis. For example, the <emphasis role="pkg">gnome</emphasis> package recommends
	<emphasis role="pkg">gdebi</emphasis> (among others).
	When you select the former for installation, the latter will also
	be selected (and marked as automatic if not already installed on
	the system). Typing <keycombo><keycap>g</keycap></keycombo> will
	make it obvious: <emphasis role="pkg">gdebi</emphasis> appears on the summary
	screen of pending actions in the list of packages installed
	automatically to satisfy dependencies. However, you can decide not
	to install it by deselecting it before confirming the
	operations.</para>

	<para>Note that this recommendation tracking feature does not apply
	to upgrades. For instance, if a new version of <emphasis role="pkg">gnome</emphasis> recommends a
	package that it did not recommend formerly, the package won't be
	marked for installation. However, it will be listed on the upgrade
	screen so that the administrator can still select it for
	installation.</para>

	<para>Suggestions between packages are also taken into account, but
	in a manner adapted to their specific status. For example, since
	<emphasis role="pkg">gnome</emphasis> suggests
	<emphasis role="pkg">dia-gnome</emphasis>, the latter will be
	displayed on the summary screen of pending actions (in the section
	of packages suggested by other packages). This way, it is visible
	and the administrator can decide whether to take the suggestion
	into account or not. Since it is only a suggestion and not a
	dependency or a recommendation, the package will not be selected
	automatically — its selection requires a manual intervention from
	the user (thus, the package will not be marked as
	automatic).</para>

	<para>In the same spirit, remember that <command>aptitude</command>
	makes intelligent use of the concept of task. Since tasks are
	displayed as categories in the screens of packages lists, you can
	either select a full task for installation or removal, or browse
	the list of packages included in the task to select a smaller
	subset.</para>
      </section>
      <section>
        <title>Better Solver Algorithms</title>

	<para>To conclude this section, let's note that
	<command>aptitude</command> has more elaborate algorithms compared
	to <command>apt-get</command> when it comes to resolving difficult
	situations. When a set of actions is requested and when these
	combined actions would lead to an incoherent system,
	<command>aptitude</command> evaluates several possible scenarios
	and presents them in order of decreasing relevance. However, these
	algorithms are not failproof. Fortunately there is always the
	possibility to manually select the actions to perform. When the
	currently selected actions lead to contradictions, the upper part
	of the screen indicates a number of “broken” packages (and you
	can directly navigate to those packages by pressing
	<keycombo><keycap>b</keycap></keycombo>). It is then possible to
	manually build a solution for the problems found. In particular,
	you can get access to the different available versions by simply
	selecting the package with
	<keycombo><keycap>Enter</keycap></keycombo>. If the selection of
	one of these versions solves the problem, you should not hesitate
	to use the function. When the number of broken packages gets down
	to zero, you can safely go to the summary screen of pending actions
	for a last check before you apply them.</para>

        <sidebar>
          <title><emphasis>NOTE</emphasis> <command>aptitude</command>'s log</title>

	  <para>Like <command>dpkg</command>, <command>aptitude</command>
	  keeps a trace of executed actions in its logfile
	  (<filename>/var/log/aptitude</filename>). However, since both
	  commands work at a very different level, you cannot find the same
	  information in their respective logfiles. While
	  <command>dpkg</command> logs all the operations executed on
	  individual packages step by step, <command>aptitude</command>
	  gives a broader view of high-level operations like a system-wide
	  upgrade.</para>

	  <para>Beware, this logfile only contains a summary of operations
	  performed by <command>aptitude</command>. If other front-ends (or
	  even <command>dpkg</command> itself) are occasionally used, then
	  <command>aptitude</command>'s log will only contain a partial
	  view of the operations, so you can't rely on it to build a
	  trustworthy history of the system.</para>
        </sidebar>
      </section>
    </section>
    <section>
      <title><command>synaptic</command></title>

      <para><command>synaptic</command> is a graphical package manager for
      Debian which features a clean and efficient graphical interface based
      on GTK+/GNOME. Its many ready-to-use filters give fast access to
      newly available packages, installed packages, upgradable packages,
      obsolete packages and so on. If you browse through these lists, you
      can select the operations to be done on the packages (install,
      upgrade, remove, purge); these operations are not performed
      immediately, but put into a task list. A single click on a button
      then validates the operations, and they are performed in one
      go.</para>

      <figure>
        <title><command>synaptic</command> package manager</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/synaptic.png" scalefit="1" width="75%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>
  <section id="sect.package-authentication">
    <title>Checking Package Authenticity</title>
    <indexterm><primary>package</primary><secondary>authenticity check</secondary></indexterm>
    <indexterm><primary>package</primary><secondary>seal</secondary></indexterm>
    <indexterm><primary>package</primary><secondary>signature</secondary></indexterm>
    <indexterm><primary>signature</primary><secondary>package signature</secondary></indexterm>
    <indexterm><primary>authentication</primary><secondary>package authentication</secondary></indexterm>

    <para>Security is very important for Falcot Corp administrators.
    Accordingly, they need to ensure that they only install packages which
    are guaranteed to come from Debian with no tampering on the way. A
    computer cracker could try to add malicious code to an otherwise
    legitimate package. Such a package, if installed, could do anything the
    cracker designed it to do, including for instance disclosing passwords
    or confidential information. To circumvent this risk, Debian provides a
    tamper-proof seal to guarantee — at install time — that a package
    really comes from its official maintainer and hasn't been modified by a
    third party.</para>

    <para>The seal works with a chain of cryptographical hashes and a
    signature. The signed file is the <filename>Release</filename> file,
    provided by the Debian mirrors. It contains a list of the
    <filename>Packages</filename> files (including their compressed forms,
    <filename>Packages.gz</filename> and <filename>Packages.xz</filename>,
    and the incremental versions), along with their MD5, SHA1 and SHA256
    hashes, which ensures that the files haven't been tampered with. These
    <filename>Packages</filename> files contain a list of the Debian
    packages available on the mirror, along with their hashes, which
    ensures in turn that the contents of the packages themselves haven't
    been altered either.</para>

    <indexterm><primary><command>apt-key</command></primary></indexterm>
    <indexterm><primary><emphasis role="pkg">debian-archive-keyring</emphasis></primary></indexterm>
    <indexterm><primary><filename>/etc/apt/trusted.gpg.d/</filename></primary></indexterm>
    <indexterm><primary><filename>Release.gpg</filename></primary></indexterm>
    <para>The trusted keys are managed with the <command>apt-key</command>
    command found in the <emphasis role="pkg">apt</emphasis> package. This
    program maintains a keyring of GnuPG public keys, which are used to
    verify signatures in the <filename>Release.gpg</filename> files
    available on the mirrors. It can be used to add new keys manually (when
    non-official mirrors are needed). Generally however, only the official
    Debian keys are needed. These keys are automatically kept up-to-date by
    the <emphasis role="pkg">debian-archive-keyring</emphasis> package
    (which puts the corresponding keyrings in <filename>/etc/apt/trusted.gpg.d</filename>).
    However, the first installation of this particular package
    requires caution: even if the package is signed like any other, the
    signature cannot be verified externally. Cautious administrators should
    therefore check the fingerprints of imported keys before trusting them
    to install new packages:</para>

    <screen role="scale"># <userinput>apt-key fingerprint</userinput>
/etc/apt/trusted.gpg.d/debian-archive-jessie-automatic.gpg
----------------------------------------------------------
pub   4096R/2B90D010 2014-11-21 [expires: 2022-11-19]
      Key fingerprint = 126C 0D24 BD8A 2942 CC7D  F8AC 7638 D044 2B90 D010
uid                  Debian Archive Automatic Signing Key (8/jessie) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-jessie-security-automatic.gpg
-------------------------------------------------------------------
pub   4096R/C857C906 2014-11-21 [expires: 2022-11-19]
      Key fingerprint = D211 6914 1CEC D440 F2EB  8DDA 9D6D 8F6B C857 C906
uid                  Debian Security Archive Automatic Signing Key (8/jessie) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-jessie-stable.gpg
-------------------------------------------------------
pub   4096R/518E17E1 2013-08-17 [expires: 2021-08-15]
      Key fingerprint = 75DD C3C4 A499 F1A1 8CB5  F3C8 CBF8 D6FD 518E 17E1
uid                  Jessie Stable Release Key &lt;debian-release@lists.debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-squeeze-automatic.gpg
-----------------------------------------------------------
pub   4096R/473041FA 2010-08-27 [expires: 2018-03-05]
      Key fingerprint = 9FED 2BCB DCD2 9CDF 7626  78CB AED4 B06F 4730 41FA
uid                  Debian Archive Automatic Signing Key (6.0/squeeze) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-squeeze-stable.gpg
--------------------------------------------------------
pub   4096R/B98321F9 2010-08-07 [expires: 2017-08-05]
      Key fingerprint = 0E4E DE2C 7F3E 1FC0 D033  800E 6448 1591 B983 21F9
uid                  Squeeze Stable Release Key &lt;debian-release@lists.debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-wheezy-automatic.gpg
----------------------------------------------------------
pub   4096R/46925553 2012-04-27 [expires: 2020-04-25]
      Key fingerprint = A1BD 8E9D 78F7 FE5C 3E65  D8AF 8B48 AD62 4692 5553
uid                  Debian Archive Automatic Signing Key (7.0/wheezy) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-wheezy-stable.gpg
-------------------------------------------------------
pub   4096R/65FFB764 2012-05-08 [expires: 2019-05-07]
      Key fingerprint = ED6D 6527 1AAC F0FF 15D1  2303 6FB2 A1C2 65FF B764
uid                  Wheezy Stable Release Key &lt;debian-release@lists.debian.org&gt;
</screen>

    <sidebar>
      <title><emphasis>IN PRACTICE</emphasis> Adding trusted keys</title>
      <indexterm><primary>trusted key</primary></indexterm>
      <indexterm><primary>key</primary><secondary>APT's authentication keys</secondary></indexterm>

      <para>When a third-party package source is added to the
      <filename>sources.list</filename> file, APT needs to be told to trust
      the corresponding GPG authentication key (otherwise it will keep complaining
      that it can't ensure the authenticity of the packages coming from
      that repository). The first step is of course to get the public key.
      More often than not, the key will be provided as a small text file,
      which we will call <filename>key.asc</filename> in the following
      examples.</para>

      <para>To add the key to the trusted keyring, the administrator can
      run <command>apt-key add &lt; key.asc</command>. Another way is to
      use the <command>synaptic</command> graphical interface: its
      “Authentication” tab in the
      <menuchoice><guimenu>Settings</guimenu>
      <guisubmenu>Repositories</guisubmenu></menuchoice> menu gives the
      possibility of importing a key from the <filename>key.asc</filename>
      file.</para>

      <indexterm><primary><emphasis role="pkg">gui-apt-key</emphasis></primary></indexterm>
      <para>For people who would want a dedicated application and more
      details on the trusted keys, it is possible to use
      <command>gui-apt-key</command> (in the package of the same name), a
      small graphical user interface which manages the trusted keyring.
      </para>
    </sidebar>

    <para>Once the appropriate keys are in the keyring, APT will check the
    signatures before any risky operation, so that front-ends will display
    a warning if asked to install a package whose authenticity can't be
    ascertained.</para>
  </section>
  <section id="sect.dist-upgrade">
    <title>Upgrading from One Stable Distribution to the Next</title>

    <para>One of the best-known features of Debian is its ability to
    upgrade an installed system from one stable release to the next:
    <foreignphrase>dist-upgrade</foreignphrase> — a well-known phrase —
    has largely contributed to the project's reputation. With a few
    precautions, upgrading a computer can take as little as a few minutes,
    or a few dozen minutes, depending on the download speed from the package
    repositories.</para>
    <section>
      <title>Recommended Procedure</title>

      <para>Since Debian has quite some time to evolve in-between stable
      releases, you should read the release notes before upgrading.</para>

      <sidebar>
        <title><emphasis>BACK TO BASICS</emphasis> Release notes</title>

	<para>The release notes for an operating system (and, more
	generally, for any software) are a document giving an overview of
	the software, with some details concerning the particularities of
	one version. These documents are generally short compared to the
	complete documentation, and they usually list the features which
	have been introduced since the previous version. They also give
	details on upgrading procedures, warnings for users of previous
	versions, and sometimes errata.</para>

	
	<para>Release notes are available online: the release notes for the
	current stable release have a dedicated URL, while older release
	notes can be found with their codenames:
	<ulink type="block" url="http://www.debian.org/releases/stable/releasenotes" />
	<ulink type="block" url="http://www.debian.org/releases/wheezy/releasenotes" /></para>
      </sidebar>

      
      <para>In this section, we will focus on upgrading a <emphasis role="distribution">Wheezy</emphasis> system to <emphasis role="distribution">Jessie</emphasis>. This is a major operation on
      a system; as such, it is never 100% risk-free, and should not be
      attempted before all important data has been backed up.</para>

      <para>Another good habit which makes the upgrade easier (and
      shorter) is to tidy your installed packages and keep only the ones
      that are really needed. Helpful tools to do that include
      <command>aptitude</command>, <command>deborphan</command> and
      <command>debfoster</command> (see <xref linkend="sect.automatic-tracking" />). For example, you can use the
      following command, and then use <command>aptitude</command>'s interactive
      mode to double check and fine-tune the scheduled removals:</para>

      <screen># <userinput>deborphan | xargs aptitude --schedule-only remove</userinput>
</screen>

      <para>Now for the upgrading itself. First, you need to change the
      <filename>/etc/apt/sources.list</filename> file to tell APT to get
      its packages from <emphasis role="distribution">Jessie</emphasis>
      instead of <emphasis role="distribution">Wheezy</emphasis>. If the
      file only contains references to <emphasis role="distribution">Stable</emphasis> rather than explicit codenames,
      the change isn't even required, since <emphasis role="distribution">Stable</emphasis> always refers to the latest
      released version of Debian. In both cases, the database of available
      packages must be refreshed (with the <command>apt
      update</command> command or the refresh button in
      <command>synaptic</command>).</para>

      <para>Once these new package sources are registered, you should
      first do a minimal upgrade with <command>apt upgrade</command>.
      By doing the upgrade in two steps, we ease the job of the
      package management tools and often ensure that we have the latest
      versions of those, which might have accumulated bugfixes and
      improvements required to complete the full distribution upgrade.
      </para>

      <para>Once this first upgrade is done, it is time to handle the
      upgrade itself, either with <command>apt full-upgrade</command>,
      <command>aptitude</command>, or
      <command>synaptic</command>. You should carefully check the suggested
      actions before applying them: you might want to add suggested
      packages or deselect packages which are only recommended and known
      not to be useful. In any case, the front-end should come up with a
      scenario ending in a coherent and up-to-date <emphasis role="distribution">Jessie</emphasis> system. Then, all you need is
      to do is wait while the required packages are downloaded, answer the
      Debconf questions and possibly those about locally modified
      configuration files, and sit back while APT does its magic.</para>
    </section>
    <section>
      <title>Handling Problems after an Upgrade</title>

      <para>In spite of the Debian maintainers' best efforts, a major
      system upgrade isn't always as smooth as you could wish. New software
      versions may be incompatible with previous ones (for instance, their
      default behavior or their data format may have changed). Also, some
      bugs may slip through the cracks despite the testing phase which
      always precedes a Debian release.</para>

      <para>To anticipate some of these problems, you can install the
      <emphasis role="pkg">apt-listchanges</emphasis> package, which
      displays information about possible problems at the beginning of a
      package upgrade. This information is compiled by the package
      maintainers and put in
      <filename>/usr/share/doc/<replaceable>package</replaceable>/NEWS.Debian</filename>
      files for the benefit of users. Reading these files (possibly through
      <emphasis role="pkg">apt-listchanges</emphasis>) should help you
      avoid bad surprises.</para>

      <para>You might sometimes find that the new version of a software
      doesn't work at all. This generally happens if the application isn't
      particularly popular and hasn't been tested enough; a last-minute
      update can also introduce regressions which are only found after the
      stable release. In both cases, the first thing to do is to have a
      look at the bug tracking system at
      <literal>https://bugs.debian.org/<replaceable>package</replaceable></literal>,
      and check whether the problem has already been reported. If it
      hasn't, you should report it yourself with
      <command>reportbug</command>. If it is already known, the bug report
      and the associated messages are usually an excellent source of
      information related to the bug:</para>
      <itemizedlist>
        <listitem>
	  <para>sometimes a patch already exists, and it is available on
	  the bug report; you can then recompile a fixed version of the
	  broken package locally (see <xref linkend="sect.rebuilding-package" />);</para>
        </listitem>
        <listitem>
	  <para>in other cases, users may have found a workaround for the
	  problem and shared their insights about it in their replies to
	  the report;</para>
        </listitem>
        <listitem>
	  <para>in yet other cases, a fixed package may have already been
	  prepared and made public by the maintainer.</para>
        </listitem>
      </itemizedlist>

      <para>Depending on the severity of the bug, a new version of the
      package may be prepared specifically for a new revision of the stable
      release. When this happens, the fixed package is made available in
      the <literal>proposed-updates</literal> section of the Debian mirrors
      (see <xref linkend="sect.proposed-updates" />). The corresponding
      entry can then be temporarily added to the
      <filename>sources.list</filename> file, and updated packages can be
      installed with <command>apt</command> or
      <command>aptitude</command>.</para>

      <para>Sometimes the fixed package isn't available in this section yet
      because it is pending a validation by the Stable Release Managers.
      You can verify if that's the case on their web page. Packages listed
      there aren't available yet, but at least you know that the
      publication process is ongoing. <ulink type="block" url="https://release.debian.org/proposed-updates/stable.html" /></para>
    </section>
  </section>
  <section id="sect.regular-upgrades">
    <title>Keeping a System Up to Date</title>

    <para>The Debian distribution is dynamic and changes continually. Most
    of the changes are in the <emphasis role="distribution">Testing</emphasis> and <emphasis role="distribution">Unstable</emphasis> versions, but even <emphasis role="distribution">Stable</emphasis> is updated from time to time,
    mostly for security-related fixes. Whatever version of Debian a system
    runs, it is generally a good idea to keep it up to date, so that you
    can get the benefit of recent evolutions and bug fixes.</para>

    <para>While it is of course possible to periodically run a tool to
    check for available updates and run the upgrades, such a repetitive
    task is tedious, especially when it needs to be performed on several
    machines. Fortunately, like many repetitive tasks, it can be partly
    automated, and a set of tools have already been developed to that
    effect.</para>

    <para>The first of these tools is <command>apticron</command>, in the
    package of the same name. Its main effect is to run a script daily (via
    <command>cron</command>). The script updates the list of available
    packages, and, if some installed packages are not in the latest
    available version, it sends an email with a list of these packages
    along with the changes that have been made in the new versions.
    Obviously, this package mostly targets users of Debian <emphasis role="distribution">Stable</emphasis>, since the daily emails would be
    very long for the faster paced versions of Debian. When updates are
    available, <command>apticron</command> automatically downloads them. It
    does not install them — the administrator will still do it — but
    having the packages already downloaded and available locally (in APT's
    cache) makes the job faster.</para>

    <para>Administrators in charge of several computers will no doubt
    appreciate being informed of pending upgrades, but the upgrades
    themselves are still as tedious as they used to be, which is where the
    <filename>/etc/cron.daily/apt</filename> script (in the <emphasis role="pkg">apt</emphasis> package) comes in handy. This script is also
    run daily (and non-interactively) by <command>cron</command>. To
    control its behavior, use APT configuration variables (which are
    therefore stored in a file under
    <filename>/etc/apt/apt.conf.d/</filename>). The main variables
    are:</para>
    <variablelist>
      <varlistentry>
        <term>
          <literal>APT::Periodic::Update-Package-Lists</literal>
        </term>
        <listitem>
	  <para>This option allows you to specify the frequency (in days)
	  at which the package lists are refreshed.
	  <command>apticron</command> users can do without this variable,
	  since <command>apticron</command> already does this task.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>APT::Periodic::Download-Upgradeable-Packages</literal>
        </term>
        <listitem>
	  <para>Again, this option indicates a frequency (in days), this
	  time for the downloading of the actual packages. Again,
	  <command>apticron</command> users won't need it.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>APT::Periodic::AutocleanInterval</literal>
        </term>
        <listitem>
	  <para>This option covers a feature that
	  <command>apticron</command> doesn't have. It controls how often
	  obsolete packages (those not referenced by any distribution
	  anymore) are removed from the APT cache. This keeps the APT cache
	  at a reasonable size and means that you don't need to worry about
	  that task.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>APT::Periodic::Unattended-Upgrade</literal>
        </term>
        <listitem>
	  <indexterm><primary><emphasis role="pkg">unattended-upgrades</emphasis></primary></indexterm>
	  <para>When this option is enabled, the daily script will
	  execute <command>unattended-upgrade</command> (from the
	  <emphasis role="pkg">unattended-upgrades</emphasis> package)
	  which — as its name suggest — can automatize the upgrade
	  process for some packages (by default it only takes care of
	  security updates, but this can be customized in
	  <filename>/etc/apt/apt.conf.d/50unattended-upgrades</filename>).
	  Note that this option can be set with the help of debconf
	  by running <command>dpkg-reconfigure -plow unattended-upgrades</command>.
	  </para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>Other options can allow you to control the cache cleaning
    behavior with more precision. They are not listed here, but they are
    described in the <filename>/etc/cron.daily/apt</filename>
    script.</para>

    <indexterm><primary><emphasis role="pkg">gnome-packagekit</emphasis></primary></indexterm>
    <para>These tools work very well for servers, but desktop users
    generally prefer a more interactive system. That is why the “Debian
    desktop environment” task installs <emphasis role="pkg">gnome-packagekit</emphasis> (at least when you select GNOME
    as desktop environment). It provides an icon in the
    notification area of desktop environments when updates are available;
    clicking on this icon then runs <command>gpk-update-viewer</command>,
    a simplified interface to perform updates. You can browse through
    available updates, read the short description of the relevant packages
    and the corresponding <filename>changelog</filename> entries, and
    select whether to apply the update or not on a case-by-case
    basis.</para>

    <figure>
      <title>Upgrading with <command>gpk-update-viewer</command></title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/gnome-packagekit.png" scalefit="1" width="70%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="sect.automatic-upgrades">
    <title>Automatic Upgrades</title>
    <indexterm><primary>upgrade</primary><secondary>automatic system upgrade</secondary></indexterm>
    <indexterm><primary>automatic upgrade</primary></indexterm>

    <para>Since Falcot Corp has many computers but only limited manpower,
    its administrators try to make upgrades as automatic as possible. The
    programs in charge of these processes must therefore run with no human
    intervention.</para>
    <section>
      <title>Configuring <command>dpkg</command></title>

      <para>As we have already mentioned (see sidebar <xref linkend="sidebar.questions-conffiles" />), <command>dpkg</command> can
      be instructed not to ask for confirmation when replacing a
      configuration file (with the <literal>--force-confdef
      --force-confold</literal> options). Interactions can, however, have
      three other sources: some come from APT itself, some are handled by
      <command>debconf</command>, and some happen on the command line due
      to package configuration scripts.</para>
    </section>
    <section>
      <title>Configuring APT</title>

      <para>The case of APT is simple: the <literal>-y</literal> option (or
      <literal>--assume-yes</literal>) tells APT to consider the answer to
      all its questions to be “yes”.</para>
    </section>
    <section>
      <title>Configuring <command>debconf</command></title>

      <para>The case of <command>debconf</command> deserves more details.
      This program was, from its inception, designed to control the
      relevance and volume of questions displayed to the user, as well as
      the way they are shown. That is why its configuration requests a
      minimal priority for questions; only questions above the minimal
      priority are displayed. <command>debconf</command> assumes the
      default answer (defined by the package maintainer) for questions
      which it decided to skip.</para>

      <para>The other relevant configuration element is the interface used
      by the front-end. If you choose <literal>noninteractive</literal> out
      of the choices, all user interaction is disabled. If a package tries
      to display an informative note, it will be sent to the administrator
      by email.</para>

      <para>To reconfigure <command>debconf</command>, use the
      <command>dpkg-reconfigure</command> tool from the <emphasis role="pkg">debconf</emphasis> package; the relevant command is
      <command>dpkg-reconfigure debconf</command>. Note that the configured
      values can be temporarily overridden with environment variables when
      needed (for instance, <varname>DEBIAN_FRONTEND</varname> controls the
      interface, as documented in the
      <citerefentry><refentrytitle>debconf</refentrytitle><manvolnum>7</manvolnum></citerefentry>
      manual page).</para>
    </section>
    <section>
      <title>Handling Command Line Interactions</title>

      <para>The last source of interactions, and the hardest to get rid of,
      is the configuration scripts run by <command>dpkg</command>. There is
      unfortunately no standard solution, and no answer is overwhelmingly
      better than another.</para>

      <para>The common approach is to suppress the standard input by
      redirecting the empty content of <filename>/dev/null</filename> into
      it with <command><replaceable>command</replaceable>
      &lt;/dev/null</command>, or to feed it with an endless stream of
      newlines. None of these methods is 100 % reliable, but they
      generally lead to the default answers being used, since most scripts
      consider a lack of reply as an acceptance of the default
      value.</para>
    </section>
    <section>
      <title>The Miracle Combination</title>

      <para>By combining the previous elements, it is possible to design a
      small but rather reliable script which can handle automatic
      upgrades.</para>

      <example id="example.non-interactive-upgrade">
        <title>Non-interactive upgrade script</title>

        <programlisting>export DEBIAN_FRONTEND=noninteractive
yes '' | apt-get -y -o DPkg::options::="--force-confdef" -o DPkg::options::="--force-confold" dist-upgrade
</programlisting>
      </example>

      <sidebar>
        <title><emphasis>IN PRACTICE</emphasis> The Falcot Corp case</title>

	<para>Falcot computers are a heterogeneous system, with machines
	having various functions. Administrators will therefore pick the
	most relevant solution for each computer.</para>

	<para>In practice, the servers running <emphasis role="distribution">Jessie</emphasis> are configured with the
	“miracle combination” above, and are kept up to date
	automatically. Only the most critical servers (the firewalls, for
	instances) are set up with <command>apticron</command>, so that
	upgrades always happen under the supervision of an
	administrator.</para>

	<para>The office workstations in the administrative services also
	run <emphasis role="distribution">Jessie</emphasis>, but they are
	equipped with <emphasis role="pkg">gnome-packagekit</emphasis>,
	so that users trigger the upgrades themselves. The
	rationale for this decision is that if upgrades happen without an
	explicit action, the behavior of the computer might change
	unexpectedly, which could cause confusion for the main
	users.</para>

	<para>In the lab, the few computers using <emphasis role="distribution">Testing</emphasis> — to take advantage of the
	latest software versions — are not upgraded automatically either.
	Administrators only configure APT to prepare the upgrades but not
	enact them; when they decide to upgrade (manually), the tedious
	parts of refreshing package lists and downloading packages will be
	avoided, and administrators can focus on the really useful
	part.</para>
      </sidebar>
    </section>
  </section>
  <section id="sect.searching-packages">
    <title>Searching for Packages</title>

    <para>With the large and ever-growing amount of software in Debian,
    there emerges a paradox: Debian usually has a tool for most tasks, but
    that tool can be very difficult to find amongst the myriad other
    packages. The lack of appropriate ways to search for (and to find) the
    right tool has long been a problem. Fortunately, this problem has
    almost entirely been solved.</para>

    <para>The most trivial search possible is looking up an exact package
    name. If <command>apt show
    <replaceable>package</replaceable></command> returns a result, then the
    package exists. Unfortunately, this requires knowing or even guessing
    the package name, which isn't always possible.</para>

    <sidebar>
      <title><emphasis>TIP</emphasis> Package naming conventions</title>

      <para>Some categories of packages are named according to a
      conventional naming scheme; knowing the scheme can sometimes allow
      you to guess exact package names. For instance, for Perl modules, the
      convention says that a module called
      <literal>XML::Handler::Composer</literal> upstream should be packaged
      as <emphasis role="pkg">libxml-handler-composer-perl</emphasis>. The
      library enabling the use of the <command>gconf</command> system from
      Python is packaged as <emphasis role="pkg">python-gconf</emphasis>.
      It is unfortunately not possible to define a fully general naming
      scheme for all packages, even though package maintainers usually try
      to follow the choice of the upstream developers.</para>
    </sidebar>

    <para>A slightly more successful searching pattern is a plain-text
    search in package names, but it remains very limited. You can generally
    find results by searching package descriptions: since each package has
    a more or less detailed description in addition to its package name, a
    keyword search in these descriptions will often be useful.
    <command>apt-cache</command> and <command>axi-cache</command> are the
    tools of choice for this kind of
    search; for instance, <command>apt-cache search video</command> will
    return a list of all packages whose name or description contains the
    keyword “video”.</para>

    <para>For more complex searches, a more powerful tool such as
    <command>aptitude</command> is required. <command>aptitude</command>
    allows you to search according to a logical expression based on the
    package's meta-data fields. For instance, the following command
    searches for packages whose name contains <literal>kino</literal>,
    whose description contains <literal>video</literal> and whose
    maintainer's name contains <literal>paul</literal>:</para>

    <screen>$ <userinput>aptitude search kino~dvideo~mpaul</userinput>
p   kino  - Non-linear editor for Digital Video data
$ <userinput>aptitude show kino</userinput>
Package: kino
State: not installed
Version: 1.3.4-2.1+b1
Priority: extra
Section: video
Maintainer: Paul Brossier &lt;piem@debian.org&gt;
Architecture: amd64
Uncompressed Size: 8,472 k
Depends: libasound2 (&gt;= 1.0.16), libatk1.0-0 (&gt;= 1.12.4), libavc1394-0 (&gt;=
         0.5.3), libavcodec56 (&gt;= 6:11~beta1) | libavcodec-extra-56 (&gt;=
         6:11~beta1), libavformat56 (&gt;= 6:11~beta1), libavutil54 (&gt;=
         6:11~beta1), libc6 (&gt;= 2.14), libcairo2 (&gt;= 1.2.4), libdv4,
         libfontconfig1 (&gt;= 2.11), libfreetype6 (&gt;= 2.2.1), libgcc1 (&gt;=
         1:4.1.1), libgdk-pixbuf2.0-0 (&gt;= 2.22.0), libglade2-0 (&gt;= 1:2.6.4-2~),
         libglib2.0-0 (&gt;= 2.12.0), libgtk2.0-0 (&gt;= 2.24.0), libice6 (&gt;=
         1:1.0.0), libiec61883-0 (&gt;= 1.2.0), libpango-1.0-0 (&gt;= 1.14.0),
         libpangocairo-1.0-0 (&gt;= 1.14.0), libpangoft2-1.0-0 (&gt;= 1.14.0),
         libquicktime2 (&gt;= 2:1.2.2), libraw1394-11, libsamplerate0 (&gt;= 0.1.7),
         libsm6, libstdc++6 (&gt;= 4.9), libswscale3 (&gt;= 6:11~beta1), libx11-6,
         libxext6, libxml2 (&gt;= 2.7.4), libxv1, zlib1g (&gt;= 1:1.1.4)
Recommends: ffmpeg, curl
Suggests: udev | hotplug, vorbis-tools, sox, mjpegtools, lame, ffmpeg2theora
Conflicts: kino-dvtitler, kino-timfx, kinoplus
Replaces: kino-dvtitler, kino-timfx, kinoplus
Provides: kino-dvtitler, kino-timfx, kinoplus
Description: Non-linear editor for Digital Video data
 Kino allows you to record, create, edit, and play movies recorded with DV
 camcorders. This program uses many keyboard commands for fast navigating and
 editing inside the movie. 
 
 The kino-timfx, kino-dvtitler and kinoplus sets of plugins, formerly
 distributed as separate packages, are now provided with Kino.
Homepage: http://www.kinodv.org/

Tags: field::arts, hardware::camera, implemented-in::c, implemented-in::c++,
      interface::x11, role::program, scope::application, suite::gnome,
      uitoolkit::gtk, use::editing, use::learning, works-with::video,
      x11::application
</screen>

    <para>The search only returns one package, <emphasis role="pkg">kino</emphasis>, which satisfies all three criteria.</para>

    <para>Even these multi-criteria searches are rather unwieldy, which
    explains why they are not used as much as they could. A new tagging
    system has therefore been developed, and it provides a new approach to
    searching. Packages are given tags that provide a thematical
    classification along several strands, known as a “facet-based
    classification”. In the case of <emphasis role="pkg">kino</emphasis>
    above, the package's tags indicate that Kino is a Gnome-based software
    that works on video data and whose main purpose is editing.</para>

    <para>Browsing this classification can help you to search for a package
    which corresponds to known needs; even if it returns a (moderate)
    number of hits, the rest of the search can be done manually. To do
    that, you can use the <literal>~G</literal> search pattern in
    <command>aptitude</command>, but it is probably easier to simply
    navigate the site where tags are managed:
    <ulink type="block" url="http://debtags.alioth.debian.org/cloud/" />
    </para>

    <indexterm><primary><emphasis role="pkg">debtags</emphasis></primary></indexterm>
    <indexterm><primary>标签</primary></indexterm>
    <para>Selecting the <literal>works-with::video</literal> and
    <literal>use::editing</literal> tags yields a handful of packages,
    including the <emphasis role="pkg">kino</emphasis> and <emphasis role="pkg">pitivi</emphasis> video editors. This system of
    classification is bound to be used more and more as time goes on, and
    package managers will gradually provide efficient search interfaces
    based on it.</para>

    <para>总的来说，最好的工具取决于搜索时你所期望达到的复杂程度：</para>
    <itemizedlist>
      <listitem>
	<para><command>apt-cache</command> 只能通过软件包名称和描述信息来进行搜索，对于搜索符合少量关键词的特定软件包十分方便；</para>
      </listitem>
      <listitem>
	<para>当搜索条件包括软件包之间的关系或者像维护者名称的其它元数据时，<command>synaptic</command>将更加有用；</para>
      </listitem>
      <listitem>
	<para>当需要基于标签来搜索时，<command>packagesearch</command> 是一个很好用的工具，可以根据若干条件（包括软件包中包含的文件名）进行软件包搜索的图形化专用工具。命令行下则使用 <command>axi-cache</command>。</para>
        <indexterm><primary><emphasis role="pkg">packagesearch</emphasis></primary></indexterm>
	<indexterm><primary><command>axi-cache</command></primary></indexterm>
      </listitem>
      <listitem>
	<para>最后，当搜索涉及有逻辑操作的复杂的表达式时，首选工具为 <command>aptitude</command> 的搜索语法，尽管有点晦涩难用但功能相当强大，它有命令行和交互两种模式。</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
