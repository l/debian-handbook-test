<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="the-debian-project">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-the-debian-project.png" scalefit="1" />
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>客观的</keyword>
      <keyword>意味着</keyword>
      <keyword>操作</keyword>
      <keyword>志愿者</keyword>
    </keywordset>
  </chapterinfo>
  <title>Debian 项目</title>
  <highlights>
    <para>在深入涉及到相关技术之前，让我们看一看什么是 Debian 项目，它的目标、意义是什么以及它是如何运转的。</para>
  </highlights>
  <section id="sect.what-is-debian">
    <title>什么是 Debian？</title>
    <indexterm><primary>联系</primary></indexterm>

    <sidebar>
      <title><emphasis>文化</emphasis> Debian 名称的起源</title>

      <para>没有什么特别的：Debian 不是一个缩写词。它的名字实际上是两个姓氏的组合：Ian Murdock，和他那时的女朋友，Debra。所以就有了 Debra + Ian = Debian。</para>
    </sidebar>

    <para>Debian 是一个 GNU/Linux 的发行版。我们稍后将会详细地讨论什么是发行版<xref linkend="sect.role-of-distributions" />。但是当前情况下，我们暂且将其简单地归纳为一个完整的操作系统，包括软件和系统的安装及管理，所有的这些都基于 Linux 内核和自由软件（尤其是来自 GNU 项目的自由软件）。</para>

    <para>当他在自由软件基金会（FSF）的领导下于1993年创建 Debian 时，Ian Murdock 有清晰的目标，他在 <emphasis>Debian Manifesto</emphasis> 中对其作了阐述。他所追求的自由操作系统将有两个首要的特性。第一点是质量：Debian 将在最大的关怀与努力下进行开发，以与 Linux 内核相配。另外，它同样将是一个非商业化的发行版，足够可靠而能够和主流商业发行版相竞争。在他眼里，这两个雄心壮志只能以开放 Debian 开发过程的方式达成，正如 Linux 和 GNU 工程所做的那样。因此，互帮互查将能够持续地改进这个项目。</para>

    <sidebar>
      <title><emphasis>文化</emphasis> GNU，自由软件基金会（FSF）的工程</title>
      <indexterm><primary>GNU</primary></indexterm>
      <indexterm><primary>GNU</primary><secondary> 不是 Unix（is Not Unix）</secondary></indexterm>

      <para>GNU 工程是一系列由自由软件基金会（FSF）开发或赞助的自由软件，由其标志性领袖，理查德·M·斯托曼（Richard M. Stallman）发起。GNU 是一个递归缩写，代表“GNU 不是 Unix（GNU is Not Unix）”。</para>
    </sidebar>

    <sidebar>
      <title><emphasis>文化</emphasis> 理查德·斯托曼</title>
      <indexterm><primary>理查德·斯托曼</primary></indexterm>
      <indexterm><primary>RMS</primary></indexterm>

      <para><acronym>FSF</acronym>'s founder and author of the GPL license,
      Richard M. Stallman (often referred to by his initials, RMS) is a
      charismatic leader of the Free Software movement. Due to his
      uncompromising positions, he is not unanimously admired, but his
      non-technical contributions to Free Software (in particular at the
      legal and philosophical level) are respected by everybody.</para>
    </sidebar>
    <section>
      <title>一个多平台操作系统</title>
      <indexterm><primary>超发行版</primary></indexterm>

      <sidebar>
        <title><emphasis>社区</emphasis> 伊恩·默多克的旅程</title>
        <indexterm><primary>伊恩·默多克</primary></indexterm>
        <indexterm><primary>伊恩·默多克</primary></indexterm>
        <indexterm><primary>Progeny</primary></indexterm>

	<para>伊恩·默多克是 Debian 项目的创立者，也是该项目从1993年至1996年的第一任领导者。在把接力棒交给 Bruce Perens 之后，伊恩不经常参与公众活动。他回到了自由软件社区的背后工作，为了尝试商业发行一个 Debian 的衍生发行版建立了 Progeny 公司。遗憾的是，这次冒险尝试是一个商业失败，开发活动也被放弃了。公司在经历了几年的摸爬滚打之后，以一个服务提供商的身份最终于2007年的4月破产。在 Progeny 发起的各个项目中，只有 <emphasis>discover</emphasis> 继续存在。这是一个自动硬件检查工具。</para>
        <para>
          Ian Murdock died on 28 December 2015 in San Francisco
          after a series of worrying tweets where he reported
          having been assaulted by police. In July 2016 it was
          announced that his death had been ruled a suicide.
        </para>
      </sidebar>

      
      <para>Debian, remaining true to its initial principles, has had so
      much success that, today, it has reached a tremendous size. The
      12 architectures offered cover 10 hardware architectures and 2 kernels
      (Linux and FreeBSD, although the FreeBSD-based ports are not part of the set
      of officially supported architectures).
      Furthermore, with more than 25,000 source packages, the available
      software can meet almost any need that
      one could have, whether at home or in the enterprise.</para>

      <para>The sheer size of the distribution can be inconvenient: it
      is really unreasonable to distribute 14 DVD-ROMs to install a complete
      version on a standard PC… This is why Debian is increasingly considered
      as a “meta-distribution”, from which one extracts
      more specific distributions intended for a particular public:
      Debian-Desktop for traditional office use, Debian-Edu for education
      and pedagogical use in an academic environment, Debian-Med for
      medical applications, Debian-Junior for young children, etc. A more
      complete list of the subprojects can be found in the section dedicated to that purpose,
      see <xref linkend="sect.sub-projects" />.</para>

      <para>这些 Debian 的组成部分由定义清晰的框架组织而成，保证“子发行版”之间互相兼容、互不干扰。它们都采用一致的方案释放出新版本。同时它们都基于相同的基础构建而成，可以轻松地使用 Debian 仓库中的软件进行扩展、完善和个性化配置。</para>
      <indexterm><primary>子项目</primary></indexterm>

      <para>所有 Debian 的工具都遵循这个指导方向：<command>debian-cd</command> 已经存在很长时间了，它可以用来创建一组光盘，其中仅包含一系列预先选择的软件包；<command>debian-installer</command> 也是一个模块化的安装工具，易于适应不同的需求。<command>APT</command> 可以使用不同的来源安装软件包，同时保证系统整体的一致性。</para>

      <sidebar>
        <title><emphasis>工具</emphasis> 创建 Debian 安装光盘</title>
        <indexterm><primary><command>debian-cd</command></primary></indexterm>

	<para><command>debian-cd</command> 创建即时可用的安装媒介（如 CD、DVD、蓝光等等）的 ISO 镜像。所有关于这个软件的讨论（使用英文）均在 <email>debian-cd@lists.debian.org</email> 这个邮件列表中进行。这个团队由 Steve Mclntyre 领导，他同时控制着官方的 Debian 镜像构建过程。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>基本知识</emphasis> 每台电脑，都有它的架构</title>

	<para>术语 “architecture（架构）” 表明了计算机的类型（最为人所知的就是 Mac 或是 PC 了）。每一种架构的主要区别在于它使用的处理器，通常不同的处理器之间是不能兼容的。这些硬件的不同包含了大量不同的操作方法，因此需要为每种不同的架构分别编译软件。</para>
        <indexterm><primary>架构</primary></indexterm>
        <indexterm><primary>处理器</primary></indexterm>

	<para>Debian 项目中可获取的大多数的软件都是用可移植编程语言编写的：相同的源代码可以为不同的架构编译。事实上，一个可执行的二进制文件，通常都是为特定的架构编译的，在不同的架构的机器上几乎不能起任何作用。</para>

	<para>重申每一个程序是由源代码编写而成的；这些源代码就是包含了各种所使用的编程语言的指令的文本文件。在你可以使用软件之前，源代码需要被编译，目的是把代码转换成二进制文件（一系列处理器可以执行的机器指令）。每一种编程语言都有一个特定的编译器来执行这个操作（例如：<command>gcc</command> 是C语言的编译器）。</para>
        <indexterm><primary>源</primary><secondary>代码</secondary></indexterm>
        <indexterm><primary>二进制代码</primary></indexterm>
        <indexterm><primary>编译</primary></indexterm>
        <indexterm><primary>编译器</primary></indexterm>
      </sidebar>

      <sidebar>
        <title><emphasis>工具</emphasis> 安装程序</title>
        <indexterm><primary><command>debian-installer</command></primary></indexterm>

	<para><command>debian-installer</command> 是 Debian 安装程序的名字。它的模块化设计令他可以应用于各种各样的安装场景。开发工作在 Cyril Brulebois 的指导下沟通协调于 <email>debian-boot@lists.debian.org</email> 邮件列表。</para>
      </sidebar>
    </section>
    <section>
      <title>自由软件的质量</title>

      <para>Debian 遵循所有的自由软件的原则，在充分准备好之前新版本不会释出。开发者不会因为一些时间表而被强制的跟随一个随意的截止日期。人们经常抱怨 Debian 的稳定释出之间的时间间隔过长，但是这样的谨慎同样也保证了 Debian 一贯的可靠性：在赋予全发行版“稳定”标签之前长时间的测试确实是必要的。</para>

      <para>Debian 不会在质量问题上妥协：众所周知严重的 bug 都会在新版本中得到解决，即使需要推迟已经公布的释出日期。</para>
    </section>
    <section>
      <title>法律框架：非营利组织</title>

      <para>从法律上来说，Debian 是一个由美国的非营利志愿者协会管理的项目。这个项目大约有一千左右的 <emphasis>Debian 开发者</emphasis>，但是聚集了远超这个数的贡献者（翻译者，bug 报告者，艺术家，临时开发者等）。</para>

      <para>为了它的使命能成为现实，Debian 拥有一个巨大的基础架构，拥有许多由赞助者提供的服务器连接在因特网上。</para>

      <sidebar>
        <title><emphasis>社区</emphasis> 在 Debian 的背后有 SPI（Software in the Public Interest）与当地分支机构的帮助</title>
        <indexterm><primary>联系</primary></indexterm>
        <indexterm><primary>SPI</primary></indexterm>
        <indexterm><primary>Debian 法国</primary></indexterm>
        <indexterm><primary>Software in the Public Interest</primary></indexterm>

	<para>Debian doesn't own any server in its own name, since it
	is only a project within the <emphasis>Software in the Public
	Interest</emphasis> association, and SPI manages the hardware
	and financial aspects (donations, purchase of hardware,
	etc.). While initially created specifically for the Debian
	project, this association now hosts other free
	software projects, especially the PostgreSQL database,
	Freedesktop.org (project for standardization of various parts
	of modern graphical desktop environments, such as GNOME and
	KDE Plasma), and the Libre Office office suite.
	<ulink type="block" url="http://www.spi-inc.org/" /></para>

	<para>在 SPI 之外，各种地区协会与 Debian 密切协作来为 Debian 项目筹措资金，使得不必要所有事情都集中在美国；在 Debian 项目的语汇中这些协会被称作 “可信组织” 。这样的设置避免了过高的国际交流成本，同时也契合了项目本身的去中心化的理念。</para>

	<para>While the list of trusted organizations is rather short,
	there are many more Debian-related associations whose goal
	is to promote Debian: <emphasis>Debian France</emphasis>,
	<emphasis>Debian-ES</emphasis>, <emphasis>debian.ch</emphasis>,
	and others around the world. Do not hesitate to join your local
	association and support the project!
	<ulink type="block" url="https://wiki.debian.org/Teams/Auditor/Organizations" />
	<ulink type="block" url="https://france.debian.net/" />
	<ulink type="block" url="http://www.debian-es.org/" />
	<ulink type="block" url="https://debian.ch/" />
	</para>
      </sidebar>
    </section>
  </section>
  <section id="sect.foundation-documents">
    <title>基金会文档</title>
    <indexterm><primary>基金会文档</primary></indexterm>

    <para>在项目发起的几年之后，Debian 确定了需要遵循自由软件项目形式的原则。这个慎重而积极的决定使得项目有序而稳定的成长并且确保了所有的成员向同一个方向前进。要成为一个 Debian 的开发者，任何的候选人必须承诺并且证明他们能够支持并且坚守建立在项目的基础文档上的原则。</para>

    <para>开发程序被不断的争论，然而这些基础文档被广泛的接受，因此很少更改。Debian 的组织架构也为这些稳定性提供了额外的保证：任何修订案都需要获得四分之三的有效多数的同意才能获得通过。</para>

    <section id="sect.social-contract">
      <title>对用户的承诺</title>
      <indexterm><primary>社群契约</primary></indexterm>
      <indexterm><primary>契约，社会</primary></indexterm>

      <para>这个项目同样也有一份“社会契约”。这样一个文本在这个项目中只是为了一个操作系统的开发而存在的么？答案很简单：Debian 为用户工作，更广泛的来说，是为了这个社会。这份契约总结了这个项目所承担的承诺。让我们从更详细的细节中来学习它们：</para>

      <orderedlist>
        <listitem>
	  <para>Debian 将始终是 100% 的自由软件。</para>

	  <para>准则一：Debian 是并且还将继续保持完全由自由软件组成。另外，所有由 Debian 项目开发的软件与它自身都会是自由软件。</para>

          <sidebar>
            <title><emphasis>视角</emphasis> 在软件之外</title>

	    <para>第一版的 Debian 社会契约告诉我们“Debian 将会始终保持100%的自由<emphasis>软件</emphasis>”。软件这个词的弃用（在2004年正式启用的1.1版社会契约中）指出了实现自由的愿景，不仅仅是在软件上，也同时在 Debian 期望与操作系统一起提供的文档和其它的要素中。</para>

	    <para>这个改变，仅仅是作为对编辑的影响，事实上，由数不清的影响，特别是要移除一些成问题的文档。此外，在驱动中使用固件的增长带来了问题：许多是非自由的，然而在适当的操作与固件的通信中又是必需的。</para>
          </sidebar>
        </listitem>
        <listitem>
	  <para>我们会回馈自由软件社区。</para>

	  <para>任何被整合到发行版中的由 Debian 项目贡献的改进都会被反馈到作者（称为“上游”）。通常的，Debian 会与社区合作而不是独立工作。</para>

          <sidebar>
            <title><emphasis>社区</emphasis> 上游作者，或是Debian开发者？</title>
            <indexterm><primary>上游作者</primary></indexterm>
            <indexterm><primary>作者，上游</primary></indexterm>
            <indexterm><primary>上游</primary></indexterm>

	    <para>术语“上游作者”指的是工作中的作者/开发者，是编写与开发软件的人员。另一方面，“Debian 开发者”使用更直观的工作来使软件加入到 Debian 包中（术语“Debian 维护者”更为适当一些）。</para>

	    <para>在实践中，区分往往不是那么的清晰。Debian 维护者可能会写一个补丁，这样的工作可以使所有人都受益。通常来讲，Debian 鼓励负责 Debian 中对应软件包的人员同时参与到“上游”开发工作中去（然后，他们也就变成了贡献者，而不是仅仅被限制为一个程序使用者的角色）。</para>
          </sidebar>
        </listitem>
        <listitem>
	  <para>我们不隐藏问题。</para>

	  <para>Debian 不是完美的，事实上，每天我们都会发现需要修复的新问题。我们将始终对公众开放完整的缺陷报告数据库。人们在线提交的报告也会尽快对其他人可见。</para>
        </listitem>
        <listitem>
	  <para>用户和自由软件是我们优先考虑的事。</para>

	  <para>这个承诺更加难以定义。Debian 规定，如下，当必须要作一个带有一定偏向的决定时，会抛弃那个对开发来说更为方便而会损害用户体验的方案，选择一个更加优雅的方案，即使它会更加的难以实现。这意味着用户与自由软件的利益将会被优先考虑。</para>
        </listitem>
        <listitem>
	  <para>不符合我们的自由软件规范的作品。</para>

	  <para>Debian 接受并且理解用户可能需要使用一些非自由软件程序。这就是 Debian 允许混合使用了项目中的部分基础架构与非自由软件的程序可以被安全的再次分发的原因。</para>

          <sidebar>
            <title><emphasis>社区</emphasis> 是支持还是反对 non-free 区块的呢？</title>
            <indexterm><primary>非自由（non-free）</primary></indexterm>
            <indexterm><primary>区块</primary> <secondary>non-free</secondary></indexterm>

	    <para>维护一个允许容纳非自由软件的体系的承诺（如“non-free”章节，请看侧边栏<xref linkend="sidebar.sections" />）总是 Debian 社区中的辩论的主题。</para>

	    <para>反对者指责这相当于让人们远离自由软件，同时这也与只服务于自由软件的原则相背。支持者总是声称大多数的非自由软件包都是“几乎是自由的”，仅仅是被一两条恼人的限制性条件所限制（最常见的就是禁止软件的商业使用）。通过在非自由分支中分发这些软件包，我们相当于间接的向作者解释，如果这些软件包能被包含在主分区中，便可以被更多的人所知并且使用。因此，我们是在礼貌而委婉地提出希望他们能够为了达到这样的目的而改变其许可证。</para>

	    <para>经过2004年首次不成功的尝试后，对不自由分区的彻底移除已经不太可能再次提上日程了。其中一个有很重要的原因，是这个分区包含了许多仅仅是因为不满足主分区新的要求而被移动至此的重要文档。对GNU计划所提供的某些软件文档来说尤其如此（特指Emacs和Make）。</para>

	    <para>non-free软件分区就这样一直存在，并成为了与自由软件基金会之间不时产生摩擦的导火索。这也是基金会拒绝正式推荐Debian作为自由软件操作系统的主要原因。</para>
          </sidebar>
        </listitem>
      </orderedlist>
    </section>
    <section id="sect.dfsg">
      <title>Debian 自由软件指导方针</title>
      <indexterm><primary>自由软件原则</primary></indexterm>
      <indexterm><primary>Debian自由软件指导方针 (Debian Free Software Guidelines, DFSG)</primary></indexterm>
      <indexterm><primary>Debian 自由软件指导方针</primary></indexterm>
      <indexterm><primary>自由</primary><secondary>软件</secondary></indexterm>

      <para>这个参考文档定义了哪些软件是“足够自由”而可以包含于 Debian 中。如果某个程序的许可证与这些原则相符合，它便能被收录在 main 部分中；如果有所冲突，但是至少允许自由分发的话，它可能被收录于 non-free 部分。正式地来说，non-free 不是 Debian 的组成部分；它属于向用户提供的额外服务。</para>

      <para>这些条文不仅仅是Debian的选择标准，也成为了有关自由软件方面的权威解释，同时，它也作为“开源”的基础定义。因此，它成为了“自由软件”概念最早的正式定义之一。</para>

      <para>GNU通用公共许可协议、BSD许可协议和还有艺术许可协议，这些都是传统自由软件的许可协议，它们遵循自由软件指导方针中所提到的9个要点。在下面的链接中你会找到发布在Debian网站上的这些许可协议的文本。<ulink type="block" url="http://www.debian.org/social_contract#guidelines" /></para>
      <orderedlist>
        <listitem>
          <formalpara>
            <title>自由的再次发行。</title>

	    <para>Debian组件的许可协议不得限制任何一方将此软件作为含有若干不同来源的程序的一套软件集合中的一个组件用于销售或者捐赠。该许可证不得向诸如此类销售行为的销售方索取专利费或者其它费用。</para>
          </formalpara>

          <sidebar>
            <title><emphasis>回到起点</emphasis>自由许可协议</title>
            <indexterm><primary>许可协议</primary><secondary>BSD</secondary></indexterm>
            <indexterm><primary>BSD许可协议</primary></indexterm>
            <indexterm><primary>许可协议</primary><secondary>GNU通用公共许可协议</secondary></indexterm>
            <indexterm><primary>GNU通用公共许可协议</primary></indexterm>
            <indexterm><primary>GNU</primary><secondary>通用公共许可协议</secondary></indexterm>
            <indexterm><primary>通用公共许可协议</primary></indexterm>
            <indexterm><primary>许可协议</primary><secondary>艺术</secondary></indexterm>
            <indexterm><primary>artistic许可协议</primary></indexterm>

	    <para>GNU通用公共许可协议，BSD许可协议，以及Artistic许可协议，虽然它们各不相同，但是它们都符合Debian自由软件指导方针。</para>

	    <para>GNU 通用公共许可协议，由自由软件基金会（FSF）使用并推广，是最为常见的许可协议。它的主要特点是，它同样适用于任何被重分发的衍生作品：一个程序，如果它以使用了由 GNU 通用公共许可协议许可的代码，那么它在分发时也必须遵从 GNU 通用公共许可协议的条款。因此，它禁止了软件在私有软件中的任何重用行为。这对想要重用 GNU 通用公共许可协议许可的代码，却使用了不兼容的许可协议的软件造成了严重问题。例如：有时候无法将一个以另一个自由软件协议分发的程序和以 GNU 通用公共软件许可协议分发的库进行链接。另一方面，这一许可协议在美国法律中相当稳靠：自由软件基金会的律师们参与起草了该许可协议，也时常迫使违规者与自由软件基金会签订和解协议以避免法庭诉讼。<ulink type="block" url="http://www.gnu.org/copyleft/gpl.html" /></para>

	    <para>The BSD license is the least restrictive: everything is
	    permitted, including use of modified BSD code in a proprietary
            application.
            <ulink type="block" url="http://www.opensource.org/licenses/bsd-license.php" /></para>

	    <para>最后，艺术许可协议则在这两种协议间达成了某种妥协：允许在私有软件中使用未经修改的代码，但是任何修改的部分则必须公开。<ulink type="block" url="http://www.opensource.org/licenses/artistic-license-2.0.php" /></para>

	    <para>这些许可协议的完整文本可以在任一Debian系统的<filename>/usr/share/common-licenses/</filename>中找到。</para>
          </sidebar>
        </listitem>
        <listitem>
          <formalpara>
            <title>源代码。</title>

	    <para>程序必须包含源代码，并且必须允许以已编译二进制文件形式和源代码的形式分发。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>衍生作品。</title>

	    <para>许可协议必须允许代码修改和衍生作品，并且必须允许这些作品以和原软件相同的许可协议条款进行分发。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>作者源码的完整性。</title>

	    <para><emphasis>仅当</emphasis>许可协议允许：为了在构建程序时修改代码，“补丁文件”可随源代码一同分发，那么在此种情况下，许可协议可以限制分发修改过的源代码。许可协议须明确地说明准许分发由修改过的源代码构建成的软件。它可能会要求衍生作品使用与源软件不同的名字或版本号。<emphasis>这是一种妥协。Debian社团鼓励所有的作者不要限制任何文件的修改，不论是代码还是二进制文件</emphasis>。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>不歧视个人或群体。</title>

	    <para>许可协议禁止歧视任何个人或群体。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>不歧视各领域的贡献者。</title>

	    <para>许可协议不应限制任何人把程序应用于任何领域。例如，不应规定程序不能应用于商业领域或基因研究领域。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>许可协议的分发。</title>

	    <para>程序附带的权利必须适用于程序的再散布无需加上其他的授权。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>许可协议不应限定于 Debian。</title>

	    <para>属于程序的权利，不应取决于该程序是否是 Debian 的一部分。如果某个程序是从 Debian 中提取出的，而又没有基于 Debian 进行分发或者应用于 Debian，但是根据该程序许可协议的条款，所有程序的使用者，包括程序被再分发之后的使用者，依然都享有该程序在 Debian 系统中相同的权利。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>许可协议禁止损害其他软件。</title>

	    <para>许可证禁止限制那些和软件许可一起分发的软件。例如，许可证禁止要求在同一媒介上分发的所有其他程序都必须是自由软件。</para>
          </formalpara>

          <sidebar>
            <title><emphasis>回到基础</emphasis>著佐权</title>
            <indexterm><primary>著佐权</primary></indexterm>
            <indexterm><primary>著作权</primary></indexterm>

	    <para>著佐权的原则在于使用著作权来保障作品及其衍生品的自由，而不是如同专有软件的情况那样限制使用的权利。它也是对“著作权”术语的文字游戏。Richard Stallman 从他的喜欢说双关语的朋友给他写的一封信那里获得了这一灵感，信的内容是这样的：“著佐权：所有权利反转”。著佐权强制保护原始作品（通常是程序）或者修改的作品版本分发的最初的自由。如果某一程序的代码是基于著佐权发布下的程序衍生而来的，那么它就不可能作为专有程序再被分发。</para>

	    <para>最广为人知的著佐权许可证，当然是 GNU 通用公共许可证以及它的衍生版本，GNU 宽通用公共许可证 (GNU LGPL) 和 GNU 自由文档许可证 (GNU FDL)。不幸的是，著佐权许可证通常来说是不互相兼容的。因此，最好只使用其中一个。</para>
          </sidebar>
        </listitem>
      </orderedlist>

      <sidebar id="sidebar.bruce-perens">
        <title><emphasis>社区</emphasis> Bruce Perens，一位有争议的领导者</title>
        <indexterm><primary>Bruce Perens</primary></indexterm>
        <indexterm><primary>Perens, Bruce</primary></indexterm>
        <indexterm><primary>开源</primary></indexterm>

	<para>Bruce Perens 是继 Ian Murdock 之后的 Debian 项目的第二位领导者。他的多样化和独裁化管理方式饱受争议。尽管如此，他依然是 Debian 项目的重要贡献者。特别是他编写的著名的 “Debian 自由软件指导方针” (该方针源自于 Ean Shuessler 的想法) 对于 Debian 项目帮助很大。随后，Bruce 又据此编写了著名的“开源定义”，并且移除了所有的 Debian 引用。<ulink type="block" url="http://www.opensource.org/" /></para>

	<para>当他离开项目时，是挺让人伤心的。然而 Bruce 依然和 Debian 保持着紧密的联系，因为他继续在政治界和金融界推广此发行版。他偶尔也出现在电子邮件列表中，表达他对 Debian 的建议以及其支持 Debian 的新举措。</para>
        <indexterm><primary>代号</primary></indexterm>
        <indexterm><primary>名称</primary><secondary>代号</secondary></indexterm>
        <indexterm><primary><emphasis role="distribution">Rex</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Buzz</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Bo</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Hamm</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Slink</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Potato</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Woody</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Sarge</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Etch</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Lenny</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Squeeze</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Wheezy</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Jessie</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Stretch</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Buster</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Bullseye</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">Sid</emphasis></primary></indexterm>
        <indexterm><primary>玩具总动员</primary></indexterm>
        <indexterm><primary>Pixar</primary></indexterm>

	<para>Last anecdotal point, it was Bruce who was responsible for
	inspiring the different “codenames” for Debian versions
	(1.1 — <emphasis role="distribution">Rex</emphasis>,
	1.2 — <emphasis role="distribution">Buzz</emphasis>,
	1.3 — <emphasis role="distribution">Bo</emphasis>,
	2.0 — <emphasis role="distribution">Hamm</emphasis>,
	2.1 — <emphasis role="distribution">Slink</emphasis>,
	2.2 — <emphasis role="distribution">Potato</emphasis>,
	3.0 — <emphasis role="distribution">Woody</emphasis>,
	3.1 — <emphasis role="distribution">Sarge</emphasis>,
	4.0 — <emphasis role="distribution">Etch</emphasis>,
	5.0 — <emphasis role="distribution">Lenny</emphasis>,
	6.0 — <emphasis role="distribution">Squeeze</emphasis>,
	7 — <emphasis role="distribution">Wheezy</emphasis>,
        8 — <emphasis role="distribution">Jessie</emphasis>,
        9 — <emphasis role="distribution">Stretch</emphasis>,
        10 (not released yet) — <emphasis role="distribution">Buster</emphasis>,
        11 (not released yet) — <emphasis role="distribution">Bullseye</emphasis>,
	<emphasis role="distribution">Unstable</emphasis> —
	<emphasis role="distribution">Sid</emphasis>).
	They are taken from the names
	of characters in the Toy Story movie. This animated film entirely
	composed of computer graphics was produced by Pixar Studios, with
	whom Bruce was employed at the time that he led the Debian
	project. The name “Sid” holds particular status, since it will
	eternally be associated with the <emphasis role="distribution">Unstable</emphasis> branch. In the film, this
	character was the neighbor child, who was always breaking toys —
	so beware of getting too close to <emphasis role="distribution">Unstable</emphasis>. Otherwise, <emphasis role="distribution">Sid</emphasis> is also an acronym for “Still
	In Development”.</para>
      </sidebar>
    </section>
  </section>
  <section id="sect.debian-internals">
    <title>Debian 项目的内部工作</title>
    <indexterm><primary>运作，内部</primary></indexterm>
    <indexterm><primary>组织，内部</primary></indexterm>

    <para>从有经验的 Debian 开发者、Debian 软件包里的个别或集体作品、以及用户的回馈，Debian 计划产出丰富的结果。</para>
    <section>
      <title>Debian 开发者</title>
      <indexterm><primary>开发者</primary><secondary>Debian 开发者</secondary></indexterm>

      <para>Debian developers have various responsibilities, and as
      official project members, they have great influence on the direction
      the project takes. A Debian developer is generally responsible for at
      least one package, but according to their available time and desire,
      they are free to become involved in numerous teams, acquiring, thus,
      more responsibilities within the project.
      <ulink type="block" url="https://www.debian.org/devel/people" />
      <ulink type="block" url="https://www.debian.org/intro/organization" />
      <ulink type="block" url="https://wiki.debian.org/Teams" /></para>

      <sidebar>
        <title><emphasis>工具</emphasis>开发者的数据库</title>
        <indexterm><primary>开发者</primary><secondary>开发者的数据库</secondary></indexterm>
        <indexterm><primary>数据库</primary><secondary>开发者的数据库</secondary></indexterm>

	<para>Debian has a database including all developers registered
	with the project, and their relevant information (address,
	telephone, geographical coordinates such as longitude and latitude,
	etc.). Some of the information (first and last name, country, username
	within the project, IRC username, GnuPG key, etc.) is public and
	available on the Web.
	<ulink type="block" url="https://db.debian.org/" /></para>

	<para>地理信息用于创建开发者在全球的分布地图。Debian 是真正的国际计划：虽然主要在 '西方国家'，其开发者确实遍布各大洲。</para>

        
        <figure>
          <title>Debian 开发者遍布全球</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/developers-map.png" scalefit="1" width="70%" />
            </imageobject>
          </mediaobject>
          <indexterm><primary>遍布全球</primary></indexterm>
        </figure>
      </sidebar>

      <para>Package maintenance is a relatively regimented activity, very
      documented or even regulated. It must, in effect, comply with all the
      standards established by the <emphasis>Debian Policy</emphasis>.
      Fortunately, there are many tools that facilitate the maintainer's work.
      The developer can, thus, focus on the specifics of their package and
      on more complex tasks, such as squashing bugs. <ulink type="block" url="https://www.debian.org/doc/debian-policy/" /></para>

      <sidebar>
        <title><emphasis>回到起点</emphasis> 包的维护，开发者的工作</title>
        <indexterm><primary>维护</primary><secondary>软件包的维护</secondary></indexterm>
        <indexterm><primary>软件包</primary><secondary>维护</secondary></indexterm>

	<para>维护软件包，表示 '包装' 程序。特别是，定义安装的方法，以便在安装之后，此程序可以依照 Debian 计划设置的规则运作并兼容于 Debian 计划。其结果是保存在一个 <filename>.deb</filename> 文件内。有效果的程序安装不需要解压缩文件也不需要预安装或再安装其中的脚本。</para>

	<para>过了初始阶段后，才真正开始维护流程：依照最新版的 Debian 政策准备更新，修正读者报告的错误，并包括新的程序 '上游' 版本以备继续同步发展。例如，初次包装后，版本命名为 1.2.3。几个月之后，原著者发布新的稳定版，编号为 1.4.0。此时，Debian 维护者应更新软件包，用户才能取得最新的稳定版。</para>
      </sidebar>
      <indexterm><primary>Debian 政策</primary></indexterm>
      <indexterm><primary>Debian 政策</primary></indexterm>
      <indexterm><primary>政策</primary></indexterm>

      <para>The Policy, an essential element of the Debian Project,
      establishes the norms ensuring both the quality of the packages and
      perfect interoperability of the distribution. Thanks to this Policy,
      Debian remains consistent despite its gigantic size. This Policy is
      not fixed in stone, but continuously evolves thanks to proposals
      formulated on the <email>debian-policy@lists.debian.org</email>
      mailing list. Amendments that are agreed upon by all interested parties are accepted and
      applied to the text by a small group of maintainers who have no
      editorial responsibility (they only include the modifications agreed
      upon by the Debian developers that are members of the above-mentioned
      list). You can read current amendment proposals on the bug tracking
      system: <ulink type="block" url="https://bugs.debian.org/debian-policy" /></para>

      <sidebar>
        <title><emphasis>社区</emphasis> 政策的编辑流程</title>

	<para>任何人都可以通过对<emphasis role="pkg">debian-policy</emphasis> 包提交严重性为“愿望”的漏洞来申请修改 Debian 政策的新提议。随后的流程可以在<filename>/usr/share/doc/debian-policy/Process.html</filename>中找到：如果所揭示的问题需要通过在 Debian 政策中添加新的条款来解决，那么在 <email>debian-policy@lists.debian.org</email>邮件列表上就会开始对此进行讨论。当达成一致意见后，就会产生一个新提议。一份新起草的政策修正条款会被提交审阅（以补丁的方式）。只要当有两名其他开发者认为，新起草的修改条款和之前讨论的内容保持一致（他们支持这一新修正条款），那么这一提议就会被某一位<emphasis role="pkg">debian-policy</emphasis> 包维护者更新进正式的文件中。如果这一流程在上述的任一阶段失败了，那么维护者就会关闭这一漏洞，注明该提案被拒绝。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>DEBIAN 政策</emphasis> 文档</title>
        <indexterm><primary>文档</primary><secondary>位置</secondary></indexterm>
        <indexterm><primary>文档位置</primary></indexterm>
        <indexterm><primary><filename>/usr/share/doc/</filename></primary></indexterm>
        <indexterm><primary><filename>README.Debian</filename></primary></indexterm>
        <indexterm><primary><filename>NEWS.Debian.gz</filename></primary></indexterm>

	<para>每一个包的说明文档保存在<filename>/usr/share/doc/<replaceable>软件包名称</replaceable>/</filename>路径下。这一目录通常包含一个<filename>README.Debian</filename>文件。该文件描述了包维护者为Debian所做的特定调整。因此，在做任何配置前最好先读一下这个文件，从包维护者的经验中获益。我们还可以找到一个名为<filename>changelog.Debian.gz</filename>的文件，它描述了Debian维护者在各个软件包版本之间所做的更改。请不要将这个文件和<filename>changelog.gz</filename>文件（或类似名称的文件）混淆，后者是由上游开发者提供的，描述了上游的修订日志。<filename>copyright</filename>文件包含了软件作者和软件适用的授权条款的信息。最后，我们还可能找到名为<filename>NEWS.Debian.gz</filename>的文件，Debian开发者可以使用它发布有关更新的重要信息；如果<emphasis>apt-listchanges</emphasis>已在系统上安装，则这些信息将在更新时自动显示。所有其它的文件都和特定的软件包相关。我们特别指出可能存在名为<filename>examples</filename>的子目录，它通常包含了配置文件的示例。</para>
      </sidebar>

      <para>政策含包装的技术细节。计划的大小也引发组织的问题；由 Debian 宪法处理，即创建决策的结构与方法。换句话说，就是正式的治理系统。</para>
      <indexterm><primary>宪章</primary></indexterm>
      <indexterm><primary>Debian 项目领导人</primary></indexterm>
      <indexterm><primary>DPL（Debian 项目领导人）</primary></indexterm>
      <indexterm><primary>领导人</primary><secondary>角色</secondary></indexterm>
      <indexterm><primary>领导人</primary><secondary>选举</secondary></indexterm>

      <para>Debian 宪章定义了一些角色和职位，以及各自的职责和权力。值得特别指出的是，通过投票决议，Debian 开发者们总是拥有最终的决定权。对于重大的修改（例如会对基金会文档产生影响的），只有当有效票数超过四分之三（75%）时，才会通过。然而，开发者们每年都会选举一位“领导人”作为他们的会议代表，同时领导人也会在内部的各个团队协调沟通。这一选举总是伴随着一段紧张激烈的讨论过程。领导人的角色并没有在任何官方文件内被定义：参选的候选人常常会提出自己对于该职位的理解和定位。在实际工作中，领导人角色包括媒体发言人，协调内部团队，对项目提供总体领导。每一位开发者都参与其中，因为大多数项目成员都认同了 Debian 项目领导人的观点。</para>

      <para>特别的，领导人拥有真正的特权；他们的投票可以解决票数相等的问题；他们可以对某个尚未归属于任何人管辖名下的事件作出决定，同时可以将他们自己的一部分职责委托他人代为执行。</para>
      <indexterm><primary>伊恩·默多克</primary></indexterm>
      <indexterm><primary>Perens, Bruce</primary></indexterm>
      <indexterm><primary>伊恩·杰克逊（Jackson, Ian）</primary></indexterm>
      <indexterm><primary>阿克曼·维歇特（Akkerman, Wichert）</primary></indexterm>
      <indexterm><primary>柯林斯，本（Collins, Ben）</primary></indexterm>
      <indexterm><primary>Garbee, Bdale</primary></indexterm>
      <indexterm><primary>Michlmayr, Martin</primary></indexterm>
      <indexterm><primary>Robinson, Branden (布兰登·罗宾逊) </primary></indexterm>
      <indexterm><primary>Towns, Anthony</primary></indexterm>
      <indexterm><primary>Hocevar, Sam（萨姆·霍瑟瓦尔） </primary></indexterm>
      <indexterm><primary>McIntyre, Steve（斯蒂夫·麦金太尔）</primary></indexterm>
      <indexterm><primary>Zacchiroli, Stefano</primary></indexterm>
      <indexterm><primary>Nussbaum, Lucas</primary></indexterm>
      <indexterm><primary>Dogguy, Mehdi</primary></indexterm>
      <indexterm><primary>Lamb, Chris</primary></indexterm>

      <para>Since its inception, the project has been successively led by
      Ian Murdock, Bruce Perens, Ian Jackson, Wichert Akkerman, Ben
      Collins, Bdale Garbee, Martin Michlmayr, Branden Robinson, Anthony
      Towns, Sam Hocevar, Steve McIntyre, Stefano Zacchiroli, Lucas
      Nussbaum, Mehdi Dogguy and Chris Lamb.</para>
      <indexterm><primary>技术委员会</primary></indexterm>

      <para>宪章同样也定义了一个“技术委员会（technical committee）”。技术委员会的核心角色是对于那些在开发者之间尚未达成一致意见的技术事宜进行决策。除此以外，委员会则作为顾问角色，为任何无法为他们所负责的事宜作出决定的开发者提供帮助。值得一提的是，只有在相关问题方给委员会发送邀请时，委员会才会介入。</para>
      <indexterm><primary>项目秘书</primary></indexterm>

      <para>最后，宪章定义了一个“项目秘书”的职位，这一角色负责组织各种选举和决议的投票。</para>

      <para>The “general resolution” procedure is fully detailed in the
      constitution, from the initial discussion period to the final
      counting of votes. The most interesting aspect of that process is
      that when it comes to an actual vote, developers have to rank the
      different ballot options between them and the winner is selected
      with a <ulink url="https://en.wikipedia.org/wiki/Condorcet_method">Condorcet
        method</ulink> (more specifically, the Schulze method). For
      further details see: <ulink type="block" url="http://www.debian.org/devel/constitution.en.html" /></para>
      <indexterm><primary>争议</primary></indexterm>
      <indexterm><primary>投票</primary></indexterm>

      <sidebar>
        <title><emphasis>文化</emphasis>网络舌战，引爆侮辱性攻击的讨论</title>
        <indexterm><primary>网络舌战</primary></indexterm>
        <indexterm><primary>白热化争论</primary></indexterm>

	<para>'发火' 是极度不理性的争辩，双方都穷尽理论的辩论后转向人身攻击。部分议题较为论战式 (选择文本编辑器，'喜欢 <command>vi</command> 或 <command>emacs</command>？'，永远没有结论)。由于单方面 (每个人) 快速地交换电子邮件形成优势且极度地个人化此等议题。</para>

	<para>这种讨论没什么特别；通常要远离这种争论，或者快速地略过其内容，因为阅读它们太费时了。</para>
      </sidebar>

      <para>即使宪法创建了表面的民主，每日的运作却大不相同：Debian 遵守自由软件的蠢蛋进化论：做事的人决定怎么做事。争论解决问题的方法只是浪费时间；选择有用且满意的方案才是王道…有能力的人就是这么做。</para>

      <para>这就是升级的唯一方法：做有用的事且显示把事情做好。Debian '管理' 团体以增选方式管理，采用已有效奉献且证明其能力的志愿者。新的奉献者看到这些团队做了具有公共利益性质的工作就会主动加入协助。这就是 Debian 常被称为 '任人唯贤'。</para>

      <sidebar>
        <title><emphasis>文化</emphasis> 任人唯贤，统治知识</title>
        <indexterm><primary>任人唯贤</primary></indexterm>

	<para>任人唯贤是治理的型式之一由有能力的人当家。在 Debian 里，长才由胜任衡量，也就是由过去的其他计划的行为评鉴现在 (前任领导人 Stefano Zacchiroli 提出 '蠢蛋进化论'，意指 '授权能把事性做好的人')。</para>
      </sidebar>

      <para>这种有效的管理方法保证在 Debian '关键' 团队奉献者的品质。不见得是完美的且偶而凸搥。选择被团队接受的开发者是随兴的，甚至不公平的。而且，不是每个人对这些团队服务的期望是一样的。有些人受不了等8天才能收录新的 Debian 软件包，也有人耐心等待3周毫无怨言。所以，有些团队对 '服务品质' 经常不满。</para>

      <sidebar>
        <title><emphasis>社区</emphasis> 新维护者的整合</title>
        <indexterm><primary>维护者</primary><secondary>新维护者</secondary></indexterm>

	<para>负责批准新开发者加入事项的团队是最经常受到批评的。人们需要承认的是，经过多年的发展，Debian 项目开始变得越来越因为需求而去接纳一些程序员。一些人可能会在其中看见一些不公正的情况，但我们必须要承认的是，当一个超过 1000 人的社区需要去保证它所提供给用户的所有东西的质量与完整性时，这会比它在刚刚起步的时候要有挑战的多。</para>
        <indexterm><primary>Debian 账户管理员（DAM）</primary></indexterm>
        <indexterm><primary>Debian 账户管理员</primary></indexterm>

	<para>此外，由 Debian 客户经理这样一小群团队审核接受的进程 。特别容易被批评，因为在 Debian 开发者社区里说接受或拒绝的就是他们。实务上，必须多花点时间了解才能接受。当然，我们可以在被接受为正式的开发者前，先支持既有的开发者，做出实质的奉献。</para>
      </sidebar>
    </section>
    <section>
      <title>用户的积极角色</title>

      <para>或许奇怪，需要在讨论 Debian 计划内工作者时加入用户，答案是必须的：用户扮演关键的角色。不只是 '被动'  的角色，有些用户运行发展版并定期报告指定问题的错误。其他的人更深一层提出改进的意见，以 '愿望清单' 或送出称为 '补丁' 的修正后源代码 (见专栏 <xref linkend="sidebar.patch" />)。</para>

      <sidebar id="sidebar.bts">
        <title><emphasis>工具</emphasis> 缺陷跟踪系统</title>
        <indexterm><primary>系统</primary><secondary>缺陷跟踪系统</secondary></indexterm>
        <indexterm><primary>缺陷跟踪系统（BTS）</primary></indexterm>
        <indexterm><primary>缺陷跟踪系统</primary></indexterm>
        <indexterm><primary><literal>bugs.debian.org</literal></primary></indexterm>

	<para>Debian 缺陷跟踪系统（Debian BTS）在项目的许多地方都有应用。其公开部分（网页界面）可以让用户查看所报告的问题，并提供选项以根据不同的筛选条件给出一个列表。这些条件包括：受影响的软件包、问题严重性、状态、报告者的电子邮件地址、负责维护软件包人员的电子邮件地址、标签，等等。用户也可以在线浏览与这些问题相关的所有讨论的历史记录。</para>

	<para>表层下的 Debian BTS，以电子邮件为基础：保存参与者寄发的电子邮件做为信息。发送给<email>12345@bugs.debian.org</email> 的电子邮件，将被指定为编号 12345 的错误。有权限的人可以叙明理由寄发另个电子邮件 <email>12345-done@bugs.debian.org</email> '关闭' (表示该错误已解决或无关紧要) 该错误。新的错误应以指定的格式辨识有问题的软件包再发送电子邮件给 <email>submit@bugs.debian.org</email>。这个信箱 <email>control@bugs.debian.org</email> 用于编辑与该错误有关的所有  '中介信息'。</para>

	<para>The Debian BTS has other functional features, as well, such as
	the use of tags for labeling bugs. For more information, see <ulink type="block" url="https://www.debian.org/Bugs/" /></para>
      </sidebar>

      <sidebar>
        <title><emphasis>词汇表</emphasis> 错误的严重度</title>
        <indexterm><primary>严重性</primary></indexterm>
        <indexterm><primary>错误</primary><secondary>严重度</secondary></indexterm>

	<para>报告问题时指定该错误的严重性。不是每个错误都具有相同的重要性；例如，手册内容的打字错误不能与服务器软件的安全漏洞相提并论。</para>

	<para>Debian uses an extended scale to describe the severity
	of a bug. Each level is defined precisely in order to
	facilitate the selection thereof. <ulink type="block" url="https://www.debian.org/Bugs/Developer#severities" /></para>
      </sidebar>

      <para>Additionally, numerous satisfied users of the service offered
      by Debian like to make a contribution of their own to the project. As
      not everyone has appropriate levels of expertise in programming, they
      may choose to assist with the translation and review of
      documentation. There are language-specific mailing lists to coordinate
      this work.
      <ulink type="block" url="https://lists.debian.org/i18n.html" />
      <ulink type="block" url="https://www.debian.org/international/" />
      </para>

      <sidebar>
        <title><emphasis>基础</emphasis> 什么是 i18n 与 l10n？</title>
        <indexterm><primary>国际化</primary></indexterm>
        <indexterm><primary>本地化</primary></indexterm>
        <indexterm><primary>i18n</primary></indexterm>
        <indexterm><primary>l10n</primary></indexterm>

	<para>'i18n' 与 'l10n' 是国际化英文本 'internationalization' 与本地化英文本 'localization' 的缩写，保留第一个与最后一个字母，再加入省略字母的字数。</para>

	<para>'国际化' 一个程序包括修改至可以翻译 (本地化) 的程度。涉及重写程序以便公开给所有的语系使用。</para>

	<para>'本地化' 一个程序包括翻译原语言 (通常是英文) 为另一种语言。因此，必须先国际化。</para>

	<para>总之，国际化系把软件整备至可翻译的程度，然后再运行本地化。</para>
      </sidebar>

      <sidebar id="sidebar.patch">
        <title><emphasis>基础</emphasis> 补丁，送出修订</title>
        <indexterm><primary><command>补丁</command></primary></indexterm>
        <indexterm><primary>补丁</primary></indexterm>
        <indexterm><primary><command>diff</command></primary></indexterm>

	<para>补丁是描述文件修改的文件。准确来说，包括移除或添加的代码清单，以及 (有时) 从参考文档取得的内容，用以取代修改的内文 (可以辨识取代的内容)。</para>

	<para>修改该等文件的工具名称就是 <command>patch</command>。添加为 <command>diff</command>，用法如下：</para>

        <screen><computeroutput>$ </computeroutput><userinput>diff -u file.old file.new &gt;file.patch</userinput></screen>

	<para><filename>file.patch</filename> 文件包括变更 <filename>file.old</filename> 为 <filename>file.new</filename> 的指令。可以发送给其他人，用于从两个文件添加 <filename>file.new</filename>，如：</para>

        <screen><computeroutput>$ </computeroutput><userinput>patch -p0 file.old &lt;file.patch</userinput></screen>

	<para>现在，此文件 <filename>file.old</filename> 内容等同于 <filename>file.new</filename>。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>工具</emphasis> 以 <command>reportbug</command> 报告错误</title>
        <indexterm><primary><command>reportbug</command></primary></indexterm>
        <indexterm><primary>bug</primary><secondary>报告错误</secondary></indexterm>
        <indexterm><primary>报告 bug</primary></indexterm>

	<para>The <command>reportbug</command> tool facilitates sending bug
	reports on a Debian package. It helps making sure the bug in
	question hasn't already been filed, thus preventing redundancy in the
	system. It reminds the user of the definitions of the severity
	levels, for the report to be as accurate as possible (the developer
	can always fine-tune these parameters later, if needed). It helps
	writing a complete bug report without the user needing to know the
	precise syntax, by writing it and allowing the user to edit it.
        This report will then be sent via an e-mail server (by default,
        a remote one run by Debian, but <command>reportbug</command> can
        also use a local server).</para>

	<para>此工具原先系供发展版使用，做为修正错误之用。后来发现，Debian 的稳定版也需要它，安全更新或重要更新 (或完全无效的软件包)。因此，Debian 软件包的次要错误的修订，在下个稳定版才纳入。</para>
      </sidebar>

      <para>靠着用户的参与这些奉献愈来愈有效。不断地交换消息，用户不是孤立的个人而是一个真正的社区。从邮件列表里，<email>debian-user@lists.debian.org</email> (<xref linkend="solving-problems" /> 可看出详情)。</para>

      <para>用户不仅自助 (也助人) 于直接影响他们的技术面，也讨论奉献 Debian 计划的最佳途径与协助其向前行 — 经常出现改进的建议。</para>

      <para>Debian 不仅持续自我推广，其用户在扩散方面也居功甚伟，口耳相传其名声。</para>

      <para>这些方法运作的不错，在自由软件的各个层面都有 Debian 粉丝：从本地 'Linux 用户社区' LUGs 组织的安装会 (协助新手安装系统的工作坊)，到 Linux 相关的技术会议等。</para>

      <para>Volunteers make posters, brochures, stickers, and other
      useful promotional materials for the project, which they make
      available to everyone, and which Debian provides freely on its
      website and on its wiki: <ulink type="block" url="https://www.debian.org/events/material" /></para>
    </section>
    <section>
      <title>团队与子计划</title>

      <para>Debian 从开始就以源代码的概念组织起来，每个软件包都有维护者。随时出现新的工作团队，于子计划内形成新的团队，确保基础建设的管理，以及流程运作不会被特定的软件包绑住 (品质保证、Debian 政策、安装器等)。</para>
      <section id="sect.sub-projects">
        <title>Debian 现有的子计划</title>

	<para>每个 Debian 子计划是一群志愿者修改 Debian 供特定需求之用。选择部分程序供特定领域 (教育、医学、多媒体制作等) 使用之外，子计划的目标还包括改进现有的软件包、包装漏失的软件、调整安装器、添加特定的文档，等等。</para>

        <sidebar>
          <title><emphasis>术语</emphasis> 子项目与衍生发行版</title>
          <indexterm><primary>子项目</primary></indexterm>
          <indexterm><primary>衍生发行版</primary></indexterm>

	  <para>所谓衍生发行版的开发进程，系根据某一特定版本的 Debian 做为起点，接着进行各种改造而成。其成品作成之基础建设完全在 Debian 项目之外。衍生版也不必有回馈自身改善的政策。这就是为何衍生发行版会「偏离」原版，并且必须定期与原版同步以便获取上游来的改善成果。</para>

	  <para>另一方面，子计划也可以不偏离，因为所有的作品直接取自改进的 Debian 以满足及自身需要。</para>

	  <para>Debian 的众多衍生发行版中，无庸置疑，最知名的当是 Ubuntu。请见 <xref linkend="derivative-distributions" /> 了解其特点，及其与 Debian 间的地位关系。</para>
        </sidebar>

        
	<para>目前较流行的子计划：</para>
        <itemizedlist>
          <listitem>
	    <para>Debian-Junior，由 Ben Armstrong 制作，给儿童使用;</para>
          </listitem>
          <listitem>
	    <para>Debian-Edu，由 Petter Reinholdtsen 制作，针对学术圈的专门发行版;</para>
          </listitem>
          <listitem>
	    <para>Debian Med，由 Andreas Tille 制作，专供医护领域使用;</para>
          </listitem>
          <listitem>
            <para>Debian Multimedia 针对音效与多媒体的工作;</para>
          </listitem>
          <listitem>
            <para>Debian-Desktop 针对桌面与艺术作品的默认主题;</para>
          </listitem>
          <listitem>
            <para>Debian GIS 照顾地理信息系统应用程序与用户;</para>
          </listitem>
          <listitem>
            <para>Debian Accessibility，最后但也最重要，改良 Debian 满足身心障碍者的需求。</para>
          </listitem>
        </itemizedlist>

	<para>随着 Debian 子计划的成长此清单将愈来愈长。由 Debian 基础建设完全支撑，可以全然关注在加值部分，不需担心与 Debian 同步的问题，因为他们在 Debian 计划内发展。</para>
      </section>
      <section>
        <title>管理团队</title>

	<para>大部分的管理团体以相对封闭的增选方式招募成员。最好的加入方法是协助现有成员工作，表示您了解该团体的目标与运作方式。</para>

	<para>ftpmaster 管理员负责管理 Debian 软件包的官方仓库。他们维护用于接收开发者传来的软件包的程序；经过一些检查后，软件包将被保存在目标服务器上 (<literal>ftp-master.debian.org</literal>)。</para>

	<para>他们也检查添加软件包的授权条款，确保在纳入它们之前，Debian 有权散布它们。被要求移除的软件包，由开发者经由错误追踪系统与 <emphasis>ftp.debian.org</emphasis> '虚拟软件包' 向团队提出。</para>
        <indexterm><primary>ftpmaster（FTP 管理员）</primary></indexterm>

        <sidebar>
          <title><emphasis>术语</emphasis> 伪软件包，监测工具</title>
          <indexterm><primary>伪软件包</primary></indexterm>

	  <para>错误追踪系统，原先系处理 Debian 软件包错误而设计，后来发现在其他事物上也很实用：列出 Debian 软件包内外的待处理问题或待管理工作。'虚拟软件包' 允许，指定团队在未链接实际软件包的环境下使用错误追踪系统。每个人都可以报告错误。例如，BTS 有个 <emphasis>ftp.debian.org</emphasis> 条目用于报告与追踪官方软件包的错误或要求移除软件包。同样的，<emphasis>www.debian.org</emphasis> 虚拟软件包则指向 Debian 网页的错误，且 <emphasis>lists.debian.org</emphasis> 汇集与邮件列表有关的问题。</para>
        </sidebar>

        <sidebar id="sidebar.gitlab">
          <title><emphasis>TOOL</emphasis> GitLab, Git repository hosting and much more</title>
          <indexterm><primary><literal>salsa.debian.org</literal></primary></indexterm>
          <indexterm><primary>GitLab</primary></indexterm>

          <para>
            A GitLab instance, known as <literal>salsa.debian.org</literal>,
            is used by Debian to host the Git packaging repositories
            but this software offers much more than simple hosting and Debian
            contributors have been quick to leverage the continuous integration
            features (running tests, or even building packages, on each push).
            Debian contributors also benefit from a cleaner contribution
            workflow thanks the well understood merge request process (similar
            to GitHub's pull requests).
          </para>
          <para>
            GitLab replaced FusionForge (which was running on
            a service known as <literal>alioth.debian.org</literal>)
            for collaborative package maintainance. This service
            is administered by Alexander Wirt, Bastian Blank and
            Jörg Jaspert.
            <ulink type="block" url="https://salsa.debian.org/" />
            <ulink type="block" url="https://wiki.debian.org/Salsa/Doc" />
          </para>
        </sidebar>

	<para id="dsa-team">如众所期待，<emphasis>Debian 系统管理者</emphasis> (DSA) 团队 (<email>debian-admin@lists.debian.org</email>) 对计划内的多个服务器负责。确保所有的服务 (DNS、Web、e-mail、shell 等)、Debian 开发者要求安装的软件、以及安全相关事宜。<ulink type="block" url="https://dsa.debian.org" /></para>
        <indexterm><primary><emphasis>debian-admin</emphasis></primary></indexterm>
	<indexterm><primary>DSA (Debian 系统管理者)</primary></indexterm>

        <sidebar>
          <title><emphasis>工具</emphasis> Debian 软件包跟踪器</title>
          <indexterm><primary>软件包追踪系统</primary></indexterm>
          <indexterm><primary>系统</primary><secondary>软件包追踪系统</secondary></indexterm>
          <indexterm><primary>Debian 软件包跟踪器</primary></indexterm>
          <indexterm><primary>跟踪器</primary><secondary>Debian 软件包跟踪器</secondary></indexterm>
          <indexterm><primary>软件包</primary><secondary>Debian 软件包跟踪器</secondary></indexterm>
          <indexterm><primary>PTS</primary></indexterm>
          <indexterm><primary>DDPO</primary></indexterm>
          <indexterm><primary>Debian 开发者的软件包查看</primary></indexterm>

	  <para>这是 Raphaël 的杰作之一。基本概念是，对于指明的软件包，尽可能将相关信息集结在同一页面中。这样一来，任何人都可以快速查看程序的状态、办识待处理的事项、以及提供协助等。这就是为何这个页面会集结所有的臭虫统计数据、各个发行版中的可用版本、在 <emphasis role="distribution">Testing</emphasis> 发行版中打包的进度、软件描述和 debconf 模板的翻译状态、是否有新的上游版本、是否未遵循最新版 Debian 政策的通知、维护者的信息、以及维护者期望纳入的其他信息等。<ulink type="block" url="https://tracker.debian.org/" /></para>

	  <para>电子邮件订阅服务也在此网页接口。自动送出选定的信息给此清单：错误与相关的讨论、Debian 服务器内的新版本、待校对的新翻译等。</para>

	  <para>Advanced users can, thus, follow all of this information
	  closely and even contribute to the project, once they have got a
	  good enough understanding of how it works.</para>

	  <para>另个网页接口，<emphasis>查看 Debian 开发者软件包</emphasis> (DDPO)，提供开发者其主管软件包的状态摘要。<ulink type="block" url="https://qa.debian.org/developer.php" /></para>

	  <para>这两个网站由 Debian 的品质保证成员 (通称为 Debian QA) 发展与管理的工具。</para>
          <indexterm><primary>保证</primary><secondary>品质保证</secondary></indexterm>
          <indexterm><primary>品质</primary><secondary>保证</secondary></indexterm>
        </sidebar>

	<para>此 <emphasis>名单大师</emphasis> 管理邮件列表的电子邮件服务器。职责包括添加名单、处理送回 (无法送出的育知)、以及垃圾邮件过滤器 (未授权的批次邮件)。</para>
        <indexterm><primary>名单大师</primary></indexterm>

        <sidebar>
          <title><emphasis>文化</emphasis> 邮件列表的流量：某些数据</title>
          <indexterm><primary>名单</primary><secondary>邮件列表</secondary></indexterm>
	  <indexterm><primary>邮件列表</primary></indexterm>

          
	  <para>The mailing lists are, without a doubt, the best testimony to
	  activity on a project, since they keep track of everything that
	  happens. Some statistics (from 2017) regarding our mailing lists
	  speak for themselves: Debian hosts more than 250 lists, totaling
	  217,000 individual subscriptions. The 27,000 messages sent each
	  month generate 476,000 e-mails daily.</para>
        </sidebar>

	<para>Each specific service has its own administration team,
	generally composed of volunteers who have installed it (and also
	frequently programmed the corresponding tools themselves). This is
	the case of the bug tracking system (BTS), the package tracker,
	<literal>salsa.debian.org</literal> (GitLab
	server, see sidebar <xref linkend="sidebar.gitlab" />), the services available on
	<literal>qa.debian.org</literal>,
	<literal>lintian.debian.org</literal>,
	<literal>buildd.debian.org</literal>,
	<literal>cdimage.debian.org</literal>, etc.</para>
      </section>
      <section>
        <title>发展团队、转换团队</title>

	<para>不同于管理团队，发展团队较为开放，甚至可以说是置身于奉献者之外。Debian 自身不添加软件，计划仍需要外部软件满足其需要。当然，仍是在自由软件授权下发展，这些工具使用被自由软件世界验证的方法。</para>

        <sidebar id="sidebar.git">
          <title><emphasis>文化</emphasis> Git</title>
          <indexterm><primary>Git</primary></indexterm>
          <indexterm><primary>配置管理</primary></indexterm>

	  <para>Git 是在多个文件合作运作的工具，维护修订的记录。有问题的文件多半是纯文本档，程序的源代码。由多人共同处理一个文件时，<command>git</command> 可以把不同部分的文件合而为一。否则，其中的 '冲突' 必须以人工处理。</para>

          <para>Git 是个分散系统，每个人都有完整记录的保存库。集中的保存库用于下载计划 (<command>git clone</command>) 并与他人共享成果 (<command>git 送出</command>)。保存库内可有多个版本但同一时间只能使用其中之：称为工作版本 (以指令 <command>git checkout</command> 可以变更指向其他版本)。Git 可以显示工作版本的变动 (<command>git diff</command>)、可以在版本记录里保存新的条目 (<command>git commit</command>)、可更新其他用户同时修改的工作版本内容 (<command>git pull</command>)、以及记录特定的配置供日后提取 (<command>git tag</command>)。</para>

	  <para>Git 可处理发展中的多个版本而不互相干扰。这些版本称为 <emphasis>branches</emphasis>。以树木的分枝形容相当精确，因为程序本来就是从一个主干开始。有了成果 (诸如 1.0) 后，就有两个分枝：发展枝为下个释做准备、维护枝管理 1.0 的更新与修订。</para>

          <indexterm><primary>版本控制系统 (VCS)</primary></indexterm>
          <para>今天，Git 是最流行的版本控制系统，但不是唯一的。CVS (Concurrent Versions System) 是第一个广为流行的工具，但其先天的限制让位给现代的自由软件。包括<command>subversion</command> (<command>svn</command>)、<command>git</command>、<command>bazaar</command>(<command>bzr</command>)、以及 <command>mercurial</command> (<command>hg</command>)。<ulink type="block" url="http://www.nongnu.org/cvs/" /> <ulink type="block" url="http://subversion.apache.org/" /> <ulink type="block" url="http://git-scm.com/" /> <ulink type="block" url="http://bazaar.canonical.com/" /> <ulink type="block" url="http://mercurial.selenic.com/" /></para>
          <indexterm><primary><command>subversion</command></primary></indexterm>
          <indexterm><primary><command>svn</command></primary></indexterm>
          <indexterm><primary><command>git</command></primary></indexterm>
          <indexterm><primary><command>bzr</command></primary></indexterm>
          <indexterm><primary><command>hg</command></primary></indexterm>
          <indexterm><primary><command>mercurial</command></primary></indexterm>
          <indexterm><primary><command>cvs</command></primary></indexterm>
        </sidebar>

	<para>Debian 发展自己的小软件，但却是重要的软件，其名声远超越 Debian 计划本身。<command>dpkg</command> 是个例子，它是 Debian 软件包管理程序 (事实上，它是 Debian PacKaGe 的缩写，读成 'dee-package')，另一个是 <command>apt</command>，自动安装 Debian 软件包的工具，检查其相依性，保证安装后与系统一致 (其名称为 Advanced Package Tool 的缩写)。然而，它们都是由小团队撰写的，只需要高端程序技巧就能了解该等程序的运作方式。</para>

	<para>最重要的团队可能是 Debian 安装计划，<command>debian-installer</command>，2001年问世以来就是重要的部分。以一个程序安装十多种架构下的 Debian 不是件简单的事，需要很多奉献者才能完成它。每个架构需有自己的启动程序与引导程序。透过 <email>debian-boot@lists.debian.org</email> 邮件列表，在 Cyril Brulebois 领导下，完成这些工作。<ulink type="block" url="http://www.debian.org/devel/debian-installer/" /> <ulink type="block" url="http://joeyh.name/blog/entry/d-i_retrospective/" /></para>

	<para>这个 (极小的) <command>debian-cd</command> 程序团队的目标更谦虚。由很多 '小小' 的奉献者负责其架构，因为主要的开发者无法知道全部的细微之处，也不知道从CD-ROM 安装的正确方式。</para>

	<para>需要多个团队彼此合作才能够将程序包装起来：以<email>debian-qa@lists.debian.org</email> 为例，企图保证 Debian 计划的每个层面都达到既定的品质。<email>debian-policy@lists.debian.org</email> 根据各地的建议列出 Debian 政策。负责每个架构的团队 (<email>debian-<replaceable>architecture</replaceable>@lists.debian.org</email>) 编绎所有的软件包，若有需要，再改编供特定架构使用。</para>

	<para>其他的团队管理最重要的软件包以免重担放在单一团队的肩上；在 C 程序库与 <email>debian-glibc@lists.debian.org</email>，C 编绎器 <email>debian-gcc@lists.debian.org</email> 邮件列表，或 Xorg 在 <email>debian-x@lists.debian.org</email> (此社区以 X Strike Force 闻名)。</para>
      </section>
    </section>
  </section>

  <section id="sect.follow-debian-news">
    <title>跟着 Debian 最新消息</title>

    <para>如前所述，Debian 计划以极为分散、有机的方式进行。结果是，必须痛苦地读取无止尽的消息才能保持与计划连系。</para>

    <para>订阅 <email>debian-announce@lists.debian.org</email> 邮件列表是获知 Debian 重要消息的方法。此邮件列表的流量极低 (每年只有十来个消息)，只提供最重要的通知，诸如新版发布消息、选举新的计划领导人、或 Debian 年度会议。<ulink type="block" url="https://lists.debian.org/debian-announce/" /></para>

    <indexterm><primary>Debian 计划消息</primary></indexterm>
    <para>More general (and regular) news about Debian are sent to the
    <email>debian-news@lists.debian.org</email> list.  The traffic on
    this list is quite reasonable too (usually around a handful of
    messages a month), and it includes the semi-regular “Debian
    Project News”, which is a compilation of various small bits of
    information about what happens in the project.
    <ulink type="block" url="https://lists.debian.org/debian-news/" />
    </para>

    <sidebar>
      <title><emphasis>COMMUNITY</emphasis> The publicity team</title>
      <para>Debian's official communication channels are managed by volunteers
      of the Debian publicity team. They are delegates of the Debian Project
      Leader and moderate news and announcements posted there.
      Many other volunteers contribute to the team, for example by
      writing articles for “Debian Project News” or by animating
      the microblogging service
      (<ulink url="https://micronews.debian.org/">micronews.debian.org</ulink>).
      <ulink type="block" url="https://wiki.debian.org/Teams/Publicity" />
      </para>
    </sidebar>

    <para>Debian 的演化与各团队的运作，参见 <email>debian-devel-announce@lists.debian.org</email> 邮件列表。如其名称所示，其内容较适合开发者的口味，也适合关心稳定版以外版本发展的人。<email>debian-announce@lists.debian.org</email> 提供用户可见的结果，<email>debian-devel-announce@lists.debian.org</email> 则告知该等结果的产生方式。如专栏所示，'d-d-a' (如其名所示) 是 Debian 开发者必须订阅的邮件列表。<ulink type="block" url="https://lists.debian.org/debian-devel-announce/" /></para>

    <para>
      Debian's official blog (<ulink url="https://bits.debian.org">bits.debian.org</ulink>) is also a
      good source of information. It conveys most of the interesting news
      that are published on the various mailing lists that we already
      covered and other important news contributed by community members.
      Since all Debian developers can contribute these news when they think they have
      something noteworthy to make public, Debian's blog gives a valuable
      insight while staying rather focused on the project as a whole.
    </para>

    <indexterm><primary>Debian 星球</primary></indexterm>
    <para>A more informal source of information can also be found on
    Planet Debian, which aggregates articles posted by Debian
    contributors on their respective blogs.  While the contents do not
    deal exclusively with Debian development, they provide a view into
    what is happening in the community and what its members are up to.
    <ulink type="block" url="https://planet.debian.org/" />
    </para>

    <indexterm><primary>微博客</primary></indexterm>
    <indexterm><primary>Identi.ca</primary></indexterm>
    <indexterm><primary>Twitter</primary></indexterm>
    <indexterm><primary>Facebook</primary></indexterm>
    <indexterm><primary>Google+</primary></indexterm>
    <indexterm><primary>社区网络</primary></indexterm>
    <indexterm><primary>网络</primary><secondary>社区网络</secondary></indexterm>
    <para>计划本身也是一种社区网络。Debian 本身只有以自由软件建构的官方平台 (如 Identi.ca 微博客平台，由 <emphasis>pump.io</emphasis>) 架构，Debian 的奉献者多半另有自己的推特帐号、脸书页面、Google+ 页面等。<ulink type="block" url="https://identi.ca/debian" /> <ulink type="block" url="https://twitter.com/debian" /> <ulink type="block" url="https://www.facebook.com/debian" /> <ulink type="block" url="https://plus.google.com/111711190057359692089" /></para>
  </section>

  <section id="sect.role-of-distributions">
    <title>发行版的角色</title>
    <indexterm><primary>Linux 发行版</primary><secondary>角色</secondary></indexterm>

    <para>GNU/Linux 发行版的两个主要目标：在电脑上安装自由的操作系统 (单独存在，或是和其他操作系统同时存在)，以及提供满足用户需求的各种软件。</para>
    <section>
      <title>安装器：<command>debian-installer</command></title>

      <para><command>debian-installer</command>，以极度模块化设计以便尽量通用，针对前述的第一个目标。含盖极为广泛的安装环境，能够支持特殊个案的安装器。</para>

      <para>模块化，让情况很复杂，开发者极难发掘此工具；但在图书或文本模式下，用户的经验仍然差不多。花了极大的力气减少安装所需的问题，特别感谢自动侦测硬件的软件。</para>

      <para>值得注意的是 Debian 的衍生发行版在这个层面上有很大的不同，提供有限的安装方式 (通常只限 i386 或 amd64 架构两种)，但对初入门者更为友善。另一方面，它们通常不会让软件软件包的内容离太远，以便尽可能利用 Debian 提供的广大软件而不致于发生兼容性问题。</para>
    </section>
    <section>
      <title>软件程序库</title>

      
      <para>Quantitatively, Debian is undeniably the leader in this
      respect, with over 25,000 source packages. Qualitatively,
      Debian’s policy and long testing period prior to releasing a new
      stable version justify its reputation for stability and
      consistency. As far as availability, everything is available
      on-line through many mirrors worldwide, with updates pushed out
      every six hours.</para>

      <para>Many retailers sell DVD-ROMs on the Internet at a very low price
      (often at cost), the “images” for which are freely available for
      download. There is only one drawback: the low frequency of releases
      of new stable versions (their development sometimes takes more than
      two years), which delays the inclusion of new software.</para>

      <para>大部分新软件自有办法找到门路在安装时自动纳入。若因相依性的问题而需要太多的更新，可以为 Debian 的稳定版重新编译 (此议题的详情参见 <xref linkend="debian-packaging" />)。</para>
    </section>
  </section>
  <section id="sect.release-lifecycle">
    <title>发布周期</title>
    <indexterm><primary>周期</primary></indexterm>
    <indexterm><primary><emphasis role="distribution">不稳定</emphasis></primary></indexterm>
    <indexterm><primary><emphasis role="distribution">测试</emphasis></primary></indexterm>
    <indexterm><primary><emphasis role="distribution">稳定</emphasis></primary></indexterm>
    <indexterm><primary><emphasis role="distribution">实验</emphasis></primary></indexterm>
    <indexterm><primary><emphasis role="distribution">旧稳定版</emphasis></primary></indexterm>
    <indexterm><primary><emphasis role="distribution">老旧稳定版</emphasis></primary></indexterm>

    <para>Debian 计划的每个程序同时有 6 个不同版本，<emphasis role="distribution">实验</emphasis>、<emphasis role="distribution">不稳定</emphasis>、<emphasis role="distribution">测试</emphasis>、<emphasis role="distribution">稳定</emphasis>、<emphasis role="distribution">旧稳定</emphasis>、与 <emphasis role="distribution">极旧稳定</emphasis>。每个版本都有自己的发展流程。为了了解起见，先看看程序的发展过程，由最初的包装至纳入 Debian 的稳定版。</para>

    <sidebar>
      <title><emphasis>术语</emphasis> 发布</title>
      <indexterm><primary>发布</primary></indexterm>

      <para>「release」一词，在 Debian 项目中，系指发行版的特定发行版本 (如：「unstable release」代表的是「尚未稳定的版本」)。这个词语也用于代表软件新版本 (stable 稳定版) 的初次公开发表。</para>
    </sidebar>
    <section>
      <title><emphasis role="distribution">实验</emphasis>状态</title>

      <para>首先看看 <emphasis role="distribution">实验</emphasis> 发行的特例：对应于还在发展中软件的 Debian 软件包，不必已做完，其名称已说明一切。还没有全部通过此阶段；部分开发者加入软件包为了得到有经验 (或勇敢) 用户的回馈。</para>

      <para>否则，此发行版通常会将重大修改纳入基础软件软件包中，因为一旦集成进 <emphasis role="distribution">Unstable</emphasis> 不稳定版中的软件有重大臭虫，可能导致后果不堪设想。因此，它是完全隔绝且独立的发行版，其软件软件包绝不会移入其他版本中 (除非有情况需要维护者或 ftp 管理者直接、快速干预)。它也不能自我纳入：仅既有软件软件包的部分子集具有 <emphasis role="distribution">Experimental</emphasis> 实验版，通常不包括基础系统。此发行版因此会与其他能自我纳入的发行版一同搭配使用，例如 <emphasis role="distribution">Ustable</emphasis> 版。</para>
    </section>
    <section>
      <title><emphasis role="distribution">不稳定</emphasis>状态</title>

      <para>让我们回到典型软件软件包的例子。维护者制作出最初的软件软件包，编绎给 <emphasis role="distribution">Unstable</emphasis> 版使用并置于 <literal>ftp-master.debian.org</literal> 服务器上。这个动作会先经过 ftp 管理员的审阅与验证，再放到 <emphasis role="distribution">Unstable</emphasis> 发行版中；对于那些比起重大臭虫更关心软件是否处于最新状态的用户而言，这就是「时下最新」的发行版。他们会探索程序并且接着测试。</para>

      <para>碰到错误后，向软件包维护者报告。维护者会定期准备修正版，然后再上传至服务器。</para>

      <para>Every newly updated package is updated on all Debian mirrors
      around the world within six hours. The users then test the
      corrections and search for other problems resulting from the
      modifications. Several updates may then occur rapidly. During these
      times, autobuilder robots come into action. Most frequently, the
      maintainer has only one traditional PC and has compiled their package
      on the amd64 (or i386) architecture (or they opted for a source-only
      upload, thus without any precompiled package); the autobuilders take over and
      automatically compile versions for all the other architectures. Some
      compilations may fail; the maintainer will then receive a bug report
      indicating the problem, which is then to be corrected in the next
      versions. When the bug is discovered by a specialist for the
      architecture in question, the bug report may come with a patch ready
      to use.</para>
      <indexterm><primary>自动创建者</primary></indexterm>

      <figure>
        <title>由自动创建者编译的软件包</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/autobuilder.png" scalefit="1" width="75%" />
          </imageobject>
        </mediaobject>
      </figure>

      <sidebar>
        <title><emphasis>快速查看</emphasis> <command>buildd</command>，Debian 软件包再编译者</title>
        <indexterm><primary><command>buildd</command></primary></indexterm>
        <indexterm><primary>build daemon</primary></indexterm>

	<para><emphasis>buildd</emphasis>是 “build daemon” 的缩写，意思是魔鬼创建器。在指定的架构自动编译Debian软件包的程序(尽量避免跨平台)。</para>

	<para>因此，<literal>arm64</literal> 机器专门为 <literal>arm64</literal> 架构创建二进制文件。<emphasis>buildd</emphasis> 程序从 Debian 开发者的原始软件包里持续产生 <literal>arm64</literal> 架构的二进制软件包。</para>

	<para>Debian所有的电脑都能使用此自动创建器。扩大而言，<emphasis>buildd</emphasis> 一词常用于这些机器，仅供此目的使用。</para>
      </sidebar>
    </section>
    <section>
      <title>迁移至<emphasis role="distribution">测试</emphasis></title>

      <para>稍后，软件包略为成熟后；编译全部的架构，不再发生新的修订。才能成为<emphasis role="distribution">测试</emphasis>版的候选 — 基于某些标准供<emphasis role="distribution">不稳定</emphasis>软件包使用。根据以下的品管保证细目，每天都有程序被自动选入<emphasis role="distribution">测试</emphasis>版：</para>
      <orderedlist>
        <listitem>
	  <para>没有严重错误，或，少于当前<emphasis role="distribution">测试版</emphasis>;</para>
        </listitem>
        <listitem>
	  <para>至少置于<emphasis role="distribution">不稳定</emphasis>10天，这段时间足够发现与报告任何严重的问题;</para>
        </listitem>
        <listitem>
	  <para>在所有官方支持的架构里编绎成功;</para>
        </listitem>
        <listitem>
	  <para>满足<emphasis role="distribution">测试版</emphasis>对相依性的要求，或至少能够与其他有问题的软件包放在一起。</para>
        </listitem>
      </orderedlist>

      <para>此系统不是万无一失；在<emphasis role="distribution">测试版</emphasis>经常发现软件包的严重错误。不过，还是很有效果的，而且<emphasis role="distribution">测试版</emphasis>的问题远远少于<emphasis role="distribution">
不稳定版</emphasis>，对很多人来说，是稳定与新鲜之间的折衷选择。</para>

      <sidebar>
        <title><emphasis>说明</emphasis>被限制的<emphasis role="distribution">测试版</emphasis></title>

	<para>很有趣的原则，<emphasis role="distribution">测试版</emphasis>应没有实际的问题：软件包的跨平台相依性很难独立完成。软件包彼此相依，必须同时殖入大量的软件包，事实上很难同时殖入定期更新的软件包。另一方面，很难制作用于辨认相关软件包家族的脚本(这是 NP 完备的问题，还好我们知道若干方法)。以手动方式与脚本交互并指引若干可能的软件包，或纳入指定软件包于群组内，即使此方法打破若干相依性。这些功能由发布经理及其团队负责。</para>

	<para>NP 完整性问题是复杂的指数算法，与数据量、代码长度(图表的量)与涉入的元素有关。唯一的解决方案是时时查看所有可能的配置，可能需要很多方法。尝试法是一种接近，但满意的，解决方案。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>社区</emphasis> 发布经理</title>
        <indexterm><primary>发布经理</primary></indexterm>
        <indexterm><primary>稳定版发布经理</primary></indexterm>

	<para>发布经理是个重要的职位，责任很重。担任此职的人，必须管理 Debian 新的、稳定版，并设置发展<emphasis role="distribution">测试版</emphasis>的进程，直到进入<emphasis role="distribution">稳定版</emphasis>的品质。同时设置暂行进度 (不见得遵守它)。</para>

	<para>我们还有稳定版发布经理，简称为 SRM，管理与选择纳入 Debian 当前稳定版的更新软件包。以逐案方式，讨论由 Debian 开发者建议纳入的安全补丁与管理可能纳入的建议。</para>
      </sidebar>
    </section>
    <section>
      <title>从<emphasis role="distribution">测试版</emphasis>至<emphasis role="distribution">稳定版</emphasis></title>

      <para>假设我们的软件包已经纳入<emphasis role="distribution">测试版</emphasis>。只要还有改进的空间，其维护者必然奋力改进之并从<emphasis role="distribution">不稳定版</emphasis> (以后纳入<emphasis role="distribution">测试版</emphasis>就快多了：除非发生极大的变化，其相依性早已存在)重新来过。达到完美境界，维护者声明结束其工作。下个步骤是纳入<emphasis role="distribution">稳定版</emphasis>发行，被发布经理选取时，就是简化的<emphasis role="distribution">测试版</emphasis>。理想的情况是在安装器完成后才做此决择，并且在<emphasis role="distribution">测试版</emphasis>找不到严重的错误。</para>

      <para>实际上，还没有真的进入稳定版，Debian 必须妥协：移除维护者无法更正错误的软件包、或容许在数千个程序中还有几个错误。发布经理曾声明冻结期间，想被纳入<emphasis role="distribution">测试版</emphasis>更新必须通过认可的进程。其目标是避免新版本(及其新错误)，与只有被认可的错误修订。</para>

      <figure>
        <title>软件包通过多个 Debian 版本的途径</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/release-cycle.png" width="60%" />
          </imageobject>
        </mediaobject>
      </figure>

      <sidebar>
        <title><emphasis>术语</emphasis> 冻结：最后一哩路</title>
        <indexterm><primary>冻结</primary></indexterm>

	<para>在冷冻期，停止<emphasis role="distribution">测试版</emphasis>的发展；不允许自动更新。只有发布经理授权的软件包，才能依照指示更新。其目的是避免新版本带新的错误；更正过的错误通过审查过的更新才能纳入。</para>
      </sidebar>

      <para>After the release of a new stable version, the Stable Release
      Managers manage all further development (called “revisions”, ex:
      7.1, 7.2, 7.3 for version 7). These updates systematically
      include all security patches. They will also include the most
      important corrections (the maintainer of a package must prove the
      gravity of the problem that they wish to correct in order to have
      their updates included).</para>

      <para>At the end of the journey, our hypothetical package is now included in
      the stable distribution. This journey, not without its difficulties,
      explains the significant delays separating the Debian Stable
      releases. This contributes, over all, to its reputation for quality.
      Furthermore, the majority of users are satisfied using one of the
      three distributions simultaneously available. The system
      administrators, concerned above all about the stability of their
      servers, don't need the latest and greatest version of GNOME; they can choose Debian
      <emphasis role="distribution">Stable</emphasis>, and they will be
      satisfied. End users, more interested in the latest versions of GNOME
      or KDE Plasma than in rock-solid stability, will find Debian <emphasis role="distribution">Testing</emphasis> to be a good compromise
      between a lack of serious problems and relatively up to date
      software. Finally, developers and more experienced users may blaze
      the trail, testing all the latest developments in Debian <emphasis role="distribution">Unstable</emphasis> right out of the gate, at the
      risk of suffering the headaches and bugs inherent in any new version
      of a program. To each their own Debian!</para>

      <sidebar>
        <title><emphasis>CULTURE</emphasis> GNOME and KDE Plasma, graphical desktop environments</title>

	<para>GNOME (GNU Network Object Model Environment) and Plasma by KDE
	are the two most popular graphical desktop
	environments in the free software world. A desktop environment is a
	set of programs grouped together to allow easy management of the
	most common operations through a graphical interface. They
	generally include a file manager, office suite, web browser, e-mail
	program, multimedia accessories, etc. The most visible difference
	resides in the choice of the graphical library used: GNOME has
	chosen GTK+ (free software licensed under the LGPL), and the KDE community
	has selected Qt (a company-backed project, available nowadays both
	under the GPL and a commercial license).
	<ulink type="block" url="https://www.gnome.org/" />
	<ulink type="block" url="https://www.kde.org/" /></para>
      </sidebar>

      <figure>
        <title>Debian 包装程序的图径</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/package-lifecycle.png" scalefit="1" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
    <section>
      <title><emphasis role="distribution">旧稳定版</emphasis>与<emphasis role="distribution">更旧稳定版</emphasis>状态</title>
      <indexterm><primary>长期支持版 (Long Term Support, LTS)</primary></indexterm>
      <indexterm><primary>支持</primary><secondary>长期支持 Long Term Support (LTS)</secondary></indexterm>
      <para>每个<emphasis role="distribution">稳定版</emphasis>预计有五年寿命每二年发行新的稳定版，同一时间最多可有三个支持的稳定版在流通。新的稳定版发布时，前个版本就变成<emphasis role="distribution">旧稳定版</emphasis>而更早的就成为<emphasis role="distribution">更旧稳定版</emphasis>。</para>
      <para>Debian 的长期支持版 (This Long Term Support, LTS) 是新的成员：由独立的奉献者及公司联合的 Debian LTS 团队完成。Debian 安全团体不在维护旧的版本。</para>
      <para>Debian 安全团队处理当前<emphasis role="distribution">稳定版</emphasis>以及<emphasis role="distribution">旧稳定版</emphasis>的安全事宜 (但仅与稳定版重复一年)。每个发布大约只维护三年。Debian LTS 团队支持最后两年的安全维护事宜，所以每个发布至少有五年的支持，在这 5 年内，用户可以将版本从 N 升级到 N+2。<ulink type="block" url="https://wiki.debian.org/LTS" /></para>
      <sidebar>
        <title><emphasis>社区</emphasis>支持 LTS 的公司</title>
        <para>Debian 的长期支持承诺颇为困难因为志愿者意图规避无趣的工作。旧软件的五年安全维护是 — 对大部分奉献者而言 — 很无趣的工作，还不如发展上游软件的新功能。</para>
        <para>长期支持版的问世，有赖于参与公司愿意分享安全维护的成本。</para>
        <para>The project started in June 2014: some organizations
        allowed their employees to contribute part-time to Debian LTS
        while others preferred to sponsor the project with money so that
        Debian contributors get paid to do the work that they would not do
        for free. Most Debian contributors willing to be paid to work on
        LTS got together to create a clear sponsorship offer managed by
        Freexian (Raphaël Hertzog's company):
        <ulink type="block" url="https://www.freexian.com/services/debian-lts.html" />
        </para>
        <para>In the Debian LTS team, the volunteers work on packages they care about
        while the paid contributors prioritize packages used by their
        sponsors.
        </para>
        <para>The project is always looking for new sponsors:
        What about your company? Can you let an employee work part-time on
        long term support? Can you allocate a small budget for security
        support?
        <ulink type="block" url="https://wiki.debian.org/LTS/Funding" />
        </para>
      </sidebar>
    </section>
  </section>
</chapter>
