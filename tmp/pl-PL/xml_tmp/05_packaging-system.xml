<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="packaging-system">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-packaging-system.png" scalefit="1" />
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>Pakiet binarny</keyword>
      <keyword>Pakiet źródłowy</keyword>
      <keyword>dpkg</keyword>
      <keyword>zależności</keyword>
      <keyword>konflikt</keyword>
    </keywordset>
  </chapterinfo>
  <title>System pakietowania: narzędzia oraz podstawowe zasady</title>
  <highlights>
    <para>Jako administrator systemu Debian, będziesz regularnie używać <filename>.deb</filename> pakietów, ponieważ zawierają one jednostki takie jak (aplikacje, dokumentacja, itp), których instalacja i konserwacja ułatwiają pracę. Dobrym pomysłem jest wiedzieć, czym one są i jak z nich korzystać.</para>
  </highlights>

  <para>Ten rozdział opisuje strukturę i zawartość pakietów "binarnych" oraz "źródłowych". Pierwsze z nich, pliki <filename>.deb</filename>. są bezpośrednio używane przez <command>dpkg</command>, natomiast ostatnie zawierają kod źródłowy, jak również instrukcje do budowania pakietów binarnych.</para>
  <section id="sect.binary-package-structure">
    <title>Struktura pakietu binarnego</title>
    <indexterm><primary>pakiet</primary> <secondary>pakiet binarny</secondary></indexterm>
    <indexterm><primary><command>ar</command></primary></indexterm>

    <para>Format pakietów Debiana jest zaprojektowany tak, aby jego zawartość mogła być wypakowana na każdym systemie Unix, który ma klasyczne polecenia <command>ar</command>, <command>tar</command>, oraz <command>gzip</command> (czasami<command>xz</command> lub <command>bzip2</command>).. Ten trywialny zapis jest ważny dla przenoszenia i usuwania skutków awarii.</para>

    <para>Imagine, for example, that you mistakenly deleted the
    <command>dpkg</command> program, and that you could thus no longer
    install Debian packages. <command>dpkg</command> being a Debian package
    itself, it would seem your system would be done for... Fortunately, you
    know the format of a package and can therefore download the
    <filename>.deb</filename> file of the <emphasis role="pkg">dpkg</emphasis> package and install it manually (see sidebar
    <xref linkend="sidebar.dpkg-apt-ar" />). If by some misfortune one or more of the programs
    <command>ar</command>, <command>tar</command> or
    <command>gzip</command>/<command>xz</command>/<command>bzip2</command>
    have disappeared, you will only need to copy the missing program from
    another system (since each of these operates in a completely
    autonomous manner, without dependencies, a simple copy will
    suffice).  If your system suffered some even more outrageous
    fortune, and even these don't work (maybe the deepest system
    libraries are missing?), you should try the static version of
    <command>busybox</command> (provided in the <emphasis role="pkg">busybox-static</emphasis> package), which is even more
    self-contained, and provides subcommands such as <command>busybox ar</command>,
    <command>busybox tar</command> and <command>busybox
    gunzip</command>.</para>

    <sidebar id="sidebar.dpkg-apt-ar">
      <title><emphasis>NARZĘDZIA</emphasis> <command>dpkg</command>, <command>APT</command> i <command>ar</command></title>
      <indexterm><primary><command>dpkg</command></primary></indexterm>
      <indexterm><primary><command>ar</command></primary></indexterm>
      <indexterm><primary>APT</primary></indexterm>

      <para><command>dpkg</command>to program, który obsługuje <filename> .deb </filename> pliki, zwłaszcza skompresowane analizuje i rozpakowuje je.</para>

      <para><command>APT</command> jest grup programów, które pozwala na wykonanie zmiany w systemach wyższego rzędu takich jak instalowanie lub usuwanie pakietu (utrzymując jednocześnie wszystkie zależności) aktualizację systemu Lista dostępnych pakietów, etc.</para>
    
      <indexterm><primary><command>ar</command></primary></indexterm>
      <para>
      As for the <command>ar</command> program, it allows handling files of
      the same name: <command>ar t
      <replaceable>archive</replaceable></command> displays the list of
      files contained in such an archive, <command>ar x
      <replaceable>archive</replaceable></command> extracts the files from
      the archive into the current working directory, <command>ar d
      <replaceable>archive</replaceable>
      <replaceable>file</replaceable></command> deletes a file from the
      archive, etc. Its man page
      (<citerefentry><refentrytitle>ar</refentrytitle><manvolnum>1</manvolnum></citerefentry>)
      documents all its other features. <command>ar</command> is a very
      rudimentary tool that a Unix administrator would only use on rare
      occasions, but admins routinely use <command>tar</command>, a more
      evolved archive and file management program. This is why it is easy
      to restore <command>dpkg</command> in the event of an erroneous
      deletion. You would only have to download the Debian package and
      extract the content from the <filename>data.tar.gz</filename> archive
      in the system's root (<filename>/</filename>):</para>

      <screen>
<computeroutput># </computeroutput><userinput>ar x dpkg_1.17.23_amd64.deb</userinput>
<computeroutput># </computeroutput><userinput>tar -C / -p -xzf data.tar.gz</userinput>
</screen>
    </sidebar>

    <sidebar>
      <title><emphasis>Powrót do podstaw</emphasis>Strona MAN</title>

      <para>Dla początkujących może być flustrujące znaleźć referencje do “<citerefentry><refentrytitle>ar</refentrytitle><manvolnum>1</manvolnum></citerefentry>” w literaturze. Na ogół jest to wygodnym środkiem powołując się na stronie podręcznika  <literal>ar</literal> iw sekcji 1.</para>

      <para>Czasami ta notacja może być używana do unikania nieporozumień, na przykład żeby rozróżnić komendę <command>printf</command>, która może być również wskazywana jako <citerefentry><refentrytitle>printf</refentrytitle><manvolnum>1</manvolnum></citerefentry> od funkcji <function>printf</function> w języku programowania C, do której można się odnosić przez <citerefentry><refentrytitle>printf</refentrytitle><manvolnum>3</manvolnum></citerefentry>.</para>

      <para><xref linkend="solving-problems" /> omawia strony podręcznika szczegółowo (see <xref linkend="sect.manual-pages" />).</para>
    </sidebar>

    <para>Spójrz na zawartość <filename>.deb</filename> file:</para>

    <screen><computeroutput>$ </computeroutput><userinput>ar t dpkg_1.17.23_amd64.deb</userinput>
<computeroutput>debian-binary
control.tar.gz
data.tar.gz
$ </computeroutput><userinput>ar x dpkg_1.17.23_amd64.deb</userinput>
<computeroutput>$ </computeroutput><userinput>ls</userinput>
<computeroutput>control.tar.gz  data.tar.gz  debian-binary  dpkg_1.17.23_amd64.deb
$ </computeroutput><userinput>tar tzf data.tar.gz | head -n 15</userinput>
<computeroutput>./
./var/
./var/lib/
./var/lib/dpkg/
./var/lib/dpkg/parts/
./var/lib/dpkg/info/
./var/lib/dpkg/alternatives/
./var/lib/dpkg/updates/
./etc/
./etc/logrotate.d/
./etc/logrotate.d/dpkg
./etc/dpkg/
./etc/dpkg/dpkg.cfg.d/
./etc/dpkg/dpkg.cfg
./etc/alternatives/
$ </computeroutput><userinput>tar tzf control.tar.gz</userinput>
<computeroutput>./
./conffiles
./postinst
./md5sums
./prerm
./preinst
./control
./postrm
$ </computeroutput><userinput>cat debian-binary</userinput>
<computeroutput>2.0</computeroutput>
</screen>

    <para>Jak możesz zobaczyć  <command>ar</command> archiwum pakietów Debiana jest podzielona na trzy pliki:</para>
    <itemizedlist>
      <listitem>
	<para><filename>debian-binary</filename>. This is a text file which
	simply indicates the version of the <filename>.deb</filename> file
	used (in 2015: version 2.0).</para>
      </listitem>
      <listitem>
	<para><filename>control.tar.gz</filename>. To archiwum zawiera wszystkie dostępne meta-informacje, takie jak nazwa i wersja pakietu. Niektóre z tych meta-informacji pozwalają narzędziom zarządzającym pakietami na określenie, czy możliwe jest jego zainstalowanie lub odinstalowanie, na przykład zgodnie z listą pakietów znajdujących się na maszynie.</para>
      </listitem>
      <listitem>
	<para><filename>data.tar.gz</filename>. This archive contains all
	of the files to be extracted from the package; this is where the
	executable files, documentation, etc., are all stored. Some
	packages may use other compression formats, in which case the file
	will be named differently (<filename>data.tar.bz2</filename> for
	bzip2, <filename>data.tar.xz</filename> for XZ).</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="sect.package-meta-information">
    <title>Meta-informacje pakietu</title>
    <indexterm><primary>meta-informacje pakietu</primary></indexterm>
    <indexterm><primary>pakiet</primary><secondary>meta-informacje</secondary></indexterm>

    <para>The Debian package is not only an archive of files intended
    for installation. It is part of a larger whole, and it describes
    its relationship with other Debian packages (dependencies,
    conflicts, suggestions). It also provides scripts that enable the
    execution of commands at different stages in the package's
    lifecycle (installation, removal, upgrades). These data are used
    by the package management tools but are not part of the packaged
    software; they are, within the package, what is called its
    “meta-information” (information about other information).</para>

    <section id="sect.control">
      <title>Opis: plik <filename>control</filename></title>
      <indexterm><primary>meta-informacje pakietu</primary></indexterm>
      <indexterm><primary>pakiet</primary><secondary>meta-informacje</secondary></indexterm>
      <indexterm><primary><filename>control</filename></primary></indexterm>

      <para>This file uses a structure similar to email headers (as defined
      by RFC 2822). For example, for <emphasis role="pkg">apt</emphasis>,
      the <filename>control</filename> file looks like the
      following:</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>apt-cache show apt</userinput>
<computeroutput>Package: apt
Version: 1.0.9.6
Installed-Size: 3788
Maintainer: APT Development Team &lt;deity@lists.debian.org&gt;
Architecture: amd64
Replaces: manpages-it (&lt;&lt; 2.80-4~), manpages-pl (&lt;&lt; 20060617-3~), openjdk-6-jdk (&lt;&lt; 6b24-1.11-0ubuntu1~), sun-java5-jdk (&gt;&gt; 0), sun-java6-jdk (&gt;&gt; 0)
Depends: libapt-pkg4.12 (&gt;= 1.0.9.6), libc6 (&gt;= 2.15), libgcc1 (&gt;= 1:4.1.1), libstdc++6 (&gt;= 4.9), debian-archive-keyring, gnupg
Suggests: aptitude | synaptic | wajig, dpkg-dev (&gt;= 1.17.2), apt-doc, python-apt
Conflicts: python-apt (&lt;&lt; 0.7.93.2~)
Breaks: manpages-it (&lt;&lt; 2.80-4~), manpages-pl (&lt;&lt; 20060617-3~), openjdk-6-jdk (&lt;&lt; 6b24-1.11-0ubuntu1~), sun-java5-jdk (&gt;&gt; 0), sun-java6-jdk (&gt;&gt; 0)
Description-en: commandline package manager
 This package provides commandline tools for searching and
 managing as well as querying information about packages
 as a low-level access to all features of the libapt-pkg library.
 .
 These include:
  * apt-get for retrieval of packages and information about them
    from authenticated sources and for installation, upgrade and
    removal of packages together with their dependencies
  * apt-cache for querying available information about installed
    as well as installable packages
  * apt-cdrom to use removable media as a source for packages
  * apt-config as an interface to the configuration settings
  * apt-key as an interface to manage authentication keys
Description-md5: 9fb97a88cb7383934ef963352b53b4a7
Tag: admin::package-management, devel::lang:ruby, hardware::storage,
 hardware::storage:cd, implemented-in::c++, implemented-in::perl,
 implemented-in::ruby, interface::commandline, network::client,
 protocol::ftp, protocol::http, protocol::ipv6, role::program,
 role::shared-lib, scope::application, scope::utility, sound::player,
 suite::debian, use::downloading, use::organizing, use::searching,
 works-with::audio, works-with::software:package, works-with::text
Section: admin
Priority: important
Filename: pool/main/a/apt/apt_1.0.9.6_amd64.deb
Size: 1107560
MD5sum: a325ccb14e69fef2c50da54e035a4df4
SHA1: 635d09fcb600ec12810e3136d51e696bcfa636a6
SHA256: 371a559ce741394b59dbc6460470a9399be5245356a9183bbeea0f89ecaabb03</computeroutput></screen>

      <sidebar>
        <title><emphasis>WRACAJĄC DO PODSTAW</emphasis> RFC — internetowe standardy</title>
        <indexterm><primary>RFC</primary></indexterm>
        <indexterm><primary>Żądanie komentarzy</primary></indexterm>

	<para>RFC jest skrótem od “Request For Comments” (Prośba o komentarze). RFC jest zazwyczaj technicznym dokumentem opisującym przyszły standard w Internecie. Przed ustandaryzowaniem i zamrożeniem, standardy te są przedstawione do publicznej oceny (stąd ich nazwa). IETF (Internet Engineering Task Force) decyduje o zmianie statusu tych dokumentów (proponowany standard, szkic standardu lub standard).</para>

	<para>RFC 2026 definiuje proces standaryzacji protokołów internetowych<ulink type="block" url="http://www.faqs.org/rfcs/rfc2026.html" /></para>
      </sidebar>
      <section>
        <title>Zależności: pole <literal>Depends</literal></title>
        <indexterm><primary>zależność</primary></indexterm>
        <indexterm><primary><literal>Depends</literal>, pole nagłówka</primary></indexterm>
        <indexterm><primary>pakiet</primary><secondary> zależność</secondary></indexterm>

	<para>The dependencies are defined in the
	<literal>Depends</literal> field in the package header. This
	is a list of conditions to be met for the package to work
	correctly — this information is used by tools such as
	<command>apt</command> in order to install the required
	libraries, in appropriate versions fulfilling the dependencies
	of the package to be installed. For each dependency, it is
	possible to restrict the range of versions that meet that
	condition. In other words, it is possible to express the fact
	that we need the package <emphasis role="pkg">libc6</emphasis>
	in a version equal to or greater than “2.15” (written
	“<command>libc6 (&gt;= 2.15)</command>”). Version comparison
	operators are as follows:</para>
        <itemizedlist>
          <listitem>
	    <para><command>&lt;&lt;</command>: mniejsza;</para>
          </listitem>
          <listitem>
	    <para><command>&lt;=</command>: mniejsza bądź równa;</para>
          </listitem>
          <listitem>
	    <para><command>=</command>: równa (zauważ, że “<literal>2.6.1</literal>” nie jest równa “<literal>2.6.1-1</literal>”);</para>
          </listitem>
          <listitem>
	    <para><command>&gt;=</command>: większa bądź równa;</para>
          </listitem>
          <listitem>
	    <para><command>&gt;&gt;</command>: większa.</para>
          </listitem>
        </itemizedlist>

	<para>In a list of conditions to be met, the comma serves as a
	separator. It must be interpreted as a logical “and”.
	In conditions, the vertical bar (“|”) expresses a logical “or”
	(it is an inclusive “or”, not an exclusive
	“either/or”). Carrying greater priority than “and”, it can
	be used as many times as necessary. Thus, the dependency “(A or
	B) and C” is written <command>A | B, C</command>. In contrast,
	the expression “A or (B and C)” should be written as “(A or
	B) and (A or C)”, since the <literal>Depends</literal> field does
	not tolerate parentheses that change the order of priorities
	between the logical operators “or” and “and”. It would thus
	be written <command>A | B, A | C</command>. <ulink type="block" url="http://www.debian.org/doc/debian-policy/ch-relationships.html" /></para>

        <indexterm><primary>meta-package</primary></indexterm>
	<para>The dependencies system is a good mechanism for guaranteeing
	the operation of a program, but it has another use with
	“meta-packages”. These are empty packages that only describe
	dependencies. They facilitate the installation of a consistent
	group of programs preselected by the meta-package maintainer; as
	such, <command>apt install
	<replaceable>meta-package</replaceable></command> will
	automatically install all of these programs using the
	meta-package's dependencies. The <emphasis role="pkg">gnome</emphasis>, <emphasis role="pkg">kde-full</emphasis>
	and <emphasis role="pkg">linux-image-amd64</emphasis> packages
	are examples of meta-packages.</para>

        <sidebar>
          <title><emphasis>DEBIAN POLICY</emphasis> <literal>Pre-Depends</literal>,bardziej wymagający <literal>Depends</literal></title>
          <indexterm><primary><literal>Pre-Depends</literal>, pole nagłówkowe</primary></indexterm>
          <indexterm><primary>pre-dependency</primary></indexterm>

	  <para>“Pre-dependencies”, which are listed in the
	  “<literal>Pre-Depends</literal>” field in the package
	  headers, complete the normal dependencies; their syntax is
	  identical. A normal dependency indicates that the package in
	  question must be unpacked and configured before configuration of the package
	  declaring the dependency. A pre-dependency stipulates that the
	  package in question must be unpacked and configured before
	  execution of the pre-installation script of the package declaring
	  the pre-dependency, that is before its installation.</para>

	  <para>A pre-dependency is very demanding for
	  <command>apt</command>, because it adds a strict constraint on
	  the ordering of the packages to install. As such,
	  pre-dependencies are discouraged unless absolutely necessary. It
	  is even recommended to consult other developers on
	  <email>debian-devel@lists.debian.org</email> before adding a
	  pre-dependency. It is generally possible to find another solution
	  as a work-around.</para>
        </sidebar>

        <sidebar>
          <title><emphasis>POLITYKA DEBIANA</emphasis> Pola <literal>Recommends</literal>, <literal>Suggests</literal> i <literal>Enhances</literal></title>
          <indexterm><primary><literal>Recommends</literal>, pole nagłówkowe</primary></indexterm>
          <indexterm><primary><literal>Suggests</literal>, pole nagłówkowe</primary></indexterm>

	  <para>The <literal>Recommends</literal> and
	  <literal>Suggests</literal> fields describe dependencies that are
	  not compulsory. The “recommended” dependencies, the most
	  important, considerably improve the functionality offered by the
	  package but are not indispensable to its operation. The
	  “suggested” dependencies, of secondary importance, indicate
	  that certain packages may complement and increase their
	  respective utility, but it is perfectly reasonable to install one
	  without the others.</para>

	  <para>Powinieneś zawsze instalować pakiety "rekomendowane", chyba że dokładnie wiesz, dlaczego ich nie potrzebujesz. Przeciwnie, nie jest wymagane instalowanie "sugerowanych", chyba że wiesz, że ich potrzebujesz.</para>

          <indexterm><primary><literal>Enhances</literal>, pole nagłówkowe</primary></indexterm>

	  <para>The <literal>Enhances</literal> field also describes a
	  suggestion, but in a different context. It is indeed located in
	  the suggested package, and not in the package that benefits from
	  the suggestion. Its interest lies in that it is possible to add a
	  suggestion without having to modify the package that is
	  concerned. Thus, all add-ons, plug-ins, and other extensions of a
	  program can then appear in the list of suggestions related to
	  the software. Although it has existed for several years, this
	  last field is still largely ignored by programs such as
	  <command>apt</command> or <command>synaptic</command>. Its
	  purpose is for a suggestion made by the
	  <literal>Enhances</literal> field to appear to the user in
	  addition to the traditional suggestions — found in the
	  <literal>Suggests</literal> field.</para>
        </sidebar>
      </section>
      <section>
        <title>Konflikty: pole <literal>Conflicts</literal></title>
        <indexterm><primary>konflikty</primary></indexterm>
        <indexterm><primary><literal>Conflicts</literal>, pole nagłówkowe</primary></indexterm>
        <indexterm><primary>pakiet</primary><secondary>konflikt</secondary></indexterm>

	<para>Pole <literal>Konflikty</literal> wskazuje przypadek, kiedy pakiet nie może być zainstalowany równocześnie z innym. Najczęstszymi powodami takich sytuacji jest plik o tej samej nazwie zawierany przez oba pakiety lub taka sama usługa na tym samym porcie TCP, lub wzajemne utrudnianie sobie działania.</para>

	<para><command>dpkg</command> will refuse to install a package if
	it triggers a conflict with an already installed package, except if
	the new package specifies that it will “replace” the installed
	package, in which case <command>dpkg</command> will choose to
	replace the old package with the new one.
	<command>apt</command> always follows your instructions: if you
	choose to install a new package, it will automatically offer to
	uninstall the package that poses a problem.</para>
      </section>
      <section>
        <title>Niekompatybilności: pole <literal>Breaks</literal></title>
        <indexterm><primary>niekompatybilności</primary></indexterm>
        <indexterm><primary><literal>Breaks</literal>, pole nagłówkowe</primary></indexterm>
        <indexterm><primary>pakiet</primary><secondary>niekompatybilność</secondary></indexterm>

	<para>The <literal>Breaks</literal> field has an effect similar to
	that of the <literal>Conflicts</literal> field, but with a special
	meaning. It signals that the installation of a package will
	“break” another package (or particular versions of it). In
	general, this incompatibility between two packages is transitory,
	and the <literal>Breaks</literal> relationship specifically refers
	to the incompatible versions.</para>

	<para><command>dpkg</command> will refuse to install a package that
	breaks an already installed package, and <command>apt</command>
	will try to resolve the problem by updating the package that would
	be broken to a newer version (which is assumed to be fixed and,
	thus, compatible again).</para>

	<para>This type of situation may occur in the case of updates
	without backwards compatibility: this is the case if the new
	version no longer functions with the older version, and causes a
	malfunction in another program without making special provisions.
	The <literal>Breaks</literal> field prevents the user from running
	into these problems.</para>
      </section>
      <section>
        <title>Dostarczone elementy: pole <literal>Provides</literal></title>
        <indexterm><primary><literal>Provides</literal>, pole nagłówkowe</primary></indexterm>

	<para>This field introduces the very interesting concept of a
	“virtual package”. It has many roles, but two are of particular
	importance. The first role consists in using a virtual package to
	associate a generic service with it (the package “provides” the
	service). The second indicates that a package completely replaces
	another, and that for this purpose it can also satisfy the
	dependencies that the other would satisfy. It is thus possible to
	create a substitution package without having to use the same
	package name.</para>

        <sidebar>
          <title><emphasis>SŁOWNIK</emphasis> Meta-pakiet i pakiet wirtualny</title>
          <indexterm><primary>meta-package</primary></indexterm>
          <indexterm><primary>pakiet</primary><secondary>pakiet wirtualny</secondary></indexterm>
          <indexterm><primary>pakiet wirtualny</primary></indexterm>

	  <para>It is essential to clearly distinguish meta-packages from
	  virtual packages. The former are real packages (including real
	  <filename>.deb</filename> files), whose only purpose is to
	  express dependencies.</para>

	  <para>Virtual packages, however, do not exist physically; they
	  are only a means of identifying real packages based on common,
	  logical criteria (service provided, compatibility with a standard
	  program or a pre-existing package, etc.).</para>
        </sidebar>
        <section>
          <title>Providing a “Service”</title>

	  <para>Let us discuss the first case in greater detail with
	  an example: all mail servers, such as <emphasis role="pkg">postfix</emphasis> or <emphasis role="pkg">sendmail</emphasis> are said to “provide” the
	  <emphasis role="pkg">mail-transport-agent</emphasis> virtual
	  package. Thus, any package that needs this service to be
	  functional (e.g. a mailing list manager, such as <emphasis role="pkg">smartlist</emphasis> or <emphasis role="pkg">sympa</emphasis>) simply states in its
	  dependencies that it requires a <emphasis role="pkg">mail-transport-agent</emphasis> instead of
	  specifying a large yet incomplete list of possible solutions
          (e.g. <command>postfix | sendmail | exim4 | …</command>).
          Furthermore, it is useless to install two mail
	  servers on the same machine, which is why each of these
	  packages declares a conflict with the <emphasis role="pkg">mail-transport-agent</emphasis> virtual
	  package. A conflict between a package and itself is ignored
	  by the system, but this technique will prohibit the
	  installation of two mail servers side by side.</para>

          <sidebar>
            <title><emphasis>POLITYKA DEBIANA</emphasis> Lista pakietów wirtualnych</title>
            <indexterm><primary>pakiet</primary><secondary>pakiet wirtualny</secondary></indexterm>

	    <para>Aby wirtualne pakiety były przydatne, wszyscy muszą zgadzać się odnośnie ich nazw. Z tego powodu są one ustandaryzowane w Polityce Debiana. Lista obejmuje między innymi <emphasis role="pkg">mail-transport-agent</emphasis> dla serwerów poczty, <emphasis role="pkg">c-compiler</emphasis> dla kompilatorów języka C, <emphasis role="pkg">www-browser</emphasis> dla przeglądarek internetowych, <emphasis role="pkg">httpd</emphasis> dla serwerów internetowych, <emphasis role="pkg">ftp-server</emphasis> dla serwerów FTP, <emphasis role="pkg">x-terminal-emulator</emphasis> dla emulatorów terminala w trybie graficznym (<command>xterm</command>) i <emphasis role="pkg">x-window-manager</emphasis> dla menedżerów okien.</para>

	    <para>Pełną listę można znaleźć w Sieci. <ulink type="block" url="http://www.debian.org/doc/packaging-manuals/virtual-package-names-list.txt" /></para>
          </sidebar>
        </section>
        <section>
          <title>Wymienność z innymi pakietami</title>

	  <para>The <literal>Provides</literal> field is also interesting
	  when the content of a package is included in a larger package.
	  For example, the <emphasis role="pkg">libdigest-md5-perl</emphasis> Perl module was an
	  optional module in Perl 5.6, and has been integrated as standard
	  in Perl 5.8 (and later versions, such as 5.20 present in
	  <emphasis role="distribution">Jessie</emphasis>). As such, the
	  package <emphasis role="pkg">perl</emphasis> has since version
	  5.8 declared <literal>Provides: libdigest-md5-perl</literal> so
	  that the dependencies on this package are met if the user has
	  Perl 5.8 (or newer). The <emphasis role="pkg">libdigest-md5-perl</emphasis> package itself has
	  eventually been deleted, since it no longer had any purpose when
	  old Perl versions were removed.</para>

          <figure>
            <title>Use of a <literal>Provides</literal> field in order to not break dependencies</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="images/virtual-package.png" width="50%" />
              </imageobject>
            </mediaobject>
          </figure>

	  <para>This feature is very useful, since it is never possible to
	  anticipate the vagaries of development, and it is necessary to be
	  able to adjust to renaming, and other automatic replacement, of
	  obsolete software.</para>

          <sidebar>
            <title><emphasis>WRACAJĄC DO PODSTAW</emphasis> Perl, język programowania</title>
            <indexterm><primary>Perl</primary></indexterm>
            <indexterm><primary>CPAN</primary></indexterm>

	    <para>Perl (Practical Extraction and Report Language) jest bardzo popularnym językiem programowania. Posiada wiele modułów gotowych do użycia, które pokrywają szerokie spektrum zastosowań i są rozprowadzane przez serwery CPAN (Comprehensive Perl Archive Network), rozległą sieć pakietów Perla. <ulink type="block" url="http://www.perl.org/" /> <ulink type="block" url="http://www.cpan.org/" /></para>

	    <para>W związku z tym, że jest to język interpretowany, program napisany w Perlu nie wymaga kompilacji przed wykonaniem. Dlatego nazywa się je "skryptami Perla".</para>
          </sidebar>
        </section>
        <section>
          <title>Ubiegłe ograniczenia</title>

	  <para>Virtual packages used to suffer from some limitations,
	  the most significant of which was the absence of a version
	  number. To return to the previous example, a dependency such
	  as <literal>Depends: libdigest-md5-perl (&gt;=
	  1.6)</literal>, despite the presence of Perl 5.10, would
	  never be considered as satisfied by the packaging system —
	  while in fact it most likely is satisfied. Unaware of this,
	  the package system chose the least risky option, assuming
	  that the versions do not match.</para>

          <para>This limitation has been lifted in <emphasis role="pkg">dpkg</emphasis> 1.17.11, and is no longer
          relevant in Jessie. Packages can assign a version
          to the virtual packages they provide with a
          dependency such as <literal>Provides: libdigest-md5-perl (=
          1.8)</literal>.
          </para>
        </section>
      </section>

      <section>
        <title>Zastępowanie plików: pole <literal>Replaces</literal></title>
        <indexterm><primary>zastąpienie</primary></indexterm>
        <indexterm><primary><literal>Replaces</literal>, pole nagłówkowe</primary></indexterm>
        <indexterm><primary>pakiet</primary><secondary>zastąpienie</secondary></indexterm>

	<para>The <literal>Replaces</literal> field indicates that the
	package contains files that are also present in another
	package, but that the package is legitimately entitled to
	replace them.  Without this specification,
	<command>dpkg</command> fails, stating that it can not
	overwrite the files of another package (technically, it is
	possible to force it to do so with the
	<literal>--force-overwrite</literal> option, but that is not
	considered standard operation). This allows identification of
	potential problems and requires the maintainer to study the
	matter prior to choosing whether to add such a field.</para>

	<para>Użycie tego pola jest uprawnione kiedy zmienia się nazwa pakietu lub jeden pakiet jest zawarty w innym. Zdarza się to również, gdy opiekun decyduje się na różne rozprowadzanie plików pośród różnych pakietów binarnych wytworzonych z tego samego pakietu źródłowego: zastąpiony plik nie należy już do starego pakietu, ale tylko do nowego.</para>

	<para>Jeżeli wszystkie pliki w zainstalowanym pakiecie zostały zastąpione, pakiet uważa się za usunięty. Ostatecznie, użycie tego pola zachęca <command>dpkg</command> do usunięcia zastąpionego pakietu, w którym występuje konflikt.</para>

        <sidebar id="sidebar.debtags">
          <title><emphasis>IDĄC DALEJ</emphasis> Pole <literal>Tag</literal></title>

	  <para>In the <emphasis role="pkg">apt</emphasis> example above,
	  we can see the presence of a field that we have not yet
	  described, the <literal>Tag</literal> field. This field does not
	  describe a relationship between packages, but is simply a way of
	  categorizing a package in a thematic taxonomy. This
	  classification of packages according to several criteria (type of
	  interface, programming language, domain of application, etc.) has
	  been available for a long time. Despite this, not all packages have
	  accurate tags and it is not yet
	  integrated in all Debian tools; <command>aptitude</command>
	  displays these tags, and allows them to be used as search
	  criteria. For those who are repelled by
	  <command>aptitude</command>'s search criteria, the following website
	  allows navigation of the tag database:
	  <ulink type="block" url="http://debtags.alioth.debian.org/" />
	  </para>
        </sidebar>
      </section>
    </section>
    <section id="sect.configuration-scripts">
      <title>Skrypty konfiguracyjne</title>
      <indexterm><primary><filename>postinst</filename></primary></indexterm>
      <indexterm><primary><filename>preinst</filename></primary></indexterm>
      <indexterm><primary><filename>postrm</filename></primary></indexterm>
      <indexterm><primary><filename>prerm</filename></primary></indexterm>
      <indexterm><primary><filename>control.tar.gz</filename></primary></indexterm>

      <para>W dodatku do pliku <filename>control</filename>, archiwum <filename>control.tar.gz</filename> dla każdego pakietu Debiana może zawierać wiele skryptów, wywoływanych przez <command>dpkg</command> na różnych etapach przetwarzania pakietu. Polityka Debiana szczegółowo opisuje możliwe przypadki, wskazując wywoływane skrypty oraz argumenty, które mogą przyjmować. Mogą to być skomplikowane sekwencje, ponieważ jeżeli jeden skrypt zakończy się niepowodzeniem, <command>dpkg</command> będzie próbował powrócić do prawidłowego stanu poprzez anulowanie postępu instalacji lub usuwania (jeżeli tylko będzie to możliwe).</para>

      <sidebar>
        <title><emphasis>IDĄC DALEJ</emphasis> Baza danych <command>dpkg</command></title>
        <indexterm><primary><filename>/var/lib/dpkg/</filename></primary></indexterm>
	<indexterm><primary>dpkg</primary><secondary>baza danych</secondary></indexterm>

	<para>Wszystkie skrypty konfiguracyjne dla zainstalowanych pakietów są przechowywane w katalogu <filename>/var/lib/dpkg/info/</filename>, w formie pliku z przedrostkiem wskazującym nazwę pakietu. Katalog ten dla każdego pakietu zawiera również plik z rozszerzeniem <filename>.list</filename>, zawierający listę plików należących do danego pakietu.</para>

	<para>Plik <filename>/var/lib/dpkg/status</filename> zawiera szereg bloków danych (w formacie sławnych nagłówków pocztowych, RFC 2822) opisujących status każdego pakietu. Jest tam również powielona informacja z pliku <filename>control</filename> zainstalowanych pakietów.</para>
      </sidebar>

      <para>Ogólnie, skrypt <filename>preinst</filename> jest wykonywany przed instalacją pakietu, podczas gdy <filename>postinst</filename> następuje po niej. Podobnie, <filename>prerm</filename> jest wywoływany przez usunięciem pakietu, a <filename>postrm</filename> po nim. Aktualizacja pakietu jest równoznaczna z usunięciem poprzedniej wersji i instalacją nowej. Nie możliwe jest opisanie tutaj wszystkich możliwych scenariuszy, ale zostaną omówione dwa najczęściej występujące: instalacja/aktualizacja oraz usunięcie.</para>

      <sidebar>
        <title><emphasis>UWAGA</emphasis> Symboliczne nazwy skryptów</title>

	<para>Sekwencje opisane w tej sekcji wywołują skrypty konfiguracyjne używając specyficznych nazw, takich jak <command>old-prerm</command> lub <command>new-postinst</command>. Są to, odpowiednio, skrypt <command>prerm</command> zawarty w starej wersji pakietu (zainstalowanej przed aktualizacją) i skrypt <command>postinst</command> zawarty w nowej wersji (zainstalowany przez aktualizację).</para>
      </sidebar>

      <sidebar>
        <title><emphasis>WSKAZÓWKA</emphasis> Diagramy stanów</title>

	<para>Manoj Srivastava made these diagrams explaining how the
	configuration scripts are called by <command>dpkg</command>.
	Similar diagrams have also been developed by the Debian Women
	project; they are a bit simpler to understand, but less complete.
	<ulink type="block" url="https://people.debian.org/~srivasta/MaintainerScripts.html" />
	<ulink type="block" url="https://wiki.debian.org/MaintainerScripts" /></para>
      </sidebar>
      <section>
        <title>Instalacja i uaktualnieni</title>
        <indexterm><primary><command>dpkg</command></primary><secondary>wewnętrzne działanie</secondary></indexterm>

	<para>Oto, co dzieje się podczas instalacji (lub aktualizacji):</para>
        <orderedlist>
          <listitem>
	    <para>W celu aktualizacji, <command>dpkg</command> wywołuje <command>old-prerm upgrade <replaceable>nowa-wersja</replaceable></command>.</para>
          </listitem>
          <listitem>
	    <para>Nadal w przypadku aktualizacji, <command>dpkg</command> wywołuje <command>new-preinst upgrade <replaceable>stara-wersja</replaceable></command>; w przypadku pierwszej instalacji wywołuje <command>new-preinst install</command>. Może dodać starą wersję jako ostatni parametr, jeżeli pakiet był wcześniej zainstalowany i usunięty (ale nie całkowicie, gdyż zostały zatrzymane pliki konfiguracyjne).</para>
          </listitem>
          <listitem>
	    <para>Nowe pliki pakietu są wtedy rozpakowywane. Jeżeli plik już istnieje, zostaje zastąpiony, ale jest tworzona tymczasowa kopia zapasowa.</para>
          </listitem>
          <listitem>
	    <para>W przypadku aktualizacji, <command>dpkg</command> wykonuje <command>old-postrm upgrade <replaceable>nowa-wersja</replaceable></command>.</para>
          </listitem>
          <listitem>
	    <para><command>dpkg</command> aktualizuje wszystkie wewnętrzne dane (listę plików, skrypty konfiguracyjne, itd.) i usuwa kopie zapasowe zastąpionych plików. Jest to punkt bez powrotu: <command>dpkg</command> nie ma już dostępu do wszystkich elementów niezbędnych do przywrócenia poprzedniego stanu.</para>
          </listitem>
          <listitem>
	    <para><command>dpkg</command> zaktualizuje pliki konfiguracyjne, pytając użytkownika o decyzje, jeżeli nie jest w stanie automatycznie wykonać tego zadania. Szczegóły tej procedury zostały omówione w <xref linkend="sect.conffiles" />.</para>
          </listitem>
          <listitem>
	    <para>Ostatecznie, <command>dpkg</command> konfiguruje pakiet poprzez wykonanie <command>new-postinst configure <replaceable>ostatnia-wersja-configured</replaceable></command>.</para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>Usuwanie pakietu</title>

	<para>O to, co zachodzi podczas usuwania pakietu:</para>
        <orderedlist>
          <listitem>
	    <para><command>dpkg</command> wywołuje <command>prerm remove</command>.</para>
          </listitem>
          <listitem>
	    <para><command>dpkg</command> usuwa wszystkie pliki pakietu, z wyjątkiem plików konfiguracyjnych i skryptów konfiguracyjnych.</para>
          </listitem>
          <listitem>
	    <para><command>dpkg</command> wykonuje <command>postrm remove</command>. Wszystkie skrypty konfiguracyjne, poza <filename>postrm</filename>, zostają usunięte. Jeżeli użytkownik nie użył opcji "purge", proces dobiega końca.</para>
          </listitem>
          <listitem>
	    <para>Podczas całkowitego usuwania pakietów (po wykonaniu polecenia <command>dpkg --purge</command> lub <command>dpkg -P</command>), usuwane są również pliki konfiguracyjne, wraz z pewną liczbą ich kopii (<filename>*.dpkg-tmp</filename>, <filename>*.dpkg-old</filename>, <filename>*.dpkg-new</filename>) i plików tymczasowych; następnie <command>dpkg</command> wykonuje <command>postrm purge</command>.</para>
          </listitem>
        </orderedlist>

        <sidebar>
          <title><emphasis>SŁOWNIK</emphasis> Purge, całkowite usunięcie</title>
          <indexterm><primary>całkowite usunięcie pakietów</primary></indexterm>

	  <para>Kiedy pakiet Debiana jest usuwany, pliki konfiguracyjne są zatrzymywane w celu ułatwienia ich prawdopodobnej reinstalacji. Podobnie, dane generowane przez demona (takie jak zawartość katalogu serwera LDAP, albo zawartość bazy danych serwera SQL) są zwykle zatrzymywane.</para>

	  <para>Do usunięcia wszystkich danych powiązanych z pakietem niezbędne jest "całkowite usunięcie" (purge) pakietu komendą, <command>dpkg -P <replaceable>pakiet</replaceable></command>, <command>apt-get remove --purge <replaceable>pakiet</replaceable></command> lub <command>aptitude purge <replaceable>pakiet</replaceable></command>.</para>

	  <para>Given the definitive nature of such data removals, a
	  purge should not be taken lightly.</para>
        </sidebar>

        <indexterm><primary><filename>config</filename>, <command>debconf</command> script</primary></indexterm>

	<para>Opisane powyżej cztery skrypty są uzupełnione skryptem <filename>config</filename>, dostarczanym przez pakiety używające <command>debconf</command> w celu uzyskania informacji konfiguracyjnych od użytkownika. Podczas instalacji, skrypt ten szczegółowo definiuje pytania zadawane przez <command>debconf</command>. Odpowiedzi są zapisywane w bazie danych <command>debconf</command> dla przyszłego odniesienia. Ten skrypt jest zazwyczaj wykonywany przez <command>apt</command> przed instalacją pakietów jeden po drugim, w celu zgrupowania wszystkich pytań i zadania ich użytkownikowi wszystkich na raz na początku procesu. Skrypty przed- i po-instalacyjne mogą wtedy użyć tych informacji do działania zgodnie z życzeniem użytkownika.</para>

        <sidebar>
          <title><emphasis>NARZĘDZIE</emphasis> <command>debconf</command></title>
          <indexterm><primary><command>debconf</command></primary></indexterm>

	  <para><command>debconf</command> został stworzony, żeby rozwiązać powtarzające się problemy Debiana. Wszystkie pakiety Debiana nie są zdolne do funkcjonowania bez chociażby minimalnej konfiguracji, która zazwyczaj zadaje pytania przy użyciu komend <command>echo</command> oraz <command>read</command> w skryptach <filename>postinst</filename> (i innych podobnych skryptach). Ale oznacza to także, że podczas większej instalacji lub aktualizacji użytkownik musi zostać przed komputerem odpowiadając na przeróżne pytania, mogące pojawić się w każdej chwili. Tych ręcznych interakcji można teraz niemal całkowicie uniknąć dzięki użyciu narzędzia <command>debconf</command>.</para>

	  <para><command>debconf</command> ma wiele interesujących cech: wymaga od dewelopera sprecyzowania interakcji z użytkownikiem; pozwala tłumaczyć wszystkie ciągi znaków wyświetlane użytkownikowi (wszystkie tłumaczenia są przechowywane w pliku <filename>templates</filename> opisującym interakcje); posiada różne interfejsy do wyświetlania pytań skierowanych do użytkownika (tryb tekstowy, graficzny, bez interaktywny); oraz umożliwia stworzenie centralnej bazy danych odpowiedzi w celu dzielenia tej samej konfiguracji na różnych komputerach... ale najważniejsze jest to, że teraz możliwe jest przedstawienia użytkownikowi wszystkich pytań na raz, przed rozpoczęciem długiej instalacji lub aktualizacji. Użytkownik może zająć się swoimi sprawami, podczas gdy system sam radzi sobie z instalacją, bez konieczności wpatrywania się w ekran w oczekiwaniu na pytanie.</para>
        </sidebar>
      </section>
    </section>
    <section id="sect.conffiles">
      <title>Sumy kontrolne, lista plików konfiguracyjnych</title>
      <indexterm><primary><filename>md5sums</filename></primary></indexterm>
      <indexterm><primary><filename>conffiles</filename></primary></indexterm>
      <indexterm><primary>sumy kontrolne</primary></indexterm>
      <indexterm><primary>pliki</primary><secondary>pliki konfiguracyjne</secondary></indexterm>
      <indexterm><primary>konfiguracyjne</primary><secondary>pliki</secondary></indexterm>

      <para>In addition to the maintainer scripts and control data already
      mentioned in the previous sections, the
      <filename>control.tar.gz</filename> archive of a Debian package may
      contain other interesting files. The first,
      <filename>md5sums</filename>, contains the MD5 checksums for all of
      the package's files. Its main advantage is that it allows
      <command>dpkg --verify</command> (which we will study in <xref linkend="sect.dpkg-verify" />) to check if these files have been
      modified since their installation. Note that when this file doesn't
      exist, <command>dpkg</command> will generate it dynamically at
      installation time (and store it in the dpkg database just like other
      control files).</para>

      <para><filename>conffiles</filename> listuje pliki pakietów, które muszą być obsługiwane jako pliki konfiguracyjne. Pliki konfiguracyjne mogą być modyfikowane przez administratora, a <command>dpkg</command> spróbuje przechować zmiany podczas aktualizacji pakietu.</para>

      <para>W istocie, w tej sytuacji <command>dpkg</command> zachowuje się na tyle inteligentnie, na ile to możliwe: jeżeli standardowy plik konfiguracyjny nie został zmieniony pomiędzy dwoma wersjami, nie robi nic. Jeżeli jednak plik był modyfikowany, spróbuje go uaktualnić. Są możliwe dwa przypadki: albo administrator nie modyfikował tego pliku konfiguracyjnego, w tym przypadku <command>dpkg</command> automatycznie instaluje nową wersję; albo plik był modyfikowany, w tym przypadku <command>dpkg</command> pyta administratora, której wersji chciałby użyć (starą ze zmianami albo nową dostarczoną wraz z pakietem). Dla ułatwienia podjęcia tej decyzji <command>dpkg</command> oferuje wyświetlenie “<command>diff</command>”, który pokazuje różnice pomiędzy dwiema wersjami. Jeżeli użytkownik postanowi zachować starą wersję, nowa będzie zachowana w tej samej lokalizacji, w pliku o rozszerzeniu <filename>.dpkg-dist</filename>. Jeżeli użytkownik wybierze nową wersję, stara będzie zachowana w pliku o rozszerzeniu <filename>.dpkg-old</filename>. Inna możliwa akcja polega na chwilowym przerwaniu <command>dpkg</command> w celu modyfikacji pliku i próby dokonania odpowiednich zmian (poprzednio zidentyfikowanych za pomocą <command>diff</command>).</para>

      <sidebar id="sidebar.questions-conffiles">
        <title><emphasis>IDĄC DALEJ</emphasis> Unikanie pytań o pliki konfiguracyjne</title>

	<para><command>dpkg</command> obsługuje aktualizacje pliku konfiguracyjnego, ale w trakcie działania regularnie przerywa pracę, żeby zapytać administratora o dane wejściowe. To czyni go mniej przyjemnym dla tych, którzy chcieliby uruchomić aktualizacje w sposób bez interaktywny. Właśnie dlatego program ten oferuje opcje pozwalające systemowi na automatyczne odpowiadanie zgodnie z tą samą logiką : <command>--force-confold</command> zatrzymuje starą wersję pliku; <command>--force-confnew</command> użyje nowej wersji pliku (wybory te są przestrzegane, nawet jeżeli plik nie został zmieniony przez administratora, które rzadko dają pożądany efekt). Dodanie opcji <command>--force-confdef</command> mówi <command>dpkg</command> żeby sam decydował, kiedy jest to możliwe (inaczej mówiąc, kiedy oryginalny plik konfiguracyjny nie był modyfikowany) i użył tylko <command>--force-confnew</command> lub <command>--force-confold</command> w innych przypadkach.</para>

	<para>Opcje te stosują się do <command>dpkg</command>, ale przez większość czasu administrator będzie pracował bezpośrednio z <command>aptitude</command> albo <command>apt-get</command>. Niezbędna jest zatem znajomość składni używanej do wskazania opcji przekazywanych do komendy <command>dpkg</command> (ich interfejsy wiersza poleceń są bardzo podobne).</para>

        <screen>
<computeroutput># </computeroutput><userinput>apt -o DPkg::options::="--force-confdef" -o DPkg::options::="--force-confold" full-upgrade</userinput>
</screen>

	<para>Opcje te mogą być przechowywane bezpośrednio w konfiguracji <command>apt</command>a. Żeby to zrobić, po prostu wpisz do pliku <filename>/etc/apt/apt.conf.d/local</filename> następującą linię:</para>
        <informalexample>
          <programlisting>
DPkg::options { "--force-confdef"; "--force-confold"; }
</programlisting>
        </informalexample>

	<para>Dołączenie tej opcji w pliku konfiguracyjnym oznacza, że będzie ona także użyta w interfejsie graficznym takim jak <command>aptitude</command>.</para>
      </sidebar>

      <sidebar id="sidebar.questions-conffiles-bis">
        <title><emphasis>IDĄC DALEJ</emphasis> Wymuszanie pytań o pliki konfiguracyjne w dpkg</title>

	<para>Opcja <command>--force-confask</command> wymaga od <command>dpkg</command> wyświetlenia pytań dotyczących plików konfiguracyjnych, nawet w przypadkach kiedy zwykl nie były by potrzebne. Więc, kiedy ponownie instalujemy pakiet z tą opcją, <command>dpkg</command> ponownie zapyta o wszystkie pliki konfiguracyjne zmodyfikowane przez administratora. To jest bardzo wygodne, szczególnie do przeinstalowania oryginalnego pliku konfiguracyjnego, jeżeli został on usunięty i nie jest dostępna żadna kopia: zwykłe przeinstalowanie nie zadziała, ponieważ <command>dpkg</command> uważa każde usunięcie za prawidłową formę modyfikacji, zatem nie zainstaluje pożądanego pliku konfiguracyjnego.</para>
      </sidebar>
    </section>
  </section>
  <section id="sect.source-package-structure">
    <title>Struktura Pakietu Źródłowego</title>
    <indexterm><primary>pakiet</primary> <secondary>pakiet źródłowy</secondary></indexterm>
    <indexterm><primary>źródło</primary> <secondary>pakiet</secondary></indexterm>
    <section>
      <title>Format</title>
      <indexterm><primary>Plik DSC</primary></indexterm>
      <indexterm><primary>plik <filename>diff.gz</filename></primary></indexterm>
      <indexterm><primary>plik <filename>debian.tar.gz</filename></primary></indexterm>
      <indexterm><primary>plik <filename>orig.tar.gz</filename></primary></indexterm>

      <para>Pakiet źródłowy zazwyczaj składa się z trzech plików, <filename>.dsc</filename>, <filename>.orig.tar.gz</filename> oraz <filename>.debian.tar.gz</filename> (albo <filename>.diff.gz</filename>). Pozwalają one na tworzenie pakietów binarnych (plików <filename>.deb</filename> opisanych powyżej) z plików kodu źródłowego programu, które są napisane w języku programowania.</para>

      <para>Plik <filename>.dsc</filename> (Debian Source Control) jest krótkim plikiem tekstowym zawierającym nagłówek RFC 2882 (tak jak plik <filename>control</filename> omawiany w <xref linkend="sect.control" />), który opisuje pakiet źródłowy i wskazuje, które inne pliki są jego częścią. Jest podpisany przez opiekuna, co gwarantuje jego autentyczność. Więcej szczegółów na ten temat znajduje się w <xref linkend="sect.package-authentication" />.</para>

      <example>
        <title>Plik <filename>.dsc</filename></title>

        <programlisting>
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Format: 3.0 (quilt)
Source: zim
Binary: zim
Architecture: all
Version: 0.62-3
Maintainer: Emfox Zhou &lt;emfox@debian.org&gt;
Uploaders: Raphaël Hertzog &lt;hertzog@debian.org&gt;
Homepage: http://zim-wiki.org
Standards-Version: 3.9.6
Vcs-Browser: http://anonscm.debian.org/gitweb/?p=collab-maint/zim.git
Vcs-Git: git://anonscm.debian.org/collab-maint/zim.git
Build-Depends: debhelper (&gt;= 9), xdg-utils, python (&gt;= 2.6.6-3~), libgtk2.0-0 (&gt;= 2.6), python-gtk2, python-xdg
Package-List:
 zim deb x11 optional arch=all
Checksums-Sha1:
 ad8de170826682323c10195b65b9f1243fd75637 1772246 zim_0.62.orig.tar.gz
 a4f70d6f7fb404022c9cc4870a4e62ea3ca08388 14768 zim_0.62-3.debian.tar.xz
Checksums-Sha256:
 19d62aebd2c1a92d84d80720c6c1dcdb779c39a2120468fed01b7f252511bdc2 1772246 zim_0.62.orig.tar.gz
 fc2e827e83897d5e33f152f124802c46c3c01c5158b75a8275a27833f1f6f1de 14768 zim_0.62-3.debian.tar.xz
Files:
 43419efba07f7086168442e3d698287a 1772246 zim_0.62.orig.tar.gz
 725a69663a6c2961f07673ae541298e4 14768 zim_0.62-3.debian.tar.xz

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2
Comment: Signed by Raphael Hertzog

iQEcBAEBCAAGBQJUR2jqAAoJEAOIHavrwpq5WFcH/RsdzCHc1oXXxHitU23hEqMj
T6ok29M1UFDJDowMXW75jQ1nT4WPUtvEGygkCHeoO/PvjEvB0sjU8GQlX+N9ddSB
aHfqfAYmVhADNGxrXQT5inZXUa8qGeeq2Sqf6YcWtsnuD56lDbvxkyf/XYopoIEl
oltfl05z/AI+vYsW482YrCz0fxNAKAvkyuPhDebYI8jnKWeAANoqmKpsNc/HYyvT
+ZiA5o57OiGdOKT6XGy3/FiF3dkHiRY8lXW7xdr1BbIgulwl9UmiUNwuxwOYbQO7
edtjiTJqOaFUA0x1zB/XGv5tHr1MjP8naT+kfVoVHTOox51CDbeu5D3DZY4imcY=
=Wtoa
-----END PGP SIGNATURE-----</programlisting>
      </example>

      <indexterm><primary><literal>Build-Depends</literal>, pole nagłówkowe</primary></indexterm>

      <para>Note that the source package also has dependencies
      (<literal>Build-Depends</literal>) completely distinct from those of
      binary packages, since they indicate tools required to compile the
      software in question and construct its binary package.</para>

      <sidebar>
        <title><emphasis>CAUTION</emphasis> Distinct namespaces</title>

	<para>It is important to note here that there is no required
	correspondence between the name of the source package and that of
	the binary package(s) that it generates. It is easy enough to
	understand if you know that each source package may generate
	several binary packages. This is why the <filename>.dsc</filename>
	file has the <literal>Source</literal> and
	<literal>Binary</literal> fields to explicitly name the source package and
	store the list of binary packages that it generates.</para>
      </sidebar>

      <sidebar>
        <title><emphasis>CULTURE</emphasis> Why divide into several packages</title>

	<para>Quite frequently, a source package (for a given software)
	can generate several binary packages. The split is justified by
	the possibility to use (parts of) the software in different contexts.
	Consider a 
	shared library, it may be installed to make an application work (for
	example, <emphasis role="pkg">libc6</emphasis>), or it can be
	installed to develop a new program (<emphasis role="pkg">libc6-dev</emphasis> will then be the correct package).
	We find the same logic for client/server services where we want to
	install the server part on one machine and the client part on
	others (this is the case, for example, of <emphasis role="pkg">openssh-server</emphasis> and <emphasis role="pkg">openssh-client</emphasis>).</para>

	<para>Just as frequently, the documentation is provided in a
	dedicated package: the user may install it independently from the
	software, and may at any time choose to remove it to save disk
	space. Additionally, this also saves disk space on the Debian
	mirrors, since the documentation package will be shared amongst all
	of the architectures (instead of having the documentation
	duplicated in the packages for each architecture).</para>
      </sidebar>

      <sidebar>
        <title><emphasis>PERSPECTIVE</emphasis> Different source package formats</title>

	<para>Originally there was only one source package format. This is
	the <literal>1.0</literal> format, which associates an
	<filename>.orig.tar.gz</filename> archive to a
	<filename>.diff.gz</filename> “debianization” patch (there is
	also a variant, consisting of a single <filename>.tar.gz</filename>
	archive, which is automatically used if no
	<filename>.orig.tar.gz</filename> is available).</para>

	<para>Since Debian <emphasis role="distribution">Squeeze</emphasis>, Debian developers have the
	option to use new formats that correct many problems of the
	historical format. Format <literal>3.0 (quilt)</literal> can
	combine multiple upstream archives in the same source package: in
	addition to the usual <filename>.orig.tar.gz</filename>,
	supplementary
	<filename>.orig-<replaceable>component</replaceable>.tar.gz</filename>
	archives can be included. This is useful with software that is distributed in
	several upstream components but for which a single source package
	is desired. These archives can also be compressed with
        <command>bzip2</command> or <command>xz</command> rather than
        <command>gzip</command>, which saves disk space and network resources. Finally,
	the monolithic patch, <filename>.diff.gz</filename> is replaced by
	a <filename>.debian.tar.gz</filename> archive containing the
	compiling instructions and a set of upstream patches contributed by
	the package maintainer. These last are recorded in a format
	compatible with <command>quilt</command> — a tool that facilitates
	the management of a series of patches.</para>
      </sidebar>

      <para>The <filename>.orig.tar.gz</filename> file is an archive containing
      the source code as provided by the original developer.
      Debian package maintainers are asked to not modify this archive in order to be able
      to easily check the origin and integrity of the file (by simple
      comparison with a checksum) and to respect the wishes of some
      authors.</para>

      <para>The <filename>.debian.tar.gz</filename> contains all of the
      modifications made by the Debian maintainer, especially the addition
      of a <filename>debian</filename> directory containing the instructions to
      execute to construct a Debian package.</para>

      <sidebar>
        <title><emphasis>TOOL</emphasis> Decompressing a source package</title>
        <indexterm><primary><command>dpkg-source</command></primary></indexterm>
	<indexterm><primary>dekompresja, pakiet źródłowy</primary></indexterm>
	<indexterm><primary>odkompresowanie, pakiet źródłowy</primary></indexterm>
	<indexterm><primary>odpakowywanie</primary><secondary>pakiet źródłowy</secondary></indexterm>

	<para>If you have a source package, you can use the
	<command>dpkg-source</command> command (from the
	<emphasis role="pkg">dpkg-dev</emphasis> package) to decompress it:</para>

        <screen><computeroutput># </computeroutput><userinput>apt-get -o DPkg::options::="--force-confdef" -o DPkg::options::="--force-confold" dist-upgrade</userinput></screen>

	<para>You can also use <command>apt-get</command> to download a
	source package and unpack it right away. It requires that the
	appropriate <literal>deb-src</literal> lines be present in the
	<filename>/etc/apt/sources.list</filename> file, however (for
	further details, see <xref linkend="sect.apt-sources.list" />).
	These are used to list the “sources” of source packages
	(meaning the servers on which a group of source packages are
	hosted).</para>

        <screen><computeroutput># </computeroutput><userinput>apt-get -o DPkg::options::="--force-confdef" -o DPkg::options::="--force-confold" dist-upgrade</userinput></screen>
      </sidebar>
    </section>
    <section>
      <title>Usage within Debian</title>

      <para>The source package is the foundation of everything in Debian.
      All Debian packages come from a source package, and each modification
      in a Debian package is the consequence of a modification made to the
      source package. The Debian maintainers work with the source package,
      knowing, however, the consequences of their actions on the binary
      packages. The fruits of their labors are thus found in the source
      packages available from Debian: you can easily go back to them and
      everything stems from them.</para>

      <para>When a new version of a package (source package and one or more
      binary packages) arrives on the Debian server, the source package is
      the most important. Indeed, it will then be used by a network of
      machines of different architectures for compilation on the various
      architectures supported by Debian. The fact that the developer also
      sends one or more binary packages for a given architecture (usually
      i386 or amd64) is relatively unimportant, since these could just as
      well have been automatically generated.</para>
    </section>
  </section>
  <section id="sect.manipulating-packages-with-dpkg">
    <title>Manipulating Packages with <command>dpkg</command></title>
    <indexterm><primary><command>dpkg</command></primary></indexterm>

    <para><command>dpkg</command> is the base command for handling Debian
    packages on the system. If you have <filename>.deb</filename> packages,
    it is <command>dpkg</command> that allows installation or analysis of
    their contents. But this program only has a partial view of the Debian
    universe: it knows what is installed on the system, and whatever it is
    given on the command line, but knows nothing of the other available
    packages. As such, it will fail if a dependency is not met. Tools such
    as <command>apt</command>, on the contrary, will create a list of
    dependencies to install everything as automatically as possible.</para>

    <sidebar>
      <title><emphasis>NOTE</emphasis> <command>dpkg</command> or <command>apt</command>?</title>

      <para><command>dpkg</command> should be seen as a system tool
      (backend), and <command>apt</command> as a tool closer to the
      user, which overcomes the limitations of the former. These tools work
      together, each one with its particularities, suited to specific
      tasks.</para>
    </sidebar>
    <section>
      <title>Instalowanie pakietów</title>
      <indexterm><primary>installation</primary><secondary>package installation</secondary></indexterm>
      <indexterm><primary>package</primary><secondary>installation</secondary></indexterm>

      <para><command>dpkg</command> jest przede wszystkim narzędziem do instalowania już dostępnych pakietów Debiana (ponieważ nic nie pobiera). W tym celu należy użyć opcji <literal>-i</literal> lub <literal>--install</literal>.</para>

      <example>
        <title>Instalowanie pakietu z <command>dpkg</command></title>

        <screen role="scale">
<computeroutput># </computeroutput><userinput>dpkg -i man-db_2.7.0.2-5_amd64.deb</userinput>
<computeroutput>(Reading database ... 86425 files and directories currently installed.)
Preparing to unpack man-db_2.7.0.2-5_amd64.deb ...
Unpacking man-db (2.7.0.2-5) over (2.7.0.2-4) ...
Setting up man-db (2.7.0.2-5) ...
Updating database of manual pages ...
Processing triggers for mime-support (3.58) ...</computeroutput>
</screen>
      </example>

      <para>We can see the different steps performed by
      <command>dpkg</command>; we know, thus, at what point any error may
      have occurred. The installation can also be effected in two stages:
      first unpacking, then configuration. <command>apt-get</command> takes
      advantage of this, limiting the number of calls to
      <command>dpkg</command> (since each call is costly, due to loading of
      the database in memory, especially the list of already installed
      files).</para>

      <example>
        <title>Osobne odpakowywanie i konfiguracja</title>

        <screen role="scale">
<computeroutput># </computeroutput><userinput>dpkg --unpack man-db_2.7.0.2-5_amd64.deb</userinput>
<computeroutput>(Reading database ... 86425 files and directories currently installed.)
Preparing to unpack man-db_2.7.0.2-5_amd64.deb ...
Unpacking man-db (2.7.0.2-5) over (2.7.0.2-5) ...
Processing triggers for mime-support (3.58) ...
# </computeroutput><userinput>dpkg --configure man-db</userinput>
<computeroutput>Setting up man-db (2.7.0.2-5) ...
Updating database of manual pages ...
</computeroutput>
</screen>
      </example>
      <indexterm><primary>pakiet</primary><secondary>odpakowywanie</secondary></indexterm>
      <indexterm><primary>odpakowywanie</primary><secondary>pakiet binarny</secondary></indexterm>

      <para>Sometimes <command>dpkg</command> will fail to install a
      package and return an error; if the user orders it to ignore this, it
      will only issue a warning; it is for this reason that we have the
      different <literal>--force-*</literal> options. The <command>dpkg
      --force-help</command> command, or documentation of this command,
      will give a complete list of these options. The most frequent error,
      which you are bound to encounter sooner or later, is a file
      collision. When a package contains a file that is already installed
      by another package, <command>dpkg</command> will refuse to install
      it. The following messages will then appear:</para>

      <screen>
<computeroutput>Unpacking libgdm (from .../libgdm_3.8.3-2_amd64.deb) ...
dpkg: error processing /var/cache/apt/archives/libgdm_3.8.3-2_amd64.deb (--unpack):
 trying to overwrite '/usr/bin/gdmflexiserver', which is also in package gdm3 3.4.1-9</computeroutput>
</screen>

      <para>In this case, if you think that replacing this file is not a
      significant risk to the stability of your system (which is usually
      the case), you can use the option
      <literal>--force-overwrite</literal>, which tells
      <command>dpkg</command> to ignore this error and overwrite the
      file.</para>

      <para>While there are many available <literal>--force-*</literal>
      options, only <literal>--force-overwrite</literal> is likely to be
      used regularly. These options only exist for exceptional situations,
      and it is better to leave them alone as much as possible in order to
      respect the rules imposed by the packaging mechanism. Do not forget,
      these rules ensure the consistency and stability of your
      system.</para>

      <sidebar>
        <title><emphasis>UWAGA</emphasis> Efektywne użycie <literal>--force-*</literal></title>
        <indexterm><primary>uszkodzona zależność</primary></indexterm>

	<para>If you are not careful, the use of an option
	<literal>--force-*</literal> can lead to a system where the APT
	family of commands will refuse to function. In effect, some of
	these options allow installation of a package when a dependency is
	not met, or when there is a conflict. The result is an inconsistent
	system from the point of view of dependencies, and the APT commands
	will refuse to execute any action except those that will bring
	the system back to a consistent state (this often consists of
	installing the missing dependency or removing a problematic
	package). This often results in a message like this one, obtained
	after installing a new version of <emphasis role="pkg">rdesktop</emphasis> while ignoring its dependency on a
	newer version of the <emphasis role="pkg">libc6</emphasis>:</para>

        <screen><computeroutput># </computeroutput><userinput>apt full-upgrade
</userinput><computeroutput>[...]
You might want to run 'apt-get -f install' to correct these.
The following packages have unmet dependencies:
  rdesktop: Depends: libc6 (&gt;= 2.5) but 2.3.6.ds1-13etch7 is installed
E: Unmet dependencies. Try using -f.</computeroutput></screen>

	<para>A courageous administrator who is certain of the correctness
	of their analysis may choose to ignore a dependency or conflict and
	use the corresponding <literal>--force-*</literal> option. In this
	case, if they want to be able to continue to use
	<command>apt</command> or <command>aptitude</command>, they
	must edit <filename>/var/lib/dpkg/status</filename> to
	delete/modify the dependency, or conflict, that they chose to
	override.</para>

	<para>This manipulation is an ugly hack, and should never be used,
	except in the most extreme case of necessity. Quite frequently, a
	more fitting solution is to recompile the package that's causing
	the problem (see <xref linkend="sect.rebuilding-package" />) or use
	a new version (potentially corrected) from a repository such as
	the <literal>stable-backports</literal> one (see <xref linkend="sect.backports" />).</para>
      </sidebar>
    </section>
    <section>
      <title>Usuwanie pakietu</title>
      <indexterm><primary>usuwanie pakietu</primary></indexterm>
      <indexterm><primary>całkowite usuwanie pakietu</primary></indexterm>
      <indexterm><primary>package</primary><secondary>removal</secondary></indexterm>
      <indexterm><primary>pakiet</primary><secondary>całkowite usuwanie</secondary></indexterm>

      <para>Invoking <command>dpkg</command> with the <literal>-r</literal>
      or <literal>--remove</literal> option, followed by the name of a
      package, removes that package. This removal is, however, not
      complete: all of the configuration files, maintainer scripts, log files
      (system logs) and other user data handled by the package remain. That
      way disabling the program is easily done by uninstalling it,
      and it's still possible to quickly reinstall it with the same
      configuration. To completely remove everything associated with a
      package, use the <literal>-P</literal> or <literal>--purge</literal>
      option, followed by the package name.</para>

      <example>
        <title>Removal and purge of the <emphasis role="pkg">debian-cd</emphasis> package</title>

        <screen><computeroutput># </computeroutput><userinput>dpkg -r debian-cd</userinput>
<computeroutput>(Reading database ... 97747 files and directories currently installed.)
Removing debian-cd (3.1.17) ...
# </computeroutput><userinput>dpkg -P debian-cd</userinput>
<computeroutput>(Reading database ... 97401 files and directories currently installed.)
Removing debian-cd (3.1.17) ...
Purging configuration files for debian-cd (3.1.17) ...</computeroutput>
</screen>
      </example>
    </section>
    <section>
      <title>Querying <command>dpkg</command>'s Database and Inspecting <filename>.deb</filename> Files</title>
      <indexterm><primary>pakiet</primary><secondary>stan</secondary></indexterm>
      <indexterm><primary>pakiet</primary><secondary>lista plików</secondary></indexterm>
      <indexterm><primary>package</primary><secondary>content inspection</secondary></indexterm>

      <sidebar>
        <title><emphasis>WRACAJĄC DO PODSTAW</emphasis> Składnia dla opcji</title>

	<para>Most options are available in a “long” version (one or
	more relevant words, preceded by a double dash) and a “short”
	version (a single letter, often the initial of one word from the
	long version, and preceded by a single dash). This convention is so
	common that it is a POSIX standard.</para>
      </sidebar>

      <para>Before concluding this section, we will study
      <command>dpkg</command> options that query the internal database in
      order to obtain information. Giving first the long options and then
      corresponding short options (that will evidently take the same
      possible arguments) we cite <literal>--listfiles
      <replaceable>package</replaceable></literal> (or
      <literal>-L</literal>), which lists the files installed by this
      package; <literal>--search <replaceable>file</replaceable></literal>
      (or <literal>-S</literal>), which finds the package(s) containing the
      file; <literal>--status
      <replaceable>package</replaceable></literal> (or
      <literal>-s</literal>), which displays the headers of an installed
      package; <literal>--list</literal> (or <literal>-l</literal>), which
      displays the list of packages known to the system and their
      installation status; <literal>--contents
      <replaceable>file.deb</replaceable></literal> (or
      <literal>-c</literal>), which lists the files in the Debian package
      specified; <literal>--info<replaceable> file.deb
      </replaceable></literal> (or <literal>-I</literal>), which displays
      the headers of this Debian package.</para>

      <example>
        <title>Różne zapytania z <command>dpkg</command></title>

        <screen role="scale" width="80">
<computeroutput>$ </computeroutput><userinput>dpkg -L base-passwd</userinput>
<computeroutput>/.
/usr
/usr/sbin
/usr/sbin/update-passwd
/usr/share
/usr/share/lintian
/usr/share/lintian/overrides
/usr/share/lintian/overrides/base-passwd
/usr/share/doc-base
/usr/share/doc-base/users-and-groups
/usr/share/base-passwd
/usr/share/base-passwd/group.master
/usr/share/base-passwd/passwd.master
/usr/share/man
/usr/share/man/pl
/usr/share/man/pl/man8
/usr/share/man/pl/man8/update-passwd.8.gz
/usr/share/man/ru
/usr/share/man/ru/man8
/usr/share/man/ru/man8/update-passwd.8.gz
/usr/share/man/ja
/usr/share/man/ja/man8
/usr/share/man/ja/man8/update-passwd.8.gz
/usr/share/man/fr
/usr/share/man/fr/man8
/usr/share/man/fr/man8/update-passwd.8.gz
/usr/share/man/es
/usr/share/man/es/man8
/usr/share/man/es/man8/update-passwd.8.gz
/usr/share/man/de
/usr/share/man/de/man8
/usr/share/man/de/man8/update-passwd.8.gz
/usr/share/man/man8
/usr/share/man/man8/update-passwd.8.gz
/usr/share/doc
/usr/share/doc/base-passwd
/usr/share/doc/base-passwd/users-and-groups.txt.gz
/usr/share/doc/base-passwd/changelog.gz
/usr/share/doc/base-passwd/copyright
/usr/share/doc/base-passwd/README
/usr/share/doc/base-passwd/users-and-groups.html
$ </computeroutput><userinput>dpkg -S /bin/date</userinput>
<computeroutput>coreutils: /bin/date
$ </computeroutput><userinput>dpkg -s coreutils</userinput>
<computeroutput>Package: coreutils
Essential: yes
Status: install ok installed
Priority: required
Section: utils
Installed-Size: 13855
Maintainer: Michael Stone &lt;mstone@debian.org&gt;
Architecture: amd64
Multi-Arch: foreign
Version: 8.23-3
Replaces: mktemp, realpath, timeout
Pre-Depends: libacl1 (&gt;= 2.2.51-8), libattr1 (&gt;= 1:2.4.46-8), libc6 (&gt;= 2.17), libselinux1 (&gt;= 2.1.13)
Conflicts: timeout
Description: GNU core utilities
 This package contains the basic file, shell and text manipulation
 utilities which are expected to exist on every operating system.
 .
 Specifically, this package includes:
 arch base64 basename cat chcon chgrp chmod chown chroot cksum comm cp
 csplit cut date dd df dir dircolors dirname du echo env expand expr
 factor false flock fmt fold groups head hostid id install join link ln
 logname ls md5sum mkdir mkfifo mknod mktemp mv nice nl nohup nproc numfmt
 od paste pathchk pinky pr printenv printf ptx pwd readlink realpath rm
 rmdir runcon sha*sum seq shred sleep sort split stat stty sum sync tac
 tail tee test timeout touch tr true truncate tsort tty uname unexpand
 uniq unlink users vdir wc who whoami yes
Homepage: http://gnu.org/software/coreutils
$ </computeroutput><userinput>dpkg -l 'b*'</userinput>
<computeroutput>Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                    Version          Architecture     Description
+++-=======================-================-================-====================================================
un  backupninja             &lt;none&gt;           &lt;none&gt;           (no description available)
ii  backuppc                3.3.0-2          amd64            high-performance, enterprise-grade system for backin
un  base                    &lt;none&gt;           &lt;none&gt;           (no description available)
un  base-config             &lt;none&gt;           &lt;none&gt;           (no description available)
ii  base-files              8                amd64            Debian base system miscellaneous files
ii  base-passwd             3.5.37           amd64            Debian base system master password and group files
[...]
$ </computeroutput><userinput>dpkg -c /var/cache/apt/archives/gnupg_1.4.18-6_amd64.deb</userinput>
<computeroutput>drwxr-xr-x root/root         0 2014-12-04 23:03 ./
drwxr-xr-x root/root         0 2014-12-04 23:03 ./lib/
drwxr-xr-x root/root         0 2014-12-04 23:03 ./lib/udev/
drwxr-xr-x root/root         0 2014-12-04 23:03 ./lib/udev/rules.d/
-rw-r--r-- root/root      2711 2014-12-04 23:03 ./lib/udev/rules.d/60-gnupg.rules
drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/
drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/lib/
drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/lib/gnupg/
-rwxr-xr-x root/root     39328 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_ldap
-rwxr-xr-x root/root     92872 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_hkp
-rwxr-xr-x root/root     47576 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_finger
-rwxr-xr-x root/root     84648 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_curl
-rwxr-xr-x root/root      3499 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_mailto
drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/bin/
-rwxr-xr-x root/root     60128 2014-12-04 23:03 ./usr/bin/gpgsplit
-rwxr-xr-x root/root   1012688 2014-12-04 23:03 ./usr/bin/gpg
[...]
$ </computeroutput><userinput>dpkg -I /var/cache/apt/archives/gnupg_1.4.18-6_amd64.deb</userinput>
<computeroutput> new debian package, version 2.0.
 size 1148362 bytes: control archive=3422 bytes.
    1264 bytes,    26 lines      control              
    4521 bytes,    65 lines      md5sums              
     479 bytes,    13 lines   *  postinst             #!/bin/sh
     473 bytes,    13 lines   *  preinst              #!/bin/sh
 Package: gnupg
 Version: 1.4.18-6
 Architecture: amd64
 Maintainer: Debian GnuPG-Maintainers &lt;pkg-gnupg-maint@lists.alioth.debian.org&gt;
 Installed-Size: 4888
 Depends: gpgv, libbz2-1.0, libc6 (&gt;= 2.15), libreadline6 (&gt;= 6.0), libusb-0.1-4 (&gt;= 2:0.1.12), zlib1g (&gt;= 1:1.1.4)
 Recommends: gnupg-curl, libldap-2.4-2 (&gt;= 2.4.7)
 Suggests: gnupg-doc, libpcsclite1, parcimonie, xloadimage | imagemagick | eog
 Section: utils
 Priority: important
 Multi-Arch: foreign
 Homepage: http://www.gnupg.org
 Description: GNU privacy guard - a free PGP replacement
  GnuPG is GNU's tool for secure communication and data storage.
  It can be used to encrypt data and to create digital signatures.
  It includes an advanced key management facility and is compliant
  with the proposed OpenPGP Internet standard as described in RFC 4880.
[...]</computeroutput>
</screen>
      </example>

      <sidebar>
        <title><emphasis>IDĄC DALEJ</emphasis> Porównywanie wersji</title>
        <indexterm><primary>wersja, porównanie</primary></indexterm>
        <indexterm><primary>porównywanie wersji</primary></indexterm>

	<para>Since <command>dpkg</command> is the program for handling
	Debian packages, it also provides the reference implementation of
	the logic of comparing version numbers. This is why it has a
	<literal>--compare-versions</literal> option, usable by external
	programs (especially configuration scripts executed by
	<command>dpkg</command> itself). This option requires three
	parameters: a version number, a comparison operator, and a second
	version number. The different possible operators are
	<literal>lt</literal> (strictly less than), <literal>le</literal>
	(less than or equal to), <literal>eq</literal> (equal),
	<literal>ne</literal> (not equal), <literal>ge</literal> (greater
	than or equal to), and <literal>gt</literal> (strictly greater
	than). If the comparison is correct, <command>dpkg</command> returns
	0 (success); if not, it gives a non-zero return
	value (indicating failure).</para>

        <screen>
<computeroutput>$ </computeroutput><userinput>dpkg --compare-versions 1.2-3 gt 1.1-4</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>0
$ </computeroutput><userinput>dpkg --compare-versions 1.2-3 lt 1.1-4</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>1
$ </computeroutput><userinput>dpkg --compare-versions 2.6.0pre3-1 lt 2.6.0-1</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>1</computeroutput>
</screen>

	<para>Note the unexpected failure of the last comparison: for
	<command>dpkg</command>, <literal>pre</literal>, usually denoting a
	pre-release, has no particular meaning, and this program compares
	the alphabetic characters in the same way as the numbers (a &lt; b
	&lt; c ...), in alphabetical order. This is why it considers
	“<literal>0pre3</literal>” to be greater than
	“<literal>0</literal>”. When we want a package's version number
	to indicate that it is a pre-release, we use the tilde character,
	“<literal>~</literal>”:</para>

        <screen>
<computeroutput>$ </computeroutput><userinput>dpkg --compare-versions 2.6.0~pre3-1 lt 2.6.0-1</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>0</computeroutput>
</screen>
      </sidebar>
    </section>
    <section>
      <title><command>dpkg</command>'s Log File</title>

      <para><command>dpkg</command> keeps a log of all of its actions in
      <filename>/var/log/dpkg.log</filename>. This log is extremely
      verbose, since it details every one of the stages through which
      packages handled by <command>dpkg</command> go. In addition to
      offering a way to track dpkg's behavior, it helps, above all, to keep
      a history of the development of the system: one can find the exact
      moment when each package has been installed or updated, and this
      information can be extremely useful in understanding a recent change
      in behavior. Additionally, all versions being recorded, it is easy to
      cross-check the information with the
      <filename>changelog.Debian.gz</filename> for packages in question, or
      even with online bug reports.</para>
    </section>
    <section id="sect.multi-arch">
      <title>Multi-Arch Support</title>
      <indexterm><primary>Multi-Arch</primary></indexterm>
      <indexterm><primary>architektura</primary><secondary>wsparcie wielu architektur</secondary></indexterm>

      <para>All Debian packages have an <literal>Architecture</literal>
      field in their control information. This field can contain either
      “<literal>all</literal>” (for packages that are architecture
      independent) or the name of the architecture that it targets (like
      “amd64”, “armhf”, …). In the latter case, by default,
      <command>dpkg</command> will only accept to install the package if
      its architecture matches the host's architecture as returned by
      <command>dpkg --print-architecture</command>.</para>

      <para>This restriction ensures that users do not end up with binaries
      compiled for an incorrect architecture. Everything would be perfect
      except that (some) computers can run binaries for multiple architectures,
      either natively (an “amd64“ system can run “i386” binaries) or through
      emulators.</para>
      
      <section>
        <title>Enabling Multi-Arch</title>
	<para><command>dpkg</command>'s multi-arch support allows
	users to define “foreign architectures” that can be installed
	on the current system. This is simply done with
	<command>dpkg --add-architecture</command> like in the example
	below. There is a corresponding <command>dpkg --remove-architecture</command>
	to drop support of a foreign architecture, but it can only be used
	when no packages of this architecture remain.</para>

	<screen>
<computeroutput># </computeroutput><userinput>dpkg --print-architecture</userinput>
<computeroutput>amd64
# </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput># </computeroutput><userinput>dpkg -i gcc-4.9-base_4.9.1-19_armhf.deb</userinput>
<computeroutput>dpkg: error processing archive gcc-4.9-base_4.9.1-19_armhf.deb (--install):
 package architecture (armhf) does not match system (amd64)
Errors were encountered while processing:
 gcc-4.9-base_4.9.1-19_armhf.deb
# </computeroutput><userinput>dpkg --add-architecture armhf</userinput>
<computeroutput># </computeroutput><userinput>dpkg --add-architecture armel</userinput>
<computeroutput># </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput>armhf
armel
# </computeroutput><userinput>dpkg -i gcc-4.9-base_4.9.1-19_armhf.deb</userinput>
<computeroutput>Selecting previously unselected package gcc-4.9-base:armhf.
(Reading database ... 86425 files and directories currently installed.)
Preparing to unpack gcc-4.9-base_4.9.1-19_armhf.deb ...
Unpacking gcc-4.9-base:armhf (4.9.1-19) ...
Setting up gcc-4.9-base:armhf (4.9.1-19) ...
# </computeroutput><userinput>dpkg --remove-architecture armhf</userinput>
<computeroutput>dpkg: error: cannot remove architecture 'armhf' currently in use by the database
# </computeroutput><userinput>dpkg --remove-architecture armel</userinput>
<computeroutput># </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput>armhf</computeroutput>
</screen>

	<sidebar>
	  <title><emphasis>NOTE</emphasis> APT's multi-arch support</title>
	  <para>APT will automatically detect when dpkg has been configured
	  to support foreign architectures and will start downloading the
	  corresponding <filename>Packages</filename> files durings its
	  update process.</para>
	  <para>Foreign packages can then be installed with <command>apt
	  install
	  <replaceable>package</replaceable>:<replaceable>architecture</replaceable></command>.</para>
	</sidebar>

	<sidebar>
	  <title><emphasis>IN PRACTICE</emphasis> Using proprietary i386 binaries on amd64</title>
	  <para>There are multiple use cases for multi-arch, but the most
	  popular one is the possibility to execute 32 bit binaries (i386)
	  on 64 bit systems (amd64), in particular since several popular
	  proprietary applications (like Skype) are only provided in 32 bit
	  versions.</para>
	</sidebar>
      </section>
      <section>
	<title>Multi-Arch Related Changes</title>

	<para>To make multi-arch actually useful and usable, libraries had to
	be repackaged and moved to an architecture-specific directory so that
	multiple copies (targeting different architectures) can be installed
	alongside. Such updated packages contain the “<literal>Multi-Arch:
	same</literal>” header field to tell the packaging system that the
	various architectures of the package can be safely co-installed (and
	that those packages can only satisfy dependencies of packages of the
	same architecture). Since multi-arch made its debut in Debian
	<emphasis role="distribution">Wheezy</emphasis>,
	not all libraries have been converted yet.
	</para>

	<screen><computeroutput>$ </computeroutput><userinput>dpkg -s gcc-4.9-base
</userinput><computeroutput>dpkg-query: error: --status needs a valid package name but 'gcc-4.9-base' is not: ambiguous package name 'gcc-4.9-base' with more than one installed instance

Use --help for help about querying packages.
$ </computeroutput><userinput>dpkg -s gcc-4.9-base:amd64 gcc-4.9-base:armhf | grep ^Multi
</userinput><computeroutput>Multi-Arch: same
Multi-Arch: same
$ </computeroutput><userinput>dpkg -L libgcc1:amd64 |grep .so
</userinput><computeroutput>/lib/x86_64-linux-gnu/libgcc_s.so.1
$ </computeroutput><userinput>dpkg -S /usr/share/doc/gcc-4.9-base/copyright
</userinput><computeroutput>gcc-4.9-base:amd64, gcc-4.9-base:armhf: /usr/share/doc/gcc-4.9-base/copyright
</computeroutput></screen>

	<para>It is worth noting that <literal>Multi-Arch: same</literal> packages
	must have their names qualified with their architecture to be unambiguously
	identifiable. They also have the possibility to share files with other
	instances of the same package; <command>dpkg</command> ensures that all
	packages have bit-for-bit identical files when they are shared. Last but
	not least, all instances of a package must have the same version. They must
	thus be upgraded together.
	</para>

	<para>Multi-Arch support also brings some interesting challenges in
	the way dependencies are handled. Satisfying a dependency requires
	either a package marked “<literal>Multi-Arch: foreign</literal>” or a
	package whose architecture matches the one of the package declaring
	the dependency (in this dependency resolution process,
	architecture-independent packages are assumed to be of the same
	architecture than the host). A dependency can also be weakened
	to allow any architecture to fulfill it, with the
	<literal><replaceable>package</replaceable>:any</literal> syntax, but
	foreign packages can only satisfy such a dependency if they
	are marked “<literal>Multi-Arch: allowed</literal>”.</para>
      </section>
    </section>
  </section>
  <section id="sect.coexistence-with-other-packaging-systems">
    <title>Współistnienie z innymi systemami pakietowania</title>
    <indexterm><primary>RPM</primary></indexterm>
    <indexterm><primary>Red Hat Package Manager</primary></indexterm>
    <indexterm><primary><command>alien</command></primary></indexterm>

    <para>Pakiety Debiana nie są jedynymi pakietami używanymi w świecie Wolnego oprogramowania. Głównym konkurentem jest format RPM używany w dystrybucji Red Hat Linuks i jego pochodnych. Red Hat jest bardzo popularną, komercyjną dystrybucją. Z tego powodu oprogramowanie dostarczane przez inne firmy często jest oferowane jako pakiety RPM, a nie Debiana.</para>

    <para>W tym przypadku należy zdawać sobie sprawę, że program <command>rpm</command>, obsługujący pakiety RPM, jest dostępny jako pakiet Debiana, więc możliwe jest używanie tego formatu pakietów w Debianie. Niemniej jednak trzeba uważać i ograniczyć te manipulacje do wydobycia informacji z pakietu lub sprawdzenia jego spójności. Prawdę mówiąc, używanie <command>rpm</command> do instalacji RPM w Debianie jest nierozsądne; RPM używa własnej bazy danych, oddzielnej od rodzimego oprogramowania (takiego jak <command>dpkg</command>). Z tego powodu zapewnienie współistnienia dwóch systemów pakietowania jest niemożliwe.</para>

    <para>Z drugiej strony, narzędzie <emphasis role="pkg">alien</emphasis> pozwala konwertować pakiety RPM na pakiety Debiana i vice versa.</para>

    <sidebar>
      <title><emphasis>SPOŁECZNOŚĆ</emphasis> Zachęcanie do przyjęcia <filename>.deb</filename></title>

      <para>If you regularly use the <command>alien</command> program to
      install RPM packages coming from one of your providers, do not
      hesitate to write to them and amicably express your strong preference
      for the <filename>.deb</filename> format. Note that the format of the
      package is not everything: a <filename>.deb</filename> package built
      with <command>alien</command> or prepared for a version of Debian
      different than that which you use, or even for a derivative distribution
      like Ubuntu, would probably not offer the same level of quality and
      integration as a package specifically developed for Debian <emphasis role="distribution">Jessie</emphasis>.</para>
    </sidebar>

    <screen>
<computeroutput>$ </computeroutput><userinput>fakeroot alien --to-deb phpMyAdmin-2.0.5-2.noarch.rpm</userinput> 
<computeroutput>phpmyadmin_2.0.5-2_all.deb generated
$ </computeroutput><userinput>ls -s phpmyadmin_2.0.5-2_all.deb</userinput>
<computeroutput>  64 phpmyadmin_2.0.5-2_all.deb</computeroutput>
</screen>

    <para>You will find that this process is extremely simple. You must
    know, however, that the package generated does not have any dependency
    information, since the dependencies in the two packaging formats
    don't have systematic correspondence. The administrator must thus
    manually ensure that the converted package will function correctly, and
    this is why Debian packages thus generated should be avoided as much as
    possible. Fortunately, Debian has the largest collection of software
    packages of all distributions, and it is likely that whatever you seek
    is already in there.</para>

    <para>Looking at the man page for the <command>alien</command> command,
    you will also note that this program handles other packaging
    formats, especially the one used by the Slackware distribution (it is made of a
    simple <filename>tar.gz</filename> archive).</para>

    <para>The stability of the software deployed using the
    <command>dpkg</command> tool contributes to Debian's fame. The APT
    suite of tools, described in the following chapter, preserves this
    advantage, while relieving the administrator from managing the status
    of packages, a necessary but difficult task.</para>
  </section>
</chapter>
