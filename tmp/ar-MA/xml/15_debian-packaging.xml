<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="debian-packaging" lang="ar-MA">
	<chapterinfo>
		 <keywordset>
			<keyword>نقل خلفي</keyword>
			 <keyword>إعادة بناء</keyword>
			 <keyword>حزمة مصدرية</keyword>
			 <keyword>أرشيف</keyword>
			 <keyword>حزمة فوقية</keyword>
			 <keyword>مطور دبيان</keyword>
			 <keyword>مشرف</keyword>

		</keywordset>

	</chapterinfo>
	 <title>إنشاء حزمة دبيان</title>
	 <highlights> <para>
		من الشائع جداً، بين مديري النظم الذين يتعاملون مع حزم دبيان بشكل منتظم، أن يصلوا إلى مرحلة يحتاجون فيها لإنشاء حزم خاصة بهم، أو لتعديل حزمة سابقة. يهدف هذا الفصل للإجابة عن أكثر الأسئلة شيوعاً في هذا المجال، وتقديم العناصر اللازمة للاستفادة من بنية دبيان التحتية بأفضل طريقة ممكنة. ومع بعض الحظ، قد تشعر ‒بعد تجربة مهاراتك في الحزم المحلية‒ بالحاجة للغوص أكثر من ذلك وتنضم لمشروع دبيان نفسه!
	</para>
	 </highlights> <section id="sect.rebuilding-package">
		<title>إعادة بناء حزمة من المصدر</title>
		 <para>
			تحتاج إعادة بناء حزمة ثنائية في عدد من الظروف. في بعض الحالات، يحتاج مدير النظام ميزة برمجية تتطلب ترجمة البرنامج من المصدر، مع استخدام خيار ترجمة معين؛ وفي حالات أخرى، لا يكون البرنامج المُحزَّم في النسخة المُبّتة من دبيان حديثاً بما يكفي. في الحالة الأخيرة، سيعمد مدير النظام عادة لبناء حزمة جديدة مأخوذة من نسخة دبيان أحدث — مثل <emphasis role="distribution">الاختبارية</emphasis> أو حتى <emphasis role="distribution">غير المستقرة</emphasis> — بحيث تعمل هذه الحزمة الجديدة في توزيعته <emphasis role="distribution">المستقرة</emphasis>؛ تدعى هذه العملية ”بالنقل الخلفي“ (backporting). كالعادة، عليك الانتباه، قبل أن تجري هذه المهمة، إلى التحقق من أن أحداً لم يسبقك إليها — نظرة سريعة على صفحة متتبع حزم دبيان الخاصة بتلك الحزمة ستعطيك هذه المعلومة. <ulink type="block" url="https://tracker.debian.org/" /> <indexterm><primary>نقل خلفي</primary></indexterm>
		</para>
		 <section>
			<title>الحصول على المصادر</title>
			 <para>
				تبدأ إعادة بناء حزمة دبيان بالحصول على الشفرة المصدرية. أسهل طريقة هي استخدام الأمر <command>apt-get source <replaceable>source-package-name</replaceable></command>. يحتاج هذا الأمر لإضافة سطر <literal>deb-src</literal> في الملف <filename dir="ltr">/etc/apt/sources.list</filename>، وتحديث ملف الفهارس (عبر <command>apt-get update</command>). يجب أن تكون هذه الشروط محققة مسبقاً إذا اتبعت التعليمات من الفصل الذي يتحدث عن إعدادات APT (انظر <xref linkend="sect.apt-sources.list" />). لكن لاحظ أنك سوف تنزّل الحزم المصدرية من نسخة دبيان المحددة في سطر <literal>deb-src</literal>. إذا كنت تريد الحصول عليها من نسخة دبيان أخرى، قد تضطر لتنزيلها يدوياً من مرآة دبيان أو من موقع الوب. هذا يعني تنزيل ملفين أو ثلاثة (امتداداتها <filename dir="ltr">*.dsc</filename> — أي <emphasis>Debian Source Control</emphasis> — و <filename dir="ltr">*.tar.<replaceable>comp</replaceable></filename> وأحياناً <filename dir="ltr">*.diff.gz</filename> أو <filename dir="ltr">*.debian.tar.<replaceable>comp</replaceable></filename> — حيث تأخذ <replaceable>comp</replaceable> إحدى القيم <literal>gz</literal>، ‏<literal>bz2</literal> أو <literal>xz</literal> حسب أداة الضغط المستخدمة)، بعدها استدعاء الأمر <command>dpkg-source -x <replaceable>file.dsc</replaceable></command>. إذا كان الوصول للملف <filename dir="ltr">*.dsc</filename> ممكناً بشكل مباشر من عنوان URL، فيمكنك استخدام طريقة أبسط من هذه للحصول على جميع الملفات، وهي استخدام الأمر <command>dget <replaceable>URL</replaceable></command>. يجلب هذا الأمر (الذي تجده في الحزمة <emphasis role="pkg">devscripts</emphasis>) ملف <filename dir="ltr">*.dsc</filename> من العنوان المحدد، بعدها يحلل محتوياته، ويحضر الملف أو الملفات التي يشار إليها فيه. بعد تنزيل كل شيء، سوف يفك الضغط عن الحزمة المصدرية (ما لم تستخدم الخيار <literal dir="ltr">-d</literal> أو <literal dir="ltr">--download-only</literal>).
			</para>

		</section>
		 <section>
			<title>إجراء التغييرات</title>
			 <para>
				أصبح مصدر الحزمة متوفراً الآن في مجلد اسمه يتألف من اسم الحزمة المصدرية وإصدارها (مثلاً، <emphasis>samba-4.1.17+dfsg</emphasis>)؛ سنجري تعديلاتنا المحلية في هذا المجلد.
			</para>
			 <para>
				أول شيء تفعله هو تغيير رقم إصدار الحزمة، حتى تميّز الحزم المعاد بناؤها عن الحزم الأصلية التي توفرها دبيان. على فرض أن الإصدار الحالي هو <literal dir="ltr">2:4.1.17+dfsg-2</literal>، يمكننا إنشاء الإصدار <literal>2:4.1.17+dfsg-2falcot1</literal>، الذي يبيّن منشأ الحزمة بوضوح. هذا يجعل رقم إصدار الحزمة أعلى من الإصدار الذي توفره دبيان، بحيث يمكن تثبيت الحزمة بسهولة كتحديث للحزمة الأصلية. أفضل طريقة جراء هذا التغيير هي استخدام الأمر <command>dch</command>‏ (<emphasis>Debian CHangelog</emphasis>) من الحزمة <emphasis role="pkg">devscripts</emphasis>، عبر استدعائه بالشكل <command>dch --local falcot</command> مثلاً. سيستدعي هذا الأمر محرر نصوص (<command>sensible-editor</command> — يجب أن يكون هذا محررك الافتراضي إذا كان مذكوراً في أحد متغيري البيئة <varname>VISUAL</varname> أو <varname>EDITOR</varname> ، وإلا فسوف يستدعى المحرر الافتراضي) ليسمح لك بتوثيق الاختلاف الذي تقدمه هذه الإصدارة. يظهر لنا هذا المحرر أن <command>dch</command> قد غيّر <filename>debian/changelog</filename> بالفعل.
			</para>
			 <para>
				عندما تحتاج تغيير خيارات البناء، يجب إجراء التغيير في <filename>debian/rules</filename>، الذي يقود الخطوات المختلفة في عملية بناء الحزمة. في أبسط الحالات، ستجد السطور التي تتعلق بالإعدادات الافتراضية (<literal dir="ltr">./configure …</literal>) أو عملية البناء الفعلية (<literal dir="ltr">$(MAKE) …</literal> or <literal>make …</literal>) بسهولة. إذا لم تُستَدعى هذه الأوامر صراحة، فالأغلب أن هناك أمر صريح آخر يستدعيها، وفي تلك الحالة عليك الرجوع إلى وثائق تلك الأوامر حتى تعرف طريقة تغيير السلوك الافتراضي. قد تحتاج في الحزم التي تستخدم الأمر <command>dh</command> لتعديل سلوك الأمرين <command>dh_auto_configure</command> و<command>dh_auto_build</command> (انظر صفحات الدليل الخاصة بهما لمعرفة طريقة عمل هذا).
			</para>
			 <para>
				قد تحتاج تحديث الملف <filename>debian/control</filename> أيضاً اعتماداً على طبيعة التغييرات المحلية التي أجريتها على الحزمة، يحوي هذا الملف وصفاً للحزم المولّدة. على وجه الخصوص، يحوي هذا الملف سطور <literal>Build-Depends</literal> تتحكم بقائمة الاعتماديات التي يجب تلبيتها عند بناء الحزمة. تشير هذه الاعتماديات غالباً إلى نسخ الحزم الموجودة في التوزيعة التي أتت منها الحزمة المصدرية، لكنها قد لا تكون متوفرة في التوزيعة المستخدمة للبناء. لا توجد طريقة مؤتمتة تبيّن هل الاعتمادية حقيقية أم أنها محددة فقط لضمان محاولة البناء باستخدام آخر نسخة من المكتبة — هذه هي الطريقة الوحيدة المتاحة لإجبار البانيات الآلية (<emphasis>autobuilder</emphasis>) على استخدام نسخة معينة من الحزمة أثناء البناء، لذلك يستخدم مشرفو دبيان في كثير من الأحيان اعتماديات لها أرقام محددة.
			</para>
			 <para>
				إذا كنت متأكداً أن هذه الاعتماديات صارمة أكثر من اللازم، يمكنك تخفيفها محلياً. ستساعدك قراءة الملفات التي توثق الطريقة المعيارية لبناء البرنامج — هذه الملفات تدعى <filename>INSTALL</filename> غالباً — على معرفة الاعتماديات المناسبة. في الحالة المثالية، يجب أن تتمكن من تلبية الاعتماديات ضمن التوزيعة المستخدمة للبناء؛ إذا لم تتمكن من ذلك، ستبدأ عملية تعاودية، حيث يجب نقل الحزم المذكورة في الحقل <literal>Build-Depends</literal> خلفاً قبل أن تتمكن من نقل الحزمة المستهدفة. قد لا تحتاج بعض الحزم أن تنقلها خلفياً، ويمكن تثبيتها كما هي أثناء عملية البناء (إحدى الأمثلة البارزة هي <emphasis role="pkg">debhelper</emphasis>). لاحظ أن عملية النقل الخلفي قد تتعقد سريعاً إذا لم تكن حذراً. لذلك، يجب تقليل المنقولات الخلفية إلى أقل ما يمكن.
			</para>
			 <sidebar> <title><emphasis>تلميح</emphasis> تثبيت <literal>Build-Depends</literal></title>
			 <indexterm>
				<primary><literal>Build-Depends</literal>، حقل تحكم</primary>
			</indexterm>
			 <para>
				تسمح <command>apt-get</command> بتثبيت كل الحزم المذكورة في حقول <literal>Build-Depends</literal> في حزمة مصدرية ما متوفرة في توزيعة مذكورة في سطر <literal>deb-src</literal> في الملف <filename dir="ltr">/etc/apt/sources.list</filename>. كل ما تحتاجه هو استدعاء الأمر <command>apt-get build-dep <replaceable>source-package</replaceable></command>.
			</para>
			 </sidebar>
		</section>
		 <section>
			<title>بدء إعادة البناء</title>
			 <para>
				بعد تطبيق كل التغييرات التي تحتاجها إلى الكود المصدري، يمكننا توليد الحزمة الثنائية (ملف <filename dir="ltr">.deb</filename>). يدير الأمر <command>dpkg-buildpackage</command> العملية كلها.
			</para>
			 <example>
				<title>إعادة بناء حزمة</title>
				 
<screen><computeroutput>$ </computeroutput><userinput>dpkg-buildpackage -us -uc
</userinput><computeroutput>[...]
</computeroutput></screen>

			</example>
			 <sidebar id="sidebar.fakeroot"> <title><emphasis>أدوات</emphasis> <command>fakeroot</command></title>
			 <para>
				في الحقيقة، عملية إنشاء الحزم ما هي إلا تجميع لمجموعة ملفات سابقة (أو مبنية) في أرشيف واحد؛ ينتهي الحال بمعظم الملفات داخل الأرشيف بأن تصبح ملكاً للمستخدم <emphasis>root</emphasis>. لكن بناء الحزمة بالكامل تحت صلاحيات هذا المستخدم يعني زيادة المخاطر؛ لحسن الحظ، يمكنك تفادي ذلك باستخدام الأمر <command>fakeroot</command>. يمكن استخدام هذه الأداة لتشغيل برنامج وإعطائه انطباعاً أنه يعمل بصلاحيات <emphasis>root</emphasis> وينشئ ملفات لها ملكية وصلاحيات كيفيّة. عندما ينشئ البرنامج الأرشيف الذي سيصبح حزمة دبيان، سوف يخدع وينشئ أرشيفاً يحوي ملفات تنتمي لمالكين غير محددين، بما فيهم <emphasis>root</emphasis>. هذه العملية مريحة جداً لدرجة أن <command>dpkg-buildpackage</command> يستخدم <command>fakeroot</command> افتراضياً عند بناء الحزم.
			</para>
			 <para>
				لاحظ أن البرنامج يخدع فقط حتى ”يصدق“ أنه يعمل بصلاحيات حساب إداري، لكن العملية تعمل فعلياً تحت صلاحيات المستخدم الحالي الذي استدعى <command>fakeroot <replaceable>program</replaceable></command> (وسوف تنشأ الملفات في الحقيقة بصلاحيات ذلك المستخدم). لا تمنح أي صلاحيات إدارية يستطيع البرنامج إساءة استخدامها نهائياً.
			</para>
			 </sidebar> <para>
				قد يفشل الأمر السابق إذا لم تُحدَّث حقول <literal>Build-Depends</literal>، أو إذا لم تُثبَّت الحزم المناسبة. في هذه الحالات، يمكن تجاوز عملية التحقق عبر تمرير الخيار <literal dir="ltr">-d</literal> إلى <command>dpkg-buildpackage</command>. لكن تجاهل هذه الاعتماديات صراحة يعرضك لخطر إخفاق عملية البناء في مرحلة لاحقة. وأسوأ من ذلك، قد يبدو أن الحزمة تبنى بشكل صحيح لكنها لا تعمل بشكل سليم لاحقاً: فبعض البرامج تعطّل بعض مزاياها آلياً إذا لم تعثر على إحدى المكتبات المطلوبة أثناء البناء.
			</para>
			 <para>
				في معظم الأحيان، يستخدم مطورو دبيان برنامجاً عالي المستوى مثل <command>debuild</command>؛ الذي يستدعي <command>dpkg-buildpackage</command> كالعادة لكنه يضيف أيضاً استدعاءً لبرنامج يجري عدة فحوصات للتحقق من اتفاق الحزم المولّدة مع سياسة دبيان. كما يُنظِّف هذا السكربت البيئة بحيث لا ”تُلوّث“ متغيرات البيئة المحلية عملية بناء الحزمة. الأمر <command>debuild</command> هو أحد الأدوات من المجموعة <emphasis>devscripts</emphasis>، التي تتناسق مع بعضها وتشترك في بعض الإعدادات حتى تسهِّل مهمة مشرف الحزمة.
			</para>
			 <sidebar> <title><emphasis>نظرة سريعة</emphasis> <command>pbuilder</command></title>
			 <indexterm>
				<primary><command>pbuilder</command></primary>
			</indexterm>
			 <para>
				يسمح البرنامج <command>pbuilder</command> (في الحزمة ذات الاسم نفسه) ببناء حزمة دبيان في بيئة لها جذر مختلف (<emphasis>chrooted</emphasis> environment). ينشئ البرنامج أولاً مجلداً مؤقتاً يحوي النظام المصغر اللازم لبناء الحزمة (يتضمن الحزم المذكورة في <emphasis>Build-Depends</emphasis> أيضاً). بعدها يستخدم هذا المجلد كمجلد جذر (<filename>/</filename>) أثناء عملية البناء، وذلك باستخدام الأمر <command>chroot</command>.
			</para>
			 <para>
				تسمح هذه الأداة بإجراء عملية البناء في بيئة لم تمسها تعديلات المستخدمين. يسمح هذا باكتشاف اعتماديات البناء المفقودة فوراً (لأن البناء لن ينجح ما لم تكن الاعتماديات المناسبة موثقة). أخيراً، تسمح هذه الأداة أيضاً ببناء حزمة لنسخة دبيان تختلف عن النسخة التي يستخدمها النظام ككل: فقد يستخدم الجهاز دبيان <emphasis role="distribution">المستقرة</emphasis> في أعماله العادية، وتستطيع <command>pbuilder</command> على الجهاز نفسه استخدام <emphasis role="distribution">غير المستقرة</emphasis> لبناء الحزم.
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.building-first-package">
		<title>بناء حزمتك الأولى</title>
		 <section>
			<title>الحزم الفوقية أو الحزم الزائفة</title>
			 <para>
				تتشابه الحزم الزائفة (fake packages) مع الحزم الفوقية (meta-packages) من ناحية أن كلاً منها عبارة عن قواقع فارغة تستخدم فقط للاستفادة من تأثير بياناتها الفوقية على عملية معالجة الحزم.
			</para>
			 <para>
				الهدف من الحزم الزائفة هو خداع <command>dpkg</command> و<command>apt</command> حتى يظنّان أن بعض الحزم مثبتة، رغم أنها ليست في الحقيقة إلا قواقع فارغة. هذا يسمح بتلبية اعتماديات حزمة ما عندما يكون البرنامج المطلوب مُثبّتاً خارج مدى نظام الحزم. هذه الطريقة ناجحة، لكن يجب تفاديها قدر الإمكان، لأنه لا يُضمَن أن يعمل البرنامج المُثبّت يدوياً مثل عمل الحزمة الموافقة له تماماً، وقد لا تعمل الحزم الأخرى التي تعتمد عليه بشكل سليم.
			</para>
			 <para>
				من ناحية اخرى، تُمثّل الحزمة الفوقية مجموعة اعتماديات غالباً، حيث ينتج عن تثبيت الحزمة الفوقية تثبيت مجموعة من الحزم الأخرى بنقلة واحدة.
			</para>
			 <para>
				يمكن إنشاء هذين النوعين من الحزم باستخدام الأمرين <command>equivs-control</command> و<command>equivs-build</command> (من الحزمة <emphasis role="pkg">equivs</emphasis>)، ينشئ الأمر <command>equivs-control</command> ملف ترويسة حزمة دبيان يجب تعديله حتى يحوي اسم الحزمة المنشأة، ورقم إصدارها، واسم مشرفها، واعتمادياتها، ووصفها. الحقول الأخرى التي لا تملك قيماً افتراضية ليست إلزامية ويمكن حذفها. الحقول <literal>Copyright</literal> و<literal>Changelog</literal> و<literal>Readme</literal> و<literal>Extra-Files</literal> ليست حقولاً معيارية في في حزم دبيان؛ لا معنى لهذه الحقول خارج نطاق <command>equivs-build</command>، وسوف تُحذَف من ترويسات الحزم المولّدة.
			</para>
			 <example>
				<title>ملف ترويسة الحزمة الزائفة <emphasis>libxml-libxml-perl</emphasis></title>
				 
<programlisting>
Section: perl
Priority: optional
Standards-Version: 3.9.6

Package: libxml-libxml-perl
Version: 2.0116-1
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Depends: libxml2 (&gt;= 2.7.4)
Architecture: all
Description: Fake package - module manually installed in site_perl
 This is a fake package to let the packaging system
 believe that this Debian package is installed. 
 .
 In fact, the package is not installed since a newer version
 of the module has been manually compiled &amp; installed in the
 site_perl directory.</programlisting>

			</example>
			 <para>
				الخطوة التالية هي توليد حزمة دبيان باستخدام الأمر <command>equivs-build <replaceable>file</replaceable></command>. تهانينا: أُنشِئَت الحزمة في المجلد الحالي ويمكن التعامل معها مثل أي حزمة دبيان أخرى.
			</para>

		</section>
		 <section>
			<title>أرشيف ملفات بسيط</title>
			 <para>
				يحتاج مديرو النظم في شركة فلكوت إنشاء حزمة دبيان لتسهيل نشر مجموعة مستندات على عدد كبير من الأجهزة. بدأ مدير النظم المسؤول عن هذه المهمة بقراءة ”New Maintainer's Guide“ (دليل المشرف الجديد)، ثم شرع يعمل على حزمته الأولى. <ulink type="block" url="https://www.debian.org/doc/manuals/maint-guide/" />
			</para>
			 <para>
				الخطوة الأولى هي إنشاء مجلد بالاسم <filename>falcot-data-1.0</filename> لتخزين الحزمة المصدرية. سوف تُسمّى الحزمة ‒منطقياً‒ <literal>falcot-data</literal> وستحمل رقم الإصدار <literal>1.0</literal>. بعدها يضع مدير النظام المستندات في المجلد الفرعي <filename>data</filename>. ثم يستدعي الأمر <command>dh_make</command> (من الحزمة <emphasis role="pkg">dh-make</emphasis>) لإضافة الملفات اللازمة لعملية توليد الحزمة، التي ستحفظ جميعاً في المجلد الفرعي <filename>debian</filename>:
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>cd falcot-data-1.0</userinput>
<computeroutput>$ </computeroutput><userinput>dh_make --native</userinput>
<computeroutput>
Type of package: single binary, indep binary, multiple binary, library, kernel module, kernel patch?
 [s/i/m/l/k/n] </computeroutput><userinput>i</userinput>
<computeroutput>
Maintainer name : Raphael Hertzog
Email-Address   : hertzog@debian.org
Date            : Fri, 04 Sep 2015 12:09:39 -0400
Package Name    : falcot-data
Version         : 1.0
License         : gpl3
Type of Package : Independent
Hit &lt;enter&gt; to confirm:
Currently there is no top level Makefile. This may require additional tuning.
Done. Please edit the files in the debian/ subdirectory now. You should also
check that the falcot-data Makefiles install into $DESTDIR and not in / .
$</computeroutput></screen>
			 <para>
				يُبيِّن النوع المحدد للحزمة (<emphasis>indep binary</emphasis>) أن هذه الحزمة المصدرية ستولد حزمة ثنائية واحدة مشتركة بين كافة المعماريات (<literal>Architecture: all</literal>). أما <emphasis>single binary</emphasis> فيعمل بشكل معاكس، وينتج حزمة ثنائية واحدة مرتبطة بالمعمارية المستهدفة (<literal>Architecture: any</literal>). في هذه الحالة، الخيار الأول أنسب لأن الحزمة تحوي مستندات فقط ولا تحوي أي برامج تنفيذية، لذلك يمكن استخدامها كما هي على الحواسيب ذات المعماريات المختلفة.
			</para>
			 <indexterm>
				<primary>أنواع الحزم</primary>
			</indexterm>
			 <indexterm>
				<primary>حزمة</primary>
				<secondary>أنواع</secondary>
			</indexterm>
			 <para>
				النوع <emphasis>multiple binary</emphasis> مخصص للحزم المصدرية التي تنتج عدة حزم ثنائية. أما الحالة الخاصة، <emphasis>library</emphasis>، فتفيد مع المكتبات المشتركة، لأنها يجب أن تتقيد بشروط تحزيم صارمة، وكذلك النوع <emphasis>kernel module</emphasis> أو <emphasis>kernel patch</emphasis>، الذي يجب أن يستعمل فقط مع الحزم التي تحوي وحدات للنواة.
			</para>
			 <sidebar> <title><emphasis>تلميح</emphasis> اسم المشرف وعنوان بريده الإلكتروني</title>
			 <para>
				معظم البرامج التي تعمل في مجال صيانة الحزم تبحث عن اسمك وعنوان بريدك الإلكتروني في متغيرات البيئة <varname>DEBFULLNAME</varname> و <varname>DEBEMAIL</varname> أو <varname>EMAIL</varname>. إذا عرّفتَ هذه المتغيرات بشكل دائم فسترتاح من عناء كتابتها عدة مرات. إذا كنت تستخدم صدفة <command>bash</command>، يكفي إضافة السطرين التاليين إلى الملف <filename dir="ltr">~/.bashrc</filename> (عليك طبعاً استبدال القيم بما يناسب!):
			</para>
			 
<programlisting>
export EMAIL="hertzog@debian.org"
export DEBFULLNAME="Raphael Hertzog"
</programlisting>
			 </sidebar> <para>
				أنشأ الأمر <command>dh_make</command> مجلداً فرعياً بالاسم <filename>debian</filename> يحوي ملفات عديدة. بعض هذه الملفات ضروري، خصوصاً <filename>rules</filename> و<filename>control</filename> و<filename>changelog</filename> و<filename>copyright</filename>. أما الملفات ذات اللاحقة <filename dir="ltr">.ex</filename> فهي أمثلة يمكن استخدامها بعد تعديلها (وإزالة اللاحقة) إذا كانت تناسبك. أما إذا لم تكن بحاجة لها، فعليك إزالتها. لكن حافظ على الملف <filename>compat</filename>، لأنه يلزم لعمل مجموعة برامج <emphasis>debhelper</emphasis> (كلها تبدأ أسماؤها بالبادئة <command dir="ltr">dh_</command>) بشكل صحيح، التي تستخدم في المراحل المختلفة من عملية بناء الحزمة.
			</para>
			 <para>
				يجب أن يحوي الملف <filename>copyright</filename> معلومات عن مؤلفي المستندات المضمنة في الحزمة، والرخصة الخاصة بها. في حالتنا، هذه المستندات داخلية، واستخدمها محصور ضمن شركة فلكوت. ملف <filename>changelog</filename> الافتراضي مناسب عموماً؛ يكفي استبدال ”Initial release“ بشرح أوضح وتغيير التوزيعة من <literal>unstable</literal> إلى <literal>internal</literal>. لقد عدلنا ملف <filename>control</filename> أيضاً: حيث غيرنا القسم في حقل <literal>Section</literal> إلى <emphasis>misc</emphasis> وحذفنا الحقول <literal>Homepage</literal> و<literal>Vcs-Git</literal> و<literal>Vcs-Browser</literal>. ثم أتممنا الحقل <literal>Depends</literal> بكتابة <literal>iceweasel | www-browser</literal> حتى نضمن توفر متصفح وب قادر على عرض المستندات في الحزمة.
			</para>
			 <example>
				<title>ملف <filename>control</filename></title>
				 
<programlisting>
Source: falcot-data
Section: misc
Priority: optional
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Build-Depends: debhelper (&gt;= 9)
Standards-Version: 3.9.5

Package: falcot-data
Architecture: all
Depends: iceweasel | www-browser, ${misc:Depends}
Description: Internal Falcot Corp Documentation
 This package provides several documents describing the internal
 structure at Falcot Corp.  This includes:
  - organization diagram
  - contacts for each department.
 .
 These documents MUST NOT leave the company.
 Their use is INTERNAL ONLY.</programlisting>

			</example>
			 <example>
				<title>ملف <filename>changelog</filename></title>
				 
<programlisting>
falcot-data (1.0) internal; urgency=low

  * Initial Release.
  * Let's start with few documents:
    - internal company structure;
    - contacts for each department.

 -- Raphael Hertzog &lt;hertzog@debian.org&gt;  Fri, 04 Sep 2015 12:09:39 -0400</programlisting>

			</example>
			 <example>
				<title>ملف <filename>copyright</filename></title>
				 
<programlisting>
Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: falcot-data

Files: *
Copyright: 2004-2015 Falcot Corp
License: 
 All rights reserved.</programlisting>

			</example>
			 <sidebar> <title><emphasis>أساسيات</emphasis> ملف <filename>Makefile</filename></title>
			 <indexterm>
				<primary><filename>Makefile</filename></primary>
			</indexterm>
			 <para>
				ملف <filename>Makefile</filename> هو سكربت يستخدمه البرنامج <command>make</command>؛ يُحدّد هذا السكربت قواعد بناء مجموعة من الملفات تنتج عن شجرة اعتماديات (مثلاً، يمكن بناء برنامج من ترجمة مجموعة من الملفات المصدرية). يحدد ملف <filename>Makefile</filename> هذه القواعد بالصيغة االتالية:
			</para>
			 
<programlisting>
target: source1 source2 ...
        command1
        command2
</programlisting>
			 <para>
				تفسير هذه القواعد كالتالي: إذا كان أحد ملفات <literal dir="ltr">source*</literal> أحدث من الملف <literal>target</literal>، عندئذ يجب توليد الهدف (target) باستخدام <command>command1</command> و <command>command2</command>.
			</para>
			 <para>
				لاحظ أن سطور الأوامر يجب أن تبدأ بمحرف الجدولة (tab)؛ لاحظ أيضاً أن فشل أحد سطور الأوامر لن يقاطع العملية كلها إذا كان السطر يبدأ بمحرف <literal>-</literal> (dash).
			</para>
			 </sidebar> <para>
				يجوي الملف <filename>rules</filename> عادة مجموعة قواعد تستخدم لضبط وبناء وتثبيت البرنامج في مجلد فرعي مخصص (يسمى حسب اسم الحزمة الثنائية). بعدها تؤرشف محتويات هذا المجلد الفرعي في حزمة دبيان كما لو كانت جذر نظام الملفات. في حالتنا، سوف تثبت الملفات في المجلد الفرعي <filename dir="ltr">debian/falcot-data/usr/share/falcot-data/</filename>، حتى يؤدي تثبيت الحزمة المولّدة لنشر الملفات في <filename>/usr/share/falcot-data/</filename>. يستخدم الملف <filename>rules</filename> كملف <filename>Makefile</filename> فيه بضعة أهداف قياسية (منها <literal>clean</literal> الذي يستخدم لتنظيف المجلد المصدر، و<literal>binary</literal> الذي يستخدم لتوليد الحزمة الثنائية).
			</para>
			 <para>
				رغم أن هذا الملف هو لبُّ العملية، إلا أنه لم يعد يحوي إلا القليل اللازم لاستدعاء مجموعة قياسية من الأوامر التي توفرها الأداة <command>debhelper</command>. وهذه هي حالة الملفات التي يولدها <command>dh_make</command>. لتثبيت ملفاتنا، علينا فقط ضبط سلوك الأمر <command>dh_install</command> عبر إنشاء ملف <filename>debian/falcot-data.install</filename> التالي:
			</para>
			 
<programlisting>
data/* usr/share/falcot-data/
</programlisting>
			 <para>
				عند هذه النقطة، يمكننا إنشاء الحزمة، إلا أننا سنضيف لمسة أخيرة. بما أن مديري النظم يريدون الوصول للمستندات بسهولة من قوائم المساعدة في بيئات سطح المكتب الرسومية، فسوف نضيف الملف <filename>falcot-data.desktop</filename> ونطلب تثبيته في <filename dir="ltr">/usr/share/applications</filename> عبر إضافة سطر ثان للملف <filename>debian/falcot-data.install</filename>.
			</para>
			 <example>
				<title>ملف <filename>falcot-data.desktop</filename></title>
				 
<programlisting>
[Desktop Entry]
Name=Internal Falcot Corp Documentation
Comment=Starts a browser to read the documentation
Exec=x-www-browser /usr/share/falcot-data/index.html
Terminal=false
Type=Application
Categories=Documentation;</programlisting>

			</example>
			 <para>
				الملف <filename>debian/falcot-data.install</filename> كما يبدو بعد تحديثه:
			</para>
			 
<programlisting>
data/* usr/share/falcot-data/
falcot-data.desktop usr/share/applications/</programlisting>
			 <para>
				أصبحت حزمتنا المصدرية الآن جاهزة. لم يبقَ إلا توليد الحزمة الثنائية، باستخدام الطريقة نفسها التي استخدمناها سابقاً لإعادة بناء الحزم: نستدعي الأمر <command>dpkg-buildpackage -us -uc</command> من داخل المجلد <filename>falcot-data-1.0</filename>.
			</para>

		</section>

	</section>
	 <section id="sect.setup-apt-package-repository">
		<title>إنشاء مستودع حزم للأداة APT</title>
		 <indexterm>
			<primary>أرشيف حزم</primary>
		</indexterm>
		 <indexterm>
			<primary>حزمة</primary>
			<secondary>دبيان</secondary>
			<tertiary>أرشيف</tertiary>
		</indexterm>
		 <para>
			بدأت شركة فلكوت تدريجياً بمتابعة صيانة عدد من حزم دبيان، سواء الحزم المعدلة محلياً عن حزم سابقة، أو حزم منشأة من الصفر لتوزيع بيانات وبرامج داخلية.
		</para>
		 <para>
			يريدون مكاملة هذه الحزم في أرشيف حزم يمكن استخدامه مباشرة عبر APT لتسهيل عملية التنصيب. ولأسباب واضحة متعلقة بالصيانة، يريدون فصل الحزم الداخلية عن الحزم التي أعادوا بناءها محلياً. الهدف هو أن تصبح المدخلات الموافقة لهذه الحزم في ملف <filename dir="ltr">/etc/apt/sources.list.d/falcot.list</filename> كما يلي:
		</para>
		 
<programlisting>
deb http://packages.falcot.com/ updates/
deb http://packages.falcot.com/ internal/
</programlisting>
		 <indexterm>
			<primary><command>mini-dinstall</command></primary>
		</indexterm>
		 <para>
			أعدّ مديرو النظم إذاً مضيفاً ظاهرياً على مخدم HTTP الداخلي لديهم، مع تحديد <filename>/srv/vhosts/packages/</filename> كجذر مساحة الوب المرتبطة به. لقد سلموا عملية إدارة الأرشيفات نفسها إلى الأمر <command>mini-dinstall</command> (من الحزمة ذات الاسم نفسه). تتابع هذه الأداة مجلد الواردات <filename dir="ltr">incoming/</filename> (في حالتنا، <filename>/srv/vhosts/packages/mini-dinstall/incoming/</filename>) وتنتظر وصول حزم جديدة إليه؛ وعند رفع حزمة جديدة سوف تثبتها في أرشيف دبيان في <filename>/srv/vhosts/packages/</filename>. يقرأ الأمر <command>mini-dinstall</command> ملف <filename dir="ltr">*.changes</filename> الذي ينشأ عند توليد حزم دبيان. تحوي هذه الملفات قائمة بجميع الملفات الأخرى المرتبطة بهذه النسخة من الحزمة (<filename dir="ltr">*.deb</filename> و<filename dir="ltr">*.dsc</filename> و<filename dir="ltr">*.diff.gz</filename>/<filename>*.debian.tar.gz</filename> و<filename dir="ltr">*.orig.tar.gz</filename> أو مثيلاتها الناتجة عن استخدام أدوات ضغط مختلفة)، وهي تسمح للأمر <command>mini-dinstall</command> بمعرفة الملفات التي يجب تثبيتها. كما تحوي ملفات <filename dir="ltr">*.changes</filename> اسم التوزيعة المستهدفة (غالباً <literal>unstable</literal>) الذي يُذكر في آخر مدخلة من مدخلات <filename>debian/changelog</filename>، حيث يستخدم <command>mini-dinstall</command> هذه المعلومة ليقرر المكان الذي سيثبت الحزمة فيه. لذلك يتعيّن على مديري النظم تغيير هذا الحقل دوماً قبل بناء أي حزمة، وإعطائه القيمة <literal>internal</literal> أو <literal>updates</literal>، حسب الموقع الهدف. بعدها يولّد <command>mini-dinstall</command> الملفات التي تحتاجها APT، مثل <filename>Packages.gz</filename>.
		</para>
		 <sidebar> <title><emphasis>بدائل</emphasis> <command>apt-ftparchive</command></title>
		 <indexterm>
			<primary><command>apt-ftparchive</command></primary>
		</indexterm>
		 <para>
			إذا كنت ترى أن <command>mini-dinstall</command> معقدٌ جداً بالنسبة لأرشيف دبيان الذي تحتاجه، يمكنك أيضاً استخدام الأمر <command>apt-ftparchive</command>. تفحص هذه الأداة محتويات مجلد ما وتعرض (على خرجها القياسي) ملف <filename>Packages</filename> يوافق هذه المحتويات. في حالة شركة فلكوت، يستطيع مديرو النظم رفع الحزم مباشرة إلى <filename>/srv/vhosts/packages/updates/</filename> أو <filename>/srv/vhosts/packages/internal/</filename>، ثمّ استدعاء الأوامر التالية لإنشاء ملفات <filename>Packages.gz</filename>:
		</para>
		 
<screen>
<computeroutput>$ </computeroutput><userinput>cd /srv/vhosts/packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages updates &gt;updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages internal &gt;internal/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip internal/Packages</userinput></screen>
		 <para>
			يسمح الأمر <command>apt-ftparchive sources</command> بإنشاء ملفات <filename>Sources.gz</filename> بأسلوب مشابه.
		</para>
		 </sidebar> <para>
			لإعداد <command>mini-dinstall</command> يجب ضبط الملف <filename dir="ltr">~/.mini-dinstall.conf</filename>؛ كانت المحتويات في حالة شركة فلكوت كالتالي:
		</para>
		 
<programlisting>
[DEFAULT]
archive_style = flat
archivedir = /srv/vhosts/packages

verify_sigs = 0
mail_to = admin@falcot.com

generate_release = 1
release_origin = Falcot Corp
release_codename = stable

[updates]
release_label = Recompiled Debian Packages

[internal]
release_label = Internal Packages
</programlisting>
		 <para>
			أحد القرارات التي تستحق الذكر هو توليد ملفات <filename>Release</filename> لكل أرشيف. وهذه تساعد في إدارة أولويات تثبيت الحزم باستخدام ملف الضبط <filename dir="ltr">/etc/apt/preferences</filename> (انظر <xref linkend="sect.apt.priorities" /> لمزيد من التفاصيل).
		</para>
		 <sidebar> <title><emphasis>أمن</emphasis> <command>mini-dinstall</command> والصلاحيات</title>
		 <para>
			بما أن <command>mini-dinstall</command> مصمم حتى يعمل بصلاحيات المستخدمين العاديين، فلا حاجة لتشغيله بصلاحيات الجذر. أسهل طريقة هي إعداد كل شيء ضمن حساب مستخدم يملكه مدير النظام المسؤول عن إنشاء حزم دبيان. بما أن مدير النظام هذا وحده يملك الصلاحيات اللازمة لوضع الملفات في المجلد <filename dir="ltr">incoming/</filename>، يمكننا أن نستنتج أن مدير النظام سيتحقق من مصدر كل حزمة قبل نشرها ولا داعي أن يتحقق منه <command>mini-dinstall</command> ثانية. هذا يفسر استخدام المتغير <literal dir="ltr">verify_sigs = 0</literal> (الذي يعني عدم الحاجة للتحقق من التواقيع الرقمية). لكن إذا كانت محتويات الحزم حساسة، يمكننا عكس الإعدادات واختيار التحقق من الحزم باستخدام حلقة مفاتيح تحوي المفاتيح العامة للأشخاص الذين يُسمَح لهم بإنشاء الحزم (التي تضبط باستخدام المتغير <literal>extra_keyrings</literal>)؛ عندها سيتحقق <command>mini-dinstall</command> من مصدر كل حزمة واردة عبر تحليل التوقيع المدمج في الملف <filename dir="ltr">*.changes</filename>.
		</para>
		 </sidebar> <para>
			استدعاء <command>mini-dinstall</command> في الواقع يبدأ تشغيل خدمة في الخلفية. وطالما أن هذه الخدمة تعمل، سوف تفحص ورود حزم جديدة إلى المجلد <filename dir="ltr">incoming/</filename> كل نصف ساعة؛ عند وصول حزمة جديدة، سوف تُنقَل إلى الأرشيف ويعاد توليد ملفات <filename>Packages.gz</filename> و <filename>Sources.gz</filename> المناسبة. إذا كان تشغيل الخدمة يسبب مشكلة، يمكن أيضاً استدعاء <command>mini-dinstall</command> يدوياً في الوضع اللاتفاعلي (أو الدفعي batch)، باستخدام الخيار <literal dir="ltr">-b</literal>، في كل مرة تُرفَع فيها حزمة جديدة إلى المجلد <filename dir="ltr">incoming/</filename>. الإمكانيات الأخرى التي يوفرها <command>mini-dinstall</command> موثقة في صفحة الدليل <citerefentry><refentrytitle>mini-dinstall</refentrytitle>
			 <manvolnum>1</manvolnum></citerefentry>.‎
		</para>
		 <sidebar> <title><emphasis>إضافة</emphasis> توليد أرشيف موقّع</title>
		 <para>
			تتحقق مجموعة APT من سلسلة من التواقيع التشفيرية المطبّقة على الحزم التي تعالجها قبل تثبيتها، حتى تتأكد من أصالتها (انظر <xref linkend="sect.package-authentication" />). قد تسبب أرشيفات APT الخاصة مشكلة هنا، لأن الأجهزة التي تستخدمها ستستمر في عرض تحذيرات عن الحزم غير الموقّعة. سيعمل مدير النظام المتقن لعمله على مكاملة الأرشيفات الخاصة مع آلية secure APT.
		</para>
		 <para>
			يتضمن <command>mini-dinstall</command> خيار الضبط <literal>release_signscript</literal> للمساعدة في هذه العملية، حيث يسمح بتحديد سكربت يستخدم لتوليد التوقيع. يمكن البداية مع السكربت <filename>sign-release.sh</filename> الذي توفره الحزمة <emphasis role="pkg">mini-dinstall</emphasis> في المجلد <filename>/usr/share/doc/mini-dinstall/examples/</filename>؛ قد تحتاج لإجراء بعض التغييرات المحلية.
		</para>
		 </sidebar>
	</section>
	 <section id="sect.becoming-package-maintainer">
		<title>كيف تصبح مشرف حزم</title>
		 <section>
			<title>تعلم إنشاء الحزم</title>
			 <para>
				إنشاء حزم دبيان ذات جودة ليست مهمة بسيطة، وتحتاج إلى بعض التعلم حتى تصبح مشرف حزم. لا يقتصر الأمر على بناء وتثبيت البرمجيات؛ بل أن معظم التعقيدات تنتج عن فهم المشاكل والتضاربات، والتفاعلات مع آلاف الحزم الأخرى بشكل عام.
			</para>
			 <section>
				<title>القواعد</title>
				 <para>
					يجب أن تتبع حزم دبيان القواعد الدقيقة المجموعة في سياسة دبيان، ويجب أن يعرف كل مشرف حزم هذه القواعد. لا يشترط أن تحفظها عن ظهر قلب، بل أن تعرف أنها موجودة وأن تعود إليها كلما صعب عليك اتخاذ أحد القرارات. لقد وقع كل مشرف دبيان في أخطاء نتيجة عدم معرفة إحدى القواعد، لكن هذه ليست مشكلة عظيمة طالما أن الخطأ سيصحح عندما يبلغ عنه أحد المستخدمين في تقرير علة (وهذا يحدث سريعاً عادة بفضل المستخدمين المتقدمين). <ulink type="block" url="https://www.debian.org/doc/debian-policy/" />
				</para>

			</section>
			 <section>
				<title>الروتين</title>
				 <indexterm>
					<primary>Debian Developer's Reference</primary>
				</indexterm>
				 <para>
					ليس دبيان مجموعة بسيطة من الحزم المفردة. تشكل جهود كل واحد جزءاً من مشروع تعاوني؛ ولذلك يجب أن تعرف كيف يعمل مشروع دبيان ككل إذا أردت أن تصبح مطور دبيان. سيتفاعل كل مطور دبيان ‒عاجلاً أم آجلاً‒ مع الآخرين. يُلخّص Debian Developer's Reference (في الحزمة <emphasis role="pkg">developers-reference</emphasis>) ما يجب أن يعرفه كل مطور حتى يتفاعل بسلاسة مع الفرق المختلفة داخل المشروع، ويستفيد لأقصى حد ممكن من الموارد المتاحة. كما يعدد هذا المرجع مجموعة من المهام التي يتوقع أن ينجزها المطور. <ulink type="block" url="https://www.debian.org/doc/manuals/developers-reference/" />
				</para>

			</section>
			 <section>
				<title>الأدوات</title>
				 <para>
					هناك أدوات عديدة تساعد مشرفي الحزم على إنجاز أعمالهم. يمرّ هذا القسم عليها سريعاً، لكن لا يتفصل فيها كثيراً، لأن هناك وثائق شاملة لكل منها.
				</para>
				 <section>
					<title>برنامج <command>lintian</command></title>
					 <indexterm>
						<primary><command>lintian</command></primary>
					</indexterm>
					 <para>
						هذه إحدى أهم الأدوات: تفحص هذه الأداة حزم دبيان. هذه الأداة مبنية على مجموعة كبيرة من الاختبارات من سياسة دبيان، وتكتشف سريعاً وتلقائياً عدداً كبيراً من الأخطاء التي يمكن عندئذ تصحيحها قبل إصدار الحزمة.
					</para>
					 <para>
						هذه الأداة للمساعدة فقط، وأحياناً تخطئ (مثلاً، سياسة دبيان تتغير مع الوقت، ولذلك قد يتخلف <command>lintian</command> أحياناً). كما أنها ليست شاملة: فإذا لم يظهر Lintain أي أخطاء فلا يجب أن تفهم هذا على أنه برهان على أن الحزمة مثالية؛ بل هي تتفادى أكثر الأخطاء شيوعاً في أفضل الحالات.
					</para>

				</section>
				 <section>
					<title>برنامج <command>piuparts</command></title>
					 <indexterm>
						<primary><command>piuparts</command></primary>
					</indexterm>
					 <para>
						هذه أداة مهمة أيضاً: تؤتمت هذه الأداة تثبيت وتحديث وإزالة وتطهير الحزمة (في بيئة معزولة)، وتتحقق من عدم ظهور أخطاء في أي واحدة من هذه العمليات. يمكنها أن تساعدك على اكتشاف الاعتماديات المفقودة، كما تكتشف بقاء بعض الملفات بالخطأ بعد تطهير الحزمة.
					</para>

				</section>
				 <section>
					<title>devscripts</title>
					 <indexterm>
						<primary><emphasis role="pkg">devscripts</emphasis></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debuild</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>dch</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>uscan</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debi</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debc</command></primary>
					</indexterm>
					 <para>
						تحوي الحزمة <emphasis role="pkg">devscripts</emphasis> العديد من البرامج التي تساعد في نواحي كثيرة من عمل مطوري دبيان:
					</para>
					 <itemizedlist>
						<listitem>
							<para>
								يسمح <command>debuild</command> بتوليد حزمة (باستخدام <command>dpkg-buildpackage</command>) وتشغيل <command>lintian</command> للتحقق من توافقها مع سياسة دبيان بعد ذلك.
							</para>

						</listitem>
						 <listitem>
							<para>
								يُنظّف <command>debclean</command> الحزمة المصدرية بعد توليد الحزمة الثنائية.
							</para>

						</listitem>
						 <listitem>
							<para>
								يسمح <command>dch</command> بتحرير الملف <filename>debian/changelog</filename> في الحزمة المصدرية بسرعة وسهولة.
							</para>

						</listitem>
						 <listitem>
							<para>
								يتحقق <command>uscan</command> من إصدار المؤلف المنبعي نسخة جديدة من البرنامج؛ هذا يحتاج لملف <filename>debian/watch</filename> يحدد موقع هذه الإصدارات الجديدة.
							</para>

						</listitem>
						 <listitem>
							<para>
								يسمح <command>debi</command> بتثبيت حزمة دبيان المولدة (من خلال <command>dpkg -i</command>) دون الحاجة لكتابة اسمها الكامل ومسارها.
							</para>

						</listitem>
						 <listitem>
							<para>
								كما يسمح <command>debc</command> بأسلوب مشابه بفحص محتويات الحزمة المولدة (باستخدام <command>dpkg -c</command>)، دون الحاجة لكتابة اسمها الكامل ومسارها.
							</para>

						</listitem>
						 <listitem>
							<para>
								يتحكم <command>bts</command> بنظام تتبع العلل من سطر الأوامر؛ حيث يولّد هذا البرنامج الرسائل البريدية المناسبة آلياً.
							</para>

						</listitem>
						 <listitem>
							<para>
								يرفع <command>debrelease</command> الحزمة المولدة إلى مخدم بعيد، دون الحاجة لكتابة الاسم الكامل والمسار لملف <filename dir="ltr">.changes</filename> الخاص بها.
							</para>

						</listitem>
						 <listitem>
							<para>
								يوقّع <command>debsign</command> ملفات <filename dir="ltr">*.dsc</filename> و <filename dir="ltr">*.changes</filename>.
							</para>

						</listitem>
						 <listitem>
							<para>
								يؤتمت <command>uupdate</command> إنشاء مراجعة جديدة للحزمة عندما تصدر نسخة منبعية (upstream version) جديدة.
							</para>

						</listitem>

					</itemizedlist>

				</section>
				 <section>
					<title><emphasis role="pkg">debhelper</emphasis> و <emphasis role="pkg">dh-make</emphasis></title>
					 <indexterm>
						<primary><emphasis>debhelper</emphasis></primary>
					</indexterm>
					 <indexterm>
						<primary><emphasis>dh-make</emphasis></primary>
					</indexterm>
					 <para>
						Debhelper هو مجموعة من السكربتات التي تسهّل إنشاء حزم متوافقة مع السياسة؛ تستدعى هذه السكربتات من <filename>debian/rules</filename>. لقد اعتمد Debhelper على نطاق واسع ضمن دبيان، ويشهد على ذلك أنه معظم حزم دبيان الرسمية تستخدمه. تحوي أسماء كل الأوامر التي يحويها البادئة <command dir="ltr">dh_</command>.
					</para>
					 <para>
						ينشئ السكربت <command>dh_make</command> (من الحزمة <emphasis>dh-make</emphasis>) الملفات اللازمة لتوليد حزمة دبيان في مجلد يحوي مصادر أحد البرامج. كما يمكنك أن تخمن من اسم البرنامج، سوف تستخدم الملفات المولدة debhelper افتراضياً.
					</para>

				</section>
				 <section>
					<title><command>dupload</command> و<command>dput</command></title>
					 <indexterm>
						<primary><command>dupload</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>dput</command></primary>
					</indexterm>
					 <para>
						يسمح الأمران <command>dupload</command> و<command>dput</command> برفع حزمة دبيان إلى مخدم (قد يكون مخدماً بعيداً). يسمح هذا للمطورين بنشر حزمهم على مخدم دبيان الرئيسي (<literal>ftp-master.debian.org</literal>) بحيث يمكن دمجها في الأرشيف وتوزيعها على المرايا. يأخذ هذا الأمران ملف <filename dir="ltr">*.changes</filename> كمتغير، وتستنتج بقية الملفات المطلوبة من محتوياته.
					</para>

				</section>

			</section>

		</section>
		 <section>
			<title>عملية القبول</title>
			 <para>
				أن تصبح ”مطور دبيان“ ليس قضية إدارية بسيطة. تشمل العملية خطوات عديدة، وهي عملية تأهيل بقدر ما هي عملية انضمام. في جميع الحالات، العملية رسمية وموثقة، ويستطيع أي واحد تتبع تقدمه على الموقع المخصص للوافدين الجدد. <ulink type="block" url="https://nm.debian.org/" />
			</para>
			 <sidebar> <title><emphasis>إضافة</emphasis> إجراءات أسهل بالنسبة ”لمشرفي دبيان“</title>
			 <para>
				”مشرف دبيان“ (Debian Maintainer، أو DM) هو منصب آخر صلاحياته أقل من ”مطور دبيان“ لكن العملية اللازمة للحصول عليه أسرع. يستطيع المساهم الذي يحصل على هذه الرتبة صيانة حزمته الخاصة فقط. يجب على أحد مطوري دبيان التحقق من عملية الرفع الأولية، وأن يصدر بياناً يوضح فيه أنه يثق بقدرة هذا المشرف على إدارة حزمته وحده.
			</para>
			 <indexterm>
				<primary>Debian Maintainer (مشرف دبيان)</primary>
			</indexterm>
			 </sidebar> <section>
				<title>المتطلبات الأولية</title>
				 <para>
					يتوقع من كافة المرشحين أن يكون لديهم إلمام باللغة الإنكليزية على الأقل. هذا مطلوب في المراحل كلها: في التواصل الأولي مع الممتحن طبعاً، لكن ستحتاج لذلك لاحقاً أيضاً، لأن الإنكليزية هي اللغة المفضلة لمعظم الوثائق؛ كما أن مستخدمي الحزم سيتواصلون معك بالإنكليزية عند الإبلاغ عن العلل، وسيتوقعون منك الرد بالإنكليزية أيضاً.
				</para>
				 <para>
					أما المتطلبات الأخرى فهي تتعلق بالدافع. لا معنى لأن تصبح مطور دبيان إلا إذا كنت تعرف أن اهتمامك بدبيان سيستمر لشهور عديدة. عملية القبول نفسها قد تستغرق عدة شهور، ويحتاج دبيان مطورين على المدى الطويل؛ فكل حزمة تحتاج صيانة دائمة، وليس فقط عند إنشائها أول مرة.
				</para>

			</section>
			 <section>
				<title>التسجيل</title>
				 <para>
					أولى الخطوات (الحقيقية) هي العثور على كفيل أو نصير (advocate)؛ أي العثور على مطور دبيان رسمي مستعد للإدلاء بأنه يؤمن أن قبول <emphasis>فلان</emphasis> سيفيد مشروع دبيان. هذا يعني ضمنياً عادة أن المرشح كان نشطاً من قبل ضمن المجتمع، وأن أعماله كانت قيّمة. إذا كان المرشّح خجولاً ولم تكن أعماله منشورة على الملأ، فيمكنه إقناع أحد مطوري دبيان بدعمه عبر عرض أعماله بشكل خاص.
				</para>
				 <indexterm>
					<primary>زوج مفاتيح</primary>
				</indexterm>
				 <para>
					في الوقت نفسه، يجب أن يولّد المرشح زوج مفاتيح RSA عام/خاص باستخدام GnuPG، الذي يجب أن يوقّعه اثنين من مطوري دبيان الرسميين على الأقل. يضمن التوقيع صحة الاسم المكتوب في المفتاح. في الواقع، يجب أن يبرز كل مشارك في تجمعات توقيع المفاتيح هوية رسمية (عادة بطاقة شخصية أو جواز سفر) مع معرّفات مفاتيحه. تؤكد هذه الخطوة الرابطة بينه وبين مفاتيحه. بالتالي، تحتاج عملية التوقيع هذه للقاء المطورين وجهاً لوجه. إذا لم تقابل أي مطور دبيان من قبل في أحد مؤتمرات البرمجيات الحرة العامة، فيمكنك البحث مباشرة عن المطورين الذي يعيشون بالقرب منك باستخدام القائمة في هذه الصفحة كنقطة انطلاق. <ulink type="block" url="https://wiki.debian.org/Keysigning" />
				</para>
				 <para>
					بعد أن يصادق على تسجيلك في <literal>nm.debian.org</literal> أحد الكفلاء، سيوكل أحد <emphasis>Application Manager</emphasis> (مديري التطبيقات) بمتابعة المرشَّح. سيقود مدير التطبيقات بعدها العملية خلال عدة مراحل وفحوصات محددة مسبقاً.
				</para>
				 <para>
					أولى الفحوصات هي التحقق من الهوية. إذا كان لديك مفتاحاً موقعاً من اثنين من مطوري دبيان، فهذه الخطوة سهلة؛ وإلا فسوف يحاول مدير التطبيقات أن يرشدك في عملية البحث عن مطوري دبيان قريبين لترتيب لقاء وتوقيع مفاتيح معهم.
				</para>

			</section>
			 <section>
				<title>قبول المبادئ</title>
				 <para>
					بعد هذه الرسميات الإدارية تأتي التقييمات الفلسفية. الفكرة هي التأكد أن المرشّح يفهم العقد الاجتماعي ومبادئ البرمجيات الحرة ويقبل بها. لا يمكن الانضمام إلى دبيان إلا إذا كان المرء يحمل القيم التي توحد المطورين الحاليين، كما هي موضحة في النصوص المؤسِّسة (وملخصة في <xref linkend="the-debian-project" />).
				</para>
				 <para>
					بالإضافة إلى ذلك، يُتوقَّع من كل مرشَح ينوي الانضمام لصفوف دبيان أن يعرف طريقة العمل في المشروع، وكيفية التفاعل بشكل مناسب لحل المشاكل التي ستواجهه لا ريب مع مرور الوقت. كل هذه المعلومات موثّقة عموماً في الكتيّبات التي تستهدف المشرفين الجدد، وفي Debian developer reference (مرجع مطوري دبيان). يجب أن تكفي قراءة هذا المستند بتمعن للإجابة عن جميع أسئلة الفاحص. إذا لم تكن الأجوبة مرضية، سوف يخبر المرشّح بذلك. بعدها سيتعيّن عليه قراءة الوثائق المناسبة (ثانية) قبل المحاولة ثانية. إذا لم تكن الإجابة المناسبة عن السؤال موجودة في أحد الوثائق السابقة، يستطيع المرشّح عادة معرفة الجواب من الخبرة العملية في دبيان، أو ربما بالنقاش مع بعض مطوري دبيان الآخرين. تضمن هذه الآلية أن ينخرط المرشّح في دبيان نوعاً ما قبل أن يصبح جزءاً رسمياً منه. هذه السياسة مقصودة، وهي تجعل المرشحين الذين يقبلون في المشروع من خلالها يندمجون مع الآخرين في النهاية كقطعة من قطع أحجية تركيب الصور، أحجية تمتد إلى ما لا نهاية.
				</para>
				 <indexterm>
					<primary><emphasis>Philosophy &amp; Procedures</emphasis></primary>
				</indexterm>
				 <para>
					تُعرّف هذه الخطوة باسم <emphasis>Philosophy &amp; Procedures</emphasis> (الفلسفة والروتين، أو P&amp;P اختصاراً) حسب لغة المطورين المسؤولين عن سير عملية قبول الأعضاء الجدد.
				</para>

			</section>
			 <section>
				<title>التحقق من المهارات</title>
				 <para>
					يجب أن يكون كل طلب يقدم على منصب مطور دبيان الرسمي مبرراً. يجب أن يوضح المرشّح مشروعية طلبه لعضوية في المشروع، وأن حصوله عليها يسهل عمله في مساعدة دبيان حتى ينضم للمشروع. أكثر المبررات شيوعاً هو أن الحصول على رتبة مطور دبيان يسهل صيانة إحدى حزم دبيان، لكنه ليس الوحيد. بعض المطورين ينضمون للمشروع للمساهمة في النقل إلى معمارية معينة، وغيرهم يريدون تحسين الوثائق، وغيرها من الأسباب.
				</para>
				 <para>
					هذه الخطوة هي فرصة المرشّح ليبيّن ماذا يريد أن يفعل ضمن مشروع دبيان ويظهر الأعمال التي أنجزها فعلاً في هذا الصدد. دبيان مشروع عملي/براغماتي (pragmatic) ولا يقبل الحديث عن شيء إذا لم توافق الأفعال الكلمات. عموماً، عندما يكون الدور المقصود في المشروع متعلقاً بصيانة حزمة ما، فيجب التحقق تقنياً من نسخة أولية من هذه الحزمة الجديدة وأن يرفعها أحد الكفلاء من مطوري دبيان السابقين إلى مخدمات دبيان.
				</para>
				 <sidebar> <title><emphasis>مجتمع</emphasis> الكفالة</title>
				 <indexterm>
					<primary>كفالة</primary>
				</indexterm>
				 <para>
					يستطيع مطوري دبيان ”كفالة“ (sponsor) الحزم التي يعدها شخص آخر، أي يستطيعون نشرها في مستودعات دبيان الرسمية بعد مراجعتها بحذر. تسمح هذه الآلية للأفراد الخارجيين، الذين لم يمروا بعد بعملية انضمام الأعضاء الجدد، بالمساهمة بين الفينة والأخرى في المشروع. في الوقت نفسه، تضمن هذه الطريقة أن يفحص أحد الأعضاء الرسميين كل حزمة مضمنة في دبيان.
				</para>
				 </sidebar> <para>
					أخيراً، يفحص الممتحن مهارات المرشّح التقنية (في التحزيم) في امتحان شامل. الإجابات الخاطئة ممنوعة، لكن وقت الإجابة غير محدود. كل الوثائق متاحة ويسمح بإجراء عدة محاولات إذا لم تكن الإجابات جيدة في المرة الأولى. ليس الهدف من هذه الخطوة إقصاء المرشّح، ولكن الهدف هو ضمان أن جميع المساهمين الجدد يتمتعون ببعض المعرفة اليسيرة على الأقل.
				</para>
				 <indexterm>
					<primary><emphasis>Tasks &amp; Skills</emphasis></primary>
				</indexterm>
				 <para>
					تُعرَف هذه المرحلة باسم <emphasis>Tasks &amp; Skills</emphasis> (المهام والمهارات، أو T&amp;S اختصاراً) حسب مصطلحات الفاحصين.
				</para>

			</section>
			 <section>
				<title>القبول النهائي</title>
				 <para>
					في الخطوة الأخيرة، يراجع أحد مديري حسابات دبيان (<emphasis>Debian Account Manager</emphasis>، أو DAM) العملية كلها. سيراجع مدير الحسابات جميع معلومات المرشّح التي جمعها الممتحن، ويقرر فتح حساب على مخدمات دبيان أو عدم فتحه. في حال الحاجة لمزيد من المعلومات، قد يؤخر إنشاء الحساب. الرفض نادر جداً إذا تابع الفاحص العملية بشكل جيد، لكنه يحدث أحياناً. الرفض ليس قاطعاً أبداً، ويسمح للمرشّح بالمحاولة ثانية في وقت لاحق.
				</para>
				 <para>
					قرار مدير الحسابات نهائي وغير قابل للنقض (غالباً)، لذلك كان الأشخاص الموكلين بهذه المهمة يتعرضون للكثير من النقد في الماضي.
				</para>

			</section>

		</section>

	</section>
</chapter>

