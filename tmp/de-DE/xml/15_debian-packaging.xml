<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="debian-packaging" lang="de-DE">
	<chapterinfo>
		 <keywordset>
			<keyword>Zurückportierung</keyword>
			 <keyword>Neuerstellung</keyword>
			 <keyword>Quellpaket</keyword>
			 <keyword>Archiv</keyword>
			 <keyword>Meta-Paket</keyword>
			 <keyword>Debian-Entwickler</keyword>
			 <keyword>Betreuer</keyword>

		</keywordset>

	</chapterinfo>
	 <title>Ein Debian-Paket erstellen</title>
	 <highlights> <para>
		Für einen Administrator, der regelmäßig mit Debian-Paketen umgeht, ist es durchaus normal, dass er eines Tages das Bedürfnis hat, seine eigenen Pakete zu erstellen oder ein vorhandenes Paket zu ändern. In diesem Kapitel sollen die häufigsten Fragen zu diesem Thema beantwortet und die Komponenten vorgestellt werden, die erforderlich sind, um die Vorteile der Debian-Infrastruktur möglichst gut zu nutzen. Mit etwas Glück könnten Sie, nachdem Sie sich an lokalen Paketen versucht haben, sogar das Bedürfnis verspüren, weiter zu gehen und sich am Debian-Projekt selbst zu beteiligen!
	</para>
	 </highlights> <section id="sect.rebuilding-package">
		<title>Ein Paket aus seinen Quellen neu erstellen</title>
		 <para>
			Unter verschiedenen Umständen ist es erforderlich, ein Binärpaket neu zu erstellen. In manchen Fällen benötigt der Administrator eine Programmfunktion, für die das Programm mit einer bestimmten Kompilierungsoption aus den Quellen kompiliert werden muss; in anderen Fällen ist das Programm, das in der installierten Debian-Version gebündelt ist, nicht aktuell genug. Im zweiten Fall erstellt der Administrator gewöhnlich ein aktuelleres Paket aus einer neueren Debian-Version wie zum Beispiel <emphasis role="distribution">Testing</emphasis> oder sogar <emphasis role="distribution">Unstable</emphasis>, so dass dieses neue Paket dann in seiner <emphasis role="distribution">Stable</emphasis>-Distribution läuft; dieser Vorgang wird „Backporting“ genannt. Wie immer sollte man, bevor man eine solche Aufgabe beginnt, überprüfen, ob sie nicht bereits erledigt worden ist. Ein kurzer Blick auf den Debian Package Tracker für das Paket sollte diese Information liefern. <ulink type="block" url="https://tracker.debian.org/" /><indexterm><primary>backport</primary></indexterm>
		</para>
		 <section>
			<title>Die Quellen besorgen</title>
			 <para>
				Die Neuerstellung eines Debian-Pakets beginnt damit, dass man seinen Quellcode besorgt. Am einfachsten geschieht dies mit dem Befehl <command>apt-get source <replaceable>quellpaket-name</replaceable></command>. Der Befehl benötigt eine <literal>deb-src</literal>-Zeile in der Datei <filename>/etc/apt/sources.list</filename> und aktuelle Indexdateien (d.h. <command>apt-get update</command>). Diese Bedingungen sollten bereits erfüllt sein, wenn Sie den Anweisungen in dem Kapitel über die APT-Konfigurierung ( siehe <xref linkend="sect.apt-sources.list" />) gefolgt sind. Beachten Sie jedoch, dass Sie die Quellpakete der Debian-Version, die in der Zeile <literal>deb-src</literal> genannt ist, herunterladen. Falls Sie eine andere Version benötigen, müssen Sie sie eventuell per Hand von einem Debian-Spiegelserver oder von der Webseite herunterladen. Hierbei müssen zwei oder drei Dateien abgerufen werden mit den Dateiendungen <filename>*.dsc</filename> - für <emphasis>Debian Source Control</emphasis>, <filename>*.tar.<replaceable>comp</replaceable></filename> und manchmal <filename>*.diff.gz</filename> oder <filename>*.debian.tar.<replaceable>comp</replaceable></filename> - wobei <replaceable>comp</replaceable> je nach verwendetem Komprimierungsprogramm durch <literal>gz</literal>, <literal>bz2</literal> oder <literal>xz</literal> ersetzt wird. Anschließend wird der Befehl <command>dpkg-source -x <replaceable>datei.dsc</replaceable></command> ausgeführt. Falls die Datei <filename>*.dsc</filename> direkt an der vorgegebenen URL zugänglich ist, gibt es einen noch einfacheren Weg, sie zu besorgen, und zwar mit dem Befehl <command>dget <replaceable>URL</replaceable></command>. Dieser Befehl (der sich in dem Paket <emphasis role="pkg">devscripts</emphasis> befindet) ruft die <filename>*.dsc</filename>-Datei an der angegebenen Adresse ab, analysiert dann ihren Inhalt und besorgt selbstständig die Datei oder die Dateien, auf die darin verwiesen wird. Wenn alles heruntergeladen wurde, wird das Quellpaket entpackt (solange nicht die Optionen <literal>-d</literal> oder <literal>--download-only</literal> verwendet wurden).
			</para>

		</section>
		 <section>
			<title>Änderungen vornehmen</title>
			 <para>
				Die Quellen des Pakets sind nun in einem Verzeichnis verfügbar, das nach dem Quellpaket und seiner Version benannt ist (zum Beispiel <emphasis>samba-4.1.17+dfsg</emphasis>); hier werden wir unsere eigenen Veränderungen vornehmen.
			</para>
			 <para>
				Als erstes wird die Paket-Versionsnummer geändert, so dass sich die neu erstellten Pakete von den ursprünglichen, von Debian bereitgestellten Paketen unterscheiden lassen. Gesetzt den Fall, dass die aktuelle Version <literal>2:4.1.17+dfsg-2</literal> ist, so können wir Version <literal>2:4.1.17+dfsg-2falcot1</literal> erstellen, wodurch der Ursprung des Pakets eindeutig angezeigt wird. Hierdurch wird die Paket-Versionsnummer gegenüber der von Debian bereitgestellten erhöht, so dass sich das Paket leicht als eine Aktualisierung des Originalpakets installieren lässt. Eine derartige Änderung wird am besten mit dem Befehl <command>dch</command> (<emphasis>Debian CHangelog</emphasis>) aus dem Paket <emphasis role="pkg">devscripts</emphasis> mit einem Aufruf wie <command>dch --local falcot</command> vorgenommen. Hierdurch wird ein Texteditor aufgerufen (<command>sensible-editor</command> - dies sollte Ihr bevorzugter Editior sein, falls er in den Umgebungsvariablen <varname>VISUAL</varname> oder <varname>EDITOR</varname> aufgeführt ist, anderenfalls der voreingestellte Editor), um die Unterschiede dokumentieren zu können, die diese Neuerstellung bewirkt. Dieser Editor zeigt uns, dass <command>dch</command> in der Tat die Datei <filename>debian/changelog</filename> geändert hat.
			</para>
			 <para>
				Wenn die Erstellungsoptionen geändert werden müssen, werden diese Änderungen in der Datei <filename>debian/rules</filename> vorgenommen, die die Schritte des Erstellungsprozesses steuert. In den einfachsten Fällen sind die Zeilen, die die anfängliche Konfiguration ((<literal>./configure …</literal>) oder die tatsächliche Erstellung (<literal>$(MAKE) …</literal> oder <literal>make …</literal>) betreffen, leicht zu finden. Falls diese Befehle nicht ausdrücklich aufgerufen werden, sind sie möglicherweise ein Nebeneffekt eines anderen ausdrücklichen Befehls. In diesem Fall sehen Sie bitte in dessen Dokumentation nach, um mehr darüber herauszufinden, wie das voreingestellte Verhalten geändert werden kann. Verwenden Pakete den <command>dh</command> Befehl, müssen Sie gegebenenfalls ein Override für die <command>dh_auto_configure</command> oder <command>dh_auto_build</command> Befehle erstellen (siehe auch die zugehörigen Manual Pages für eine Erläuterung).
			</para>
			 <para>
				Je nach den vor Ort vorgenommenen Veränderungen der Pakete kann auch eine Aktualisierung der Datei <filename>debian/control</filename>, die eine Beschreibung der erzeugten Pakete enthält, erforderlich sein. Diese Datei enthält insbesondere <literal>Build-Depends</literal>-Zeilen, die die Liste der Abhängigkeiten überwachen, die zum Zeitpunkt der Paketerstellung erfüllt sein müssen. Sie beziehen sich häufig auf Versionen von Paketen, die in der Distribution enthalten sind, aus der das Quellpaket stammt, jedoch in der Distribution, die für die Neuerstellung verwendet wird, möglicherweise nicht vorhanden sind. Es gibt kein automatisches Verfahren um herauszufinden, ob eine Abhängigkeit tatsächlich besteht, oder ob sie nur angegeben wird, um sicherzustellen, dass die Neuerstellung nur mit der jüngsten Version einer Programmbibliothek unternommen wird - dies ist die einzig verfügbare Möglichkeit, einen <emphasis>Autobuilder</emphasis> dazu zu zwingen, während einer Neuerstellung eine bestimmte Paketversion zu verwenden. Aus diesem Grund benutzen Debian-Betreuer häufig streng versionierte Erstellungsabhängigkeiten.
			</para>
			 <para>
				Wenn Sie mit Sicherheit wissen, dass diese Erstellungsabhängigkeiten zu streng sind, haben Sie die Wahl, sie vor Ort zu lockern. Die Lektüre der Dateien, die den normalen Weg zur Erstellung des Programms dokumentieren - diese Dateien sind häufig <filename>INSTALL</filename> benannt - hilft Ihnen, die passenden Abhängigkeiten herauszufinden. Idealerweise sollten alle Abhängigkeiten durch die Distribution, die für die Neuerstellung verwendet wird, erfüllt werden. Wenn dies nicht der Fall ist, beginnt ein rekursiver Prozess, bei dem die im <literal>Build-Depends</literal>-Feld genannten Pakete zurückportiert werden müssen, bevor es das Zielpaket kann. Es kann sein, dass einige Pakete nicht zurückportiert werden müssen und während des Erstellungsprozesses in ihrem gegenwärtigen Zustand installiert werden können (ein namhaftes Beispiel ist <emphasis role="pkg">debhelper</emphasis>). Beachten Sie, dass der Prozess des Zurückportierens sehr schnell kompliziert werden kann, wenn Sie nicht aufpassen. Daher sollten Zurückportierungen so gering wie möglich gehalten werden.
			</para>
			 <sidebar> <title><emphasis>TIPP</emphasis> <literal>Build-Depends</literal> installieren</title>
			 <indexterm>
				<primary><literal>Build-Depends</literal>, control Feld</primary>
			</indexterm>
			 <para>
				<command>apt-get</command> ermöglicht es, alle Pakete zu installieren, die in den <literal>Build-Depends</literal>-Feldern eines Quellpakets erwähnt sind, das in einer Distribution vorhanden ist, die in der <literal>deb-src</literal>-Zeile der Datei <filename>/etc/apt/sources.list</filename> aufgeführt ist. Dies geschieht einfach durch Ausführung des Befehls <command>apt-get build-dep <replaceable>quellpaket</replaceable></command>.
			</para>
			 </sidebar>
		</section>
		 <section>
			<title>Die Neuerstellung beginnen</title>
			 <para>
				Wenn alle erforderlichen Veränderungen auf die Quellen angewendet worden sind, können wir damit beginnen, das eigentliche Binärpaket (die <filename>.deb</filename>-Datei) zu erstellen. Der gesamte Prozess wird durch den Befehl <command>dpkg-buildpackage</command> gesteuert.
			</para>
			 <example>
				<title>Ein Paket neu erstellen</title>
				 
<screen><computeroutput>$ </computeroutput><userinput>dpkg-buildpackage -us -uc
</userinput><computeroutput>[...]
</computeroutput></screen>

			</example>
			 <sidebar id="sidebar.fakeroot"> <title><emphasis>HILFSPROGRAMM</emphasis> <command>fakeroot</command></title>
			 <para>
				Im Wesentlichen besteht der Prozess der Paketerstellung einfach darin, eine Reihe von bestehenden (oder erstellten) Dateien in einem Archiv zusammenzufassen; die meisten dieser Dateien werden in diesem Archiv im Besitz von <emphasis>root</emphasis> stehen. Das ganze Paket unter diesem Benutzer zu erstellen, würde jedoch zu erhöhten Risiken führen; glücklicherweise kann dies mit dem Befehl <command>fakeroot</command> vermieden werden. Dieses Hilfsprogramm kann verwendet werden, um ein Programm auszuführen und ihm dabei den Eindruck zu vermitteln, dass es als <emphasis>root</emphasis> läuft und Dateien mit beliebigen Eigentumsrechten und Berechtigungen erstellt. Wenn das Programm das Archiv erstellt, das zum Debian-Paket werden wird, wird es dazu gebracht, ein Archiv zu erstellen, das Dateien enthält, die beliebigen Eigentümern gehören, einschließlich <emphasis>root</emphasis>. Dies ist so praktisch, dass <command>dpkg-buildpackage</command> bei der Paketerstellung <command>fakeroot</command> standardmäßig verwendet.
			</para>
			 <para>
				Man beachte, dass das Programm nur dazu gebracht wird zu „glauben“, dass es unter einem privilegierten Konto läuft, und dass der Prozess in Wirklichkeit als der Benutzer läuft, der den Befehl <command>fakeroot <replaceable>programm</replaceable></command> ausführt (und dass die Dateien in Wirklichkeit mit den Berechtigungen dieses Benutzers erstellt werden). Zu keiner Zeit erlangt es tatsächlich Root-Privilegien, die es missbrauchen könnte.
			</para>
			 </sidebar> <para>
				Der oben stehende Befehl kann scheitern, wenn die <literal>Build-Depends</literal>-Felder nicht aktualisiert worden sind, oder wenn die dazugehörigen Pakete nicht installiert sind. In diesem Fall ist es möglich, diese Kontrolle außer Kraft zu setzen, indem die Option <literal>-d</literal> an <command>dpkg-buildpackage</command> gegeben wird. Das ausdrückliche Ignorieren dieser Abhängigkeiten erhöht jedoch das Risiko, dass der Erstellungsprozess in einem späteren Stadium scheitert. Oder schlimmer noch, das Paket wird scheinbar richtig erstellt, läuft aber nicht ordnungsgemäß: einige Programme deaktivieren automatisch einige ihrer Leistungsmerkmale, wenn eine erforderliche Bibliothek zum Zeitpunkt der Erstellung nicht verfügbar ist.
			</para>
			 <para>
				In den meisten Fällen benutzen Debian-Entwickler ein übergeordnetes Programm, wie zum Beispiel <command>debuild</command>; dieses führt <command>dpkg-buildpackage</command> wie üblich aus, fügt aber den Aufruf eines Programms hinzu, das zahlreiche Tests ausführt, um das erstellte Paket im Hinblick auf das Debian-Regelwerk zu überprüfen. Dieses Skript bereinigt auch die Umgebung, so dass lokale Umgebungsvariablen die Paketerstellung nicht „verschmutzen“. Der Befehl <command>debuild</command> ist eines der Hilfsprogramme in der <emphasis>devscripts</emphasis>-Suite, die eine gewisse Konsistenz und Konfiguration gemeinsam haben und so die Aufgabe des Betreuers einfacher machen.
			</para>
			 <sidebar> <title><emphasis>KURZER BLICK</emphasis> <command>pbuilder</command></title>
			 <indexterm>
				<primary><command>pbuilder</command></primary>
			</indexterm>
			 <para>
				Das Programm <command>pbuilder</command> (im Paket ähnlichen Namens) ermöglicht es, ein Debian-Paket in einer <emphasis>chrooted</emphasis>-Umgebung zu erstellen. Es erstellt zunächst ein temporäres Verzeichnis, das ein minimales System zur Erstellung des Pakets enthält (einschließlich der Pakete, die im <emphasis>Build-Depends</emphasis>-Feld aufgeführt sind). Das Verzeichnis wird dann während des Erstellungsprozesses mit dem Befehl <command>chroot</command> als Wurzelverzeichnis (<filename>/</filename>) verwendet.
			</para>
			 <para>
				Dieses Programm ermöglicht es, dass der Erstellungsprozess in einer Umgebung stattfindet, die durch Eingriffe der Benutzer nicht verändert ist. So können fehlende Abhängigkeiten leicht entdeckt werden (da die Erstellung scheitern wird, falls die dazugehörigen Abhängigkeiten nicht dokumentiert sind). Außerdem ermöglicht es die Erstellung eines Pakets für eine Debian-Version, die nicht der vom System insgesamt benutzten entspricht: der Rechner kann <emphasis role="distribution">Stable</emphasis> für seine normale Arbeit benutzen, und ein <command>pbuilder</command>, das auf demselben Rechner läuft, kann <emphasis role="distribution">Unstable</emphasis> für die Paketerstellung verwenden.
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.building-first-package">
		<title>Ihr erstes Paket erstellen</title>
		 <section>
			<title>Meta-Pakete oder vorgetäuschte Pakete</title>
			 <para>
				Vorgetäuschte Pakete und Meta-Pakete sind insofern ähnlich, als sie leere Hüllen sind, die nur um des Effektes willen existieren, den ihre Meta-Daten auf den Paketverarbeitungsstapel haben.
			</para>
			 <para>
				Der Zweck eines vorgetäuschten Pakets ist es, <command>dpkg</command> und <command>apt</command> glauben zu machen, dass ein bestimmtes Paket installiert ist, obwohl es nur aus einer leeren Hülle besteht. So können Abhängigkeiten von einem Paket erfüllt werden, wenn das dazugehörige Programm außerhalb des Geltungsbereichs des Paketsystems installiert wurde. Obwohl diese Methode funktioniert, sollte sie möglichst vermieden werden, da sie keine Garantie bietet, dass sich das manuell installierte Programm genauso verhält wie das entsprechende Paket, und andere Pakete, die von ihm abhängen, würden nicht ordnungsgemäß funktionieren.
			</para>
			 <para>
				Ein Meta-Paket besteht dagegen vor allem aus einer Ansammlung von Abhängigkeiten, so dass das Installieren eines Meta-Pakets im Endeffekt in einem Schritt eine Reihe weiterer Pakete mit sich bringt.
			</para>
			 <para>
				Diese beiden Paketarten können mit den Befehlen <command>equivs-control</command> und <command>equivs-build</command> erstellt werden (in dem Paket <emphasis role="pkg">equivs</emphasis>). Der Befehl <command>equivs-control <replaceable>datei</replaceable></command> erstellt eine Debian-Header-Datei, die so editiert werden sollte, dass sie den Namen des erwarteten Pakets, seine Versionsnummer, den Namen des Betreuers, seine Abhängigkeiten und eine Beschreibung enthält. Andere Zeilen ohne einen vorgegebenen Wert sind optional und können gelöscht werden. Die Zeilen <literal>Copyright</literal>, <literal>Changelog</literal>, <literal>Readme</literal> und <literal>Extra-Files</literal> sind in Debian-Paketen keine Standardzeilen; sie machen nur bei <command>equivs-build</command> Sinn und bleiben nicht in den Kopfzeilen des erstellten Pakets erhalten.
			</para>
			 <example>
				<title>Header-Datei des vorgetäuschten Pakets <emphasis>libxml-libxml-perl</emphasis></title>
				 
<programlisting>
Section: perl
Priority: optional
Standards-Version: 3.9.6

Package: libxml-libxml-perl
Version: 2.0116-1
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Depends: libxml2 (&gt;= 2.7.4)
Architecture: all
Description: Fake package - module manually installed in site_perl
 This is a fake package to let the packaging system
 believe that this Debian package is installed. 
 .
 In fact, the package is not installed since a newer version
 of the module has been manually compiled &amp; installed in the
 site_perl directory.</programlisting>

			</example>
			 <para>
				Der nächste Schritt besteht darin, das Debian-Paket mit dem Befehl <command>equivs-build <replaceable>datei</replaceable></command> zu erstellen. Voilà: das Paket wurde im aktuellen Verzeichnis erstellt und kann wie jedes andere Debian-Paket behandelt werden.
			</para>

		</section>
		 <section>
			<title>Einfaches Dateiarchiv</title>
			 <para>
				Die Falcot-Corp.-Administratoren müssen ein Debian-Paket erstellen, um die Bereitstellung einer Reihe von Dokumenten auf einer großen Anzahl von Rechnern zu erleichtern. Der für diese Aufgabe zuständige Administrator liest zunächst den „Leitfaden für neue Debian-Betreuer“ und beginnt dann, an seinem ersten Paket zu arbeiten. <ulink type="block" url="https://www.debian.org/doc/manuals/maint-guide/" />
			</para>
			 <para>
				Der erste Schritt besteht darin, ein Verzeichnis namens <filename>falcot-data-1.0</filename> zu erstellen, um das Ziel-Quellpaket aufzunehmen. Das Paket wird logischerweise <literal>falcot-data</literal> heißen und die Versionsnummer <literal>1.0</literal> tragen. Der Administrator legt die Dokumentdateien dann in einem Unterverzeichnis namens <filename>data</filename> ab. Anschließend ruft er den Befehl <command>dh_make</command> auf (aus dem Paket <emphasis role="pkg">dh-make</emphasis>), um Dateien hinzuzufügen, die für den Paketerstellungsprozess benötigt werden, und die alle in einem Unterverzeichnis namens <filename>debian</filename> abgespeichert werden:
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>cd falcot-data-1.0</userinput>
<computeroutput>$ </computeroutput><userinput>dh_make --native</userinput>
<computeroutput>
Type of package: single binary, indep binary, multiple binary, library, kernel module, kernel patch?
 [s/i/m/l/k/n] </computeroutput><userinput>i</userinput>
<computeroutput>
Maintainer name : Raphael Hertzog
Email-Address   : hertzog@debian.org
Date            : Fri, 04 Sep 2015 12:09:39 -0400
Package Name    : falcot-data
Version         : 1.0
License         : gpl3
Type of Package : Independent
Hit &lt;enter&gt; to confirm:
Currently there is no top level Makefile. This may require additional tuning.
Done. Please edit the files in the debian/ subdirectory now. You should also
check that the falcot-data Makefiles install into $DESTDIR and not in / .
$</computeroutput></screen>
			 <para>
				Der ausgewählte Paket-Typ (<emphasis>indep binary</emphasis>) zeigt an, dass dieses Quellpaket ein einzelnes Binärpaket unabhängig von der Architektur (<literal>Architecture: all</literal>) erzeugen wird. <emphasis>Single binary</emphasis> fungiert als Pendant und führt zu einem einzelnen Binärpaket, das von der Zielarchitektur abhängig ist (<literal>Architecture: any</literal>). In diesem Fall ist der erste Ansatz relevanter, da das Paket nur Dokumente und keine binären Programme enthält, so dass es in ähnlicher Weise auf Rechnern aller Architekturen verwendet werden kann.
			</para>
			 <indexterm>
				<primary>Pakettypen</primary>
			</indexterm>
			 <indexterm>
				<primary>Paket</primary>
				<secondary>Typen</secondary>
			</indexterm>
			 <para>
				Der Typ <emphasis>multiple binary</emphasis> bezieht sich auf ein Quellpaket, das zu mehreren Binärpaketen führen wird. <emphasis>library</emphasis> ist ein Sonderfall und für dynamische Bibliotheken nützlich, da diese strengen Erstellungsregeln folgen müssen. In ähnlicher Weise sollte <emphasis>kernel module</emphasis> oder <emphasis>kernel patch</emphasis> auf Pakete beschränkt bleiben, die Kernel-Module enthalten.
			</para>
			 <sidebar> <title><emphasis>TIPP</emphasis> Name und E-Mail-Adresse des Betreuers</title>
			 <para>
				Die meisten der an der Paketbetreuung beteiligten Programme werden in den Umgebungsvariablen <varname>DEBFULLNAME</varname> und <varname>DEBEMAIL</varname> oder <varname>EMAIL</varname> nach Ihrem Namen und Ihrer E-Mail-Adresse Ausschau halten. Sie können es vermeiden, sie viele Male einzugeben, indem Sie sie ein für alle Mal festlegen. Falls Ihre übliche Konsole <command>bash</command> ist, genügt es, die folgenden zwei Zeilen zur Datei <filename>~/.bashrc</filename> hinzuzufügen (Sie werden selbstverständlich die angegebenen Werte durch die zutreffenden ersetzen!):
			</para>
			 
<programlisting>
export EMAIL="hertzog@debian.org"
export DEBFULLNAME="Raphael Hertzog"</programlisting>
			 </sidebar> <para>
				Der Befehl <command>dh_make</command> erzeugt ein Unterverzeichnis namens <filename>debian</filename> mit zahlreichen Dateien. Einige von ihnen sind zwingend notwendig, insbesondere <filename>rules</filename>, <filename>control</filename>, <filename>changelog</filename> und <filename>copyright</filename>. Dateien mit der Erweiterung <filename>.ex</filename> sind Beispieldateien, die verwendet werden können, indem man sie bei Bedarf abändert (und die Erweiterung entfernt). Wenn sie nicht benötigt werden, ist es empfehlenswert, sie zu entfernen. Die Datei <filename>compat</filename> sollte erhalten bleiben, da sie für das ordnungsgemäße Funktionieren der Programmgarnitur <emphasis>debhelper</emphasis> (alle Dateien, die mit dem Präfix <command>dh_</command> beginnen) erforderlich ist, die in verschiedenen Stadien des Paketerstellungsprozesses verwendet wird.
			</para>
			 <para>
				Die Datei <filename>copyright</filename> muss Informationen zu den Verfassern der in dem Paket aufgenommenen Dokumente und zu der zugehörigen Lizenz enthalten. In unserem Fall handelt es sich um interne Dokumente, und ihr Gebrauch beschränkt sich auf das Unternehmen Falcot Corp. Die standardmäßige <filename>changelog</filename>-Datei passt weitgehend. Es genügt, das „Initial release“ durch eine ausführlichere Erläuterung zu ersetzen und die Distribution von <literal>unstable</literal> nach <literal>internal</literal> zu ändern. Die Datei <filename>control</filename> wurde ebenfalls aktualisiert: das Feld <literal>Section</literal> wurde in <emphasis>misc</emphasis> umbenannt und die Felder <literal>Homepage</literal>, <literal>Vcs-Git</literal> und <literal>Vcs-Browser</literal> wurden entfernt. Das Feld <literal>Depends</literal> wurde um <literal>iceweasel | www-browser</literal> ergänzt, um die Verfügbarkeit eines Web-Browsers, der die in dem Paket enthaltenen Dokumente darstellen kann, sicherzustellen.
			</para>
			 <example>
				<title>The Datei <filename>control</filename></title>
				 
<programlisting>
Source: falcot-data
Section: misc
Priority: optional
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Build-Depends: debhelper (&gt;= 9)
Standards-Version: 3.9.5

Package: falcot-data
Architecture: all
Depends: iceweasel | www-browser, ${misc:Depends}
Description: Internal Falcot Corp Documentation
 This package provides several documents describing the internal
 structure at Falcot Corp.  This includes:
  - organization diagram
  - contacts for each department.
 .
 These documents MUST NOT leave the company.
 Their use is INTERNAL ONLY.</programlisting>

			</example>
			 <example>
				<title>Die Datei <filename>changelog</filename></title>
				 
<programlisting>
falcot-data (1.0) internal; urgency=low

  * Initial Release.
  * Let's start with few documents:
    - internal company structure;
    - contacts for each department.

 -- Raphael Hertzog &lt;hertzog@debian.org&gt;  Fri, 04 Sep 2015 12:09:39 -0400</programlisting>

			</example>
			 <example>
				<title>Die Datei <filename>copyright</filename></title>
				 
<programlisting>
Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: falcot-data

Files: *
Copyright: 2004-2015 Falcot Corp
License: 
 All rights reserved.</programlisting>

			</example>
			 <sidebar> <title><emphasis>ZURÜCK ZU DEN GRUNDLAGEN</emphasis> Die Datei <filename>Makefile</filename></title>
			 <indexterm>
				<primary><filename>Makefile</filename></primary>
			</indexterm>
			 <para>
				Eine <filename>Makefile</filename>-Datei ist ein Skript, das vom Programm <command>make</command> benutzt wird; es beschreibt Regeln, wie ein Satz von Dateien aufeinander aufbauend in einem Abhängigkeitsbaum zu erstellen ist (zum Beispiel kann ein Programm aus einem Satz von Quelldateien erstellt werden). Die Datei <filename>Makefile</filename> beschreibt diese Regeln in folgendem Format:
			</para>
			 
<programlisting>
target: source1 source2 ...
        command1
        command2</programlisting>
			 <para>
				Eine derartige Regel ist folgendermaßen zu interpretieren: Falls eine der Dateien in <literal>source*</literal> jünger ist als die Datei <literal>target</literal>, dann muss das Ziel unter Verwendung von <command>command1</command> und <command>command2</command> erstellt werden.
			</para>
			 <para>
				Man beachte, dass die Befehlszeilen mit einem Tabulatorzeichen beginnen müssen; und beachten Sie auch, dass, wenn eine Zeile mit einem Gedankenstrich beginnt (<literal>-</literal>), ein Scheitern dieses Befehls den gesamten Prozess nicht unterbricht.
			</para>
			 </sidebar> <para>
				Die Datei <filename>rules</filename> enthält normalerweise einen Satz von Regeln, die verwendet werden, um das Programm zu konfigurieren, zu erstellen und in ein speziell dafür vorgesehenes Unterverzeichnis (das nach dem erstellten Binärpaket benannt ist) zu installieren. Der Inhalt dieses Unterverzeichnisses wird dann innerhalb des Debian-Pakets archiviert, als wäre es das Wurzelverzeichnis des Dateisystems. In unserem Fall werden die Dateien in dem Unterverzeichnis <filename>debian/falcot-data/usr/share/falcot-data/</filename> installiert, so dass die Dateien beim Installieren des erstellten Pakets unter <filename>/usr/share/falcot-data/</filename> eingerichtet werden. Die Datei <filename>rules</filename> wird als <filename>Makefile</filename> mit einigen Standardzielen benutzt (einschließlich <literal>clean</literal> und <literal>binary</literal>, die verwendet werden, um das Quellverzeichnis aufzuräumen beziehungsweise das Binärpaket zu erstellen).
			</para>
			 <para>
				Obwohl diese Datei im Zentrum des Prozesses steht, enthält sie in zunehmendem Maße nur das absolute Minimum zur Ausführung eines Standardbefehlssatzes, der vom Hilfsprogramm <command>debhelper</command> bereitgestellt wird. Dies ist für durch <command>dh_make</command> erzeugte Dateien der Fall. Um unsere Dateien zu installieren, konfigurieren wir einfach das Verhalten des Befehls <command>dh_install</command>, indem wir die folgende <filename>debian/falcot-data.install</filename>-Datei erstellen:
			</para>
			 
<programlisting>
data/* usr/share/falcot-data/</programlisting>
			 <para>
				Jetzt kann das Paket erstellt werden. Wir werden dem Ganzen noch einen Anstrich geben. Da die Administratoren möchten, dass über die Menüs der grafischen Arbeitsumgebungen leicht auf die Dokumente zugegriffen werden kann, fügen wir eine Datei <filename>falcot-data.desktop</filename> hinzu und installieren in <filename>/usr/share/applications</filename> indem wir eine Zweite Zeile zu <filename>debian/falcot-data.install</filename> hinzufügen.
			</para>
			 <example>
				<title>The Datei <filename>falcot-data.desktop</filename></title>
				 
<programlisting>
[Desktop Entry]
Name=Internal Falcot Corp Documentation
Comment=Starts a browser to read the documentation
Exec=x-www-browser /usr/share/falcot-data/index.html
Terminal=false
Type=Application
Categories=Documentation;</programlisting>

			</example>
			 <para>
				Die aktualisierte Datei <filename>debian/falcot-data.install</filename> sieht so aus:
			</para>
			 
<programlisting>
data/* usr/share/falcot-data/
falcot-data.desktop usr/share/applications/</programlisting>
			 <para>
				Unser Quellpaket ist nun fertig. Wir müssen nur noch mit derselben Methode, die wir zuvor für die Wiederherstellung von Paketen benutzt haben, das Binärpaket erzeugen: wir führen im Verzeichnis <filename>falcot-data-1.0</filename> den Befehl <command>dpkg-buildpackage -us -uc</command> aus.
			</para>

		</section>

	</section>
	 <section id="sect.setup-apt-package-repository">
		<title>Ein Paket-Depot für APT erstellen</title>
		 <indexterm>
			<primary>Paketarchiv</primary>
		</indexterm>
		 <indexterm>
			<primary>Paket</primary>
			<secondary>Debian</secondary>
			<tertiary>Archiv</tertiary>
		</indexterm>
		 <para>
			Falcot Corp. hat sukzessive damit begonnen, eine Anzahl von Debian-Paketen zu betreuen, die entweder aus bestehenden Paketen lokal geändert oder von Grund auf neu erstellt wurden, um interne Daten und Programme zu verteilen.
		</para>
		 <para>
			Um ihren Einsatz zu erleichtern, möchten sie diese Pakete in ein Paketarchiv integrieren, das direkt von APT benutzt werden kann. Aus offensichtlichen verwaltungstechnischen Gründen möchten sie dabei interne Pakete von lokal neu erstellten Paketen trennen. Am Ende sollen die entsprechenden Einträge in der Datei <filename>/etc/apt/sources.list.d/falcot.list</filename> wie folgt aussehen:
		</para>
		 
<programlisting>
deb http://packages.falcot.com/ updates/
deb http://packages.falcot.com/ internal/</programlisting>
		 <indexterm>
			<primary><command>mini-dinstall</command></primary>
		</indexterm>
		 <para>
			Die Administratoren konfigurieren daher auf ihrem internen HTTP-Server einen virtuellen Host, bei dem <filename>/srv/vhosts/packages/</filename> das Wurzelverzeichnis des dazugehörigen Speicherplatzes ist. Die Verwaltung des Archivs selbst wird dem Befehl <command>mini-dinstall</command> (im ähnlich genannten Paket) übertragen. Dieses Hilfsprogramm behält ein Verzeichnis namens <filename>incoming/</filename> im Auge (in unserem Fall <filename>/srv/vhosts/packages/mini-dinstall/incoming/</filename>) und wartet dort auf neue Pakete; wenn ein neues Paket hochgeladen wird, wird es unter <filename>/srv/vhosts/packages/</filename> in ein Debian-Archiv installiert. Der Befehl <command>mini-dinstall</command> liest die Datei <filename>*.changes</filename>, die erstellt wird, wenn das Debian-Paket erzeugt wird. Diese Dateien enthalten eine Liste aller übrigen Dateien, die dieser Version des Pakets zugeordnet sind (<filename>*.deb</filename>, <filename>*.dsc</filename>, <filename>*.diff.gz</filename>/<filename>*.debian.tar.gz</filename>, <filename>*.orig.tar.gz</filename> oder ihre Entsprechungen bei anderen Komprimierungsprogrammen), und diese lassen <command>mini-dinstall</command> wissen, welche Dateien installiert werden sollen. Die Dateien des Typs <filename>*.changes</filename> enthalten im jüngsten <filename>debian/changelog</filename>-Eintrag auch den Namen der Zieldistribution (häufig <literal>unstable</literal>), und <command>mini-dinstall</command> verwendet diese Information, um zu entscheiden, wo das Paket installiert werden soll. Deshalb müssen Administratoren dieses Feld immer ändern, bevor sie ein Paket erstellen und es in Abhängigkeit vom Zielort auf <literal>internal</literal> oder <literal>updates</literal> einstellen. <command>mini-dinstall</command> erzeugt dann die von APT benötigten Dateien, wie zum Beispiel <filename>Packages.gz</filename>.
		</para>
		 <sidebar> <title><emphasis>ALTERNATIVE</emphasis> <command>apt-ftparchive</command></title>
		 <indexterm>
			<primary><command>apt-ftparchive</command></primary>
		</indexterm>
		 <para>
			Falls Ihnen <command>mini-dinstall</command> für Ihre Ansprüche an ein Debian-Archiv als zu kompliziert erscheint, können sie stattdessen auch den Befehl <command>apt-ftparchive</command> verwenden. Dieses Hilfsprogramm durchsucht den Inhalt eines Verzeichnisses und zeigt (in seiner Standardausgabe) eine entsprechende <filename>Packages</filename>-Datei an. Im Falle von Falcot Corp. könnten die Administratoren die Pakete direkt nach <filename>/srv/vhosts/packages/updates/</filename> oder <filename>/srv/vhosts/packages/internal/</filename> hochladen und dann die folgenden Befehle ausführen, um die <filename>Packages.gz</filename>-Dateien zu erstellen:
		</para>
		 
<screen>
<computeroutput>$ </computeroutput><userinput>cd /srv/vhosts/packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages updates &gt;updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages internal &gt;internal/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip internal/Packages</userinput></screen>
		 <para>
			Der Befehl <command>apt-ftparchive sources</command> ermöglicht es, in ähnlicher Weise <filename>Sources.gz</filename>-Dateien zu erstellen.
		</para>
		 </sidebar> <para>
			Zur Konfigurierung von <command>mini-dinstall</command> muss eine Datei namens <filename>~/.mini-dinstall.conf</filename> eingerichtet werden; im Falle von Falcot Corp. sieht ihr Inhalt folgendermaßen aus:
		</para>
		 
<programlisting>
[DEFAULT]
archive_style = flat
archivedir = /srv/vhosts/packages

verify_sigs = 0
mail_to = admin@falcot.com

generate_release = 1
release_origin = Falcot Corp
release_codename = stable

[updates]
release_label = Recompiled Debian Packages

[internal]
release_label = Internal Packages</programlisting>
		 <para>
			Eine beachtenswerte Entscheidung betrifft die Erzeugung der <filename>Release</filename>-Dateien für jedes Archiv. Dies ist für die Verwaltung der Prioritäten bei der Paketinstallation unter Verwendung der Konfigurationsdatei <filename>/etc/apt/preferences</filename> hilfreich (zu Einzelheiten siehe das Kapitel über die APT-Konfigurierung unter <xref linkend="sect.apt.priorities" />).
		</para>
		 <sidebar> <title><emphasis>SICHERHEIT</emphasis> <command>mini-dinstall</command> und Berechtigungen</title>
		 <para>
			Da <command>mini-dinstall</command> so konzipiert ist, dass es als normaler Benutzer läuft, besteht keine Notwendigkeit, es als Root auszuführen. Am einfachsten ist es, alles im Benutzerkonto des Administrators zu konfigurieren, der für die Erstellung der Debian-Pakete zuständig ist. Da nur dieser Administrator die erforderlichen Berechtigungen zur Speicherung von Dateien im Verzeichnis <filename>incoming/</filename> hat, können wir daraus schließen, dass der Administrator den Ursprung jedes Pakets vor seiner Verwendung autorisiert hat, und dass <command>mini-dinstall</command> dies daher nicht noch einmal tun muss. Hieraus erklärt sich der Parameter <literal>verify_sigs = 0</literal> (der bedeutet, dass Signaturen nicht verifiziert zu werden brauchen). Jedoch können wir bei sensiblen Paketinhalten die Einstellung ändern und bestimmen, dass mit einem Schlüsselring authentifiziert wird, der die öffentlichen Schlüssel der Personen enthält, die Pakete erstellen dürfen (konfiguriert mit dem Parameter <literal>extra_keyrings</literal>); <command>mini-dinstall</command> überprüft dann den Ursprung jedes ankommenden Pakets, indem es die in den <filename>*.changes</filename>-Dateien integrierte Signatur analysiert.
		</para>
		 </sidebar> <para>
			Der Aufruf des Befehls <command>mini-dinstall</command> startet genau genommen den Daemon im Hintergrund. Solange dieser Daemon läuft, wird er jede halbe Stunde im Verzeichnis <filename>incoming/</filename> nach neuen Paketen sehen; wenn ein neues Paket eintrifft, wird es ins Archiv verschoben, und die entsprechenden Dateien <filename>Packages.gz</filename> und <filename>Sources.gz</filename> werden erneuert. Falls es problematisch sein sollte, einen Daemon auszuführen, kann <command>mini-dinstall</command> auch jedes Mal, wenn ein Paket in das Verzeichnis <filename>incoming/</filename> hochgeladen wird, manuell im Stapelverarbeitungsmodus (mit der Option <literal>-b</literal>) aufgerufen werden. Weitere von <command>mini-dinstall</command> angebotene Möglichkeiten sind auf seiner Handbuchseite <citerefentry><refentrytitle>mini-dinstall</refentrytitle>
			 <manvolnum>1</manvolnum></citerefentry> dokumentiert.
		</para>
		 <sidebar> <title><emphasis>EXTRA</emphasis> Ein signiertes Archiv erzeugen</title>
		 <para>
			APT überprüft bei den Paketen, die es handhabt, vor ihrer Installation eine Reihe kryptographischer Signaturen um ihre Authentizität zu gewährleisten (siehe <xref linkend="sect.package-authentication" />). Private APT-Archive können daher ein Problem darstellen, da die Rechner, die sie verwenden, fortlaufend Warnungen vor nicht signierten Paketen anzeigen. Ein sorgfältiger Administrator wird daher private Archive mit dem sicheren APT-Mechanismus integrieren.
		</para>
		 <para>
			Um diesen Vorgang zu erleichtern, enthält <command>mini-dinstall</command> die Konfigurationsoption <literal>release_signscript</literal>, mit der es möglich ist, ein Skript zur Erzeugung der Signatur zu spezifizieren. Ein guter Ausgangspunkt ist das Skript <filename>sign-release.sh</filename>, das vom Paket <emphasis role="pkg">mini-dinstall</emphasis> im Verzeichnis <filename>/usr/share/doc/mini-dinstall/examples/</filename> bereitgestellt wird; lokale Änderungen könnten angebracht sein.
		</para>
		 </sidebar>
	</section>
	 <section id="sect.becoming-package-maintainer">
		<title>Paketbetreuer werden</title>
		 <section>
			<title>Lernen Pakete zu erstellen</title>
			 <para>
				Das Erstellen eines qualitativ hochwertigen Debian-Pakets ist nicht immer einfach, und um Paketbetreuer zu werden, muss man sowohl in der Theorie als auch in der Praxis einiges lernen. Es geht nicht nur darum, Software zu erstellen und zu installieren; vielmehr entsteht der Großteil der Komplexität aus dem Verständnis für die Probleme und Konflikte, und im Weiteren für die Wechselwirkungen mit der Unzahl der anderen verfügbaren Pakete.
			</para>
			 <section>
				<title>Regeln</title>
				 <para>
					Ein Debian-Paket muss den genauen Regeln des Debian-Regelwerks entsprechen, und jeder Paketbetreuer muss sie kennen. Es ist nicht erforderlich, sie auswendig zu kennen, vielmehr muss man wissen, dass sie existieren, und jedes Mal in ihnen nachsehen, wenn eine Entscheidung mehr als eine banale Alternative darstellt. Jeder Debian-Betreuer hat Fehler gemacht, weil er eine Regel nicht kannte, jedoch ist dies kein ernstes Problem, solange der Fehler behoben wird, wenn ein Benutzer einen Fehlerbericht verfasst (was dank der erfahrenen Benutzer normalerweise recht bald geschieht). <ulink type="block" url="http://www.debian.org/doc/debian-policy/" />
				</para>

			</section>
			 <section>
				<title>Verfahren</title>
				 <indexterm>
					<primary>Debian Entwickler-Referenz</primary>
				</indexterm>
				 <para>
					Debian ist keine einfache Ansammlung individueller Pakete. Jedermanns Paketerstellungsarbeit ist Teil eines gemeinschaftlichen Projekts; als Debian-Entwickler muss man auch wissen, wie das Debian-Projekt als Ganzes funktioniert. Jeder Entwickler wird früher oder später mit anderen zusammenwirken. Die Debian Entwickler-Referenz (im Paket <emphasis role="pkg">developers-reference</emphasis>) fasst zusammen, was jeder Entwickler wissen muss, um möglichst reibungslos mit den verschiedenen Teams innerhalb des Projekts zusammenzuarbeiten, und um die größtmöglichen Vorteile aus den verfügbaren Ressourcen zu ziehen. Dieses Dokument zählt auch eine Anzahl von Pflichten auf, deren Erfüllung von einem Entwickler erwartet wird. <ulink type="block" url="https://www.debian.org/doc/manuals/developers-reference/" />
				</para>

			</section>
			 <section>
				<title>Hilfsprogramme</title>
				 <para>
					Zahlreiche Hilfsprogramme unterstützen Paketbetreuer bei ihrer Arbeit. Dieser Abschnitt beschreibt sie kurz, aber stellt nicht alle Einzelheiten dar, da jedes von ihnen eine eigene umfassende Dokumentation besitzt.
				</para>
				 <section>
					<title>Das Programm <command>lintian</command></title>
					 <indexterm>
						<primary><command>lintian</command></primary>
					</indexterm>
					 <para>
						Dieses Hilfsprogramm ist eines der wichtigsten: es ist der Debian-Paketüberprüfer. Es beruht auf einer langen Reihe von Tests, die aus dem Debian-Regelwerk erstellt worden sind, und entdeckt schnell und automatisch viele Fehler, die vor der Veröffentlichung eines Pakets behoben werden können.
					</para>
					 <para>
						Dieses Programm ist nur ein Gehilfe und versteht manchmal etwas falsch (zum Beispiel ist <command>lintian</command> manchmal nicht aktuell, da sich das Debian-Regelwerk im Laufe der Zeit verändert). Es ist auch nicht vollständig flächendeckend: keine Lintian-Fehlermeldung zu erhalten, sollte nicht als Nachweis verstanden werden, dass das Paket perfekt ist; bestenfalls verhindert es die häufigsten Fehler.
					</para>

				</section>
				 <section>
					<title>Das Programm <command>piuparts</command></title>
					 <indexterm>
						<primary><command>piuparts</command></primary>
					</indexterm>
					 <para>
						Dies ist ein weiteres wichtiges Tool; es automatisiert die Installation, Aktualisierung und Deinstallation eines Pakets (in einer isolierten Umgebung) und prüft, dass keine dieser Aktivitäten zu einem Fehler führt. Es kann helfen, fehlende Abhängigkeiten aufzudecken und es ermittelt Dateien, die fälschlicher Weise nach einer Deinstallation auf dem System verblieben sind.
					</para>

				</section>
				 <section>
					<title>devscripts</title>
					 <indexterm>
						<primary><emphasis role="pkg">devscripts</emphasis></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debuild</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>dch</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>uscan</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debi</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debc</command></primary>
					</indexterm>
					 <para>
						Das Paket <emphasis role="pkg">devscripts</emphasis> enthält zahlreiche Programme, die einem Debian-Entwickler bei einem weiten Spektrum seiner Arbeit helfen:
					</para>
					 <itemizedlist>
						<listitem>
							<para>
								<command>debuild</command> ermöglicht es, ein Paket zu erzeugen (mit <command>dpkg-buildpackage</command>) und dann <command>lintian</command> auszuführen, um seine Übereinstimmung mit dem Debian-Regelwerk zu überprüfen.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debclean</command> bereinigt ein Quellpaket, nachdem ein Binärpaket erzeugt worden ist.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>dch</command> ermöglicht das schnelle und einfache Editieren einer <filename>debian/changelog</filename>-Datei in einem Quellpaket.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>uscan</command> überprüft, ob eine neue Version eines Programms vom ursprünglichen Verfasser veröffentlicht worden ist; dies erfordert eine <filename>debian/watch</filename>-Datei mit einer Beschreibung des Ortes derartiger Veröffentlichungen.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debi</command> ermöglicht es, das gerade erzeugte Debian-Paket (mit <command>dpkg -i</command>) zu installieren, ohne dabei seinen vollständigen Namen und Pfad eingeben zu müssen.
							</para>

						</listitem>
						 <listitem>
							<para>
								In ähnlicher Weise ermöglicht es <command>debc</command>, den Inhalt eines vor kurzem erzeugten Pakets (mit <command>dpkg -c</command>) abzufragen, ohne seinen vollständigen Namen und Pfad eingeben zu müssen.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>bts</command> überwacht das Fehlerverfolgungssystem von der Befehlszeile aus; dieses Programm erzeugt automatisch die passenden E-Mails.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debrelease</command> lädt ein kürzlich erzeugtes Paket auf einen entfernten Server hoch, ohne den vollständigen Namen und Pfad der dazugehörigen <filename>.changes</filename>-Datei eingeben zu müssen.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debsign</command> signiert die <filename>*.dsc</filename>- und <filename>*.changes</filename>-Dateien.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>uupdate</command> automatisiert die Erstellung einer überarbeiteten Paketversion, wenn eine neue Ursprungsversion veröffentlicht worden ist.
							</para>

						</listitem>

					</itemizedlist>

				</section>
				 <section>
					<title><emphasis role="pkg">debhelper</emphasis> und <emphasis role="pkg">dh-make</emphasis></title>
					 <indexterm>
						<primary><emphasis>debhelper</emphasis></primary>
					</indexterm>
					 <indexterm>
						<primary><emphasis>dh-make</emphasis></primary>
					</indexterm>
					 <para>
						Debhelper ist ein Satz von Skripten, die die Erstellung regelkonformer Pakete erleichtern; diese Skripte werden von <filename>debian/rules</filename> aufgerufen. Debhelper wird in Debian in großem Umfang angewendet, wie aus der Tatsache ersichtlich ist, dass es von der Mehrheit der offiziellen Debian-Pakete benutzt wird. Alle in ihm enthaltenen Befehle führen das Präfix <command>dh_</command>.
					</para>
					 <para>
						Das Skript <command>dh_make</command> (im Paket <emphasis>dh-make</emphasis>) erstellt in einem Verzeichnis, das zu Anfang die Quellen einer Software enthält, Dateien, die für die Erzeugung eines Debian-Pakets erforderlich sind. Wie aufgrund des Programmnamens vermutet werden kann, verwenden die erzeugten Dateien standardmäßig debhelper.
					</para>

				</section>
				 <section>
					<title><command>dupload</command> und <command>dput</command></title>
					 <indexterm>
						<primary><command>dupload</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>dput</command></primary>
					</indexterm>
					 <para>
						Die Befehle <command>dupload</command> und <command>dput</command> ermöglichen es, ein Debian-Paket auf einen (möglicherweise entfernten) Server hochzuladen. Auf diese Weise können Entwickler ihr Paket auf dem Debian-Hauptserver (<literal>ftp-master.debian.org</literal>) veröffentlichen, so dass es in das Archiv integriert und über die Spiegelserver verteilt werden kann. Diese Befehle nehmen eine <filename>*.changes</filename>-Datei als Parameter und leiten die übrigen relevanten Dateien aus ihrem Inhalt ab.
					</para>

				</section>

			</section>

		</section>
		 <section>
			<title>Annahmeverfahren</title>
			 <para>
				Ein Debian-Entwickler zu werden, ist nicht einfach eine administrative Angelegenheit. Das Verfahren besteht aus mehreren Schritten, und es ist mehr eine Initiation als ein Auswahlprozess. In jedem Fall ist es formalisiert und gut dokumentiert, so dass jeder seine Entwicklung auf der Webseite verfolgen kann, die speziell für das Annahmeverfahren für neue Entwickler vorgesehen ist. <ulink type="block" url="https://nm.debian.org/" />
			</para>
			 <sidebar> <title><emphasis>EXTRA</emphasis> Leichtgewichtiges Verfahren für „Debian-Betreuer“</title>
			 <para>
				„Debian-Betreuer“ ist ein weiterer Status der weniger Rechte verleiht als „Debian Entwickler“ und dessen zugehöriger Prozess schneller abläuft. Mit diesem Status zugestandenen Rechte reichen nur dazu aus, die eigenen Pakete zu betreuen. Ein Debian-Entwickler muss nur zu Anfang ein Upload überprüfen und eine Erklärung dahingehend abgeben, dass er dem angehenden Betreuer zutraut, das Paket eigenständig zu betreuen.
			</para>
			 <indexterm>
				<primary>Debian-Betreuer</primary>
			</indexterm>
			 </sidebar> <section>
				<title>Voraussetzungen</title>
				 <para>
					Von allen Kandidaten wird erwartet, dass sie wenigstens ausreichende Englischkenntnisse haben. Dies ist auf allen Ebenen erforderlich: natürlich für die anfängliche Kommunikation mit dem Prüfer, aber auch später, da Englisch für den Großteil der Dokumentation die bevorzugte Sprache ist; auch Paketbenutzer werden in Englisch kommunizieren, wenn sie Fehler melden, und werden Antworten in Englisch erwarten.
				</para>
				 <para>
					Die andere Voraussetzung bezieht sich auf die Motivation. Ein Debian-Entwickler zu werden, ist ein Prozess, der nur dann Sinn macht, wenn der Kandidat weiß, dass sein Interesse an Debian viele Monate lang anhalten wird. Der Aufnahmeprozess selbst kann mehrere Monate dauern, und Debian benötigt Entwickler langfristig; jedes Paket benötigt dauerhafte Betreuung und nicht nur einen anfänglichen Upload.
				</para>

			</section>
			 <section>
				<title>Registrierung</title>
				 <para>
					Er erste (wirkliche) Schritt besteht darin, einen Sponsor oder Befürworter zu finden; hierunter ist ein offizieller Entwickler zu verstehen, der bereit ist zu bestätigen, dass er davon überzeugt ist, dass die Aufnahme von <emphasis>X</emphasis> für Debian von Vorteil sein würde. Dies setzt normalerweise voraus, dass der Kandidat bereits innerhalb der Gemeinschaft aktiv gewesen und seine Arbeit anerkannt ist. Falls der Kandidat schüchtern ist und seine Arbeit nicht öffentlich angepriesen hat, kann er versuchen, einen Debian-Entwickler zu seiner Unterstützung zu bewegen, indem er ihm seine Arbeit privat zeigt.
				</para>
				 <indexterm>
					<primary>Schlüsselpaar</primary>
				</indexterm>
				 <para>
					Zur gleichen Zeit muss der Kandidat mit GnuPG ein öffentliches/privates RSA-Schlüsselpaar erzeugen, das von wenigstens zwei offiziellen Debian-Entwicklern signiert werden sollte. Die Signatur authentifiziert den im Schlüssel enthaltenen Namen. Während einer Keysigning-Party muss jeder Teilnehmer seinen Personalausweis zusammen mit seiner Schlüsselkennung vorweisen. Dieser Schritt bestätigt die offizielle Verbindung zwischen der Person und den Schlüsseln. Daher erfordert diese Signatur, dass man sich persönlich trifft. Falls Sie noch keine Debian-Entwickler bei einer öffentlichen Konferenz über freie Software getroffen haben, können Sie explizit in der Nähe wohnende Entwickler suchen, indem Sie als Ausgangspunkt die auf der folgenden Webseite stehende Liste benutzen. <ulink type="block" url="https://wiki.debian.org/Keysigning" />
				</para>
				 <para>
					Nachdem die Registrierung auf <literal>nm.debian.org</literal> von einem Unterstützer bestätigt wurde, wird dem Kandidaten ein <emphasis>Antragsmanager</emphasis> zugewiesen. Dieser Antragsmanager wird fortan das Verfahren weiterverfolgen und die verschiedenen Schritte, die dieser Prozess umfasst, bestätigen.
				</para>
				 <para>
					Die erste Überprüfung ist eine Personenkontrolle. Falls Sie bereits einen von zwei Debian-Entwicklern signierten Schlüssel besitzen, ist dieser Schritt einfach; anderenfalls wird der Antragsmanager versuchen, Ihnen bei Ihrer Suche nach in der Nähe lebenden Debian-Entwicklern zu helfen, indem er ein Treffen und eine Schlüsselsignierung organisiert.
				</para>

			</section>
			 <section>
				<title>Die Prinzipien akzeptieren</title>
				 <para>
					Diesen administrativen Formalitäten folgen philosophische Erwägungen. Es geht darum sicherzustellen, dass der Kandidat den Gesellschaftsvertrag und die Prinzipien Freier Software versteht und akzeptiert. Es ist nur möglich, Debian beizutreten, wenn man die Werte teilt, die die derzeitigen Entwickler eint, wie sie in den Gründungstexten bekundet sind (und zusammengefasst in <xref linkend="the-debian-project" />).
				</para>
				 <para>
					Darüber hinaus wird von jedem Kandidaten, der Debian beitreten möchte, erwartet, dass er die Funktionsweise des Projekts kennt, und wie man angemessen zusammenwirkt, um Probleme zu lösen, denen er im Laufe der Zeit zweifelsohne begegnen wird. Alle diese Informationen sind im Allgemeinen in den Handbüchern dokumentiert, die für die neuen Betreuer bestimmt sind, sowie in der Debian Entwickler-Referenz. Das aufmerksame Lesen dieser Dokumente sollte genügen, um die Fragen des Prüfers beantworten zu können. Falls die Antworten nicht befriedigen, wird der Kandidat darüber informiert. Er wird dann die entsprechende Dokumentation (nochmals) lesen müssen, bevor er es erneut versucht. In den Fällen, in denen die vorhandene Dokumentation die passenden Antworten auf die Frage nicht enthält, kann der Kandidat normalerweise mit einiger praktischer Erfahrung in Debian die Antwort finden, oder vielleicht auch, indem er mit anderen Debian-Entwicklern spricht. Dieses Verfahren stellt sicher, dass Kandidaten in gewissem Umfang in Debian involviert werden, bevor sie ein vollständiger Teil von ihm werden. Es ist ein ausdrücklicher Grundsatz, dass Kandidaten, die schließlich dem Projekt beitreten, als ein weiteres Teil eines unendlich erweiterbaren Puzzles integriert werden.
				</para>
				 <indexterm>
					<primary><emphasis>Philosophie &amp; Prozeduren</emphasis></primary>
				</indexterm>
				 <para>
					Dieser Schritt wird im Jargon der am Betreuungsprozess beteiligten Entwickler gewöhnlich <emphasis>Philosophie &amp; Prozeduren</emphasis> genannt (oder kurz P&amp;P).
				</para>

			</section>
			 <section>
				<title>Fähigkeiten überprüfen</title>
				 <para>
					Jeder Antrag, ein offizieller Debian-Entwickler zu werden, muss begründet werden. Um Projektmitglied zu werden, muss man zeigen, dass dieser Status gerechtfertigt ist, und dass er dem Kandidaten seine Unterstützung für Debian erleichtert. Die häufigste Begründung besteht darin, dass der Status als Debian-Entwickler die Betreuung eines Debian-Pakets erleichtert, aber dies ist nicht die einzige. Einige Entwickler treten dem Projekt bei, um zur Übertragung auf eine bestimmte Architektur beizutragen, andere möchten die Dokumentation verbessern und so weiter.
				</para>
				 <para>
					Dieser Schritt bietet dem Kandidaten die Möglichkeit zu erklären, was er innerhalb des Debian-Projekts zu tun beabsichtigt, und zu zeigen, was er zu diesem Zweck bereits getan hat. Debian ist ein pragmatisches Projekt, und es genügt nicht, etwas zu sagen, falls die Taten den Aussagen nicht entsprechen. Wenn die beabsichtigte Rolle innerhalb des Projekts sich auf die Paketbetreuung bezieht, wird im allgemeinen die erste Version des angehenden Pakets von einem Sponsor aus den Reihen der bereits registrierten Debian-Entwickler technisch überprüft und auf die Debian-Server hochgeladen.
				</para>
				 <sidebar> <title><emphasis>GEMEINSCHAFT</emphasis> Sponsern</title>
				 <indexterm>
					<primary>Sponsern</primary>
				</indexterm>
				 <para>
					Debian-Entwickler können Pakete, die von jemand anderem entwickelt werden, „sponsern“. Das heißt, dass sie sie in den offiziellen Debian-Paketdepots veröffentlichen, nachdem sie sie einer sorgfältigen Überprüfung unterzogen haben. Dieses Vorgehen ermöglicht es externen Personen, die noch nicht durch den für neue Betreuer erforderlichen Prozess gegangen sind, gelegentlich zum Projekt beizutragen. Gleichzeitig stellt es sicher, dass alle Pakete, die in Debian enthalten sind, stets von einem offiziellen Mitglied überprüft worden sind.
				</para>
				 </sidebar> <para>
					Schließlich überprüft der Prüfer die technischen (Paketerstellungs-)Fähigkeiten des Kandidaten mit einem ausführlichen Fragebogen. Falsche Antworten sind nicht erlaubt, aber die Beantwortungszeit ist nicht begrenzt. Die gesamte Dokumentation darf benutzt werden, und mehrere Versuche sind möglich, falls die ersten Antworten nicht befriedigend sind. Dieser Schritt beabsichtigt nicht zu diskriminieren, sondern wenigstens ein Mindestmaß an Wissen, über das alle neuen Mitwirkenden verfügen, sicherzustellen.
				</para>
				 <indexterm>
					<primary><emphasis>Aufgaben &amp; Fähigkeiten</emphasis></primary>
				</indexterm>
				 <para>
					Dieser Schritt wird im Jargon der Prüfer als <emphasis>Aufgaben &amp; Fähigkeiten</emphasis> (kurz: T&amp;S) bezeichnet.
				</para>

			</section>
			 <section>
				<title>Endgültige Bestätigung</title>
				 <para>
					Im allerletzten Schritt wird der gesamte Prozess durch einen DAM (<emphasis>Debian Account Manager</emphasis>) begutachtet. Der DAM wird alle vom Prüfer über den Kandidaten zusammengetragenen Informationen nachprüfen und dann entscheiden, ob ein Konto auf den Debian-Servern eingerichtet wird oder nicht. Falls zusätzliche Informationen benötigt werden, kann die Kontoerstellung verzögert werden. Ablehnungen sind recht selten, falls der Prüfer gute Arbeit bei der Verfolgung des Vorgangs geleistet hat, aber sie kommen manchmal vor. Sie sind niemals endgültig, und der Kandidat kann es später noch einmal versuchen.
				</para>
				 <para>
					Die Entscheidung des DAM ist bindend und (fast) ohne Einspruchsmöglichkeit, woraus sich erklärt, warum die Personen in dieser Position bereits häufig kritisiert worden sind.
				</para>

			</section>

		</section>

	</section>
</chapter>

