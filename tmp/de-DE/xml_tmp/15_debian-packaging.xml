<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="debian-packaging">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-debian-packaging.png" scalefit="1" />
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>Zurückportierung</keyword>
      <keyword>Neuerstellung</keyword>
      <keyword>Quellpaket</keyword>
      <keyword>Archiv</keyword>
      <keyword>Meta-Paket</keyword>
      <keyword>Debian-Entwickler</keyword>
      <keyword>Betreuer</keyword>
    </keywordset>
  </chapterinfo>
  <title>Ein Debian-Paket erstellen</title>
  <highlights>
    <para>Für einen Administrator, der regelmäßig mit Debian-Paketen umgeht, ist es durchaus normal, dass er eines Tages das Bedürfnis hat, seine eigenen Pakete zu erstellen oder ein vorhandenes Paket zu ändern. In diesem Kapitel sollen die häufigsten Fragen zu diesem Thema beantwortet und die Komponenten vorgestellt werden, die erforderlich sind, um die Vorteile der Debian-Infrastruktur möglichst gut zu nutzen. Mit etwas Glück könnten Sie, nachdem Sie sich an lokalen Paketen versucht haben, sogar das Bedürfnis verspüren, weiter zu gehen und sich am Debian-Projekt selbst zu beteiligen!</para>
  </highlights>
  <section id="sect.rebuilding-package">
    <title>Ein Paket aus seinen Quellen neu erstellen</title>

    <para>Rebuilding a binary package is required under several sets
    of circumstances. In some cases, the administrator needs a
    software feature that requires the software to be compiled from
    sources, with a particular compilation option; in others, the
    software as packaged in the installed version of Debian is not
    recent enough. In the latter case, the administrator will usually
    build a more recent package taken from a newer version of Debian —
    such as <emphasis role="distribution">Testing</emphasis> or even
    <emphasis role="distribution">Unstable</emphasis> — so that this
    new package works in their <emphasis role="distribution">Stable</emphasis> distribution; this operation
    is called “backporting”. As usual, care should be taken, before
    undertaking such a task, to check whether it has been done
    already — a quick look on the Debian Package Tracker for
    that package will reveal that information.
    <ulink type="block" url="https://tracker.debian.org/" />
    <indexterm><primary>backport</primary></indexterm>
    </para>
    <section>
      <title>Die Quellen besorgen</title>

      <para>Rebuilding a Debian package starts with getting its source
      code. The easiest way is to use the <command>apt-get source
      <replaceable>source-package-name</replaceable></command> command.
      This command requires a <literal>deb-src</literal> line in the
      <filename>/etc/apt/sources.list</filename> file, and up-to-date index
      files (i.e. <command>apt-get update</command>). These conditions
      should already be met if you followed the instructions from the
      chapter dealing with APT configuration (see <xref linkend="sect.apt-sources.list" />). Note however, that you will be
      downloading the source packages from the Debian version mentioned in
      the <literal>deb-src</literal> line. If you need another version, you
      may need to download it manually from a Debian mirror or from the web
      site. This involves fetching two or three files (with extensions
      <filename>*.dsc</filename> — for <emphasis>Debian Source
      Control</emphasis> —
      <filename>*.tar.<replaceable>comp</replaceable></filename>, and
      sometimes <filename>*.diff.gz</filename> or
      <filename>*.debian.tar.<replaceable>comp</replaceable></filename> —
      <replaceable>comp</replaceable> taking one value among
      <literal>gz</literal>, <literal>bz2</literal>
      or <literal>xz</literal> depending on the
      compression tool in use), then run the <command>dpkg-source -x
      <replaceable>file.dsc</replaceable></command> command. If the
      <filename>*.dsc</filename> file is directly accessible at a given
      URL, there is an even simpler way to fetch it all, with the
      <command>dget <replaceable>URL</replaceable></command> command. This
      command (which can be found in the <emphasis role="pkg">devscripts</emphasis> package) fetches the
      <filename>*.dsc</filename> file at the given address, then analyzes
      its contents, and automatically fetches the file or files referenced
      within. Once everything has been downloaded, it extracts the source
      package (unless the <literal>-d</literal> or
      <literal>--download-only</literal> option is used).</para>
    </section>
    <section>
      <title>Änderungen vornehmen</title>

      <para>The source of the package is now available in a directory named
      after the source package and its version (for instance,
      <emphasis>samba-4.1.17+dfsg</emphasis>); this is where we'll work on our
      local changes.</para>

      <para>The first thing to do is to change the package version number,
      so that the rebuilt packages can be distinguished from the original
      packages provided by Debian. Assuming the current version is
      <literal>2:4.1.17+dfsg-2</literal>, we can create version
      <literal>2:4.1.17+dfsg-2falcot1</literal>, which clearly indicates the
      origin of the package. This makes the package version number higher
      than the one provided by Debian, so that the package will easily
      install as an update to the original package. Such a change is best
      effected with the <command>dch</command> command (<emphasis>Debian
      CHangelog</emphasis>) from the <emphasis role="pkg">devscripts</emphasis> package, with an command such as
      <command>dch --local falcot</command>. This invokes a
      text editor (<command>sensible-editor</command> — this should be
      your favorite editor if it is mentioned in the
      <varname>VISUAL</varname> or <varname>EDITOR</varname> environment
      variables, and the default editor otherwise) to allow documenting the
      differences brought by this rebuild. This editor shows us that
      <command>dch</command> really did change the
      <filename>debian/changelog</filename> file.</para>

      <para>When a change in build options is required, the changes
      need to be made in <filename>debian/rules</filename>, which
      drives the steps in the package build process. In the simplest
      cases, the lines concerning the initial configuration
      (<literal>./configure …</literal>) or the actual build
      (<literal>$(MAKE) …</literal> or <literal>make …</literal>) are
      easy to spot. If these commands are not explicitly called, they
      are probably a side effect of another explicit command, in which
      case please refer to their documentation to learn more about how
      to change the default behavior. With packages using
      <command>dh</command>, you might need to add an override
      for the <command>dh_auto_configure</command> or
      <command>dh_auto_build</command> commands (see their respective
      manual pages for explanations on how to achieve this).</para>

      <para>Je nach den vor Ort vorgenommenen Veränderungen der Pakete kann auch eine Aktualisierung der Datei <filename>debian/control</filename>, die eine Beschreibung der erzeugten Pakete enthält, erforderlich sein. Diese Datei enthält insbesondere <literal>Build-Depends</literal>-Zeilen, die die Liste der Abhängigkeiten überwachen, die zum Zeitpunkt der Paketerstellung erfüllt sein müssen. Sie beziehen sich häufig auf Versionen von Paketen, die in der Distribution enthalten sind, aus der das Quellpaket stammt, jedoch in der Distribution, die für die Neuerstellung verwendet wird, möglicherweise nicht vorhanden sind. Es gibt kein automatisches Verfahren um herauszufinden, ob eine Abhängigkeit tatsächlich besteht, oder ob sie nur angegeben wird, um sicherzustellen, dass die Neuerstellung nur mit der jüngsten Version einer Programmbibliothek unternommen wird - dies ist die einzig verfügbare Möglichkeit, einen <emphasis>Autobuilder</emphasis> dazu zu zwingen, während einer Neuerstellung eine bestimmte Paketversion zu verwenden. Aus diesem Grund benutzen Debian-Betreuer häufig streng versionierte Erstellungsabhängigkeiten.</para>

      <para>Wenn Sie mit Sicherheit wissen, dass diese Erstellungsabhängigkeiten zu streng sind, haben Sie die Wahl, sie vor Ort zu lockern. Die Lektüre der Dateien, die den normalen Weg zur Erstellung des Programms dokumentieren - diese Dateien sind häufig <filename>INSTALL</filename> benannt - hilft Ihnen, die passenden Abhängigkeiten herauszufinden. Idealerweise sollten alle Abhängigkeiten durch die Distribution, die für die Neuerstellung verwendet wird, erfüllt werden. Wenn dies nicht der Fall ist, beginnt ein rekursiver Prozess, bei dem die im <literal>Build-Depends</literal>-Feld genannten Pakete zurückportiert werden müssen, bevor es das Zielpaket kann. Es kann sein, dass einige Pakete nicht zurückportiert werden müssen und während des Erstellungsprozesses in ihrem gegenwärtigen Zustand installiert werden können (ein namhaftes Beispiel ist <emphasis role="pkg">debhelper</emphasis>). Beachten Sie, dass der Prozess des Zurückportierens sehr schnell kompliziert werden kann, wenn Sie nicht aufpassen. Daher sollten Zurückportierungen so gering wie möglich gehalten werden.</para>

      <sidebar>
        <title><emphasis>TIPP</emphasis> <literal>Build-Depends</literal> installieren</title>
        <indexterm><primary><literal>Build-Depends</literal>, control field</primary></indexterm> 
	<para><command>apt-get</command> allows
	installing all packages mentioned in the
	<literal>Build-Depends</literal> fields of a source package
	available in a distribution mentioned in a
	<literal>deb-src</literal> line of the
	<filename>/etc/apt/sources.list</filename> file. This is a simple
	matter of running the <command>apt-get build-dep
	<replaceable>source-package</replaceable></command> command.</para>
      </sidebar>
    </section>
    <section>
      <title>Die Neuerstellung beginnen</title>

      <para>Wenn alle erforderlichen Veränderungen auf die Quellen angewendet worden sind, können wir damit beginnen, das eigentliche Binärpaket (die <filename>.deb</filename>-Datei) zu erstellen. Der gesamte Prozess wird durch den Befehl <command>dpkg-buildpackage</command> gesteuert.</para>

      <example>
        <title>Ein Paket neu erstellen</title>

        <screen><computeroutput>$ </computeroutput><userinput>dpkg-buildpackage -us -uc
</userinput><computeroutput>[...]
</computeroutput></screen>
      </example>

      <sidebar id="sidebar.fakeroot">
        <title><emphasis>HILFSPROGRAMM</emphasis> <command>fakeroot</command></title>

	<para>Im Wesentlichen besteht der Prozess der Paketerstellung einfach darin, eine Reihe von bestehenden (oder erstellten) Dateien in einem Archiv zusammenzufassen; die meisten dieser Dateien werden in diesem Archiv im Besitz von <emphasis>root</emphasis> stehen. Das ganze Paket unter diesem Benutzer zu erstellen, würde jedoch zu erhöhten Risiken führen; glücklicherweise kann dies mit dem Befehl <command>fakeroot</command> vermieden werden. Dieses Hilfsprogramm kann verwendet werden, um ein Programm auszuführen und ihm dabei den Eindruck zu vermitteln, dass es als <emphasis>root</emphasis> läuft und Dateien mit beliebigen Eigentumsrechten und Berechtigungen erstellt. Wenn das Programm das Archiv erstellt, das zum Debian-Paket werden wird, wird es dazu gebracht, ein Archiv zu erstellen, das Dateien enthält, die beliebigen Eigentümern gehören, einschließlich <emphasis>root</emphasis>. Dies ist so praktisch, dass <command>dpkg-buildpackage</command> bei der Paketerstellung <command>fakeroot</command> standardmäßig verwendet.</para>

	<para>Man beachte, dass das Programm nur dazu gebracht wird zu „glauben“, dass es unter einem privilegierten Konto läuft, und dass der Prozess in Wirklichkeit als der Benutzer läuft, der den Befehl <command>fakeroot <replaceable>programm</replaceable></command> ausführt (und dass die Dateien in Wirklichkeit mit den Berechtigungen dieses Benutzers erstellt werden). Zu keiner Zeit erlangt es tatsächlich Root-Privilegien, die es missbrauchen könnte.</para>
      </sidebar>

      <para>Der oben stehende Befehl kann scheitern, wenn die <literal>Build-Depends</literal>-Felder nicht aktualisiert worden sind, oder wenn die dazugehörigen Pakete nicht installiert sind. In diesem Fall ist es möglich, diese Kontrolle außer Kraft zu setzen, indem die Option <literal>-d</literal> an <command>dpkg-buildpackage</command> gegeben wird. Das ausdrückliche Ignorieren dieser Abhängigkeiten erhöht jedoch das Risiko, dass der Erstellungsprozess in einem späteren Stadium scheitert. Oder schlimmer noch, das Paket wird scheinbar richtig erstellt, läuft aber nicht ordnungsgemäß: einige Programme deaktivieren automatisch einige ihrer Leistungsmerkmale, wenn eine erforderliche Bibliothek zum Zeitpunkt der Erstellung nicht verfügbar ist.</para>

      <para>In den meisten Fällen benutzen Debian-Entwickler ein übergeordnetes Programm, wie zum Beispiel <command>debuild</command>; dieses führt <command>dpkg-buildpackage</command> wie üblich aus, fügt aber den Aufruf eines Programms hinzu, das zahlreiche Tests ausführt, um das erstellte Paket im Hinblick auf das Debian-Regelwerk zu überprüfen. Dieses Skript bereinigt auch die Umgebung, so dass lokale Umgebungsvariablen die Paketerstellung nicht „verschmutzen“. Der Befehl <command>debuild</command> ist eines der Hilfsprogramme in der <emphasis>devscripts</emphasis>-Suite, die eine gewisse Konsistenz und Konfiguration gemeinsam haben und so die Aufgabe des Betreuers einfacher machen.</para>

      <sidebar>
        <title><emphasis>KURZER BLICK</emphasis> <command>pbuilder</command></title>
        <indexterm><primary><command>pbuilder</command></primary></indexterm>

	<para>Das Programm <command>pbuilder</command> (im Paket ähnlichen Namens) ermöglicht es, ein Debian-Paket in einer <emphasis>chrooted</emphasis>-Umgebung zu erstellen. Es erstellt zunächst ein temporäres Verzeichnis, das ein minimales System zur Erstellung des Pakets enthält (einschließlich der Pakete, die im <emphasis>Build-Depends</emphasis>-Feld aufgeführt sind). Das Verzeichnis wird dann während des Erstellungsprozesses mit dem Befehl <command>chroot</command> als Wurzelverzeichnis (<filename>/</filename>) verwendet.</para>

	<para>Dieses Programm ermöglicht es, dass der Erstellungsprozess in einer Umgebung stattfindet, die durch Eingriffe der Benutzer nicht verändert ist. So können fehlende Abhängigkeiten leicht entdeckt werden (da die Erstellung scheitern wird, falls die dazugehörigen Abhängigkeiten nicht dokumentiert sind). Außerdem ermöglicht es die Erstellung eines Pakets für eine Debian-Version, die nicht der vom System insgesamt benutzten entspricht: der Rechner kann <emphasis role="distribution">Stable</emphasis> für seine normale Arbeit benutzen, und ein <command>pbuilder</command>, das auf demselben Rechner läuft, kann <emphasis role="distribution">Unstable</emphasis> für die Paketerstellung verwenden.</para>
      </sidebar>
    </section>
  </section>
  <section id="sect.building-first-package">
    <title>Ihr erstes Paket erstellen</title>
    <section>
      <title>Meta-Pakete oder vorgetäuschte Pakete</title>

      <para>Vorgetäuschte Pakete und Meta-Pakete sind insofern ähnlich, als sie leere Hüllen sind, die nur um des Effektes willen existieren, den ihre Meta-Daten auf den Paketverarbeitungsstapel haben.</para>

      <para>The purpose of a fake package is to trick
      <command>dpkg</command> and <command>apt</command> into believing
      that some package is installed even though it's only an empty shell.
      This allows satisfying dependencies on a package when the
      corresponding software was installed outside the scope of the
      packaging system. Such a method works, but it should still be avoided
      whenever possible, since there is no guarantee that the manually
      installed software behaves exactly like the corresponding package
      would and other packages depending on it would not work
      properly.</para>

      <para>Ein Meta-Paket besteht dagegen vor allem aus einer Ansammlung von Abhängigkeiten, so dass das Installieren eines Meta-Pakets im Endeffekt in einem Schritt eine Reihe weiterer Pakete mit sich bringt.</para>

      <para>Diese beiden Paketarten können mit den Befehlen <command>equivs-control</command> und <command>equivs-build</command> erstellt werden (in dem Paket <emphasis role="pkg">equivs</emphasis>). Der Befehl <command>equivs-control <replaceable>datei</replaceable></command> erstellt eine Debian-Header-Datei, die so editiert werden sollte, dass sie den Namen des erwarteten Pakets, seine Versionsnummer, den Namen des Betreuers, seine Abhängigkeiten und eine Beschreibung enthält. Andere Zeilen ohne einen vorgegebenen Wert sind optional und können gelöscht werden. Die Zeilen <literal>Copyright</literal>, <literal>Changelog</literal>, <literal>Readme</literal> und <literal>Extra-Files</literal> sind in Debian-Paketen keine Standardzeilen; sie machen nur bei <command>equivs-build</command> Sinn und bleiben nicht in den Kopfzeilen des erstellten Pakets erhalten.</para>

      <example>
        <title>Header-Datei des vorgetäuschten Pakets <emphasis>libxml-libxml-perl</emphasis></title>

        <programlisting>
Section: perl
Priority: optional
Standards-Version: 3.9.6

Package: libxml-libxml-perl
Version: 2.0116-1
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Depends: libxml2 (&gt;= 2.7.4)
Architecture: all
Description: Fake package - module manually installed in site_perl
 This is a fake package to let the packaging system
 believe that this Debian package is installed. 
 .
 In fact, the package is not installed since a newer version
 of the module has been manually compiled &amp; installed in the
 site_perl directory.
</programlisting>
      </example>

      <para>Der nächste Schritt besteht darin, das Debian-Paket mit dem Befehl <command>equivs-build <replaceable>datei</replaceable></command> zu erstellen. Voilà: das Paket wurde im aktuellen Verzeichnis erstellt und kann wie jedes andere Debian-Paket behandelt werden.</para>
    </section>
    <section>
      <title>Einfaches Dateiarchiv</title>

      <para>The Falcot Corp administrators need to create a Debian package
      in order to ease deployment of a set of documents on a large number
      of machines. The administrator in charge of this task first reads the
      “New Maintainer's Guide”, then starts working on their first
      package. <ulink type="block" url="https://www.debian.org/doc/manuals/maint-guide/" /></para>

      <para>Der erste Schritt besteht darin, ein Verzeichnis namens <filename>falcot-data-1.0</filename> zu erstellen, um das Ziel-Quellpaket aufzunehmen. Das Paket wird logischerweise <literal>falcot-data</literal> heißen und die Versionsnummer <literal>1.0</literal> tragen. Der Administrator legt die Dokumentdateien dann in einem Unterverzeichnis namens <filename>data</filename> ab. Anschließend ruft er den Befehl <command>dh_make</command> auf (aus dem Paket <emphasis role="pkg">dh-make</emphasis>), um Dateien hinzuzufügen, die für den Paketerstellungsprozess benötigt werden, und die alle in einem Unterverzeichnis namens <filename>debian</filename> abgespeichert werden:</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>cd falcot-data-1.0</userinput>
<computeroutput>$ </computeroutput><userinput>dh_make --native</userinput>
<computeroutput>
Type of package: single binary, indep binary, multiple binary, library, kernel module, kernel patch?
 [s/i/m/l/k/n] </computeroutput><userinput>i</userinput>
<computeroutput>
Maintainer name : Raphael Hertzog
Email-Address   : hertzog@debian.org
Date            : Fri, 04 Sep 2015 12:09:39 -0400
Package Name    : falcot-data
Version         : 1.0
License         : gpl3
Type of Package : Independent
Hit &lt;enter&gt; to confirm:
Currently there is no top level Makefile. This may require additional tuning.
Done. Please edit the files in the debian/ subdirectory now. You should also
check that the falcot-data Makefiles install into $DESTDIR and not in / .
$</computeroutput>
</screen>

      <para>The selected type of package (<emphasis>indep
      binary</emphasis>) indicates that this source package will generate a
      single binary package that can be shared across all architectures
      (<literal>Architecture: all</literal>). <emphasis>single
      binary</emphasis> acts as a counterpart, and leads to a single binary
      package that is dependent on the target architecture
      (<literal>Architecture: any</literal>). In this case, the former
      choice is more relevant since the package only contains documents and
      no binary programs, so it can be used similarly on computers of all
      architectures.</para>

      <indexterm><primary>package types</primary></indexterm>
      <indexterm><primary>package</primary><secondary>types</secondary></indexterm>

      <para>The <emphasis>multiple binary</emphasis> type corresponds to a
      source package leading to several binary packages. A particular case,
      <emphasis>library</emphasis>, is useful for shared libraries, since
      they need to follow strict packaging rules. In a similar fashion,
      <emphasis>kernel module</emphasis> or <emphasis>kernel patch</emphasis>
      should be restricted to packages containing kernel modules.
      </para>

      <sidebar>
        <title><emphasis>TIPP</emphasis> Name und E-Mail-Adresse des Betreuers</title>

	<para>Most of the programs involved in package maintenance will
	look for your name and email address in the
	<varname>DEBFULLNAME</varname> and <varname>DEBEMAIL</varname> or
	<varname>EMAIL</varname> environment variables. Defining them once
	and for all will avoid you having to type them multiple times. If
	your usual shell is <command>bash</command>, it is a simple matter
	of adding the following two lines in your
	<filename>~/.bashrc</filename> file (you will obviously
	replace the values with more relevant ones!):</para>

        <programlisting>
export EMAIL="hertzog@debian.org"
export DEBFULLNAME="Raphael Hertzog"
</programlisting>
      </sidebar>

      <para>Der Befehl <command>dh_make</command> erzeugt ein Unterverzeichnis namens <filename>debian</filename> mit zahlreichen Dateien. Einige von ihnen sind zwingend notwendig, insbesondere <filename>rules</filename>, <filename>control</filename>, <filename>changelog</filename> und <filename>copyright</filename>. Dateien mit der Erweiterung <filename>.ex</filename> sind Beispieldateien, die verwendet werden können, indem man sie bei Bedarf abändert (und die Erweiterung entfernt). Wenn sie nicht benötigt werden, ist es empfehlenswert, sie zu entfernen. Die Datei <filename>compat</filename> sollte erhalten bleiben, da sie für das ordnungsgemäße Funktionieren der Programmgarnitur <emphasis>debhelper</emphasis> (alle Dateien, die mit dem Präfix <command>dh_</command> beginnen) erforderlich ist, die in verschiedenen Stadien des Paketerstellungsprozesses verwendet wird.</para>

      <para>The <filename>copyright</filename> file must contain
      information about the authors of the documents included in the
      package, and the related license. In our case, these are internal
      documents and their use is restricted to within the Falcot Corp
      company. The default <filename>changelog</filename> file is generally
      appropriate; replacing the “Initial release” with a more verbose
      explanation and changing the distribution from
      <literal>unstable</literal> to <literal>internal</literal> is enough.
      The <filename>control</filename> file was also updated: the <literal>Section</literal> field
      has been changed to <emphasis>misc</emphasis> and the
      <literal>Homepage</literal>, <literal>Vcs-Git</literal> and
      <literal>Vcs-Browser</literal> fields were removed. The
      <literal>Depends</literal> fields was completed with
      <literal>iceweasel | www-browser</literal> so as to ensure the
      availability of a web browser able to display the documents in the
      package.</para>

      <example>
        <title>The Datei <filename>control</filename></title>

        <programlisting>
Source: falcot-data
Section: misc
Priority: optional
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Build-Depends: debhelper (&gt;= 9)
Standards-Version: 3.9.5

Package: falcot-data
Architecture: all
Depends: iceweasel | www-browser, ${misc:Depends}
Description: Internal Falcot Corp Documentation
 This package provides several documents describing the internal
 structure at Falcot Corp.  This includes:
  - organization diagram
  - contacts for each department.
 .
 These documents MUST NOT leave the company.
 Their use is INTERNAL ONLY.
</programlisting>
      </example>

      <example>
        <title>Die Datei <filename>changelog</filename></title>

        <programlisting>
falcot-data (1.0) internal; urgency=low

  * Initial Release.
  * Let's start with few documents:
    - internal company structure;
    - contacts for each department.

 -- Raphael Hertzog &lt;hertzog@debian.org&gt;  Fri, 04 Sep 2015 12:09:39 -0400
</programlisting>
      </example>

      <example>
        <title>Die Datei <filename>copyright</filename></title>

        <programlisting>
Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: falcot-data

Files: *
Copyright: 2004-2015 Falcot Corp
License: 
 All rights reserved.
</programlisting>
      </example>

      <sidebar>
        <title><emphasis>ZURÜCK ZU DEN GRUNDLAGEN</emphasis> Die Datei <filename>Makefile</filename></title>
        <indexterm><primary><filename>Makefile</filename></primary></indexterm>

	<para>Eine <filename>Makefile</filename>-Datei ist ein Skript, das vom Programm <command>make</command> benutzt wird; es beschreibt Regeln, wie ein Satz von Dateien aufeinander aufbauend in einem Abhängigkeitsbaum zu erstellen ist (zum Beispiel kann ein Programm aus einem Satz von Quelldateien erstellt werden). Die Datei <filename>Makefile</filename> beschreibt diese Regeln in folgendem Format:</para>

        <programlisting>
target: source1 source2 ...
        command1
        command2
</programlisting>

	<para>Eine derartige Regel ist folgendermaßen zu interpretieren: Falls eine der Dateien in <literal>source*</literal> jünger ist als die Datei <literal>target</literal>, dann muss das Ziel unter Verwendung von <command>command1</command> und <command>command2</command> erstellt werden.</para>

	<para>Man beachte, dass die Befehlszeilen mit einem Tabulatorzeichen beginnen müssen; und beachten Sie auch, dass, wenn eine Zeile mit einem Gedankenstrich beginnt (<literal>-</literal>), ein Scheitern dieses Befehls den gesamten Prozess nicht unterbricht.</para>
      </sidebar>

      <para>Die Datei <filename>rules</filename> enthält normalerweise einen Satz von Regeln, die verwendet werden, um das Programm zu konfigurieren, zu erstellen und in ein speziell dafür vorgesehenes Unterverzeichnis (das nach dem erstellten Binärpaket benannt ist) zu installieren. Der Inhalt dieses Unterverzeichnisses wird dann innerhalb des Debian-Pakets archiviert, als wäre es das Wurzelverzeichnis des Dateisystems. In unserem Fall werden die Dateien in dem Unterverzeichnis <filename>debian/falcot-data/usr/share/falcot-data/</filename> installiert, so dass die Dateien beim Installieren des erstellten Pakets unter <filename>/usr/share/falcot-data/</filename> eingerichtet werden. Die Datei <filename>rules</filename> wird als <filename>Makefile</filename> mit einigen Standardzielen benutzt (einschließlich <literal>clean</literal> und <literal>binary</literal>, die verwendet werden, um das Quellverzeichnis aufzuräumen beziehungsweise das Binärpaket zu erstellen).</para>

      <para>Obwohl diese Datei im Zentrum des Prozesses steht, enthält sie in zunehmendem Maße nur das absolute Minimum zur Ausführung eines Standardbefehlssatzes, der vom Hilfsprogramm <command>debhelper</command> bereitgestellt wird. Dies ist für durch <command>dh_make</command> erzeugte Dateien der Fall. Um unsere Dateien zu installieren, konfigurieren wir einfach das Verhalten des Befehls <command>dh_install</command>, indem wir die folgende <filename>debian/falcot-data.install</filename>-Datei erstellen:</para>

      <programlisting>
data/* usr/share/falcot-data/</programlisting>

      <para>At this point, the package can be created. We will however add
      a lick of paint. Since the administrators want the documents to be
      easily accessed from the menus of graphical desktop environments,
      we add a <filename>falcot-data.desktop</filename> file and
      get it installed in <filename>/usr/share/applications</filename>
      by adding a second line to <filename>debian/falcot-data.install</filename>.
      </para>

      <example>
        <title>The <filename>falcot-data.desktop</filename> file</title>

        <programlisting>
[Desktop Entry]
Name=Internal Falcot Corp Documentation
Comment=Starts a browser to read the documentation
Exec=x-www-browser /usr/share/falcot-data/index.html
Terminal=false
Type=Application
Categories=Documentation;
</programlisting>
      </example>

      <para>The updated <filename>debian/falcot-data.install</filename> looks
      like this:</para>
      <programlisting>
data/* usr/share/falcot-data/
falcot-data.desktop usr/share/applications/
</programlisting>

      <para>Unser Quellpaket ist nun fertig. Wir müssen nur noch mit derselben Methode, die wir zuvor für die Wiederherstellung von Paketen benutzt haben, das Binärpaket erzeugen: wir führen im Verzeichnis <filename>falcot-data-1.0</filename> den Befehl <command>dpkg-buildpackage -us -uc</command> aus.</para>
    </section>
  </section>
  <section id="sect.setup-apt-package-repository">
    <title>Ein Paket-Depot für APT erstellen</title>
    <indexterm><primary>Paketarchiv</primary></indexterm>
    <indexterm><primary>Paket</primary><secondary>Debian</secondary><tertiary>Archiv</tertiary></indexterm>

    <para>Falcot Corp. hat sukzessive damit begonnen, eine Anzahl von Debian-Paketen zu betreuen, die entweder aus bestehenden Paketen lokal geändert oder von Grund auf neu erstellt wurden, um interne Daten und Programme zu verteilen.</para>

    <para>To make deployment easier, they want to integrate these packages
    in a package archive that can be directly used by APT. For obvious
    maintenance reasons, they wish to separate internal packages from
    locally-rebuilt packages. The goal is for the matching entries in a
    <filename>/etc/apt/sources.list.d/falcot.list</filename> file to be as
    follows:</para>

    <programlisting>
deb http://packages.falcot.com/ updates/
deb http://packages.falcot.com/ internal/</programlisting>
    <indexterm><primary><command>mini-dinstall</command></primary></indexterm>

    <para>The administrators therefore configure a virtual host on their
    internal HTTP server, with <filename>/srv/vhosts/packages/</filename>
    as the root of the associated web space. The management of the archive
    itself is delegated to the <command>mini-dinstall</command> command
    (in the similarly-named package). This tool keeps an eye on an
    <filename>incoming/</filename> directory (in our case,
    <filename>/srv/vhosts/packages/mini-dinstall/incoming/</filename>) and
    waits for new packages there; when a package is uploaded, it is
    installed into a Debian archive at
    <filename>/srv/vhosts/packages/</filename>. The
    <command>mini-dinstall</command> command reads the
    <filename>*.changes</filename> file created when the Debian package is
    generated. These files contain a list of all other files associated with
    the version of the package (<filename>*.deb</filename>,
    <filename>*.dsc</filename>,
    <filename>*.diff.gz</filename>/<filename>*.debian.tar.gz</filename>,
    <filename>*.orig.tar.gz</filename>, or their equivalents with other
    compression tools), and these allow <command>mini-dinstall</command> to
    know which files to install. <filename>*.changes</filename> files also
    contain the name of the target distribution (often
    <literal>unstable</literal>) mentioned in the latest
    <filename>debian/changelog</filename> entry, and
    <command>mini-dinstall</command> uses this information to decide where
    the package should be installed. This is why administrators must always
    change this field before building a package, and set it to
    <literal>internal</literal> or <literal>updates</literal>, depending on
    the target location. <command>mini-dinstall</command> then generates
    the files required by APT, such as
    <filename>Packages.gz</filename>.</para>

    <sidebar>
      <title><emphasis>ALTERNATIVE</emphasis> <command>apt-ftparchive</command></title>
      <indexterm><primary><command>apt-ftparchive</command></primary></indexterm>

      <para>Falls Ihnen <command>mini-dinstall</command> für Ihre Ansprüche an ein Debian-Archiv als zu kompliziert erscheint, können sie stattdessen auch den Befehl <command>apt-ftparchive</command> verwenden. Dieses Hilfsprogramm durchsucht den Inhalt eines Verzeichnisses und zeigt (in seiner Standardausgabe) eine entsprechende <filename>Packages</filename>-Datei an. Im Falle von Falcot Corp. könnten die Administratoren die Pakete direkt nach <filename>/srv/vhosts/packages/updates/</filename> oder <filename>/srv/vhosts/packages/internal/</filename> hochladen und dann die folgenden Befehle ausführen, um die <filename>Packages.gz</filename>-Dateien zu erstellen:</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>cd /srv/vhosts/packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages updates &gt;updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages internal &gt;internal/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip internal/Packages</userinput></screen>

      <para>Der Befehl <command>apt-ftparchive sources</command> ermöglicht es, in ähnlicher Weise <filename>Sources.gz</filename>-Dateien zu erstellen.</para>
    </sidebar>

    <para>Zur Konfigurierung von <command>mini-dinstall</command> muss eine Datei namens <filename>~/.mini-dinstall.conf</filename> eingerichtet werden; im Falle von Falcot Corp. sieht ihr Inhalt folgendermaßen aus:</para>

    <programlisting>
[DEFAULT]
archive_style = flat
archivedir = /srv/vhosts/packages

verify_sigs = 0
mail_to = admin@falcot.com

generate_release = 1
release_origin = Falcot Corp
release_codename = stable

[updates]
release_label = Recompiled Debian Packages

[internal]
release_label = Internal Packages</programlisting>

    <para>Eine beachtenswerte Entscheidung betrifft die Erzeugung der <filename>Release</filename>-Dateien für jedes Archiv. Dies ist für die Verwaltung der Prioritäten bei der Paketinstallation unter Verwendung der Konfigurationsdatei <filename>/etc/apt/preferences</filename> hilfreich (zu Einzelheiten siehe das Kapitel über die APT-Konfigurierung unter <xref linkend="sect.apt.priorities" />).</para>

    <sidebar>
      <title><emphasis>SICHERHEIT</emphasis> <command>mini-dinstall</command> und Berechtigungen</title>

      <para>Da <command>mini-dinstall</command> so konzipiert ist, dass es als normaler Benutzer läuft, besteht keine Notwendigkeit, es als Root auszuführen. Am einfachsten ist es, alles im Benutzerkonto des Administrators zu konfigurieren, der für die Erstellung der Debian-Pakete zuständig ist. Da nur dieser Administrator die erforderlichen Berechtigungen zur Speicherung von Dateien im Verzeichnis <filename>incoming/</filename> hat, können wir daraus schließen, dass der Administrator den Ursprung jedes Pakets vor seiner Verwendung autorisiert hat, und dass <command>mini-dinstall</command> dies daher nicht noch einmal tun muss. Hieraus erklärt sich der Parameter <literal>verify_sigs = 0</literal> (der bedeutet, dass Signaturen nicht verifiziert zu werden brauchen). Jedoch können wir bei sensiblen Paketinhalten die Einstellung ändern und bestimmen, dass mit einem Schlüsselring authentifiziert wird, der die öffentlichen Schlüssel der Personen enthält, die Pakete erstellen dürfen (konfiguriert mit dem Parameter <literal>extra_keyrings</literal>); <command>mini-dinstall</command> überprüft dann den Ursprung jedes ankommenden Pakets, indem es die in den <filename>*.changes</filename>-Dateien integrierte Signatur analysiert.</para>
    </sidebar>

    <para>Der Aufruf des Befehls <command>mini-dinstall</command> startet genau genommen den Daemon im Hintergrund. Solange dieser Daemon läuft, wird er jede halbe Stunde im Verzeichnis <filename>incoming/</filename> nach neuen Paketen sehen; wenn ein neues Paket eintrifft, wird es ins Archiv verschoben, und die entsprechenden Dateien <filename>Packages.gz</filename> und <filename>Sources.gz</filename> werden erneuert. Falls es problematisch sein sollte, einen Daemon auszuführen, kann <command>mini-dinstall</command> auch jedes Mal, wenn ein Paket in das Verzeichnis <filename>incoming/</filename> hochgeladen wird, manuell im Stapelverarbeitungsmodus (mit der Option <literal>-b</literal>) aufgerufen werden. Weitere von <command>mini-dinstall</command> angebotene Möglichkeiten sind auf seiner Handbuchseite <citerefentry><refentrytitle>mini-dinstall</refentrytitle> <manvolnum>1</manvolnum></citerefentry> dokumentiert.</para>

    <sidebar>
      <title><emphasis>EXTRA</emphasis> Ein signiertes Archiv erzeugen</title>

      <para>The APT suite checks a chain of cryptographic signatures on the
      packages it handles before installing them, in order to ensure
      their authenticity (see <xref linkend="sect.package-authentication" />). Private APT archives can
      then be a problem, since the machines using them will keep displaying
      warnings about unsigned packages. A diligent administrator will
      therefore integrate private archives with the secure APT
      mechanism.</para>

      <para>Um diesen Vorgang zu erleichtern, enthält <command>mini-dinstall</command> die Konfigurationsoption <literal>release_signscript</literal>, mit der es möglich ist, ein Skript zur Erzeugung der Signatur zu spezifizieren. Ein guter Ausgangspunkt ist das Skript <filename>sign-release.sh</filename>, das vom Paket <emphasis role="pkg">mini-dinstall</emphasis> im Verzeichnis <filename>/usr/share/doc/mini-dinstall/examples/</filename> bereitgestellt wird; lokale Änderungen könnten angebracht sein.</para>
    </sidebar>
  </section>
  <section id="sect.becoming-package-maintainer">
    <title>Paketbetreuer werden</title>
    <section>
      <title>Lernen Pakete zu erstellen</title>

      <para>Das Erstellen eines qualitativ hochwertigen Debian-Pakets ist nicht immer einfach, und um Paketbetreuer zu werden, muss man sowohl in der Theorie als auch in der Praxis einiges lernen. Es geht nicht nur darum, Software zu erstellen und zu installieren; vielmehr entsteht der Großteil der Komplexität aus dem Verständnis für die Probleme und Konflikte, und im Weiteren für die Wechselwirkungen mit der Unzahl der anderen verfügbaren Pakete.</para>
      <section>
        <title>Regeln</title>

	<para>A Debian package must comply with the precise rules compiled
	in the Debian policy, and each package maintainer must know them.
	There is no requirement to know them by heart, but rather to know
	they exist and to refer to them whenever a choice presents a
	non-trivial alternative. Every Debian maintainer has made mistakes
	by not knowing about a rule, but this is not a huge problem as long 
	as the error gets fixed when a user reports it as a bug report (which
        tends to happen fairly soon thanks to advanced users).
        <ulink type="block" url="https://www.debian.org/doc/debian-policy/" /></para>
      </section>
      <section>
        <title>Verfahren</title>
        <indexterm><primary>Debian Entwickler-Referenz</primary></indexterm>

	<para>Debian is not a simple collection of individual packages.
	Everyone's packaging work is part of a collective project; being a
	Debian developer involves knowing how the Debian project operates
	as a whole. Every developer will, sooner or later, interact with
	others. The Debian Developer's Reference (in the <emphasis role="pkg">developers-reference</emphasis> package) summarizes what
	every developer must know in order to interact as smoothly as
	possible with the various teams within the project, and to take the
	best possible advantages of the available resources. This document
	also enumerates a number of duties a developer is expected to
	fulfill. <ulink type="block" url="https://www.debian.org/doc/manuals/developers-reference/" /></para>
      </section>
      <section>
        <title>Hilfsprogramme</title>

	<para>Many tools help package maintainers in their work. This
	section describes them quickly, but does not give the full details,
	since they all have comprehensive documentation of their
	own.</para>
        <section>
          <title>Das Programm <command>lintian</command></title>
          <indexterm><primary><command>lintian</command></primary></indexterm>

	  <para>This tool is one of the most important: it's the Debian
	  package checker. It is based on a large array of tests created
	  from the Debian policy, and detects quickly and automatically
	  many errors that can then be fixed before packages are
	  released.</para>

	  <para>Dieses Programm ist nur ein Gehilfe und versteht manchmal etwas falsch (zum Beispiel ist <command>lintian</command> manchmal nicht aktuell, da sich das Debian-Regelwerk im Laufe der Zeit verändert). Es ist auch nicht vollständig flächendeckend: keine Lintian-Fehlermeldung zu erhalten, sollte nicht als Nachweis verstanden werden, dass das Paket perfekt ist; bestenfalls verhindert es die häufigsten Fehler.</para>
        </section>
        <section>
          <title>Das Programm <command>piuparts</command></title>
          <indexterm><primary><command>piuparts</command></primary></indexterm>

	  <para>Dies ist ein weiteres wichtiges Tool; es automatisiert die Installation, Aktualisierung und Deinstallation eines Pakets (in einer isolierten Umgebung) und prüft, dass keine dieser Aktivitäten zu einem Fehler führt. Es kann helfen, fehlende Abhängigkeiten aufzudecken und es ermittelt Dateien, die fälschlicher Weise nach einer Deinstallation auf dem System verblieben sind.</para>
        </section>
        <section>
          <title>devscripts</title>
          <indexterm><primary><emphasis role="pkg">devscripts</emphasis></primary></indexterm>
          <indexterm><primary><command>debuild</command></primary></indexterm>
          <indexterm><primary><command>dch</command></primary></indexterm>
          <indexterm><primary><command>uscan</command></primary></indexterm>
          <indexterm><primary><command>debi</command></primary></indexterm>
          <indexterm><primary><command>debc</command></primary></indexterm>

	  <para>Das Paket <emphasis role="pkg">devscripts</emphasis> enthält zahlreiche Programme, die einem Debian-Entwickler bei einem weiten Spektrum seiner Arbeit helfen:</para>
          <itemizedlist>
            <listitem>
	      <para><command>debuild</command> ermöglicht es, ein Paket zu erzeugen (mit <command>dpkg-buildpackage</command>) und dann <command>lintian</command> auszuführen, um seine Übereinstimmung mit dem Debian-Regelwerk zu überprüfen.</para>
            </listitem>
            <listitem>
	      <para><command>debclean</command> bereinigt ein Quellpaket, nachdem ein Binärpaket erzeugt worden ist.</para>
            </listitem>
            <listitem>
	      <para><command>dch</command> ermöglicht das schnelle und einfache Editieren einer <filename>debian/changelog</filename>-Datei in einem Quellpaket.</para>
            </listitem>
            <listitem>
	      <para><command>uscan</command> überprüft, ob eine neue Version eines Programms vom ursprünglichen Verfasser veröffentlicht worden ist; dies erfordert eine <filename>debian/watch</filename>-Datei mit einer Beschreibung des Ortes derartiger Veröffentlichungen.</para>
            </listitem>
            <listitem>
	      <para><command>debi</command> allows installing (with
	      <command>dpkg -i</command>) the Debian package that was just
	      generated without the need to type its full name and path.</para>
            </listitem>
            <listitem>
	      <para>In ähnlicher Weise ermöglicht es <command>debc</command>, den Inhalt eines vor kurzem erzeugten Pakets (mit <command>dpkg -c</command>) abzufragen, ohne seinen vollständigen Namen und Pfad eingeben zu müssen.</para>
            </listitem>
            <listitem>
	      <para><command>bts</command> überwacht das Fehlerverfolgungssystem von der Befehlszeile aus; dieses Programm erzeugt automatisch die passenden E-Mails.</para>
            </listitem>
            <listitem>
	      <para><command>debrelease</command> lädt ein kürzlich erzeugtes Paket auf einen entfernten Server hoch, ohne den vollständigen Namen und Pfad der dazugehörigen <filename>.changes</filename>-Datei eingeben zu müssen.</para>
            </listitem>
            <listitem>
	      <para><command>debsign</command> signiert die <filename>*.dsc</filename>- und <filename>*.changes</filename>-Dateien.</para>
            </listitem>
            <listitem>
	      <para><command>uupdate</command> automatisiert die Erstellung einer überarbeiteten Paketversion, wenn eine neue Ursprungsversion veröffentlicht worden ist.</para>
            </listitem>
          </itemizedlist>
        </section>
        <section>
          <title><emphasis role="pkg">debhelper</emphasis> und <emphasis role="pkg">dh-make</emphasis></title>
          <indexterm><primary><emphasis>debhelper</emphasis></primary></indexterm>
          <indexterm><primary><emphasis>dh-make</emphasis></primary></indexterm>

	  <para>Debhelper is a set of scripts easing the creation of
	  policy-compliant packages; these scripts are invoked from
	  <filename>debian/rules</filename>. Debhelper has been widely
	  adopted within Debian, as evidenced by the fact that it is used
	  by the majority of official Debian packages. All the commands it
          contains have a <command>dh_</command> prefix.</para>

	  <para>The <command>dh_make</command> script (in the
	  <emphasis>dh-make</emphasis> package) creates files required for
	  generating a Debian package in a directory initially containing
	  the sources for a piece of software. As can be guessed from the
	  name of the program, the generated files use debhelper by
	  default.</para>
        </section>
        <section>
          <title><command>dupload</command> und <command>dput</command></title>
          <indexterm><primary><command>dupload</command></primary></indexterm>
          <indexterm><primary><command>dput</command></primary></indexterm>

	  <para>Die Befehle <command>dupload</command> und <command>dput</command> ermöglichen es, ein Debian-Paket auf einen (möglicherweise entfernten) Server hochzuladen. Auf diese Weise können Entwickler ihr Paket auf dem Debian-Hauptserver (<literal>ftp-master.debian.org</literal>) veröffentlichen, so dass es in das Archiv integriert und über die Spiegelserver verteilt werden kann. Diese Befehle nehmen eine <filename>*.changes</filename>-Datei als Parameter und leiten die übrigen relevanten Dateien aus ihrem Inhalt ab.</para>
        </section>
      </section>
    </section>
    <section>
      <title>Annahmeverfahren</title>

      <para>Becoming a “Debian developer” is not a simple administrative
      matter. The process comprises several steps, and is as much an
      initiation as it is a selection process. In any case, it is
      formalized and well-documented, so anyone can track their progression
      on the website dedicated to the new member process.
      <ulink type="block" url="https://nm.debian.org/" /></para>

      <sidebar>
        <title><emphasis>EXTRA</emphasis> Leichtgewichtiges Verfahren für „Debian-Betreuer“</title>

        <para>“Debian Maintainer” is another status that gives less
          privileges than “Debian developer” but whose associated process
          is quicker. With this status, the contributors can maintain
          their own packages only. A Debian developer only needs to perform
          a check on an initial upload, and issue a statement to the
          effect that they trust the prospective maintainer with the
          ability to maintain the package on their own.
        </para>
        <indexterm><primary>Debian-Betreuer</primary></indexterm>
      </sidebar>
      <section>
        <title>Voraussetzungen</title>

	<para>Von allen Kandidaten wird erwartet, dass sie wenigstens ausreichende Englischkenntnisse haben. Dies ist auf allen Ebenen erforderlich: natürlich für die anfängliche Kommunikation mit dem Prüfer, aber auch später, da Englisch für den Großteil der Dokumentation die bevorzugte Sprache ist; auch Paketbenutzer werden in Englisch kommunizieren, wenn sie Fehler melden, und werden Antworten in Englisch erwarten.</para>

	<para>Die andere Voraussetzung bezieht sich auf die Motivation. Ein Debian-Entwickler zu werden, ist ein Prozess, der nur dann Sinn macht, wenn der Kandidat weiß, dass sein Interesse an Debian viele Monate lang anhalten wird. Der Aufnahmeprozess selbst kann mehrere Monate dauern, und Debian benötigt Entwickler langfristig; jedes Paket benötigt dauerhafte Betreuung und nicht nur einen anfänglichen Upload.</para>
      </section>
      <section>
        <title>Registrierung</title>

	<para>Er erste (wirkliche) Schritt besteht darin, einen Sponsor oder Befürworter zu finden; hierunter ist ein offizieller Entwickler zu verstehen, der bereit ist zu bestätigen, dass er davon überzeugt ist, dass die Aufnahme von <emphasis>X</emphasis> für Debian von Vorteil sein würde. Dies setzt normalerweise voraus, dass der Kandidat bereits innerhalb der Gemeinschaft aktiv gewesen und seine Arbeit anerkannt ist. Falls der Kandidat schüchtern ist und seine Arbeit nicht öffentlich angepriesen hat, kann er versuchen, einen Debian-Entwickler zu seiner Unterstützung zu bewegen, indem er ihm seine Arbeit privat zeigt.</para>

        <indexterm><primary>key pair</primary></indexterm>
	<para>At the same time, the candidate must generate a
	public/private RSA key pair with GnuPG, which should be signed
	by at least two official Debian developers. The signature
	authenticates the name on the key. Effectively, during a key
	signing party, each participant must show an official
	identification (usually an ID card or passport) together with
	their key identifiers. This step confirms the link between the
	human and the keys. This signature thus requires
	meeting in real life.  If you have not yet met any Debian
	developers in a public free software conference, you can
	explicitly seek developers living nearby using the list on the
	following webpage as a starting point.  <ulink type="block" url="https://wiki.debian.org/Keysigning" /></para>

	<para>Nachdem die Registrierung auf <literal>nm.debian.org</literal> von einem Unterstützer bestätigt wurde, wird dem Kandidaten ein <emphasis>Antragsmanager</emphasis> zugewiesen. Dieser Antragsmanager wird fortan das Verfahren weiterverfolgen und die verschiedenen Schritte, die dieser Prozess umfasst, bestätigen.</para>

	<para>The first verification is an identity check. If you already
	have a key signed by two Debian developers, this step is easy;
	otherwise, the application manager will try and guide you in your
	search for Debian developers close by to organize a meet-up and a
	key signing.</para>
      </section>
      <section>
        <title>Die Prinzipien akzeptieren</title>

	<para>These administrative formalities are followed by
	philosophical considerations. The point is to make sure that the
	candidate understands and accepts the social contract and the
	principles behind Free Software. Joining Debian is only possible if
	one shares the values that unite the current developers, as
	expressed in the founding texts (and summarized in <xref linkend="the-debian-project" />).</para>

	<para>In addition, each candidate wishing to join the Debian ranks is
	expected to know the workings of the project, and how to interact
	appropriately to solve the problems they will doubtless encounter
	as time passes. All of this information is generally documented in
	manuals targeting the new maintainers, and in the Debian
	developer's reference. An attentive reading of this document should
	be enough to answer the examiner's questions. If the answers are
	not satisfactory, the candidate will be informed. They will then have
	to read (again) the relevant documentation before trying again. In
	the cases where the existing documentation does not contain the
	appropriate answer for the question, the candidate can usually
	reach an answer with some practical experience within Debian, or
	potentially by discussing with other Debian developers. This
	mechanism ensures that candidates get involved somewhat in Debian
	before becoming a full part of it. It is a deliberate policy, by
	which candidates who eventually join the project are integrated as
	another piece of an infinitely extensible jigsaw puzzle.</para>

        <indexterm><primary><emphasis>Philosophy &amp; Procedures</emphasis></primary></indexterm>
	<para>This step is usually known as the <emphasis>Philosophy &amp;
	Procedures</emphasis> (P&amp;P for short) in the lingo of the
	developers involved in the new member process.
	</para>
      </section>
      <section>
        <title>Fähigkeiten überprüfen</title>

	<para>Jeder Antrag, ein offizieller Debian-Entwickler zu werden, muss begründet werden. Um Projektmitglied zu werden, muss man zeigen, dass dieser Status gerechtfertigt ist, und dass er dem Kandidaten seine Unterstützung für Debian erleichtert. Die häufigste Begründung besteht darin, dass der Status als Debian-Entwickler die Betreuung eines Debian-Pakets erleichtert, aber dies ist nicht die einzige. Einige Entwickler treten dem Projekt bei, um zur Übertragung auf eine bestimmte Architektur beizutragen, andere möchten die Dokumentation verbessern und so weiter.</para>

	<para>Dieser Schritt bietet dem Kandidaten die Möglichkeit zu erklären, was er innerhalb des Debian-Projekts zu tun beabsichtigt, und zu zeigen, was er zu diesem Zweck bereits getan hat. Debian ist ein pragmatisches Projekt, und es genügt nicht, etwas zu sagen, falls die Taten den Aussagen nicht entsprechen. Wenn die beabsichtigte Rolle innerhalb des Projekts sich auf die Paketbetreuung bezieht, wird im allgemeinen die erste Version des angehenden Pakets von einem Sponsor aus den Reihen der bereits registrierten Debian-Entwickler technisch überprüft und auf die Debian-Server hochgeladen.</para>

        <sidebar>
          <title><emphasis>GEMEINSCHAFT</emphasis> Sponsern</title>
          <indexterm><primary>Sponsern</primary></indexterm>

	  <para>Debian-Entwickler können Pakete, die von jemand anderem entwickelt werden, „sponsern“. Das heißt, dass sie sie in den offiziellen Debian-Paketdepots veröffentlichen, nachdem sie sie einer sorgfältigen Überprüfung unterzogen haben. Dieses Vorgehen ermöglicht es externen Personen, die noch nicht durch den für neue Betreuer erforderlichen Prozess gegangen sind, gelegentlich zum Projekt beizutragen. Gleichzeitig stellt es sicher, dass alle Pakete, die in Debian enthalten sind, stets von einem offiziellen Mitglied überprüft worden sind.</para>
        </sidebar>

	<para>Schließlich überprüft der Prüfer die technischen (Paketerstellungs-)Fähigkeiten des Kandidaten mit einem ausführlichen Fragebogen. Falsche Antworten sind nicht erlaubt, aber die Beantwortungszeit ist nicht begrenzt. Die gesamte Dokumentation darf benutzt werden, und mehrere Versuche sind möglich, falls die ersten Antworten nicht befriedigend sind. Dieser Schritt beabsichtigt nicht zu diskriminieren, sondern wenigstens ein Mindestmaß an Wissen, über das alle neuen Mitwirkenden verfügen, sicherzustellen.</para>

        <indexterm><primary><emphasis>Tasks &amp; Skills</emphasis></primary></indexterm>
	<para>This step is known as the <emphasis>Tasks &amp;
	Skills</emphasis> step (T&amp;S for short) in the examiners'
	jargon.</para>
      </section>
      <section>
        <title>Endgültige Bestätigung</title>

	<para>Im allerletzten Schritt wird der gesamte Prozess durch einen DAM (<emphasis>Debian Account Manager</emphasis>) begutachtet. Der DAM wird alle vom Prüfer über den Kandidaten zusammengetragenen Informationen nachprüfen und dann entscheiden, ob ein Konto auf den Debian-Servern eingerichtet wird oder nicht. Falls zusätzliche Informationen benötigt werden, kann die Kontoerstellung verzögert werden. Ablehnungen sind recht selten, falls der Prüfer gute Arbeit bei der Verfolgung des Vorgangs geleistet hat, aber sie kommen manchmal vor. Sie sind niemals endgültig, und der Kandidat kann es später noch einmal versuchen.</para>

	<para>The DAM's decision is authoritative and (almost) without
        appeal, which explains why the people in that seat have often been
        criticized in the past.</para>
      </section>
    </section>
  </section>
</chapter>
