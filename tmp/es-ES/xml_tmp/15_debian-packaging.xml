<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="debian-packaging">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-debian-packaging.png" scalefit="1" />
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>Retroadaptación</keyword>
      <keyword>Recompilación</keyword>
      <keyword>Paquete fuente</keyword>
      <keyword>Repositorio</keyword>
      <keyword>Metapaquete</keyword>
      <keyword>Desarrollador Debian</keyword>
      <keyword>Responsable</keyword>
    </keywordset>
  </chapterinfo>
  <title>Creación de un paquete Debian</title>
  <highlights>
    <para>Es muy común para un administrador Debian que gestiona diariamente paquetes Debian finalmente sentir la necesidad de crear sus propios paquetes o modificar un paquete existente. Este capítulo pretende dar respuesta a las preguntas más comunes en este campo y proporcionar los elementos necesarios para aprovechar lo mejor posible la infraestructura de Debian. Con un poco de suerte, después de probar con paquetes locales, incluso puede sentir la necesidad de ir más allá y ¡unirse al proyecto Debian en sí!</para>
  </highlights>
  <section id="sect.rebuilding-package">
    <title>Recompilación de un paquete desde sus fuentes</title>

    <para>Son varias las cirunstancias bajo las que es necesario reconstruir un paquete binario. En algunos casos, el administrador necesita una funcionalidad del software para la que necesitará compilarlo desde sus fuentes con alguna opción de compilación particular; en otras, el software empaquetado para la versión de Debian instalada no es suficientemente reciente. En el último caso, el administrador generalmente compilará un paquete más reciente que obtendrá de una versión más reciente de Debian — como <emphasis role="distribution">Testing</emphasis> o inclusive <emphasis role="distribution">Unstable</emphasis> — para que este nuevo paquete funcione con su distribución <emphasis role="distribution">Stable</emphasis>; esta operación es llamada «retroadaptación» («backporting»). Como siempre, antes de embarcarse en esta tarea, se debe revisar si no fue hecha ya — un repaso rápido al gestor de seguimiento de paquetes Debian mostrará esta información. <ulink type="block" url="https://tracker.debian.org/" /><indexterm><primary>backport</primary></indexterm></para>
    <section>
      <title>Obtención de las fuentes</title>

      <para>Lo primero para recompilar un paquete Debian es obtener su código fuente. La forma más sencilla es utilizando <command>apt-get source <replaceable>nombre-paquete-fuente</replaceable></command>. Para ello necesitará una línea <literal>deb-src</literal> en el archivo <filename>/etc/apt/sources.list</filename> y archivos de índice actualizados (es decir: <command>apt-get update</command>). Si siguió las instrucciones en el capítulo sobre la configuración de APT (revise la <xref linkend="sect.apt-sources.list" />) debería cumplir estas condiciones. Sepa, sin embargo, que descargará los paquetes fuente de la versión Debian mencionada en la línea <literal>deb-src</literal>. Si necesita otra versión probablemente necesite descargarla manualmente de un repositorio Debian o desde el sitio web. Para ello debe obtener dos o tres archivos (con extensiones <filename>*.dsc</filename> — por <emphasis>control de fuente Debian</emphasis>: «Debian Source Control» — <filename>*.tar.<replaceable>comp</replaceable></filename> y a veces <filename>*.diff.gz</filename> o <filename>*.debian.tar.<replaceable>comp</replaceable></filename> — donde el valor de <replaceable>comp</replaceable> es uno de <literal>gz</literal>, <literal>bz2</literal> o <literal>xz</literal> dependiendo de la herramienta de compresión utilizada), luego ejecute <command>dpkg-source -x <replaceable>archivo.dsc</replaceable></command>. Si puede acceder directamente al archivo <filename>*.dsc</filename> a través de una URL existe una forma más sencilla de obtener todo ejecutando <command>dget <replaceable>URL</replaceable></command>. Este programa (que puede encontrar en el paquete <emphasis role="pkg">devscripts</emphasis>) obtiene el archivo <filename>*.dsc</filename> en la dirección provista, analiza su contenido y obtiene automáticamente el o los archivos a los que hace referencia. Una vez se ha descargado todo, extrae el paquete de fuentes (a menos que se haya usado la opción <literal>-d</literal> o <literal>--download-only</literal>).</para>
    </section>
    <section>
      <title>Realización de cambios</title>

      <para>Ahora tiene las fuentes del paquete disponibles en un directorio cuyo nombre coincide con el paquete fuente y su versión (por ejemplo: <emphasis>samba-4.1.17+dfsg</emphasis>); allí es donde trabajaremos en nuestros cambios locales.</para>

      <para>Lo primero que debemos hacer es cambiar el número de versión del paquete para que podamos distinguir el paquete recompilado del paquete original que provee Debian. Si asumimos que la versión actual es <literal>2:4.1.17+dfsg-2</literal> podemos crear la versión <literal>2:4.1.16+dfsg2falcot1</literal>, que indica claramente el origen del paquete. Esto además hace que el número de versión del paquete sea mayor al del que provee Debian para que el paquete se instalará fácilmente como una actualización al paquete original. La mejor forma de realizar dicho cambio es con el programa <command>dch</command> (por <emphasis>cambios Debian</emphasis>: «Debian CHangelog») del paquete <emphasis role="pkg">devscripts</emphasis> ejecutando algo similar a <command>dch --local falcot1</command>. Esto invoca un editor de texto (<command>sensible-editor</command> — este debería ser tu editor favorito si es mencionado en las variables de entorno <varname>VISUAL</varname> o <varname>EDITOR</varname> o el editor predeterminado de lo contrario) que nos permitirá documentar las diferencias introducidas en esta recompilación. Este editor nos mostrará que <command>dch</command> realmente cambió el archivo <filename>debian/changelog</filename>.</para>

      <para>Cuando necesitamos cambiar las opciones de compilación, debemos realizar cambios a <filename>debian/rules</filename>, el cual se encarga de todos los pasos en el proceso de compilación del paquete. En los casos más simples, es sencillo encontrar las líneas sobre la configuración inicial (<literal>./configure …</literal>) o la compilación en sí (<literal>$(MAKE) …</literal> o <literal>make …</literal>). Si no se ejecutan específicamente estos programas probablemente son un efecto secundario de otra orden explícita, en cuyo caso refiérase a la documentación de las mismas para aprender cómo cambiar el comportamiento predeterminado. Con paquetes usando <command>dh</command>, puede necesitar agregar un reemplazo para los comandos <command>dh_auto_configure</command> o <command>dh_auto_build</command> (ver las páginas de los respectivos manuales para obtener explicaciones de cómo hacerlo).</para>

      <para>Dependiendo de los cambios locales a los paquetes, también podría necesitar actualizar el archivo <filename>debian/control</filename>, que contiene una descripción de los paquetes generados. En particular, este paquete contiene líneas <literal>Build-Depends</literal> que controlan la lista de dependencias que se deben cumplir en el momento de compilar un paquete. Éstas líneas generalmente hacen referencia a las versiones de los paquetes que se encuentran en la distribución de la que proveen los paquetes fuente pero que pueden no estar disponibles en la distribución en la que estamos recompilando. No hay una forma automatizada para determinar si una dependencia es real o sólo está presente para garantizar que sólo se intente compilar con la última versión de una biblioteca — esta es la única forma de forzar que <emphasis>autobuilder</emphasis> utilice una versión específica de un paquete durante su compilación, por lo que los desarrolladores Debian frecuentemente utilizan dependencias de compilación con versiones estrictas.</para>

      <para>Si está seguro que estas dependencias de compilación son muy estrictas, siéntase libre de relajarlas localmente. Lea los archivos que documentan la forma estándar de compilar el software — generalmente estos archivos son llamados <filename>INSTALL</filename> — le ayudarán a encontrar las dependencias adecuadas. Idealmente, podrá satisfacer todas las dependencias en la distribución que utilice para recompilar; de lo contrario, comienza un proceso recursivo en el que debemos retroadaptar los paquetes mencionados en el campo <literal>Build-Depends</literal> antes de poder finalizar con el paquete deseado. Algunos paquetes pueden no necesitar ser retroadaptados y puede instalarlos tal cual durante el proceso de compilación (un ejemplo notable es <emphasis role="pkg">debhelper</emphasis>). Sepa que el proceso de retroadaptación puede volverse muy complejo rápidamente si no tiene cuidado. Por lo tanto, debe mantener al mínimo las retroadaptaciones siempre que sea posible.</para>

      <sidebar>
        <title><emphasis>SUGERENCIA</emphasis> Instalación de <literal>Build-Depends</literal></title>
        <indexterm><primary><literal>Build-Depends</literal>, campo de control</primary></indexterm> 
	<para><command>apt-get</command> permite instalar todos los paquetes mencionados en los campos <literal>Build-Depends</literal> de un paquete fuente disponible en una distribución mencionada en una línea <literal>deb-src</literal> del archivo <filename>/etc/apt/sources.list</filename>. Esto es simple cuestión de ejecutar <command>apt-get build-dep <replaceable>paquete-fuente</replaceable></command>.</para>
      </sidebar>
    </section>
    <section>
      <title>Inicio de la recompilación</title>

      <para>Cuando aplicamos los cambios necesarios a las fuentes, podemos comenzar la generación del paquete binario (archivo <filename>.deb</filename>). El programa <command>dpkg-buildpackage</command> gestiona todo el proceso.</para>

      <example>
        <title>Recompilación del paquete</title>

        <screen><computeroutput>$ </computeroutput><userinput>dpkg-buildpackage -us -uc
</userinput><computeroutput>[...]
</computeroutput></screen>
      </example>

      <sidebar id="sidebar.fakeroot">
        <title><emphasis>HERRAMIENTA</emphasis> <command>fakeroot</command></title>

	<para>En esencia, el proceso de creación de un paquete es simple cuestión de reunir en un compendio un conjunto de archivos existentes (o compilados); en dicho compendio <emphasis>root</emphasis> será el dueño de la mayoría de los archivos del compendio. Sin embargo, crear todo el paquete bajo este usuario aumentaría los riesgos; afortunadamente, podemos evitar esto con el programa <command>fakeroot</command>. Podemos utilizar esta herramienta para ejecutar un programa y darle la impresión que está ejecutando como <emphasis>root</emphasis> y crea archivos con permisos y dueños arbitrarios. Cuando el programa crea el compendio que será el paquete Debian, se lo engaña para que cree un compendio con archivos con dueños arbitrarios, incluyendo <emphasis>root</emphasis>. Esta configuración es tan conveniente que <command>dpkg-buildpackage</command> utiliza <command>fakeroot</command> de forma predeterminada cuando genera paquetes.</para>

	<para>Sepa que sólo se engaña al programa para que «crea» que funciona bajo una cuenta con privilegios, pero el proceso realmente ejecuta como el usuario que ejecutó <command>fakeroot <replaceable>programa</replaceable></command> (y se crean los archivos con los permisos de dicho usuario). En ningún momento realmente obtiene privilegios de root que pueda abusar.</para>
      </sidebar>

      <para>El programa anterior puede fallar si no se actualizaron los campos <literal>Build-Depends</literal> o si no están instalados los paquetes relacionados. En tal caso, es posible evitar este chequeo con la opción <literal>-d</literal> de <command>dpkg-buildpackage</command>. Sin embargo, al ignorar explícitamente estas dependencias corre el riesgo de que el proceso de compilación falle en una etapa posterior. Lo que es peor, el paquete puede parecer compilar correctamente pero no ejecutar correctamente: algunos programas desactivan automáticamente algunas de sus funcionalidades cuando una biblioteca necesaria no está disponible al momento de compilarlo.</para>

      <para>La mayoría de las veces, los desarrolladores Debian utilizan un programa de alto nivel como <command>debuild</command>; éste ejecuta <command>dpkg-buildpackage</command> normalmente, pero también agrega una invocación de un programa que ejecuta muchos chequeos para validar el paquete generado según la normativa Debian. Este script también limpia el entorno para que las variables de entorno locales no «contaminen» la compilación del paquete. El programa <command>debuild</command> es una de las herramientas de <emphasis>devscripts</emphasis>, que comparte un poco de consistencia y configuración para facilitar la tarea del desarrollador.</para>

      <sidebar>
        <title><emphasis>VISTA RÁPIDA</emphasis> <command>pbuilder</command></title>
        <indexterm><primary><command>pbuilder</command></primary></indexterm>

	<para>El programa <command>pbuilder</command> (en el paquete del mismo nombre) permite crear un paquete Debian en un entorno <emphasis>chroot</emphasis>. Primero crea un directorio temporal que contiene el sistema mínimo necesario para crear el paquete (incluyendo los paquetes mencionados en el campo <emphasis>Build-Depends</emphasis>). Luego utiliza este directorio como raíz (<filename>/</filename>) con el programa <command>chroot</command> durante el proceso de compilación.</para>

	<para>Esta herramienta permite que el proceso de compilación ocurra en un entorno que no fue modificado por el usuario. Esto también permite una detección rápida de las dependencias de compilación faltantes (ya que la compilación fallará a menos que las dependencias apropiadas estén documentadas). Finalmente, permite crear un paquete para una versión de Debian que no es la instalada en el sistema: el equipo puede estar utilizando <emphasis role="distribution">Stable</emphasis> para su trabajo normal, pero <command>pbuilder</command> en el mismo equipo puede utilizar <emphasis role="distribution">Unstable</emphasis> para compilar paquetes.</para>
      </sidebar>
    </section>
  </section>
  <section id="sect.building-first-package">
    <title>Creación de su primer paquete</title>
    <section>
      <title>Metapaquetes o paquetes falsos</title>

      <para>Los paquetes falsos y los metapaquetes son similares en que son cascarones vacíos que sólo existen por los efectos que tienen sus metadatos en el sistema de gestión de paquetes.</para>

      <para>El propósito de un paquete falso es engañar a <command>dpkg</command> y <command>apt</command> para que crean que un paquete está instalado. Esto permite satisfacer las dependencias de un paquete cuando se instaló el software correspondiente fuera del alcance del sistema de paquetes. Este método funciona, pero debería evitarlo siempre que sea posible ya que no hay garantías que el software instalado manualmente se comporta exactamente de la misma forma que el paquete correspondiente y que otros paquetes que dependan de él funcionarán correctamente.</para>

      <para>Por el otro lado, un metapaquete existe principalmetne como una colección de dependencias, para que su instalación incluya un conjunto de otros paquetes en un solo paso.</para>

      <para>Puede crear ambos tipos de paquetes con los programas <command>equivs-control</command> y <command>equivs-build</command> (en el paquete <emphasis role="pkg">equivs</emphasis>). Si ejecuta <command>equivs-control <replaceable>archivo</replaceable></command> creará un archivo de cabecera de un paquete Debian que debe editar para que contenga el nombre esperado del paquete, su número de versión, el nombre de su encargado, sus dependencias y su descripción. Puede eliminar todos los demás campos sin un valor predeterminado ya que son opcionales. Los campos <literal>Copyright</literal>, <literal>Changelog</literal>, <literal>Readme</literal> y <literal>Extra-Files</literal> no son campos estándar en los paquetes Debian, sólo tienen sentido dentro del alcance de <command>equivs-build</command> y no serán mantenidos en las cabeceras del paquete generado.</para>

      <example>
        <title>Archivo de cabecera del paquete falso <emphasis>libxml-libxml-perl</emphasis></title>

        <programlisting>
Sección: perl
Prioridad: optional
Versión-Standards: 3.9.6

Paquete: libxml-libxml-perl
Versión: 2.0116-1
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Dependencias: libxml2 (&gt;= 2.7.4)
Arquitectura: all
Description: Paquete falso - módulo instalado manualmente en site_perl
 Se trata de un paquete falso que hace creer al sistema de 
 empaquetado que este paquete Debian está instalado.
 .
 De hecho, el paquete no se instala si una version más moderna
 del módulo se ha compilado manualmente e instalado en el
 directorio site_perl.</programlisting>
      </example>

      <para>EL siguiente paso es generar el paquete Debian ejecutando <command>equivs-build <replaceable>archivo</replaceable></command>. Voilà: se creó el paquete en el directorio actual y lo puede utilizar como cualquier otro paquete Debian.</para>
    </section>
    <section>
      <title>Simple compendio de archivos</title>

      <para>Los administradores de Falcot Corp necesitaron crear un paquete Debian para facilitar el despliegue de un conjunto de documentos en una gran cantidad de equipos. El administrador a cargo de esta tarea primero leyó la «Guía del nuevo desarrollador de Debian» y luego comenzó a trabajar en su primer paquete. <ulink type="block" url="https://www.debian.org/doc/manuals/maint-guide/" /></para>

      <para>El primer paso es crear un directorio <filename>falcot-data-1.0</filename> que contendrá el paquete fuente objetivo. El paquete, lógicamente, se llamará <literal>falcot-data</literal> y tendrá el número de versión <literal>1.0</literal>. El administrador luego ubicará los archivos de documentos en un subdirectorio <filename>data</filename>. Luego ejecutará <command>dh_make</command> (del paquete <emphasis role="pkg">dh-make</emphasis>) para agregar los archivos necesarios para el proceso de generación del paquete, que serán almacenados en un subdirectorio <filename>debian</filename>:</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>cd falcot-data-1.0</userinput>
<computeroutput>$ </computeroutput><userinput>dh_make --native</userinput>
<computeroutput>
Type of package: single binary, indep binary, multiple binary, library, kernel module, kernel patch?
 [s/i/m/l/k/n] </computeroutput><userinput>i</userinput>
<computeroutput>
Maintainer name : Raphael Hertzog
Email-Address   : hertzog@debian.org
Date            : Fri, 04 Sep 2015 12:09:39 -0400
Package Name    : falcot-data
Version         : 1.0
License         : gpl3
Type of Package : Independent
Hit &lt;enter&gt; to confirm:
Currently there is no top level Makefile. This may require additional tuning.
Done. Please edit the files in the debian/ subdirectory now. You should also
check that the falcot-data Makefiles install into $DESTDIR and not in / .
$</computeroutput></screen>

      <para>El tipo de paquete seleccionado (<emphasis>binario independiente</emphasis>: «indep binary») indica que este paquete fuente generará sólo un paquete binario que puede ser compartido entre todas las arquitecturas (<literal>Architecture: all</literal>. <emphasis>Binario único</emphasis> («single binary») es lo contrario y generará sólo un paquete binario que depende de la arquitectura objetivo (<literal>Architecture: any</literal>). En este caso, esta primera opción es la más relevante, ya que el paquete sólo contiene documentos y ningún programa binario, por lo que se lo puede utilizar de la misma forma en equipos de cualquier arquitectura.</para>

      <indexterm><primary>tipos de paquete</primary></indexterm>
      <indexterm><primary>paquete</primary><secondary>tipos</secondary></indexterm>

      <para>El tipo <emphasis>binario múltiple</emphasis> («multiple binary») corresponde a un paquete fuente que generará varios paquetes binarios. Un caso particular, <emphasis>biblioteca</emphasis> («library»), es útil para bibliotecas compartidas ya que necesitan seguir reglas de empaquetado estrictas. De forma similar, debería restringir el uso de <emphasis>módulo de núcleo</emphasis> («kernel module») o <emphasis>parche del núcleo</emphasis> («kernel patch») a paquetes que contengan módulos de núcleo.</para>

      <sidebar>
        <title><emphasis>SUGERENCIA</emphasis> Nombre y dirección de correo del encargado</title>

	<para>La mayoría de los programas involucrados al mantener paquetes buscarán su nombre y dirección de correo en las variables de entorno <varname>DEBFULLNAME</varname> y <varname>DEBEMAIL</varname> o <varname>EMAIL</varname>. Definirlas de una vez y para siempre le evitará tener que ingresarlas varias veces. Si su consola usual es <command>bash</command>, es simple cuestión de agregar las siguientes dos líneas a su archivo <filename>~/.bashrc</filename> (¡obviamente reemplazará los valores con unos más relevantes!):</para>

        <programlisting>
export EMAIL="hertzog@debian.org"
export DEBFULLNAME="Raphael Hertzog"</programlisting>
      </sidebar>

      <para>El programa <command>dh_make</command> crea un subdirectorio <filename>debian</filename> con muchos archivos. Algunos son necesarios, en particular <filename>rules</filename>, <filename>control</filename>, <filename>changelog</filename> y <filename>copyright</filename>. Los archivos con extensión <filename>.ex</filename> son archivos de ejemplo que puede utilizar modificándolos (y eliminando la extensión) cuando necesite. Si no los necesita, le recomendamos eliminarlos. Debe mantener el archivo <filename>compat</filename> ya que es necesario para que funcione correctamente la suite de programas <emphasis>debhelper</emphasis> (todos los que comienzan con el prefijo <command>dh_</command>) que son utilizados en varias etapas del proceso de creación del paquete.</para>

      <para>El archivo <filename>copyright</filename> debe contener la información sobre los autores de los documentos incluidos en el paquete y las licencias relacionadas. En nuestro caso, éstos son documentos internos y su uso está restringido a la empresa Falcot Corp. El archivo <filename>changelog</filename> predeterminado generalmente es el apropiado; Es sufuciente reemplazar «Initial release» con una explicación más detallada y cambiar la distribución de <literal>unstable</literal> a <literal>internal</literal>. También se actualizó el archivo <filename>control</filename>:  se modificó el campo <literal>Sección</literal> a <emphasis>misc</emphasis> y se eliminaron los campos <literal>Homepage</literal>, <literal>Vcs-Git</literal> y <literal>Vcs-Browser</literal>. Se completaron los campos de <literal>Depends</literal> con <literal>iceweasel | www-browser</literal> para asegurar que exista un navegador web disponible capaz de mostrar los documentos en el paquete.</para>

      <example>
        <title>El archivo <filename>control</filename></title>

        <programlisting>
Source: falcot-data
Section: misc
Priority: optional
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Build-Depends: debhelper (&gt;= 9)
Standards-Version: 3.9.5

Paquate: falcot-data
Arquitectura: all
Dependencias: iceweasel | www-browser, ${misc:Depends}
Descripción: Documentación interna de Falcot Corp
 Este paquete proporciona varios documentos que decriben la estructura 
 interna de Falcot Corp.  Incluye:
  - diagrama de la organización
  - contactos para cada departamento.
 .
 Estos documentos NO DEBEN salir de la empresa.
 Solo para USO INTERNO.</programlisting>
      </example>

      <example>
        <title>El archivo <filename>changelog</filename></title>

        <programlisting>
falcot-data (1.0) internal; urgency=low

  * Entrega inicial.
  * Empecemos con unos pocos documentos:
    - estructura interna de la compañía;
    - contactos para cada departamento.

 -- Raphael Hertzog &lt;hertzog@debian.org&gt;  Fri, 04 Sep 2015 12:09:39 -0400</programlisting>
      </example>

      <example>
        <title>El archivo <filename>copyright</filename></title>

        <programlisting>
Formato: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: falcot-data

Ficheros: *
Copyright: 2004-2015 Falcot Corp
Licencia: 
 Todos los derechos reservados.</programlisting>
      </example>

      <sidebar>
        <title><emphasis>VOLVER A LOS CIMIENTOS</emphasis> El archivo <filename>Makefile</filename></title>
        <indexterm><primary><filename>Makefile</filename></primary></indexterm>

	<para>Un archivo <filename>Makefile</filename> es un script utilizado por el programa <command>make</command>; describe las reglas para crear un conjunto de archivos desde otros en un árbol de dependencias (por ejemplo, podemos compilar un programa desde un conjunto de archivos fuente). El archivo <filename>Makefile</filename> describe estas reglas en el siguiente formato:</para>

        <programlisting>
objetivo: fuente1 fuente 2 ...
        orden1
        orden2</programlisting>

	<para>La interpretación de esta regla es como sigue: si uno de los archivos <literal>fuente*</literal> es más reciente que el archivo <literal>objetivo</literal>, entonces es necesario generar el objetivo utilizando <command>orden1</command> y <command>orden2</command>.</para>

	<para>Sepa que las líneas de órdenes deben comenzar con un carácter de tabulación; también debe saber que cuando una línea de órdenes comienza con un carácater de guión (<literal>-</literal>), si éste falla no interrumpirá todo el proceso.</para>
      </sidebar>

      <para>El archivo <filename>rules</filename> generalmente contiene un conjunto de reglas utilizadas para configurar, compilar e instalar el software en un subdirectorio dedicado (cuyo nombre coincide con el del paquete binario generado). Luego se incluye el contenido de este subdirectorio en el compendio del paquete Debian como si fuera la raíz del sistema de archivos. En nuestro caso, se instalarán los archivos en el subdirectorio <filename>debian/falcot-data/usr/share/falcot-data/</filename> para que el paquete generado despliegue los archivos en <filename>/usr/share/falcot-data/</filename>. Se utiliza el archivo <filename>rules</filename> como si fuera un archivo <filename>Makefile</filename>, con unos pocos objetivos estándar (incluyendo <literal>clean</literal> y <literal>binary</literal>, utilizados para limpiar el directorio fuente y generar el paquete binario respectivamente).</para>

      <para>Si bien este archivo es el corazón del proceso, cada vez más contiene sólo el mínimo indispensable para ejecutar un conjunto estándar de programas que provee la herramienta <command>debhelper</command>. Tal es el caso de los archivos generados por <command>dh_make</command>. Para instalar nuestros archivos simplemente configuraríamos el comportamiento de <command>dh_install</command> creando el siguiente archivo <filename>debian/falcot-data.install</filename>:</para>

      <programlisting>
data/* usr/share/falcot-data/</programlisting>

      <para>En este punto, podemos crear el paquete. Sin embargo, agregaremos una capa de pintura. Debido a que los administradores desean que se pueda acceder fácilmente a los documentos desde los menú de los entornos gráficos de escritorio, añadiremos un fichero <filename>falcot-data.desktop</filename> y lo instalaremos en <filename>/usr/share/applications</filename> agregando una segunda línea a <filename>debian/falcot-data.install</filename>.</para>

      <example>
        <title>El archivo <filename>falcot-data.desktop</filename></title>

        <programlisting>
[Desktop Entry]
Name=Documentaciónn Interna Falcot Corp
Comment=Inicia un navegador para leer la documentación
Exec=x-www-browser /usr/share/falcot-data/index.html
Terminal=false
Type=Application
Categories=Documentation;</programlisting>
      </example>

      <para>El <filename>debian/falcot-data.install</filename> actualizado se parece a este:</para>
      <programlisting>
data/* usr/share/falcot-data/
falcot-data.desktop usr/share/applications/</programlisting>

      <para>Ahora nuestro paquete fuente está listo. Todo lo que falta es generar el paquete binario con el mismo método que utilizamos para recompilar paquetes: ejecutaremos <command>dpkg-buildpackage -us -uc</command> desde el directorio <filename>falcot-data-1.0</filename>.</para>
    </section>
  </section>
  <section id="sect.setup-apt-package-repository">
    <title>Creación de un repositorio de paquetes para APT</title>
    <indexterm><primary>repositorio de paquetes</primary></indexterm>
    <indexterm><primary>paquete</primary><secondary>Debian</secondary><tertiary>repositorio de</tertiary></indexterm>

    <para>Falcot Corp gradualmente comenzó a mantener una cantidad de paquetes Debian con modificaciones locales de paquetes existentes o creados desde cero para distribuir datos y programas internos.</para>

    <para>Para facilitar su despliegue, desean integrarlos en un repositorio de paquetes que APT pueda utilizar directamente. Por razones de mantenimiento obvias, desean separar los paquetes internos de aquellos recompilados localmente. El objetivo es que los elementos correspondientes del archivo <filename>/etc/apt/sources.list.d/falcot.list</filename> sean los siguientes:</para>

    <programlisting>
deb http://packages.falcot.com/ updates/
deb http://packages.falcot.com/ internal/</programlisting>
    <indexterm><primary><command>mini-dinstall</command></primary></indexterm>

    <para>Por lo tanto, los administradores configuraron un servidor virtual en su servidor HTTP interno, con <filename>/srv/vhosts/packages/</filename> como raíz del espacio web asociado. Delegaron la gestión del repositorio en sí al programa <command>mini-dinstall</command> (en el paquete del mismo nombre). Esta herramienta revisa el directorio <filename>incoming/</filename> (en nuestro caso: <filename>/srv/vhosts/packages/mini-dinstall/incoming</filename>) y espera allí a los nuevos paquetes; cuando se sube un paquete, lo instala en un repositorio en <filename>/srv/hosts/packages/</filename>. El programa <command>mini-dinstall</command> lee el archivo <filename>*.changes</filename> creado cuando se genera el paquete Debian. Estos archivos contienen una lista de todos los otros archivos asociados con la versión del paquete (<filename>*.deb</filename>, <filename>*.dsc</filename>, <filename>*.diff.gz</filename>/<filename>*.debian.tar.gz</filename>, <filename>*.orig.tar.gz</filename> o sus equivalentes con otras herramientas de compresión) que le permiten a <command>mini-dinstall</command> saber qué archivos instalar. Los archivos <filename>*.changes</filename> también contienen el nombre de la distribución objetivo (generalmente <literal>unstable</literal>) mencionada en el último campo de la entrada en <filename>debian/changelog</filename> y <command>mini-dinstall</command> utiliza esta información para decidir dónde instalar el paquete. Es por esto que los administradores siempre deben cambiar este campo antes de compilar un paquete y definirlo como <literal>internal</literal> o <literal>updates</literal>, dependiendo de la ubicación objetivo. <command>mini-dinstall</command> generará luego los archivos necesarios para APT, como <filename>Packages.gz</filename>.</para>

    <sidebar>
      <title><emphasis>ALTERNATIVA</emphasis> <command>apt-ftparchive</command></title>
      <indexterm><primary><command>apt-ftparchive</command></primary></indexterm>

      <para>Si <command>mini-dinstall</command> le parece demasiado complejo para sus necesidades de repositorios Debian, también puede utilizar el programa <command>apt-ftparchive</command>. Esta herramienta explora el contenido de un directorio y muestra (por su salida estándar) el archivo <filename>Packages</filename> correspondiente. En el caso de Falcot Corp, los administradores pueden subir sus paquetes directamente a <filename>/srv/vhosts/packages/updates/</filename> o <filename>/srv/vhosts/packages/internal/</filename> y luego ejecutar lo siguiente para crear los archivos <filename>Pacakges.gz</filename>:</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>cd /srv/vhosts/packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages updates &gt;updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages internal &gt;internal/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip internal/Packages</userinput></screen>

      <para>Ejecutar <command>apt-ftparchive sources</command> permite crear archivos <filename>Sources.gz</filename> de forma similar.</para>
    </sidebar>

    <para>La configuración de <command>mini-dinstall</command> necesita definir un archivo <filename>~/.mini-dinstall.conf</filename>; en el caso de Falcot Corp, su contenido es el siguiente:</para>

    <programlisting>
[DEFAULT]
archive_style = flat
archivedir = /srv/vhosts/packages

verify_sigs = 0
mail_to = admin@falcot.com

generate_release = 1
release_origin = Falcot Corp
release_codename = stable

[updates]
release_label = Paquetes Debian Recompilados

[internal]
release_label = Paquetes Internos</programlisting>

    <para>Una decisión importante es la generación de archivos <filename>Release</filename> para cada repositorio. Esto puede ayudar a gestionar las prioridades de instalación utilizando el archivo de configuración <filename>/etc/apt/preferences</filename> (revise el <xref linkend="sect.apt.priorities" /> para más detalles).</para>

    <sidebar>
      <title><emphasis>SEGURIDAD</emphasis> <command>mini-dinstall</command> y permisos</title>

      <para>Debido a que se diseñó a <command>mini-dinstall</command> para ejecutar como un usuario normal, no es necesario ejecutarlo como root. La forma más sencilla es configurar todo en la cuenta de usuario que pertenezca al administrador encargado de crear los paquetes Debian. Debido a que sólo este administrador tiene los permisos necesarios para guardar archivos en el directorio <filename>incoming/</filename> podemos deducir que éste autenticó el origen de cada paquetes antes de desplegarlo y <command>mini-dinstall</command> no necesita hacerlo nuevamente. Esto explica el parámetros <literal>verify_sigs = 0</literal> (que significa que no se necesita verificar firmas). Sin embargo, si el contenido del paquete es sensible, podemos revertir esta configuración y seleccionar autenticar con un conjunto de llaves que contenga aquellas de las personas que tienen permitido crear paquetes (configurado con el parámetro <literal>extra_keyrings</literal>); <command>mini-dinstall</command> luego verificará el origen de cada paquete entrante analizando la firma integrada en el archivo <filename>*.changes</filename>.</para>
    </sidebar>

    <para>Ejecutar <command>mini-dinstall</command> en realidad inicia un demonio en segundo plano. Mientras ejecute el demonio, revisará el directorio <filename>incoming/</filename> por nuevos paquetes cada media hora; cuando detecte un nuevo paquete lo moverá al repositorio y generará los archivos <filename>Packages.gz</filename> y <filename>Sources.gz</filename>. Si ejecutar un demonio es un problema, también puede invocar manualmente <command>mini-dinstall</command> en modo de lote (con la opción <literal>-b</literal>) cada vez que suba un paquete al directorio <filename>incoming/</filename>. <command>mini-dinstall</command> permite otras posibilidades documentadas en su página de manual <citerefentry><refentrytitle>mini-dinstall</refentrytitle> <manvolnum>1</manvolnum></citerefentry>.</para>

    <sidebar>
      <title><emphasis>EXTRA</emphasis> Generación de un repositorio firmado</title>

      <para>La suite APT verifica una cadena de firmas criptográficas en los paquetes que gestiona antes de instalarlos para asegurar su autenticidad (ver <xref linkend="sect.package-authentication" />). Por lo tanto, los repositorios APT privados pueden ser un problema, ya que los equipos que los utilicen mostrarán advertencias sobre paquetes sin firmar. Por lo tanto, un administrador diligente integrará los archivos privados con el mecanismo de seguridad de APT.</para>

      <para>Para ayudar con este proceso, <command>mini-dinstall</command> incluye la opción de configuración <literal>release_signscript</literal> que permite especificar un script a utilizar para generar la firma. Un buen punto de partida es el script <filename>sign-release.sh</filename>, provisto por el paquete <emphasis role="pkg">mini-dinstall</emphasis>, en el directorio <filename>/usr/share/doc/mini-dinstall/examples/</filename>; puede necesitar cambios locales.</para>
    </sidebar>
  </section>
  <section id="sect.becoming-package-maintainer">
    <title>Cómo convertirse en un encargado de paquetes</title>
    <section>
      <title>Aprendizaje de creación de paquetes</title>

      <para>Crear un paquete Debian de calidad no siempre es una tarea sencilla y necesitará aprender algunas cosas para convertirse en un encargado de paquetes («package mantainer»), tanto teóricas como prácticas. No es sólo cuestión de compilar e instalar software; en cambio, la mayor parte de la complejidad proviene de entender problemas, conflictos y, en general, las interacciones con los muchos otros paquetes disponibles.</para>
      <section>
        <title>Reglas</title>

	<para>Un paquete Debian debe cumplir con las reglas precisas agrupadas en la normativa Debian, y todo encargado de paquetes debe conocerlas. No hay necesidad de saberlas de memoria, sino saber que existen y consultarlas cuando se enfrente ante alternativas no triviales. Todo encargado Debian ha cometido errores por no conocer alguna regla, pero esto no es un gran problema siempre y cuando se corrija cuando un usuario informe del error como (lo que sucede bastante rápido gracias a usuarios avanzados). <ulink type="block" url="https://www.debian.org/doc/debian-policy/" /></para>
      </section>
      <section>
        <title>Procedimientos</title>
        <indexterm><primary>Referencia del desarrollador Debian</primary></indexterm>

	<para>Debian no es una simple colección de paquetes individuales. El trabajo de empaquetado de todos es parte de un proyecto colectivo; ser un desarrollador Debian incluye saber cómo funciona el proyecto Debian como un todo. Todo desarrollador, tarde o temprano, interactuará con otros. La referencia de desarrolladores de Debian («Debian Developer's Reference», en el paquete <emphasis role="pkg">developers-reference</emphasis>) resume lo que todo desarrollador debe saber para poder interactuar de la mejor forma posible con los varios equipos dentro del proyecto y para poder aprovechar al máximo los recursos disponibles. Este documento también enumera una serie de deberes que se espera cumpla un desarrollador. <ulink type="block" url="https://www.debian.org/doc/manuals/developers-reference/" /></para>
      </section>
      <section>
        <title>Herramientas</title>

	<para>Muchas herramientas ayudan a los encargados de paquetes con su trabajo. Esta sección las describe rápidamente, pero no provee todos sus detalles, ya que cada una de ellas cuenta con su propia documentación.</para>
        <section>
          <title>El programa <command>lintian</command></title>
          <indexterm><primary><command>lintian</command></primary></indexterm>

	  <para>Esta herramienta es una de las más importantes: es el verificador de paquetes Debian. Está basado en un gran conjunto de pruebas creadas a partir de la normativa Debian, y detecta rápida y automáticamente muchos errores que pueden corregirse antes de publicar los paquetes.</para>

	  <para>Esta herramienta es sólo una ayuda y a veces está equivocada (por ejemplo, como la normativa Debian cambia con el tiempo, <command>lintian</command> a veces está desactualizado). No es exhaustiva: no debe interpretar el no obtener ningún error Lintian como prueba de que el paquete es perfecto; como máximo, éste evita los errores más comunes.</para>
        </section>
        <section>
          <title>El programa <command>piuparts</command></title>
          <indexterm><primary><command>piuparts</command></primary></indexterm>

	  <para>Esta es otra herramienta importante: automatiza la instalación, actualización, eliminación y purga de un paquete (en un entorno aislado) y revisa que ninguna de estas operaciones genere un error. Puede ayudar a detectar dependencias faltantes y también detecta cuando un archivo no elimina archivos que debería luego de ser purgado.</para>
        </section>
        <section>
          <title>devscripts</title>
          <indexterm><primary><emphasis role="pkg">devscripts</emphasis></primary></indexterm>
          <indexterm><primary><command>debuild</command></primary></indexterm>
          <indexterm><primary><command>dch</command></primary></indexterm>
          <indexterm><primary><command>uscan</command></primary></indexterm>
          <indexterm><primary><command>debi</command></primary></indexterm>
          <indexterm><primary><command>debc</command></primary></indexterm>

	  <para>El paquete <emphasis role="pkg">devscripts</emphasis> contiene muchos programa que ayudan en un gran espectro del trabajo de un desarrollador Debian:</para>
          <itemizedlist>
            <listitem>
	      <para><command>debuild</command> permite generar un paquete (con <command>dpkg-buildpackage</command>) y ejecutar <command>lintian</command> para verificar si cumple con la normativa Debian luego.</para>
            </listitem>
            <listitem>
	      <para><command>debclean</command> limpia un paquete fuente luego que se generó un paquete binario.</para>
            </listitem>
            <listitem>
	      <para><command>dch</command> permite editar rápida y fácilmente el archivo <filename>debian/changelog</filename> en un paquete fuente.</para>
            </listitem>
            <listitem>
	      <para><command>uscan</command> verifica si el autor original publicó una nueva versión de un software; esto necesita un archivo <filename>debian/watch</filename> con una descripción de la ubicación de dichas publicaciones.</para>
            </listitem>
            <listitem>
	      <para><command>debi</command> permite instalar (con <command>dpkg -i</command>) el paquete Debian que acaba de generar sin necesidad de introducir su nombre y ruta completos.</para>
            </listitem>
            <listitem>
	      <para>De forma similar, <command>debc</command> le permite escanear el contenido de un paquete generado recientemente (con <command>dpkg -c</command>) sin tener que ingresar su nombre y ruta completos.</para>
            </listitem>
            <listitem>
	      <para><command>bts</command> controla el sistema de seguimiento de errores desde la consola; este programa genera los correos apropiados automáticamente.</para>
            </listitem>
            <listitem>
	      <para><command>debrelease</command> sube un paquete recientemente generado a un servidor remoto sin tener que ingresar el nombre y ruta completos del archivo <filename>.changes</filename> relacionado.</para>
            </listitem>
            <listitem>
	      <para><command>debsign</command> firma los archivos <filename>*.dsc</filename> y <filename>*.changes</filename>.</para>
            </listitem>
            <listitem>
	      <para><command>uupdate</command> automatiza la creación de una nueva revisión de un paquete cuando se publicó una nueva versión del software original.</para>
            </listitem>
          </itemizedlist>
        </section>
        <section>
          <title><emphasis role="pkg">debhelper</emphasis> y <emphasis role="pkg">dh-make</emphasis></title>
          <indexterm><primary><emphasis>debhelper</emphasis></primary></indexterm>
          <indexterm><primary><emphasis>dh-make</emphasis></primary></indexterm>

	  <para>Debhelper es un conjunto de scripts que facilitan la creación de paquetes que cumplan la normativa; debe ejecutar estos scripts desde <filename>debian/rules</filename>. Debhelper fue ampliamente adopado en Debian, como muestra el hecho de que es utilizado en la mayoría de los paquetes Debian oficiales. Todos los programas que contiene tienen un prefijo <command>dh_</command>.</para>

	  <para>El script <command>dh_make</command> (en el paquete <emphasis role="pkg">dh-make</emphasis>) crea los archivos necesarios para generar un paquete Debian en un directorio que contiene inicialmente las fuentes de un software. Como puede adivinar del nombre del programa, los archivos generados utilizan debhelper de forma predeterminada.</para>
        </section>
        <section>
          <title><command>dupload</command> y <command>dput</command></title>
          <indexterm><primary><command>dupload</command></primary></indexterm>
          <indexterm><primary><command>dput</command></primary></indexterm>

	  <para>Los programas <command>dupload</command> y <command>dput</command> permiten subir un paquete Debian a un servidor (posiblemente remoto). Esto permite a los desarrolladores publicar sus paquetes al servidor Debian principal (<literal>ftp-master.debian.org</literal>) para que pueda ser integrado al repositorio y distribuido por sus réplicas. Estos programas toman como parámetros un archivo <filename>*.changes</filename> y deducen los demás archivos relevantes de su contenido.</para>
        </section>
      </section>
    </section>
    <section>
      <title>Proceso de aceptación</title>

      <para>Convertirse en un "desarrollador Debian" no es una simple cuestión administrativa. El proceso tiene varios pasos, y se parece tanto a una iniciación como a un proceso de selección. En cualquier caso, está formalizado y bien documentado, por lo que cualquiera puede seguir su progreso en el sitio web dedicado al proceso para nuevos miembros. <ulink type="block" url="https://nm.debian.org/" /></para>

      <sidebar>
        <title><emphasis>EXTRA</emphasis> Proceso liviano para «encargados Debian»</title>

        <para>«Encargado Debian» («Debian Maintainer») es otro estatus que proporcionad menos privilegios que "desarrolador Debian". Un desarrollador Debian sólo necesita realizar una revisión enla subida inicial, y realizar una declaración indicando que confían en el encargado potencial y su habilidad de mantener el paquete por su cuenta.</para>
        <indexterm><primary>Mantenedor Debian</primary></indexterm>
      </sidebar>
      <section>
        <title>Prerequisitos</title>

	<para>Se espera que todos los candidatos tengan un conocimiento práctico del idioma inglés. Esto es necesario en todos los niveles: por supuesto, para la comunicación inicial con el examinador pero también luego, ya que el inglés es el idioma de preferencia para la mayoría de la documentación; además los usuarios de paquetes se comunicarán en inglés al reportar errores y esperarán respuestas en el mismo idioma.</para>

	<para>El otro prerequisito tiene que ver con la motivación. Ser un desarrollador Debian es un proceso que sólo tiene sentido si el candidato sabe que su interés en Debian durará muchos meses. El proceso de aceptación en sí puede durar varios meses, y Debian necesita desarrolladores a largo plazo; se necesita mantener permanentemente cada paquete y no sólo subirlos y ya.</para>
      </section>
      <section>
        <title>Registración</title>

	<para>El primer paso (real) consiste en encontrar un patrocinador («sponsor») o partidario («advocate»); esto significa un desarrollador oficial dispuesto a manifestar que aceptar <emphasis>X</emphasis> sería algo bueno para Debian. Esto generalmente implica que el candidato ha participado en la comunidad y que se apreció su trabajo. Si el candidato es tímido y no promocionó su trabajo públicamente, pueden intentar convencer a un desarrollador Debian para que lo patrocine mostrándole su trabajo en privado.</para>

        <indexterm><primary>par de claves</primary></indexterm>
	<para>Al mismo tiempo, el candidato debe generar un par de claves pública/privada con GnuPG, que deben ser firmadas por al menos dos desarrolladores Debian oficiales. La firma autentica el nombre en la llave. Efectivamente, durante una fiesta de firma de claves, cada participante debe mostrar identificación oficial (generalmente un pasaporte o documento de identidad) junto con sus identificadores de claves. Este paso confirma la relación entre la persona y las claves. Esta firma, por lo tanto, requiere encontrarse en la vida real. Si no encuentra ningún desarrollador Debian en una conferencia pública de software libre, puede buscar explícitamente desarrolladores que vivan cerca utilizando la lista en la siguiente página web como punto de partida. <ulink type="block" url="https://wiki.debian.org/Keysigning" /></para>

	<para>Una vez que el patrocinador validó la registración en <literal>nm.debian.org</literal>, se le asigna al candidato un <emphasis>Gestor de aplicación</emphasis> («Application Manager»). El gestor de aplicación, de allí en adelante, dirigirá el proceso a través de varios pasos y validaciones predeterminados.</para>

	<para>La primera verificación es una comprobación de identidad. Si ya tiene una clave firmada por dos desarrolladores Debian, este paso es sencillo; de lo contrario, el gestor de aplicación intentará guiarlo para buscar desarrolladores Debian cercanos y organizar una reunión y firma de claves.</para>
      </section>
      <section>
        <title>Aceptación de principios</title>

	<para>Se siguen estas formalidades administrativas por consideraciones filosóficas. El objetivo es asegurarse que el candidato entiende y acepta el contrato social y los principios detrás del Software Libre. Unirse a Debian sólo es posible si uno comparte los valores que unen a los desarrolladores actuales, como están expresados en los textos de fundación (resumidos en el <xref linkend="the-debian-project" />).</para>

	<para>Además, se espera que cada candidato que desee unirse a las filas de Debian conozca cómo funciona el proyecto y cómo interactuar de forma apropiada para solucionar los problemas que seguramente encontrarán con el paso del tiempo. Toda esta información generalmente está documentada en los manuales para nuevos encargados y en la referencia para desarrolladores de Debian. Debería bastar con una lectura atenta de este documento para responder las preguntas del examinador. Si las respuestas no son satisfactorias, se le informará al candidato. Tendrán que leer (nuevamente) la documentación relevante antes de intentarlo de nuevo. En aquellos casos en los que la documentación existente no contenga la respuesta apropiada para la pregunta, el candidato frecuentemente podrá llegar a la respuesta con un poco de experiencia práctica dentro de Debian o, potencialmente, discutiendo con otros desarrolladores Debian. Este mecanismo asegura que los candidatos se involucren de alguna forma en Debian antes de formar completamente parte de él. Es una normativa deliberada, por la que los candidatos que se unirán eventualmente al proyecto son integrados como otra pieza de un rompecabezas que se puede extender sin fin.</para>

        <indexterm><primary><emphasis>Fiosofía y Procedimientos</emphasis></primary></indexterm>
	<para>Este paso es conocido generalmente como <emphasis>filosofía y procedimientos</emphasis> (abreviado como «P&amp;P» por «Philosophy &amp; Procedures») en la jerga de los desarrolladores involucrados en el proceso de nuevos miembros.</para>
      </section>
      <section>
        <title>Revisión de habilidades</title>

	<para>Se debe justificar cada aplicación para convertirse en un desarrollador oficial de Debian. Convertirse en un miembro del proyecto requiere mostrar que esta posición es legítima y que facilita el trabajo del candidato para ayudar a Debian. La justificación más común es que ser desarrollador Debian facilita el mantener un paquete Debian, pero no es la única. Algunos desarrolladores se unen al proyecto para adaptar una arquitectura particular, otros desean mejorar la documentación, etc.</para>

	<para>Este paso le ofrece al candidato la oportunidad de especificar lo que desean hacer dentro del proyecto Debian y mostrar lo que ya han hecho para ello. Debian es un proyecto pragmático y decir algo no es suficiente si las acciones no coinciden con lo que se anuncia. Frecuentemente, cuando el rol deseado dentro del proyecto está relacionado con la manutención de un paquete, se deberá validar técnicamente una primera versión del futuro paquete y deberá ser subido a los servidores Debian por un desarrollador Debian existente como patrocinador.</para>

        <sidebar>
          <title><emphasis>COMUNIDAD</emphasis> Patrocinio</title>
          <indexterm><primary>patrocinio</primary></indexterm>

	  <para>Los desarrolladores Debian pueden «patrocinar» («sponsor») paquetes preparados por alguien más, lo que significa que los publican en los repositorios Debian oficiales luego de haber realizado una revisión cuidadosa. Este mecanismo le permite a terceros, quienes todavía no atravesaron el proceso de nuevos miembros, contribuir al proyecto ocasionalmente. Al mismo tiempo, asegura que todos los paquetes incluidos en Debian siempre son revisados por un miembro oficial.</para>
        </sidebar>

	<para>Finalmente, el examinador revisa las habilidades técnicas (empaquetado) del candidato con un cuestionario detallado. No se permiten respuestas incorrectas, pero no hay límite de tiempo para responder. Toda la documentación está disponible y se permiten varios intentos si las primeras respuestas no son satisfactorias. Este paso no intenta discriminar, sino garantizar al menos un mínimo común de conocimiento para todos los nuevos contribuyentes.</para>

        <indexterm><primary><emphasis>Tareas y Habilidades</emphasis></primary></indexterm>
	<para>En la jerga de los examinadores, se conoce a este paso como <emphasis>tareas y habilidades</emphasis> (abreviado «T&amp;S» por «Tasks &amp; Skills»).</para>
      </section>
      <section>
        <title>Aprobación final</title>

	<para>En el último paso, un DAM (<emphasis>gestor de cuentas Debian</emphasis>: «Debian Account Manager») revisa todo el proceso. El DAM revisará toda la información que recolectó el examinador sobre el candidato y tomará la decisión de crearle una cuenta en los servidores Debian o no. En los casos que necesite información adicional se puede demorar la creación de la cuenta. Los rechazos son bastante raros si el examinador realiza un buen trabajo siguiendo el procedimiento, pero a veces ocurren. Nunca son permanentes y el candidato es libre de intentar nuevamente luego de un tiempo.</para>

	<para>La decisión del DAM es final y (casi) sin apelación, lo que explica porqué, en el pasado, se criticaba frecuentemente a aquellos en dicho rol .</para>
      </section>
    </section>
  </section>
</chapter>
