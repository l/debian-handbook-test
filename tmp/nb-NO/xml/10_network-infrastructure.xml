<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="network-infrastructure" lang="nb-NO">
	<chapterinfo>
		 <keywordset>
			<keyword>Nettverk</keyword>
			 <keyword>Innfallsport (gateway)</keyword>
			 <keyword>TCP/IP</keyword>
			 <keyword>IPv6</keyword>
			 <keyword>DNS</keyword>
			 <keyword>Bind</keyword>
			 <keyword>DHCP</keyword>
			 <keyword>QoS</keyword>

		</keywordset>

	</chapterinfo>
	 <title id="infrastructure.title">Nettverksinfrastruktur</title>
	 <highlights> <para>
		Linux innehar hele Unix-arven når det gjelder nettverk, og Debian tilbyr hele samlingen av verktøy for å opprette og styre dem. Dette kapittelet går igjennom disse verktøyene.
	</para>
	 </highlights> <section id="sect.gateway">
		<title>Innfallsport (gateway)</title>
		 <para>
			En innfallsport (gateway) er et system som forbinder flere nettverk. Dette begrepet refererer ofte til et lokalt nettverks «utgang» («exit point») på den obligatoriske banen til alle eksterne IP-adresser. Inngangsporten er koblet til hver av de nettverkene den binder sammen, og fungerer som en ruter for å formidle IP-pakker mellom dens ulike grensesnitt.
		</para>
		 <indexterm>
			<primary>gateway (innfallsport)</primary>
		</indexterm>
		 <indexterm>
			<primary>nettverk</primary>
			<secondary>gateway</secondary>
		</indexterm>
		 <indexterm>
			<primary>ruter</primary>
		</indexterm>
		 <sidebar> <title><emphasis>DET GRUNNLEGGENDE</emphasis> IP-pakke</title>
		 <indexterm>
			<primary>pakke</primary>
			<secondary>IP</secondary>
		</indexterm>
		 <para>
			De fleste nettverk nå for tiden bruker IP-protokollen (<emphasis>Internett-protokoll</emphasis>). Denne protokollen deler opp de overførte dataene i pakker med begrenset størrelse. Hver pakke inneholder, i tillegg til nyttedata, en rekke detaljer som trengs for å sende den riktig vei.
		</para>
		 </sidebar> <sidebar id="sidebar.tcp-udp"> <title><emphasis>DET GRUNNLEGGENDE</emphasis> TCP/UDP</title>
		 <indexterm>
			<primary>port</primary>
			<secondary>TCP</secondary>
		</indexterm>
		 <indexterm>
			<primary>port</primary>
			<secondary>UDP</secondary>
		</indexterm>
		 <indexterm>
			<primary>TCP, port</primary>
		</indexterm>
		 <indexterm>
			<primary>UDP, port</primary>
		</indexterm>
		 <para>
			Mange programmer håndterer ikke de enkelte pakker selv, selv om dataene de sender går over IP; bruker de ofte TCP (<emphasis> Transmission Control Protocol</emphasis>). TCP er et lag over IP som tillater etablering av øremerkede forbindelser til datastrømmer mellom to punkter. Programmene ser da bare en inngangsport som data kan mates til med garanti for at de samme dataene kommer ut uten tap (og i samme rekkefølge) ved utgangspunktet i den andre enden av forbindelsen. Selv om mange typer feil kan skje i de lavere lagene, er de kompensert av TCP; tapte pakker er sendt igjen, og pakker som kommer i uorden (for eksempel hvis de bruker ulike baner) er reordnet (omorganisert) på riktig måte.
		</para>
		 <para>
			En annen protokoll som setter sin lit til IP er UD (<emphasis>User Datagram Protocol</emphasis>). I motsetning til TCP, er den pakkeorientert. Dens mål er forskjellige: Formålet med UDP er bare å sende en pakke fra en applikasjon til en annen. Protokollen prøver ikke å kompensere for mulige pakketap underveis, heller ikke at pakker mottas i samme rekkefølge som de ble sendt. Den viktigste fordelen til denne protokollen er at tidsforsinkelsen er kraftig redusert, fordi tapet av en enkelt pakke ikke forsinker mottaket av alle påfølgende pakker inntil den tapte blir sendt på nytt.
		</para>
		 <para>
			TCP og UDP involverer begge porter, som er «forlengelse tall» for å etablere kommunikasjon med en gitt applikasjon på en maskin. Dette konseptet gjør det mulig å uføre flere forskjellige overføringer parallelt i samme korrespondanse, siden denne kommunikasjonen kan kjennetegnes av portnummeret.
		</para>
		 <para>
			Noen av disse portnumrene - standardisert av IANA-en (<emphasis>Internet Assigned Numbers Authority</emphasis>) - er «velkjente» for å være knyttet til nettverkstjenester. For eksempel blir TCP-port 25 generelt brukt av e-posttjeneren. <ulink type="block" url="http://www.iana.org/assignments/port-numbers" />
		</para>
		 </sidebar> <para>
			Når et lokalt nettverk bruker et privat adresseområde (ikke rutbare (tilgjengelig) på Internettet), trenger inngangsporten å gjennomføre <emphasis>address masquerading</emphasis> (adresse maskering) slik at maskinene i nettverket kan kommunisere med omverdenen. Den maskerte operasjonen er en slags mellomtjener som opererer på nettverksnivå: Hver utgående tilkobling fra en intern maskin er erstattet med en forbindelse fra inngangsporten selv (siden porten har en ekstern, rutbar adresse), dataene som går gjennom den maskerte tilkoblingen blir sendt til den nye, og dataene som kommer tilbake som svar sendes gjennom til den maskerte forbindelsen til den interne maskinen. Inngangsporten bruker en rekke øremerkede TCP-porter til dette formål, vanligvis med meget høye tall (over 60 000). Hver tilkobling som kommer fra en intern maskin vises deretter til omverdenen som en forbindelse som kommer fra en av disse reserverte portene.
		</para>
		 <indexterm>
			<primary>maskering</primary>
		</indexterm>
		 <sidebar> <title><emphasis>KULTUR</emphasis> Privat adresseområde</title>
		 <indexterm>
			<primary>IP-adresse</primary>
			<secondary>privat</secondary>
		</indexterm>
		 <indexterm>
			<primary>privat IP-adresse</primary>
		</indexterm>
		 <para>
			RFC 1918 definerer tre områder for IPv4-adresser som ikke er ment å bli rutet på Internettet, men bare til bruk i lokale nettverk. Den første, <literal>10.0.0.0/8</literal> (se sidestolpe <xref linkend="sidebar.networking-basics" />), er et A-klasse område (med 2 <superscript>24</superscript> IP-adresser). Den andre, <literal>172.16.0.0/12</literal>, samler 16 B-klasse områder (<literal>172.16.0.0/16</literal> til <literal>172.31.0.0/16</literal>), hver med 2 <superscript>16</superscript> IP-adresser. Til slutt, <literal>192.168.0.0/16</literal> er et B-klasse område (som grupperer 256 C-klasse områder, <literal>192.168.0.0/24</literal> til <literal>192.168.255.0/24</literal>, med 256 IP-adresser hver). <ulink type="block" url="http://www.faqs.org/rfcs/rfc1918.html" />
		</para>
		 </sidebar> <para>
			Inngangsporten kan også utføre to typer <emphasis>network address translation</emphasis> (eller i korthet NAT). Den første typen, <emphasis>Destination NAT</emphasis> (DNAT) er en teknikk for å endre IP-adressedestinasjonen (og/eller TCP- eller UDP-porten) til en (vanligvis) innkommende tilkobling. Forbindelsens sporingsmekanisme endrer også følgende pakker i samme tilknytning for å sikre kontinuitet i kommunikasjonen. Den andre typen NAT er <emphasis>Source NAT</emphasis> (SNAT), der <emphasis>masquerading</emphasis> er et spesielt tilfelle; SNAT endrer kildens IP-adresse (og/eller TCP- eller UDP-porten) til en (vanligvis) utgående tilkobling. Som for DNAT, er alle pakkene i forbindelsen hensiktsmessig håndtert av forbindelsens sporingsmekanisme. Merk at NAT er kun relevant for IPv4 og dens begrensede adresseområde; i IPv6, reduserer den store tilgjengeligheten av adresser nytten av NAT ved å la alle «interne» adresser være direkte rutbare på Internett (dette betyr ikke at interne maskiner er tilgjengelig, siden mellomliggende brannmurer kan filtrere trafikk).
		</para>
		 <indexterm>
			<primary>NAT</primary>
		</indexterm>
		 <indexterm>
			<primary>Nettverk</primary>
			<secondary>Adresse oversettelse</secondary>
		</indexterm>
		 <indexterm>
			<primary>SNAT</primary>
		</indexterm>
		 <indexterm>
			<primary>DNAT</primary>
		</indexterm>
		 <indexterm>
			<primary>Mål NAT</primary>
		</indexterm>
		 <indexterm>
			<primary>Kilde NAT</primary>
		</indexterm>
		 <sidebar> <title><emphasis>DET GRUNNLEGGENDE</emphasis> Videresendelse av porter</title>
		 <indexterm>
			<primary>port videresending (port forwarding)</primary>
		</indexterm>
		 <para>
			En konkret applikasjon hos DNAT er <emphasis>port forwarding</emphasis>. Innkommende tilkoblinger til en gitt port hos en maskin blir videresendt til en port på en annen maskin. Andre løsninger kan oppnå en lignende virkning, men særlig på applikasjonsnivå med <command>ssh</command> (se <xref linkend="sect.ssh-port-forwarding" />) eller <command>redir</command>.
		</para>
		 </sidebar> <para>
			Nok teori, la oss være praktiske. Å snu et Debian-system til en port er en så enkel sak som å aktivere det aktuelle valget i Linux-kjernen ved hjelp av <filename>/proc/</filename> virtuelle filsystemet:
		</para>
		 
<screen>
<computeroutput># </computeroutput><userinput>echo 1 &gt; /proc/sys/net/ipv4/conf/default/forwarding</userinput></screen>
		 <para>
			Dette alternativet kan også aktiveres automatisk ved oppstart hvis <filename>/etc/sysctl.conf</filename> setter <literal>net.ipv4.conf.default.forwarding</literal>-valget til <literal>1</literal>.
		</para>
		 <example id="example.sysctl.conf">
			<title><filename>/etc/sysctl.conf</filename>-filen</title>
			 
<programlisting>
net.ipv4.conf.default.forwarding = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.tcp_syncookies = 1</programlisting>

		</example>
		 <para>
			Den samme effekten kan oppnås for IPv6 ved å bytte <literal>ipv4</literal> med <literal>ipv6</literal> i den manuelle kommandoen, og bruke <literal>net.ipv6.conf.all.forwarding</literal>-linjen i <filename>/etc/sysctl.conf</filename>.
		</para>
		 <para>
			Å aktivere IPv4-maskering er en litt mer komplisert operasjon som involverer å sette opp <emphasis>netfilter</emphasis>-brannmuren.
		</para>
		 <para>
			Tilsvarende, å bruke NAT (for IPv4), krever oppsett av <emphasis>netfilter</emphasis>. Siden det primære formålet med denne komponenten er pakkefiltrering, er detaljene oppført i <xref linkend="security" xrefstyle="select: label quotedtitle nopage" /> (se <xref linkend="sect.firewall-packet-filtering" />).
		</para>

	</section>
	 <section id="sect.virtual-private-network">
		<title>Privat virtuelt nettverk</title>
		 <para>
			Et virtuelt privat nettverk <emphasis>Virtual Private Network</emphasis> (VPN for kort) er en måte å koble to forskjellige lokale nettverk via Internett ved hjelp av en tunnel; tunnelen er vanligvis kryptert for konfidensialitet. VPN brukes ofte for å integrere en ekstern maskin i et selskaps lokale nettverk.
		</para>
		 <indexterm>
			<primary>nettverk</primary>
			<secondary>virtuelt privat</secondary>
		</indexterm>
		 <indexterm>
			<primary>VPN</primary>
		</indexterm>
		 <indexterm>
			<primary>virtuelt privat nettverk</primary>
		</indexterm>
		 <para>
			Flere verktøy har dette. OpenVPN er en effektiv løsning, enkel å implementere og vedlikeholde, basert på SSL/TLS. En annen mulighet er å bruke IPsec for å kryptere IP-trafikk mellom to maskiner; denne krypteringen er gjennomsiktig, hvilket betyr at applikasjoner som kjører på disse vertene ikke behøver modifiseres for å ta hensyn til VPN. SSH kan også brukes for å tilveiebringe en VPN, i tillegg til mer konvensjonelle egenskaper. Endelig kan en VPN etableres ved hjelp av Microsofts PPTP-protokollen. Andre løsninger finnes, men er utenfor siktemålet med denne boken.
		</para>
		 <section id="sect.openvpn">
			<title>OpenVPN</title>
			 <indexterm>
				<primary>OpenVPN</primary>
			</indexterm>
			 <para>
				OpenVPN er et stykke programvare med formål å lage virtuelle private nettverk. Oppsettet innebærer å skape virtuelle nettverksgrensesnitt på VPN-tjeneren og på klienten(e); både <literal>tun</literal> (for IP-nivå tunneler) og <literal>tap</literal> (for Ethernet-nivå tunneler) -grensesnitt er støttet. I praksis, skal <literal>tun</literal>-grensesnitt oftest brukes unntatt når VPN-klienter er ment til å bli integrert i tjenerens lokale nettverk ved hjelp av en Ethernet-bro.
			</para>
			 <para>
				OpenVPN avhenger av OpenSSL for all SSL/TLS kryptografi og tilhørende funksjoner (konfidensialitet, autentisering, integritet, ikke-fornekting). Den kan settes opp enten med en felles privat nøkkel eller ved hjelp av X.509-sertifikater basert på en infrastruktur med fellesnøkler. Sistnevnte oppsett er sterkt foretrukket fordi den gir større fleksibilitet når den står overfor et økende antall brukere som bruker VPN utenfra.
			</para>
			 <sidebar> <title><emphasis>KULTUR</emphasis> SSL og TLS</title>
			 <indexterm>
				<primary>SSL</primary>
			</indexterm>
			 <indexterm>
				<primary>TLS</primary>
			</indexterm>
			 <para>
				SSL-protokollen (<emphasis>Secure Socket Layer</emphasis>) ble oppfunnet av Netscape for å sikre tilkoblinger til nettjenere. Det ble senere standardisert av IETF under forkortelsen TLS (<emphasis>Transport Layer Security</emphasis>). Siden da har TLS fortsatt å utvikle seg, og i dag er SSL foreldet fordi det er oppdaget en rekke designfeil.
			</para>
			 </sidebar> <section id="sect.easy-rsa">
				<title>Offentlig nøkkel-infrastruktur: <emphasis>easy-rsa</emphasis></title>
				 <indexterm>
					<primary>PKI (Offentlig nøkkel-infrastruktur)</primary>
				</indexterm>
				 <indexterm>
					<primary>Public Key Infrastructure (Offentlig nøkkel-infrastruktur)</primary>
				</indexterm>
				 <indexterm>
					<primary>X.509, sertifikat</primary>
				</indexterm>
				 <indexterm>
					<primary>sertifikat</primary>
					<secondary>X.509</secondary>
				</indexterm>
				 <indexterm>
					<primary><emphasis>easy-rsa</emphasis></primary>
				</indexterm>
				 <indexterm>
					<primary>RSA (algoritme)</primary>
				</indexterm>
				 <indexterm>
					<primary>nøkkelpar</primary>
				</indexterm>
				 <para>
					RSA-algoritmen er mye brukt i offentlig-nøkkel kryptografi. Det innebærer et «nøkkelpar», som består av en privat og en offentlig nøkkel. De to nøklene er nært knyttet til hverandre, og deres matematiske egenskaper er slik at en melding som er kryptert med den offentlige nøkkelen, kun kan dekrypteres av en person som kjenner den private nøkkelen, noe som sørger for konfidensialitet. I motsatt retning kan en melding kryptert med den private nøkkelen dekrypteres ved at noen kjenner den offentlige nøkkelen, noe som gjør det mulig å autentisere opprinnelsen til en melding siden bare noen med tilgang til den private nøkkelen kan generere den. Når den er knyttet til en digital nøkkelfunksjon (MD5, SHA1, eller en nyere variant), fører dette til en signaturmekanisme som kan brukes til en hvilken som helst melding.
				</para>
				 <para>
					Imidlertid kan hvem som helst lage et nøkkelpar, lagre en hvilken som helst identitet på den, og foregir at at dette er den valgte identiteten. En løsning innebærer konseptet med en <emphasis>Certification Authority</emphasis> (CA), formalisert av X.509-standarden. Dette konseptet omfatter en enhet som har et pålitelig nøkkelpar kjent som et <emphasis>rotsertifikat</emphasis>. Dette sertifikatet er kun brukt til å signere andre sertifikater (nøkkelpar) etter at riktige skritt er blitt tatt for å sjekke identiteten som er lagret i nøkkelparet. Applikasjoner som bruker X.509 kan da sjekke sertifikatene som blir presentert for dem, hvis de vet om de klarerte rotsertifikater.
				</para>
				 <para>
					OpenVPN følger denne regelen. Siden offentlige CA-er kun utsteder sertifikater i bytte for en (heftig) avgift, er det også mulig å opprette en privat sertifiseringsinstans i selskapet. <emphasis role="pkg">easy-rsa</emphasis>-pakken inneholder verktøy for å tjene som en X.509 infrastruktur for sertifisering, implementert som et skriptsett som bruker <command>openssl</command>-kommandoen.
				</para>
				 <sidebar> <title><emphasis>MERK</emphasis> <emphasis>easy-rsa</emphasis> før <emphasis role="distribution">Jessie</emphasis></title>
				 <para>
					I versjoner av Debian opp til <emphasis role="distribution">Wheezy</emphasis>, var <emphasis>easy-rsa</emphasis> distribuert som en del av <emphasis role="pkg">openvpn</emphasis>-pakken, med skriptene under <filename>/usr/share/doc/openvpn/examples/easy-rsa/2.0/</filename>. Å sette opp en CA omfattet å kopiere den katalogen, i stedet for å bruke <command>make-cadir</command>-kommandoen som dokumentert her.
				</para>
				 </sidebar> <para>
					Falcot Corp-administratorene bruker dette verktøyet for å lage de nødvendige sertifikater, både for serveren og klientene. Dette tillater at oppsettet av alle klienter er lik siden de bare må settes opp til å stole på sertifikater fra Falcots lokale CA. Dette CA-et er det første som må lages; til dette formålet, setter administratorene opp en katalog med filene som kreves for CA-et på et passende sted, fortrinnsvis på en maskin som ikke er koblet til nettverket for å redusere risikoen for at CAs private nøkkel blir stjålet.
				</para>
				 
<screen>
<computeroutput>$ </computeroutput><userinput>make-cadir pki-falcot
</userinput><computeroutput>$ </computeroutput><userinput>cd pki-falcot</userinput></screen>
				 <para>
					De lagrer deretter de nødvendige parameterene i <filename>vars</filename>-filen, spesielt de som er navnet med et <literal>KEY_</literal>-prefiks; Disse variablene blir så integrert i miljøet:
				</para>
				 
<screen>
<computeroutput>$ </computeroutput><userinput>vim vars
</userinput><computeroutput>$ </computeroutput><userinput>grep KEY_ vars
</userinput><computeroutput>export KEY_CONFIG=`$EASY_RSA/whichopensslcnf $EASY_RSA`
export KEY_DIR="$EASY_RSA/keys"
echo NOTE: If you run ./clean-all, I will be doing a rm -rf on $KEY_DIR
export KEY_SIZE=2048
export KEY_EXPIRE=3650
export KEY_COUNTRY="FR"
export KEY_PROVINCE="Loire"
export KEY_CITY="Saint-Étienne"
export KEY_ORG="Falcot Corp"
export KEY_EMAIL="admin@falcot.com"
export KEY_OU="Certificate authority"
export KEY_NAME="Certificate authority for Falcot Corp"
# If you'd like to sign all keys with the same Common Name, uncomment the KEY_CN export below
# export KEY_CN="CommonName"
$ </computeroutput><userinput>. ./vars
</userinput><computeroutput>NOTE: If you run ./clean-all, I will be doing a rm -rf on /home/roland/pki-falcot/keys
$ </computeroutput><userinput>./clean-all
</userinput></screen>
				 <para>
					Det neste trinnet er etableringen av selve CAs nøkkelpar (de to delene av nøkkelparet vil i dette trinnet bli lagret under <filename>keys/ca.crt</filename> og <filename>keys/ca.key</filename>):
				</para>
				 
<screen>
<computeroutput>$ </computeroutput><userinput>./build-ca</userinput>
<computeroutput>Generating a 2048 bit RSA private key
...................................................................+++
...+++
writing new private key to 'ca.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [FR]:
State or Province Name (full name) [Loire]:
Locality Name (eg, city) [Saint-Étienne]:
Organization Name (eg, company) [Falcot Corp]:
Organizational Unit Name (eg, section) [Certificate authority]:
Common Name (eg, your name or your server's hostname) [Falcot Corp CA]:
Name [Certificate authority for Falcot Corp]:
Email Address [admin@falcot.com]:
</computeroutput></screen>
				 <para>
					Sertifikatet for VPN-serveren kan nå bli opprettet, så vel som Diffie-Hellman-parameterene som kreves for tjenersiden av en SSL/TLS-tilkobling. VPN-tjeneren er identifisert av sitt DNS-navn <literal>vpn.falcot.com</literal>; dette navnet gjenbrukes for de genererte nøkkelfilene, (<filename>keys/vpn.falcot.com.crt</filename> for det offentlige sertifikatet, <filename>keys/vpn.falcot.com.key</filename> for den private nøkkelen):
				</para>
				 
<screen>
<computeroutput>$ </computeroutput><userinput>./build-key-server vpn.falcot.com
</userinput><computeroutput>Generating a 2048 bit RSA private key
.....................................................................................................................+++
...........+++
writing new private key to 'vpn.falcot.com.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [FR]:
State or Province Name (full name) [Loire]:
Locality Name (eg, city) [Saint-Étienne]:
Organization Name (eg, company) [Falcot Corp]:
Organizational Unit Name (eg, section) [Certificate authority]:
Common Name (eg, your name or your server's hostname) [vpn.falcot.com]:
Name [Certificate authority for Falcot Corp]:
Email Address [admin@falcot.com]:

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
Using configuration from /home/roland/pki-falcot/openssl-1.0.0.cnf
Check that the request matches the signature
Signature ok
The Subject's Distinguished Name is as follows
countryName           :PRINTABLE:'FR'
stateOrProvinceName   :PRINTABLE:'Loire'
localityName          :T61STRING:'Saint-\0xFFFFFFC3\0xFFFFFF89tienne'
organizationName      :PRINTABLE:'Falcot Corp'
organizationalUnitName:PRINTABLE:'Certificate authority'
commonName            :PRINTABLE:'vpn.falcot.com'
name                  :PRINTABLE:'Certificate authority for Falcot Corp'
emailAddress          :IA5STRING:'admin@falcot.com'
Certificate is to be certified until Mar  6 14:54:56 2025 GMT (3650 days)
Sign the certificate? [y/n]:</computeroutput><userinput>y
</userinput><computeroutput>

1 out of 1 certificate requests certified, commit? [y/n]</computeroutput><userinput>y
</userinput><computeroutput>Write out database with 1 new entries
Data Base Updated
$ </computeroutput><userinput>./build-dh
</userinput><computeroutput>Generating DH parameters, 2048 bit long safe prime, generator 2
This is going to take a long time
[…]
</computeroutput></screen>
				 <para>
					Det neste trinnet oppretter sertifikater for VPN-klienter; ett sertifikat kreves for hver datamaskin eller person som får lov å bruke VPN-en:
				</para>
				 
<screen>
<computeroutput>$ </computeroutput><userinput>./build-key JoeSmith
</userinput><computeroutput>Generating a 2048 bit RSA private key
................................+++
..............................................+++
writing new private key to 'JoeSmith.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [FR]:
State or Province Name (full name) [Loire]:
Locality Name (eg, city) [Saint-Étienne]:
Organization Name (eg, company) [Falcot Corp]:
Organizational Unit Name (eg, section) [Certificate authority]:</computeroutput><userinput>Development unit
</userinput><computeroutput>Common Name (eg, your name or your server's hostname) [JoeSmith]:</computeroutput><userinput>Joe Smith
</userinput><computeroutput>[…]</computeroutput></screen>
				 <para>
					Nå er alle sertifikater blitt opprettet, og de trenger å bli kopiert når det må til: rotsertifikatets offentlige nøkkel (<filename>keys/ca.crt</filename>) vil bli lagret på alle maskiner (både server og klienter) som <filename>/etc/ssl/certs/Falcot_CA.crt</filename>. Tjenerens sertifikat er bare installert på tjeneren (<filename>keys/vpn.falcot.com.crt</filename> går til <filename>/etc/ssl/vpn.falcot.com.crt</filename>, og <filename>keys/vpn.falcot.com.key</filename> går til <filename>/etc/ssl/private/vpn.falcot.com.key</filename> med begrensede tillatelser slik at bare administratoren kan lese den), med tilhørende Diffie-Hellman-parametere (<filename>keys/dh2048.pem</filename>) installert til <filename>/etc/openvpn/dh2048.pem</filename>. Klientsertifikater blir installert på den tilsvarende VPN-klienten på en lignende måte.
				</para>

			</section>
			 <section>
				<title>Oppsett av OpenVPN-tjeneren</title>
				 <para>
					Som standard forsøker OpenVPN-initialiseringskript å starte alle virtuelle private nettverk som er definert i <filename>/etc/openvpn/*.conf</filename>. Å sette opp en VPN-tjener er derfor et spørsmål om å lagre en tilsvarende oppsettsfil i denne katalogen. Et godt utgangspunkt er <filename>/usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz</filename>, som leder til en temmelig standard tjener. Selvfølgelig må noen parametere tilpasses: <literal>ca</literal>, <literal>cert</literal>, <literal>key</literal> og <literal>dh</literal> må beskrive de valgte stedene (henholdsvis <literal>/etc/ssl/certs/Falcot_CA.crt</literal>, <literal>/etc/ssl/vpn.falcot.com.crt</literal>, <literal>/etc/ssl/private/vpn.falcot.com.key</literal> og <literal>/etc/openvpn/dh2048.pem</literal>). <literal>server 10.8.0.0 255.255.255.0</literal>-direktivet definerer subnettet som skal brukes av VPN; tjeneren bruker den første IP-adressen i dette området (<literal>10.8.0.1</literal>), og resten av adressene er reservert for klienter.
				</para>
				 <para>
					Med dette oppsettet lager oppstarten av OpenVPN det virtuelle nettverksgrensesnittet, vanligvis med <literal>tun0</literal>-navnet. Imidlertid er brannmurer ofte satt opp på samme tid som det virkelige nettverksgrensesnittet, og skjer før OpenVPN starter. En god praksis er derfor å lage et varig virtuelt nettverksgrensesnitt, og sette opp OpenVPN til å bruke dette varige grensesnittet. Dette tillater videre å velge navnet til dette grensesnittet. For dette formål lager <command>openvpn --mktun --dev vpn --dev-type tun</command> et virtuelt nettverksbrukergrensesnitt med navnet <literal>vpn</literal> med type <literal>tun</literal>; denne kommandoen kan enkelt legges inn i brannmuroppsettets skript, eller i et <literal>up</literal>-direktiv i <filename>/etc/network/interfaces</filename>-filen. OpenVPN-oppsettsfilen må også oppdateres tilsvarende, med <literal>dev vpn</literal> og <literal>dev-type tun</literal>-direktiver.
				</para>
				 <para>
					For å sperre ytterligere virksomhet kan VPN-klienter kun få tilgang til selve VPN-tjeneren ved hjelp av <literal>10.8.0.1</literal>-adressen. Å gi klientene tilgang til det lokale nettverket (192.168.0.0/24), krever at en legger til et <literal>push route 192.168.0.0 255.255.255.0</literal>-direktiv til OpenVPN-oppsettet slik at VPN-klienter automatisk får en nettverksrute som forteller dem at dette nettverket kan nås ved hjelp av VPN. Videre, maskiner på det lokale nettverket må også informeres om at ruten til VPN går gjennom VPN-tjeneren (dette fungerer automatisk når VPN-serveren er installert i porten). Alternativt kan VPN-tjeneren settes opp til å utføre IP-maskering, slik at tilkoblinger fra VPN-klienter ser ut som om de kommer fra VPN-tjeneren i stedet (se <xref linkend="sect.gateway" />).
				</para>

			</section>
			 <section>
				<title>Oppsett av OpenVPN-klienten</title>
				 <para>
					Å sette opp en OpenVPN-klient krever også at en lager en oppsettsfil <filename>/etc/openvpn/</filename>. Et standardoppsett kan fås ved å bruke <filename>/usr/share/doc/openvpn/examples/sample-config-files/client.conf</filename> som et startpunkt. <literal>remote vpn.falcot.com 1194</literal>-direktivet beskriver adressen og porten til OpenVPN-tjeneren; <literal>ca</literal>, <literal>cert</literal> og <literal>key</literal> må også tilpasses til å beskrive plasseringen av de viktigste filene.
				</para>
				 <para>
					Hvis VPN ikke skal startes automatisk ved oppstart, sett <literal>AUTOSTART</literal>-direktivet til <literal>none</literal> i <filename>/etc/default/openvpn</filename>-filen. Å starte eller stoppe en gitt VPN-forbindelse er alltid mulig med kommandoene <command>service openvpn@<replaceable>navn</replaceable> start</command> og <command>service openvpn@<replaceable>navn</replaceable> stop</command> (der forbindelsen <replaceable>navn</replaceable> sammenfaller med en som er definert i <filename>/etc/openvpn/<replaceable>navn</replaceable>.conf</filename>).
				</para>
				 <para>
					Pakken <emphasis role="pkg">network-manager-openvpn-gnome</emphasis> inneholder en forlengelse til Network Manager (se <xref linkend="sect.roaming-network-config" />) som tillater håndtering av OpenVPN virtuelle private nettverk. Det tillater hver bruker å sette opp OpenVPN-tilkoblinger grafisk, og styre dem fra nettverksadministrasjonsikonet. <indexterm><primary><emphasis role="pkg">network-manager-openvpn-gnome</emphasis></primary></indexterm>
				</para>

			</section>

		</section>
		 <section id="sect.ssh-vpn">
			<title>Virtuelt privat nettverk med SSH</title>
			 <indexterm>
				<primary>SSH</primary>
			</indexterm>
			 <indexterm>
				<primary>PPP</primary>
			</indexterm>
			 <para>
				Det er faktisk to måter å lage et virtuelt privat nettverk ved hjelp av SSH. Den historiske innebærer å etablere et PPP-lag over SSH-linken. Denne metoden er beskrevet i et HOWTO-dokument: <ulink type="block" url="http://www.tldp.org/HOWTO/ppp-ssh/" />
			</para>
			 <para>
				Den andre metoden er av nyere dato, og ble introdusert med OpenSSH 4.3: Det er nå mulig for OpenSSH å opprette virtuelle nettverksgrensesnitt (<literal>tun*</literal>) på begge sider av en SSH-tilkobling, og disse virtuelle grensesnitt kan settes opp akkurat som om de var fysiske grensesnitt. Tunnelsystemet må først aktiveres ved å sette <literal>PermitTunnel</literal> til «yes» i SSH-tjenerens oppsettsfil (<filename>/etc/ssh/sshd_config</filename>). Når SSH-tilkoblingen etableres, må det eksplisitt bes om at det lages en tunnel med <literal>-w any:any</literal> valget/alternativet (<literal>any</literal> kan erstattes med det ønskede <literal>tun</literal> enhetsnummeret). Dette krever at brukeren har administratorprivilegium på begge sider, for å kunne lage nettverksenheten (med andre ord, må forbindelsen etableres som rot).
			</para>
			 <para>
				Begge måter for å opprette et virtuelt privat nettverk over SSH er ganske greie. Men VPN-en er ikke den mest effektivt tilgjengelige; særlig håndterer den ikke høye trafikknivåer godt.
			</para>
			 <para>
				Forklaringen er at når en TCP/IP-stakk er innkapslet innenfor en TCP/IP-tilkobling (for SSH), er TCP-protokollen brukt to ganger, en gang for SSH-tilkoblingen og en gang inne i tunnelen. Dette fører til problemer, særlig på grunn av måten TCP tilpasser seg til nettverksforholdene ved å endre forsinkelser ved tidsavbrudd. Følgende nettsted beskriver problemet i mer detalj:<ulink type="block" url="http://sites.inka.de/sites/bigred/devel/tcp-tcp.html" /> VPNs over SSH bør derfor begrenses til engangstunneler uten ytelsespress.
			</para>

		</section>
		 <section id="sect.ipsec">
			<title>IPsec</title>
			 <indexterm>
				<primary>IPsec</primary>
			</indexterm>
			 <indexterm>
				<primary><command>strongswan</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>racoon</command></primary>
			</indexterm>
			 <para>
				Til tross for å være standard i IP VPN, er IPsec snarere mer involvert i implementeringen. IPsec-motoren er selv integrert i Linux-kjernen; de nødvendige delene/komponentene bruker-plass deler, kontroll- og oppsettsverktøyet, gis av <emphasis role="pkg">ipsec-tools</emphasis>-pakken. Helt konkret inneholder hver vert <filename>/etc/ipsec-tools.conf</filename> parametrene for <emphasis>IPsec tunneler</emphasis> (eller <emphasis>Security Associations</emphasis>, i IPsec terminologien) som angår verten; <command>/etc/init.d/setkey</command>-skriptene gir en måte å starte og stoppe en tunnel (hver tunnel er en sikker kobling til en annen vert koblet til det virtuelle private nettverket). Denne filen kan bygges for hånd fra dokumentasjonen som følger med manualsiden <citerefentry><refentrytitle>setkey</refentrytitle>
				 <manvolnum>8</manvolnum></citerefentry>. Imidlertid, å eksplisitt skrive parametrene for alle verter i et ikke-vanlig sett maskiner, blir fort en krevende oppgave, fordi antall tunneler vokser hurtig. Å installere en IKE-bakgrunnsprosess (for <emphasis>IPsec Key Exchange</emphasis>) slik som <emphasis role="pkg">racoon</emphasis>, eller <emphasis role="pkg">strongswan</emphasis> gjør prosessen mye enklere ved å bringe administrasjon sammen på et sentralt punkt, og sikrere ved å rotere nøklene med jevne mellomrom.
			</para>
			 <indexterm>
				<primary>IKE</primary>
			</indexterm>
			 <indexterm>
				<primary>IPsec</primary>
				<secondary>IPsec nøkkelutveksling</secondary>
			</indexterm>
			 <indexterm>
				<primary>nøkkelpar</primary>
			</indexterm>
			 <indexterm>
				<primary><command>setkey</command></primary>
			</indexterm>
			 <para>
				På tross av sin status som referanse; kompleksiteten ved å sette opp IPsec begrenser bruken i praksis. OpenVPN-baserte løsninger vil vanligvis bli foretrukket når de nødvendige tunnelene verken er for mange eller for dynamiske.
			</para>
			 <sidebar> <title><emphasis>VÆR VARSOM</emphasis> IPsec og NAT</title>
			 <para>
				NAT brannmurer og IPsec fungerer ikke godt sammen: Ettersom IPsec signerer pakker, vil eventuelle forandringer for disse pakkene som brannmuren måtte utføre, oppheve signaturen, og pakkene vil bli avvist ved bestemmelsesstedet. Ulike IPsec-implementasjoner inkluderer nå <emphasis>NAT-T</emphasis>-teknikk (for <emphasis>NAT Traversal</emphasis>), som i utgangspunktet innkapsler IPsec-pakken innenfor en standard UDP-pakke.
			</para>
			 <indexterm>
				<primary>NAT-T</primary>
			</indexterm>
			 <indexterm>
				<primary>NAT Traversal</primary>
			</indexterm>
			 </sidebar> <sidebar> <title><emphasis>SIKKERHET</emphasis> IPsec og brannmurer</title>
			 <para>
				Standardmoduset for drift av IPsec innebærer datautveksling på UDP-port 500 for nøkkelutveksling (også på UDP-port 4500 i tilfelle NAT-T er i bruk). Videre, bruker IPsec-pakker to øremerkede IP-protokoller som brannmuren må slippe igjennom; mottakelse av disse pakkene er basert på protokollnummeret deres, 50 (ESP) og 51 (AH).
			</para>
			 <indexterm>
				<primary>ESP, protokoll</primary>
			</indexterm>
			 <indexterm>
				<primary>AH,protokoll</primary>
			</indexterm>
			 <indexterm>
				<primary>protokoll</primary>
				<secondary>AH</secondary>
			</indexterm>
			 <indexterm>
				<primary>protokoll</primary>
				<secondary>ESP</secondary>
			</indexterm>
			 </sidebar>
		</section>
		 <section id="sect.pptp">
			<title>PPTP</title>
			 <para>
				PPTP (punkt-til-punkt tunneling protokoll: for <emphasis>Point-to-Point Tunneling Protocol</emphasis>) bruker to kommunikasjonskanaler, en for styringsdata og en for nyttelastdata; sistnevnte bruker GRE-protokollen (generisk ruting innkapsling: <emphasis>Generic Routing Encapsulation</emphasis>). En standard PPP-lenke blir da satt opp over datautvekslingskanalen.
			</para>
			 <indexterm>
				<primary>PPTP</primary>
			</indexterm>
			 <indexterm>
				<primary>Punkt-til-punkt-tunnelleringsprotokoll</primary>
			</indexterm>
			 <indexterm>
				<primary>GRE, protokolll</primary>
			</indexterm>
			 <indexterm>
				<primary>protokoll</primary>
				<secondary>GRE</secondary>
			</indexterm>
			 <section id="sect.pptp-config-client">
				<title>Oppsett av klienten</title>
				 <para>
					Pakken <emphasis role="pkg">pptp-linux</emphasis> inneholder en lett oppsettbar PPTP-klient for Linux. Følgende instruksjoner er inspirert fra den offisielle dokumentasjonen: <ulink type="block" url="http://pptpclient.sourceforge.net/howto-debian.phtml" />
				</para>
				 <indexterm>
					<primary><emphasis role="pkg">pptp-linux</emphasis></primary>
				</indexterm>
				 <para>
					Falcot-administratorene laget flere filer: <filename>/etc/ppp/options.pptp</filename>, <filename>/etc/ppp/peers/falcot</filename>, <filename>/etc/ppp/ip-up.d/falcot</filename>, og <filename>/etc/ppp/ip-down.d/falcot</filename>.
				</para>
				 <example id="example.ppp-options.pptp">
					<title>Filen <filename>/etc/ppp/options.pptp</filename></title>
					 
<programlisting>
# PPP-valg brukt med en PPTP-forbindelse
lock
noauth
nobsdcomp
nodeflate</programlisting>

				</example>
				 <example id="example.ppp-peers-falcot">
					<title>Filen <filename>/etc/ppp/peers/falcot</filename></title>
					 
<programlisting>
# vpn.falcot.com er PPTP-tjeneren
pty "pptp vpn.falcot.com --nolaunchpppd"
# forbindelsen vil identifisere seg som "vpn"-brukeren
user vpn
remotename pptp
# kryptering trengs
require-mppe-128
file /etc/ppp/options.pptp
ipparam falcot</programlisting>

				</example>
				 <example id="example.ppp-ip-up.d-falcot">
					<title>Filen <filename>/etc/ppp/ip-up.d/falcot</filename></title>
					 
<programlisting>
# Lag en rute til Falcot-nettet
if [ "$6" = "falcot" ]; then
  # 192.168.0.0/24 er ikke-lokale Falcot-nettverket
  route add -net 192.168.0.0 netmask 255.255.255.0 dev $1
fi</programlisting>

				</example>
				 <example id="example.ppp-ip-down.d-falcot">
					<title>Filen <filename>/etc/ppp/ip-down.d/falcot</filename></title>
					 
<programlisting>
# Slett ruten til Falcot-nettet
if [ "$6" = "falcot" ]; then
  # 192.168.0.0/24 er det ikke-lokale Falcot-nettverket
  route del -net 192.168.0.0 netmask 255.255.255.0 dev $1
fi</programlisting>

				</example>
				 <sidebar> <title><emphasis>SIKKERHET</emphasis> MPPE</title>
				 <para>
					Å sikre PPTP innebærer å bruke MPPE-funksjonen (Microsoft punkt-til-punkt kryptering: <emphasis>Microsoft Point-to-Point Encryption</emphasis>), som er tilgjengelig som en modul i offisielle Debian-kjerner.
				</para>
				 <indexterm>
					<primary>MPPE</primary>
				</indexterm>
				 <indexterm>
					<primary>Microsoft</primary>
					<secondary>Point-to-Point Encryption</secondary>
				</indexterm>
				 </sidebar>
			</section>
			 <section id="sect.pptp-config-serveur">
				<title>Oppsett av tjenermaskinen</title>
				 <sidebar> <title><emphasis>VÆR VARSOM</emphasis> PPTP og brannmurer</title>
				 <para>
					Mellomliggende brannmurer må settes opp til å slippe gjennom IP-pakker som bruker protokollen 47 (GRE). Videre må PPTP-tjenerport 1723 være åpen, slik at kommunikasjonskanalen virker.
				</para>
				 </sidebar> <para>
					<command>pptpd</command> er PPTP-tjeneren for Linux. Hovedoppsettsfilen, <filename>/etc/pptpd.conf</filename>, krever svært få endringer: <emphasis>localip</emphasis> (lokal IP-adresse), og <emphasis>remoteip</emphasis> (ekstern IP-adresse). I eksempelet nedenfor bruker PPTP-tjeneren alltid <literal>192.168.0.199</literal>-adressen, og PPTP-klienter mottar IP-adresser fra <literal>192.168.0.200</literal> til <literal>192.168.0.250</literal>.
				</para>
				 <example id="example.pptpd.conf">
					<title>Filen <filename>/etc/pptpd.conf</filename></title>
					 
<programlisting>
# TAG: speed
#
#       Spesifiserer hastigheten som PPP-bakgrunnsprosessn skal snakke på.
#
speed 115200

# TAG: option
#
#       Spesifiserer plasseringen til PPP-tilvalgsfilen.
#       I utgangspunktet titter PPP i '/etc/ppp/options'
#
option /etc/ppp/pptpd-options

# TAG: debug
#
#       Slår på (mer) feilsøkingsinformasjon til syslog
#
# debug

# TAG: localip
# TAG: remoteip
#
#       Spesifiserer IP-addresseområdene på den lokal og den motsatte siden.
#
#       Du kan spesifisere enkelt-IP-adresser oppdelt med komma eller du kan skrive inn områder,
#       eller begge deler.  Et eksempel:
#
#               192.168.0.234,192.168.0.245-249,192.168.0.254
#
#       VIKTIGE BEGRESNINGER:
#
#       1. Ingen mellomrom tillates mellom komma og inne i adresser.
#
#       2. Hvis du oppgir flere IP-adresser enn MAX_CONNECTIONS, så vil PPP
#          starte på begynnelsen av listen og fortsette inntil den har fått
#          MAX_CONNECTIONS IP-adresser. De øvrige blir ignorert.
#
#       3. Ingen forkortelser i områdene! Med andre ord, 234-8 betyr ikke 234 to 238,
#          du må skrive inn 234-238 hvis det er dette du mener.
#
#       4. Hvis du oppgir en enkelt lokalt IP-adresse så er det OK - alle lokale IP-addresser
#          vil bli satt til dette. Du MÅ fortsatt oppgi minst en IP for den andre enden for hver
#          samtidige klient.
#
#localip 192.168.0.234-238,192.168.0.245
#remoteip 192.168.1.234-238,192.168.1.245
#localip 10.0.1.1
#remoteip 10.0.1.2-100
localip 192.168.0.199
remoteip 192.168.0.200-250</programlisting>

				</example>
				 <para>
					OPS-oppsettet som brukes av PPTP-tjeneren krever også noen endringer i <filename>/etc/ppp/pptpd-options</filename>. De viktige parametre er tjenernavnet (<literal>pptp</literal>), domenenavnet (<literal>falcot.com</literal>), og IP-adressene for DNS- og WINS-tjenere.
				</para>
				 <example id="example.ppp-pptpd-options">
					<title>Filen <filename>/etc/ppp/pptpd-options</filename></title>
					 
<programlisting>
## turn pppd syslog debugging on
#debug

## change 'servername' to whatever you specify as your server name in chap-secrets
name pptp
## change the domainname to your local domain
domain falcot.com

## these are reasonable defaults for WinXXXX clients
## for the security related settings
# The Debian pppd package now supports both MSCHAP and MPPE, so enable them
# here. Please note that the kernel support for MPPE must also be present!
auth
require-chap
require-mschap
require-mschap-v2
require-mppe-128

## Fill in your addresses
ms-dns 192.168.0.1
ms-wins 192.168.0.1

## Fill in your netmask
netmask 255.255.255.0

## some defaults
nodefaultroute
proxyarp
lock</programlisting>

				</example>
				 <para>
					Det siste trinnet innebærer registrering av <literal>vpn</literal>-brukeren (og tilhørende passord) i <filename>/etc/ppp/chap-secrets</filename>-filen. I motsetning til andre tilfeller hvor en asterisk (<literal>*</literal>) ville fungere, må tjenernavnet fylles inn eksplisitt her. Videre identifiserer Windows PPTP-klienter seg med <literal><replaceable>DOMENE</replaceable>\\<replaceable>BRUKER</replaceable></literal>-formen, i stedet for bare å gi et brukernavn. Dette forklarer hvorfor filen også nevner <literal>FALCOT\\vpn</literal>-brukeren. Det er også mulig å spesifisere individuelle IP-adresser for brukere; en stjerne i dette feltet angir at dynamisk adressering skal brukes.
				</para>
				 <example id="example.ppp-chap-secrets">
					<title>Filen <filename>/etc/ppp/chap-secrets</filename></title>
					 
<programlisting>
# Hemmeligheter for autentisering vha. CHAP
# klient        tjener  hemmelighet      IP-adresser
vpn             pptp    f@Lc3au     *
FALCOT\\vpn     pptp    f@Lc3au     *</programlisting>

				</example>
				 <sidebar> <title><emphasis>SIKKERHET</emphasis> PPTP-sårbarheter</title>
				 <para>
					Microsofts første PPTP-implementering fikk sterk kritikk fordi den hadde mange sikkerhetsproblemer; siden er de fleste fikset i og med nyere versjoner. Oppsettet som er dokumentert i denne seksjonen bruker den nyeste versjonen av protokollen. Vær klar over at å fjerne noen av alternativene (for eksempel <literal>require-mppe-128</literal> og <literal>require-mschap-v2</literal>) vil gjøre tjenesten sårbar igjen.
				</para>
				 </sidebar>
			</section>

		</section>

	</section>
	 <section id="sect.quality-of-service">
		<title>Tjenestekvalitet</title>
		 <section id="sect.qos-principe">
			<title>Prinsipp og mekanisme</title>
			 <para>
				<emphasis>Quality of Service</emphasis> (eller i kortform <emphasis>QoS</emphasis>) refererer til et sett av teknikker som garanterer eller forbedrer kvaliteten på tjenesten som leveres til programmer. Den mest populære teknikken innebærer å klassifisere nettverkstrafikk i kategorier, og differensiere håndtering av trafikken etter hvilken kategori den tilhører. Den viktigste anvendelsen av dette differensierte tjenesteopplegget er <emphasis>traffic shaping</emphasis>, som begrenser dataoverføringshastigheten for forbindelser knyttet til enkelte tjenester og/eller verter for ikke å mette den tilgjengelige båndbredden og sulte/bremse viktige andre tjenester. «Traffic shaping» er spesielt god egnet for TCP-trafikk, siden denne protokollen automatisk tilpasser seg til tilgjengelig båndbredde.
			</para>
			 <indexterm>
				<primary>QoS</primary>
			</indexterm>
			 <indexterm>
				<primary>kvaliteten på tjenesten</primary>
			</indexterm>
			 <indexterm>
				<primary>kvaliteten</primary>
				<secondary>på tjenesten</secondary>
			</indexterm>
			 <indexterm>
				<primary>tjeneste</primary>
				<secondary>kvalitet</secondary>
			</indexterm>
			 <para>
				Det er også mulig å endre trafikkprioriteringene, slik at de tillater prioritering av pakker knyttet til interaktive tjenester (som for eksempel <command>ssh</command> og <command>telnet</command>), eller av tjenester som kun omfatter små blokker av data.
			</para>
			 <para>
				Debian-kjerner inkluderer funksjonene som kreves for QoS og sammen med de modulene som hører til. Disse modulene er mange, og hver av dem gir en annen tjeneste, særlig i form av spesielle planleggere for køer av IP-pakker; det brede utvalget av oppgaver for de tilgjengelige planleggere spenner over hele spekteret av mulige krav.
			</para>
			 <sidebar> <title><emphasis>KULTUR</emphasis> LARTC — <emphasis>Linux Advanced Routing &amp; Traffic Control</emphasis></title>
			 <para>
				<emphasis>Linux Advanced Routing &amp; Traffic Control</emphasis>-oppskriften er referansedokumentet som dekker alt det er å vite om nett-tjenestekvalitet. <ulink type="block" url="http://www.lartc.org/howto/" />
			</para>
			 <indexterm>
				<primary>ruting</primary>
				<secondary>avansert</secondary>
			</indexterm>
			 <indexterm>
				<primary>trafikk</primary>
				<secondary>kontroll</secondary>
			</indexterm>
			 <indexterm>
				<primary>kontroll av trafikk</primary>
			</indexterm>
			 </sidebar>
		</section>
		 <section id="sect.qos-config">
			<title>Oppsett og implementering</title>
			 <para>
				QoS-parametrene settes med <command>tc</command>-kommandoen (gitt av <emphasis role="pkg">iproute</emphasis>-pakken). Siden grensesnittet er ganske komplisert, anbefales det å bruke et høyere-nivå verktøy.
			</para>
			 <indexterm>
				<primary><emphasis>iproute</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><command>tc</command></primary>
			</indexterm>
			 <section id="sect.qos-wondershaper">
				<title>Redusere ventetider : <command>wondershaper</command></title>
				 <para>
					Hovedformålet til <command>wondershaper</command> (i pakken med tilsvarende navn) er å minimalisere ventetider uavhengig av nettverksbelastning. Dette oppnås ved å begrense den totale trafikken til en verdi som faller like under lenkens metningsverdi.
				</para>
				 <indexterm>
					<primary><command>wondershaper</command></primary>
				</indexterm>
				 <indexterm>
					<primary>begrensning av datatrafikken</primary>
				</indexterm>
				 <indexterm>
					<primary>trafikk</primary>
					<secondary>begrensning</secondary>
				</indexterm>
				 <para>
					Når et nettverkskort er satt opp, settes denne trafikkbegrensning opp ved å kjøre <command>wondershaper <replaceable>grensesnitt</replaceable> <replaceable>download_rate</replaceable> <replaceable>upload_rate</replaceable></command>. Grensesnittet kan for eksempel være <literal>eth0</literal> eller <literal>ppp0</literal>, og begge hastighetene er uttrykt i kilobit per sekund. Kommandoen <command>wondershaper remove <replaceable>grensesnitt</replaceable></command> deaktiverer trafikk-kontroll for det angitte grensesnittet.
				</para>
				 <para>
					For en Ethernet-forbindelse er dette skriptet best tilgjengelig rett etter at grensesnittet er satt opp. Dette gjøres ved å legge til <literal>up</literal> og <literal>down</literal>-direktiver til <filename>/etc/network/interfaces</filename>-filen som tillater at de meldte kommandoer kan kjøres, respektivt, etter at grensesnittet er satt opp, og før det tas ned. For eksempel:
				</para>
				 <example id="example.network-interfaces">
					<title>Forandringer i <filename>/etc/network/interfaces</filename>-filen</title>
					 
<programlisting>
iface eth0 inet dhcp
    up /sbin/wondershaper eth0 500 100
    down /sbin/wondershaper remove eth0</programlisting>

				</example>
				 <para>
					I PPPs tilfelle, å lage skript som påkaller <command>wondershaper</command> i <filename>/etc/ppp/ip-up.d/</filename> vil slå på trafikkontroll så snart forbindelsen er aktivert.
				</para>
				 <sidebar> <title><emphasis>FOR VIDEREKOMMENDE</emphasis> Optimalt oppsett</title>
				 <para>
					Filen <filename>/usr/share/doc/wondershaper/README.Debian.gz</filename> beskriver i detalj pakkeutviklerens anbefalte oppsettsmetode. Spesielt rådes det til å måle nedlastings- og opplastingshastigheter for best å kunne bedømme reelle grenser.
				</para>
				 </sidebar>
			</section>
			 <section id="sect.qos-config-standard">
				<title>Standardoppsett</title>
				 <para>
					For å sperre et bestemt QoS-oppsett bruker Linux-kjernen <literal>pfifo_fast</literal>-tidsplanlegger, som i seg selv gir noen interessante funksjoner. Prioritering av hver behandlede IP-pakke er basert på ToS-feltet (<emphasis>Type of Service</emphasis>) i denne pakken; å endre dette feltet er nok til å dra nytte av tidsplanleggingsfunksjonene. Det er fem mulige verdier:
				</para>
				 <itemizedlist>
					<listitem>
						<para>
							Normal-tjeneste (0);
						</para>

					</listitem>
					 <listitem>
						<para>
							Minimer-kostnad (2);
						</para>

					</listitem>
					 <listitem>
						<para>
							Maksimer-pålitelighet (4);
						</para>

					</listitem>
					 <listitem>
						<para>
							Maksimer-gjennomstrømming (8);
						</para>

					</listitem>
					 <listitem>
						<para>
							Minimer-forsinkelse (16).
						</para>

					</listitem>

				</itemizedlist>
				 <indexterm>
					<primary>ToS</primary>
				</indexterm>
				 <indexterm>
					<primary>Type of Service (Type tjeneste)</primary>
				</indexterm>
				 <para>
					ToS-feltet kan settes med programmer som genererer IP-pakker, eller modereres underveis med <emphasis>netfilter</emphasis>. Følgende regler er tilstrekkelige til å øke reaksjonsevne for en tjeners SSH-tjeneste:
				</para>
				 
<programlisting role="scale">
iptables -t mangle -A PREROUTING -p tcp --sport ssh -j TOS --set-tos Minimize-Delay
iptables -t mangle -A PREROUTING -p tcp --dport ssh -j TOS --set-tos Minimize-Delay</programlisting>

			</section>

		</section>

	</section>
	 <section id="sect.dynamic-routing">
		<title>Dynamisk ruting</title>
		 <indexterm>
			<primary>ruting</primary>
			<secondary>dynamisk</secondary>
		</indexterm>
		 <indexterm>
			<primary><command>quagga</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>zebra</command></primary>
		</indexterm>
		 <para>
			Referanseverktøyet for dynamisk ruting er for tiden <command>quagga</command>, fra pakken med tilsvarende navn; det pleide å være <command>zebra</command> til utviklingen av sistnevnte stoppet. Men <command>quagga</command> beholdt navnene på programmene av kompatibilitetsgrunner, som forklarer <command>zebra</command>-kommandoene nedenfor.
		</para>
		 <sidebar> <title><emphasis>DET GRUNNLEGGENDE</emphasis> Dynamisk ruting</title>
		 <para>
			Dynamisk ruting tillater rutere å justere, i sanntid, de banene som brukes til overføring av IP-pakker. Hver protokoll involverer sin egen metode til å definere ruter (korteste veien, bruke ruter varslet av andre brukere/tjenere, og så videre).
		</para>
		 <para>
			I Linux-kjernen knytter en rute en nettverksenhet til et sett av maskiner som kan nås via denne enheten. Kommandoen <command>route</command> definerer nye ruter, og viser de eksisterende.
		</para>
		 <indexterm>
			<primary><command>route</command></primary>
		</indexterm>
		 </sidebar> <para>
			Quagga er et sett av bakgrunnsprosessr som samarbeider om å definere rutetabeller som skal brukes av Linux-kjernen; hver rutingprotokoll (særlig BGP, OSPF og RIP) leverer sin egen bakgrunnsprosess. <command>zebra</command>-bakgrunnsprosessn samler inn informasjon fra andre bakgrunnsprosessr, og håndterer statiske rutingtabeller tilsvarende. De andre bakgrunnsprosessne er kjent som <command>bgpd</command>, <command>ospfd</command>, <command>ospf6d</command>, <command>ripd</command>, <command>ripngd</command>, <command>isisd</command>, og <command>babeld</command>.
		</para>
		 <indexterm>
			<primary>OSPF</primary>
		</indexterm>
		 <indexterm>
			<primary>BGP</primary>
		</indexterm>
		 <indexterm>
			<primary>RIP</primary>
		</indexterm>
		 <indexterm>
			<primary>IS-IS</primary>
		</indexterm>
		 <indexterm>
			<primary>BABEL trådløs meshruting</primary>
		</indexterm>
		 <indexterm>
			<primary><command>bgpd</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>ospfd</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>ospf6d</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>ripd</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>ripngd</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>isisd</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>babeld</command></primary>
		</indexterm>
		 <para>
			Nisser aktiveres ved å redigere <filename>/etc/quagga/daemons</filename>-filen, og skape den riktige oppsettsfilen i <filename>/etc/quagga/</filename>; denne oppsettsfilen må være oppkalt etter bakgrunnsprosessn, med en <filename>.conf</filename>-forlengelse, og høre til <literal>quagga</literal>-brukeren og <literal>quaggavty</literal>-gruppen, for å få <filename>/etc/init.d/quagga</filename>-skriptet til å kalle på bakgrunnsprosessn.
		</para>
		 <para>
			Oppsettet til hver av disse bakgrunnsprosessne krever kunnskap om den rutingsprotokollen det gjelder. Disse protokollene kan ikke beskrives i detalj her, men <emphasis role="pkg">quagga-doc</emphasis> gir en god forklaring i form av en <command>info</command>-fil. Det samme innholdet kan lettere søkes opp som HTML på Quaggas nettside: <ulink type="block" url="http://www.nongnu.org/quagga/docs/docs-info.html" />
		</para>
		 <para>
			I tillegg er syntaksen svært nær et standard ruter-oppsettsgrensesnitt, og nettverksadministratorer vil raskt tilpasse seg til <command>quagga</command>.
		</para>
		 <sidebar> <title><emphasis>I PRAKSIS</emphasis> OSPF, BGP eller RIP?</title>
		 <para>
			OSPF er normalt den beste protokollen for dynamisk ruting i private nettverk, men BGP er mer vanlig for Internett-ruting. RIP er ganske gammelt, og nesten ikke i bruk lenger.
		</para>
		 </sidebar>
	</section>
	 <section id="sect.ipv6">
		<title>IPv6</title>
		 <para>
			IPv6, etterfølgeren til IPv4, er en ny versjon av IP-protokollen laget for å fikse tidligere feil, og særlig mangelen på tilgjengelige IP-adresser. Denne protokollen håndterer nettverkslaget; og protokollens formål er å gi en adresseringsmåte til maskiner, for å formidle data til det tiltenkte målet, og for å håndtere datafragmentering hvis nødvendig (med andre ord, å dele pakker i biter med en størrelse som avhenger av de nettverkskoblingene som skal brukes til stien, og sette sammen bitene i riktig rekkefølge ved ankomst).
		</para>
		 <para>
			Debian kjerner inkluderer IPv6-håndtering i kjernen (med unntak av noen arkitekturer som har den samlet som en modul som heter <literal>ipv6</literal>). Basisverktøy som <command>ping</command> og <command>traceroute</command> har sine IPv6-ekvivalenter i <command>ping6</command> og <command>traceroute6</command>, respektivt tilgjengelig i <emphasis role="pkg">iputils-ping</emphasis>- og <emphasis role="pkg">iputils-tracepath</emphasis>-pakkene.
		</para>
		 <indexterm>
			<primary>IPv6</primary>
		</indexterm>
		 <indexterm>
			<primary><emphasis role="pkg">iputils-ping</emphasis></primary>
		</indexterm>
		 <indexterm>
			<primary><emphasis role="pkg">iputils-tracepath</emphasis></primary>
		</indexterm>
		 <para>
			IPv6-nettverket er satt opp på samme måte som IPv4, i <filename>/etc/network/interfaces</filename>. Men vil du at nettverket skal være globalt tilgjengelig, må du sørge for at du har en IPv6-kompatibel ruter som videresender trafikk til det globale IPv6-nettverket.
		</para>
		 <example id="example.network-interfaces-ipv6">
			<title>Eksempel på IPv6-oppsett</title>
			 
<programlisting>
iface eth0 inet6 static
    address 2001:db8:1234:5::1:1
    netmask 64
    # Slå av auto-oppsett
    # autoconf 0
    # Ruteren er satt opp automatisk og har ingen fast adresse
    # (accept_ra 1). Hvis den hadde det:
    # gateway 2001:db8:1234:5::1</programlisting>

		</example>
		 <para>
			IPv6 subnett har vanligvis en nettmaske på 64 bit. Dette betyr at 2<superscript>64</superscript> distinkte adresser eksisterer innenfor subnettet. Dette tillater Stateless Address Autoconfigurasjon (<acronym>SLAAC</acronym>) å velge en adresse basert på nettverksgrensesnittets MAC-adresse. Som standard, dersom <acronym>SLAAC</acronym> er aktivert i nettverket, og IPv6 på din datamaskin, vil kjernen automatisk finne IPv6 rutere og sette opp nettverksgrensesnittet.
		</para>
		 <para>
			Dette kan ha personvernimplikasjoner. Hvis du bytter nett ofte, f.eks med en bærbar PC, ønsker du kanskje ikke at din <acronym>MAC</acronym>-adresse er en del av din offentlige IPv6-adresse. Dette gjør det lett å identifisere den samme enheten på tvers av nettverk. En løsning på dette er IPv6-personvernutvidelser (som Debian gjør som standard hvis IPv6-tilkobling oppdages ved den første installasjonen), som vil tildele en ekstra tilfeldig generert adresse til grensesnittet, periodevis endre dem, og foretrekke dem til utgående tilkoblinger. Innkommende tilkoblinger kan fortsatt bruke adressen som genereres av SLAAC. Følgende eksempel til bruk i <filename>/etc/network/interfaces</filename>, aktiverer disse personvernutvidelser.
		</para>
		 <example id="example.network-interface-ipv6-privext">
			<title>IPv6-personvernutvidelser</title>
			 
<programlisting>
iface eth0 inet6 auto
    # Foretrekk de tilfeldig tildelte adressene for utgående forbindelser.
    privext 2</programlisting>

		</example>
		 <sidebar> <title><emphasis>TIPS</emphasis> Programmer bygd med IPv6</title>
		 <para>
			Mange deler av programvaren må tilpasses for å håndtere IPv6. De fleste av pakkene i Debian er tilpasset allerede, men ikke alle. Hvis din favorittpakke ikke fungerer med IPv6 ennå, kan du be om hjelp på <emphasis>debian-ipv6</emphasis> postliste. Kanskje vet de om en IPv6-klar erstatning, og kan sende inn en feilmelding og få spørsmålet ordentlig sporet. <ulink type="block" url="http://lists.debian.org/debian-ipv6/" />
		</para>
		 </sidebar> <indexterm>
			<primary>IPv6-brannmur</primary>
		</indexterm>
		 <indexterm>
			<primary>brannmur</primary>
			<secondary>IPv6</secondary>
		</indexterm>
		 <indexterm>
			<primary><command>ip6tables</command></primary>
		</indexterm>
		 <para>
			IPv6-tilkoblinger kan være begrenset, på samme måte som for IPv4: Standard Debian-kjernen inkluderer en tilpasning av <emphasis>netfilter</emphasis> for IPv6. Det IPv6-aktiverte <emphasis>netfilter</emphasis> er satt opp på en lignende måte som dens IPv4-motstykke, bortsett fra at programmet som skal brukes er <command>ip6tables</command> i stedet for <command>iptables</command>.
		</para>
		 <section id="sect.ipv6-tunneling">
			<title>Tunnellering</title>
			 <sidebar> <title><emphasis>VÆR VARSOM</emphasis> IPv6-tunneling og brannmurer</title>
			 <para>
				IPv6-tunneling over IPv4 (i motsetning til den innebygde IPv6) krever brannmuren til å godta trafikk som bruker IPv4-protokoll nummer 41.
			</para>
			 </sidebar> <para>
				Hvis en lokal IPv6-tilkobling ikke er tilgjengelig, er den alternative metoden å bruke en tunnel over IPv4. Gogo6 er en (gratis) leverandør av slike tunneler: <ulink type="block" url="http://www.gogo6.com/freenet6/tunnelbroker" />
			</para>
			 <indexterm>
				<primary>Freenet6</primary>
			</indexterm>
			 <indexterm>
				<primary>Gogo6</primary>
			</indexterm>
			 <para>
				For å bruke en Freenet6-tunnel må du registrere deg med en Freenet6 Pro-konto på nettsiden, deretter installere <emphasis role="pkg">gogoc</emphasis>-pakken og sette opp tunnelen. Dette krever å redigere <filename>/etc/gogoc/gogoc.conf</filename>-filen: Mottatte <literal>userid</literal> og <literal>password</literal>-linjer per e-post skal legges til, og <literal>server</literal> skal erstattes med <literal>authenticated.freenet6.net</literal>.
			</para>
			 <para>
				IPv6-tilkobling er foreslått til alle maskiner i et lokalt nettverk ved å legge de tre følgende direktiver til <filename>/etc/gogoc/gogoc.conf</filename>-filen (forutsatt at det lokale nettverket er koblet til nettverkskortet eth0):
			</para>
			 
<programlisting>
host_type=router
prefixlen=56
if_prefix=eth0</programlisting>
			 <para>
				Maskinen blir da inngangsruteren for et subnett med et 56-bit prefiks. Når tunnelen er klar over denne endringen, må det lokale nettverket bli fortalt om det; Det innebærer å installere <command>radvd</command>-bakgrunnsprosessn (fra pakken med det tilsvarende navnet). Denne IPv6-oppsettsbakgrunnsprosessn har en tilsvarende rolle som <command>dhcpd</command> i IPv4-verdenen.
			</para>
			 <para>
				<filename>/etc/radvd.conf</filename>-oppsettsfilen må så lages (se <filename>/usr/share/doc/radvd/examples/simple-radvd.conf</filename> som et startpunkt). I vårt tilfelle er det bare nødvendig å endre prefikset, som må erstattes med det som leveres av Freenet6; det finnes i utdata fra <command>ifconfig</command>-kommandoen, i blokken som gjelder <literal>tun</literal>-brukergrensesnittet.
			</para>
			 <indexterm>
				<primary><command>radvd</command></primary>
			</indexterm>
			 <para>
				Kjør så <command>service gogoc restart</command> og <command>service radvd start</command>, og IPv6-nettverket skulle virke.
			</para>

		</section>

	</section>
	 <section id="sect.domain-name-servers">
		<title>Domenenavnetjenere (DNS)</title>
		 <section id="sect.dns-principe">
			<title>Prinsipp og mekanisme</title>
			 <indexterm>
				<primary>DNS</primary>
			</indexterm>
			 <indexterm>
				<primary>server</primary>
				<secondary>navn</secondary>
			</indexterm>
			 <para>
				<emphasis>Domain Name Service</emphasis> (DNS) er en fundamental del av Internettet: den kartlegger vertsnavn til IP-adresser (og vice versa), som tillater bruk av <literal>www.debian.org</literal> i stedet for <literal>5.153.231.4</literal> eller <literal>2001:41c8:1000:21::21:4</literal>.
			</para>
			 <para>
				DNS-oppføringer er organisert i soner; hver sone svarer enten til et domene (eller et underdomene), eller et IP-adresseområde (siden IP-adresser generelt tildeles fortløpende i rekkefølge). En primærtjener er autoritativ når det gjelder innholdet i en sone; sekundære tjenere, som vanligvis ligger på separate maskiner, gir jevnlig oppdaterte kopier av primærsonen.
			</para>
			 <indexterm>
				<primary>sone</primary>
				<secondary>DNS</secondary>
			</indexterm>
			 <indexterm>
				<primary>DNS</primary>
				<secondary>sone</secondary>
			</indexterm>
			 <para>
				Hver sone kan inneholde registreringer av ulike slag (<emphasis>Resource Records</emphasis>):
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						<literal>A</literal>: IPv4-addresse. <indexterm><primary>A, DNS-post</primary></indexterm>
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>CNAME</literal>: alias (<emphasis>canonical navn</emphasis>). <indexterm><primary>CNAME, DNS-post</primary></indexterm>
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>MX</literal>: <emphasis>mail exchange</emphasis>, en e-posttjener. Denne informasjonen blir brukt av andre e-posttjenere for å finne hvor e-poster adressert til en gitt adresse skal sendes. Hver MX-posten har en prioritet. Tjeneren med høyeste prioritet (med lavest nummer) blir prøvd først (se sidefelt <xref linkend="sidebar.smtp" />); andre tjenere blir kontaktet etter synkende prioritet hvis den første ikke svarer. <indexterm><primary>MX</primary><secondary>DNS-post</secondary></indexterm>
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>PTR</literal>: Kartlegging av en IP-adresse for et navn. En slik post blir lagret i en «reversert DNS»-sone oppkalt etter IP-adresseområdet. For eksempel er <literal>1.168.192.in-addr.arpa</literal> sonen med den reverserte kartleggingen av alle adresser i <literal>192.168.1.0/24</literal>-rekkefølgen. <indexterm><primary>PTR, DNS-post</primary></indexterm>
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>AAAA</literal>: IPv6-addresse. <indexterm><primary>AAAA, DNS-post</primary></indexterm>
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>NS</literal>: kartlegger et navn til en navnetjener. Hvert domene må ha minst et NS-opptak. Disse opptakene peker på en DNS-tjener som kan svare på spørsmål om dette domenet; de peker vanligvis på de primære og sekundære tjenere for domenet. Disse opptakene tillater også DNS-delegasjon; for eksempel kan <literal>falcot.com</literal>-sonen inkludere et NS-opptak for <literal>internal.falcot.com</literal>, som betyr at <literal>internal.falcot.com</literal>-sonen håndteres av annen tjener. Selvfølgelig må denne tjeneren melde en <literal>internal.falcot.com</literal>-sone. <indexterm><primary>NS, DNS-post</primary></indexterm>
					</para>

				</listitem>

			</itemizedlist>
			 <indexterm>
				<primary>post</primary>
				<secondary>DNS</secondary>
			</indexterm>
			 <indexterm>
				<primary>DNS-post</primary>
			</indexterm>
			 <para>
				Referansenavnetjeneren, Bind, ble utviklet og vedlikeholdt av ISC (<emphasis>Internet Software Consortium</emphasis>). I Debian er den tilgjengelig i <emphasis role="pkg">bind9</emphasis>-pakken. Versjon 9 bringer to store endringer i forhold til tidligere versjoner. Først nå kan DNS-tjeneren kjøre under en ikke-privilegert bruker, slik at et sikkerhetsproblem i tjeneren ikke gir rot-tilgang til angriperen (som forekom gjentatte ganger med versjoner 8.x).
			</para>
			 <para>
				Videre støtter Bind DNSSEC-standarden for signering (og dermed autentisering) av DNS-opptak, som tillater blokkering av all forfalskning av data under man-in-the-middle angrep.
			</para>
			 <indexterm>
				<primary><emphasis role="pkg">bind9</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary>ISC</primary>
			</indexterm>
			 <indexterm>
				<primary>Internet Software Consortium</primary>
			</indexterm>
			 <sidebar> <title><emphasis>KULTUR</emphasis> DNSSEC</title>
			 <indexterm>
				<primary>DNSSEC</primary>
			</indexterm>
			 <para>
				DNSSEC-normen er ganske komplisert: Det forklarer hvorfor den ikke er i utbredt bruk ennå (selv om den sameksisterer helt perfekt med DNS-tjenere som ikke er oppmerksomme på DNSSEC). For å forstå alle inn- og ut-detaljene, bør du sjekke følgende artikkel: <ulink type="block" url="http://en.wikipedia.org/wiki/Domain_Name_System_Security_Extensions" />
			</para>
			 </sidebar>
		</section>
		 <section id="sect.dns-config">
			<title>Oppsett</title>
			 <para>
				Oppsettsfiler for <command>bind</command>, uavhengig av versjon, har den samme strukturen.
			</para>
			 <para>
				Falcots administratorer opprettet en primær <literal>falcot.com</literal>-sone for å lagre informasjon relatert til dette domenet, og en <literal>168.192.in-addr.arpa</literal>-sone for reversert kartlegging av IP-addresser i de lokale nettverkene.
			</para>
			 <sidebar> <title><emphasis>VÆR VARSOM</emphasis> Navn på revers-soner (omvendte soner)</title>
			 <indexterm>
				<primary>sone</primary>
				<secondary>revers</secondary>
			</indexterm>
			 <indexterm>
				<primary>revers sone</primary>
			</indexterm>
			 <indexterm>
				<primary><literal>in-addr.arpa</literal></primary>
			</indexterm>
			 <indexterm>
				<primary><literal>ip6.arpa</literal></primary>
			</indexterm>
			 <indexterm>
				<primary>nibble-format</primary>
			</indexterm>
			 <para>
				Reverserte soner (omvendte soner) har et bestemt navn. Sonen som omfatter <literal>192.168.0.0/16</literal>-nettet trenger å bli navngitt <literal>168.192.in-addr.arpa</literal>: Komponentene til IP-adressen er reversert, og etterfulgt av <literal>in-addr.arpa</literal>-suffikset.
			</para>
			 <para>
				For IPv6-nettverk er suffikset <literal>ip6.arpa</literal> og IP-adressen komponenter som er reversert, er hvert tegn i full heksadesimal presentasjon av IP-adressen. Som sådan vil <literal>2001:0bc8:31a0::/48</literal>-nettverket bruke en sone med navnet <literal>0.a.1.3.8.c.b.0.1.0.0.2.ip6.arpa</literal>.
			</para>
			 </sidebar> <sidebar> <title><emphasis>TIPS</emphasis> Å teste DNS-tjeneren</title>
			 <para>
				Kommandoen <command>host</command> (i <emphasis role="pkg">bind9-host</emphasis>-pakken) forespør en DNS-tjener, og kan bli brukt til å teste tjeneroppsettet. For eksempel sjekker <command>host machine.falcot.com localhost</command> den lokale tjenerens svar på <literal>machine.falcot.com</literal> forespørsel. <command>host <replaceable>ipaddress</replaceable> localhost</command> tester den reverserte løsningen.
			</para>
			 <indexterm>
				<primary><command>host</command></primary>
			</indexterm>
			 </sidebar> <para>
				Det følgende oppsettsutdraget, hentet fra Falcot-filene, kan tjene som utgangspunkt for å sette opp en DNS-server:
			</para>
			 <indexterm>
				<primary><filename>named.conf</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>/etc/bind/named.conf</filename></primary>
			</indexterm>
			 <example id="example.bind-named.conf.local">
				<title>Excerpt of <filename>/etc/bind/named.conf.local</filename></title>
				 
<programlisting>
zone "falcot.com" {
        type master;
        file "/etc/bind/db.falcot.com";
        allow-query { any; };
        allow-transfer {
                195.20.105.149/32 ; // ns0.xname.org
                193.23.158.13/32 ; // ns1.xname.org
        };
};

zone "internal.falcot.com" {
        type master;
        file "/etc/bind/db.internal.falcot.com";
        allow-query { 192.168.0.0/16; };
};

zone "168.192.in-addr.arpa" {
        type master;
        file "/etc/bind/db.192.168";
        allow-query { 192.168.0.0/16; };
};</programlisting>

			</example>
			 <example id="example.bind-db.falcot.com">
				<title>Utdrag av <filename>/etc/bind/db.falcot.com</filename></title>
				 
<programlisting>; falcot.com-sonen
; admin.falcot.com. =&gt; zone contact: admin@falcot.com
$TTL    604800
@       IN      SOA     falcot.com. admin.falcot.com. (
                        20040121        ; Seriellnummer
                         604800         ; Fornying
                          86400         ; Nytt forsøk
                        2419200         ; Utløp
                         604800 )       ; Negativ mellomglagrings-TTL
;
; @ refererer til sonenavnet ("falcot.com" her)
; eller til $ORIGIN hvis det uttrykket har vært brukt
;
@       IN      NS      ns
@       IN      NS      ns0.xname.org.

internal IN      NS      192.168.0.2

@       IN      A       212.94.201.10
@       IN      MX      5 mail
@       IN      MX      10 mail2

ns      IN      A       212.94.201.10
mail    IN      A       212.94.201.10
mail2   IN      A       212.94.201.11
www     IN      A       212.94.201.11

dns     IN      CNAME   ns</programlisting>

			</example>
			 <sidebar> <title><emphasis>VÆR VARSOM</emphasis> Navnesyntaks</title>
			 <para>
				Syntaksen til maskinnavnene følger strikte regler. For eksempel, <literal>maskin</literal> impliserer <literal>maskin.<replaceable>domene</replaceable></literal>. Hvis domenenavnet ikke skal tilføyes et navn, må navnet skrives som <literal>maskin.</literal> (med et punktum som suffiks). Hvis du vil vise et DNS-navn utenfor det gjeldende domenet, er derfor en syntaks som <literal>maskin.annetdomene.com.</literal> nødvendig (med et avsluttende punktum).
			</para>
			 </sidebar> <example id="example.bind-db.192.168">
				<title>Utdrag fra <filename>/etc/bind/db.192.168</filename></title>
				 
<programlisting>; Reverssone for 192.168.0.0/16
; admin.falcot.com. =&gt; zone contact: admin@falcot.com
$TTL    604800
@       IN      SOA     ns.internal.falcot.com. admin.falcot.com. (
                        20040121        ; Seriellnummer
                         604800         ; Fornying
                          86400         ; Nytt forsøk
                        2419200         ; Utløp
                         604800 )       ; Negativ mellomlagrings-TTL

        IN      NS      ns.internal.falcot.com.

; 192.168.0.1 -&gt; arrakis
1.0     IN      PTR     arrakis.internal.falcot.com.
; 192.168.0.2 -&gt; neptune
2.0     IN      PTR     neptune.internal.falcot.com.

; 192.168.3.1 -&gt; pau
1.3     IN      PTR     pau.internal.falcot.com.</programlisting>

			</example>

		</section>

	</section>
	 <section id="sect.dhcp">
		<title>DHCP</title>
		 <para>
			DHCP (for <emphasis>Dynamic Host Configuration Protocol</emphasis>) er en protokoll der en maskin automatisk kan få sitt nettverksoppsett når den starter. Dette gjør det mulig å sentralisere håndteringen av nettverksoppsett, og sikre at alle stasjonære maskiner får lignende innstillinger.
		</para>
		 <indexterm>
			<primary>DHCP</primary>
		</indexterm>
		 <indexterm>
			<primary>Dynamic Host Configuration Protocol</primary>
		</indexterm>
		 <indexterm>
			<primary>nettverk</primary>
			<secondary>DHCP-oppsett</secondary>
		</indexterm>
		 <para>
			En DHCP-tjener gir mange nettverksrelaterte parametere. Den vanligste av disse er en IP-adresse og nettverket der maskinen hører til, men den kan også gi andre opplysninger, som for eksempel om DNS-tjenere, WINS-tjenere, NTP-tjenere, og så videre.
		</para>
		 <para>
			Internet Software Consortium (også involvert i å utvikle <command>bind</command>) er hovedforfatter av DHCP-tjeneren. Den tilsvarende Debian-pakken er <emphasis role="pkg">isc-dhcp-server</emphasis>.
		</para>
		 <section id="sect.dhcp-config">
			<title>Oppsett</title>
			 <para>
				De første elementene som må redigeres i DHCP-tjenerens oppsettsfil (<filename>/etc/dhcp/dhcpd.conf</filename>) er domenenavnet og DNS-tjenerne. Hvis denne tjeneren er alene på det lokale nettverket, må (som definert av den kringkastede utsendelsen) <literal>authoritative</literal>-direktivet også aktiveres (eller være ukommentert). Man trenger også å lage en <literal>subnet</literal>-seksjon som beskriver det lokale nettverket og oppsettsopplysningene som skal gis. Følgende eksempel passer et <literal>192.168.0.0/24</literal> lokalt nettverk med en ruter på <literal>192.168.0.1</literal> som tjener som port. Tilgjengelige IP-adresser er i området fra <literal>192.168.0.128</literal> til <literal>192.168.0.254</literal>.
			</para>
			 <example id="example.dhcp-dhcpd.conf">
				<title>Utdrag fra <filename>/etc/dhcp/dhcpd.conf</filename></title>
				 
<programlisting>
#
# Sample configuration file for ISC dhcpd for Debian
#

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style interim;

# option definitions common to all supported networks...
option domain-name "internal.falcot.com";
option domain-name-servers ns.internal.falcot.com;

default-lease-time 600;
max-lease-time 7200;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

# My subnet
subnet 192.168.0.0 netmask 255.255.255.0 {
    option routers 192.168.0.1;
    option broadcast-address 192.168.0.255;
    range 192.168.0.128 192.168.0.254;
    ddns-domainname "internal.falcot.com";
}</programlisting>

			</example>

		</section>
		 <section id="sect.dhcp-dns">
			<title>DHCP og DNS</title>
			 <indexterm>
				<primary>DNS</primary>
				<secondary>automatiske oppdateringer</secondary>
			</indexterm>
			 <para>
				En fin egenskap er er automatisk registrering av DHCP-klienter i DNS-sonen, slik at hver maskin får et eget navn (heller enn noe upersonlig som <literal>maskin-192-168-0-131.internal.falcot.com</literal>). Å bruke denne funksjonen krever oppsett av DNS-tjeneren til å kunne godta oppdateringer til <literal>internal.falcot.com</literal>-DNS-sonen fra DHCP-tjeneren, og sette opp den sistnevnte til å sende oppdateringer for hver registrering.
			</para>
			 <para>
				I tilfellet med <command>bind</command> må <literal>allow-update</literal>-direktivet legges til hver av de soner som DHCP-tjeneren skal redigere (den ene for <literal>internal.falcot.com</literal>-domenet og den reverserte sonen). Dette direktivet lister IP-adressene som har lov til å utføre disse oppdateringene; det skal derfor inneholde de mulige adressene til DHCP-tjeneren (både lokal adresse og offentlige adresse, hvis det er aktuelt).
			</para>
			 
<programlisting>
allow-update { 127.0.0.1 192.168.0.1 212.94.201.10 !any };</programlisting>
			 <para>
				Pass opp! En sone som kan endres, <emphasis>vil</emphasis> bli endret av <command>bind</command>, og sistnevnte vil overskrive oppsettsfilene med jevne mellomrom. Siden denne automatiserte prosedyre produserer filer som er mindre lesbare enn manuelt skrevne, håndterer Falcot administratorer <literal>internal.falcot.com</literal>-domenet med en delegert DNS-tjener; dette betyr at sonefilen <literal>falcot.com</literal> forblir stående under deres manuelle kontroll.
			</para>
			 <para>
				DHCP-tjeneroppsettets utdrag ovenfor inneholder allerede direktivene som kreves for oppdatering av DNS-soner; de er <literal>ddns-update-style interim;</literal>, og <literal>ddns-domain-name "internal.falcot.com";</literal>-linjer i blokken som beskriver subnettet.
			</para>

		</section>

	</section>
	 <section id="sect.network-diagnosis-tools">
		<title>Diagnoseverktøy for nettverk</title>
		 <para>
			Når et nettverksprogram ikke kjører som forventet, er det viktig å kunne se under panseret. Selv når alt ser ut til å kjøre greit, kan det å kjøre en nettverksdiagnose bidra til å sikre at alt fungerer som det skal. Det finnes flere diagnoseverktøy for dette formålet; hvert opererer på et ulikt nivå.
		</para>
		 <section id="sect.netstat">
			<title>Lokale diagnoser: <command>netstat</command></title>
			 <indexterm>
				<primary><command>netstat</command></primary>
			</indexterm>
			 <para>
				La oss først nevne <command>netstat</command>-kommandoen (i <emphasis role="pkg">net-tools</emphasis>-pakken); den viser en umiddelbar oppsummering av maskinens nettverksaktivitet. Når det blir kjørt uten argument, lister denne kommandoen opp alle åpne tilkoblinger; denne listen kan være svært detaljert, siden det inneholder mange Unix-domene-socketer (mye brukt av bakgrunnsprosessr) som ikke involverer nettverket i det hele tatt (for eksempel <literal>dbus</literal>-kommunikasjon, <literal>X11</literal>-trafikk, og kommunikasjon mellom virtuelle filsystemer og skrivebordet).
			</para>
			 <para>
				Vanlige oppkallinger bruker derfor alternativer som endrer hvordan <command>netstat</command> virker. De vanligst brukte valgene omfatter:
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						<literal>-t</literal>, som filtrerer resultatene til å bare inkludere TCP-forbindelser;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>-u</literal>, som fungerer på samme måte for UDP-tilkoblinger; disse alternativene er ikke gjensidig ekskluderende, og en av dem er nok til å stoppe visning av Unix sine domenetilkoblinger;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>-a</literal>, for også å liste sockets (som venter på innkommende forbindelser);
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>-n</literal>, for å vise resultatene numerisk: IP-adresser (ingen DNS-løsning), portnumre (ingen aliaser som definert i <filename>/etc/services</filename>) og bruker-ID-er (ingen påloggingsnavn);
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>-p</literal>, for å liste opp de prosessene som er involvert, er dette alternativet bare nyttig når <command>netstat</command> kjøres som rot, siden vanlige brukere bare vil se sine egne prosesser;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>-c</literal>, for å kontinuerlig oppdatere listen med tilkoblinger.
					</para>

				</listitem>

			</itemizedlist>
			 <para>
				Andre alternativer, dokumentert på manualsiden <citerefentry><refentrytitle>netstat</refentrytitle>
				 <manvolnum>8</manvolnum></citerefentry>, gir en enda bedre kontroll over resultatene som vises. I praksis blir de første fem alternativene så ofte brukt sammen at systemer og nettverksadministratorer praktisk talt skaffet <command>netstat -tupan</command> som en refleks. Typiske resultater på en lett lastet maskin, kan se ut som følger:
			</para>
			 
<screen role="scale">
<computeroutput># </computeroutput><userinput>netstat -tupan</userinput>
<computeroutput>Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      397/rpcbind     
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      431/sshd        
tcp        0      0 0.0.0.0:36568           0.0.0.0:*               LISTEN      407/rpc.statd   
tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      762/exim4       
tcp        0    272 192.168.1.242:22        192.168.1.129:44452     ESTABLISHED 1172/sshd: roland [
tcp6       0      0 :::111                  :::*                    LISTEN      397/rpcbind     
tcp6       0      0 :::22                   :::*                    LISTEN      431/sshd        
tcp6       0      0 ::1:25                  :::*                    LISTEN      762/exim4       
tcp6       0      0 :::35210                :::*                    LISTEN      407/rpc.statd   
udp        0      0 0.0.0.0:39376           0.0.0.0:*                           916/dhclient    
udp        0      0 0.0.0.0:996             0.0.0.0:*                           397/rpcbind     
udp        0      0 127.0.0.1:1007          0.0.0.0:*                           407/rpc.statd   
udp        0      0 0.0.0.0:68              0.0.0.0:*                           916/dhclient    
udp        0      0 0.0.0.0:48720           0.0.0.0:*                           451/avahi-daemon: r
udp        0      0 0.0.0.0:111             0.0.0.0:*                           397/rpcbind     
udp        0      0 192.168.1.242:123       0.0.0.0:*                           539/ntpd        
udp        0      0 127.0.0.1:123           0.0.0.0:*                           539/ntpd        
udp        0      0 0.0.0.0:123             0.0.0.0:*                           539/ntpd        
udp        0      0 0.0.0.0:5353            0.0.0.0:*                           451/avahi-daemon: r
udp        0      0 0.0.0.0:39172           0.0.0.0:*                           407/rpc.statd   
udp6       0      0 :::996                  :::*                                397/rpcbind     
udp6       0      0 :::34277                :::*                                407/rpc.statd   
udp6       0      0 :::54852                :::*                                916/dhclient    
udp6       0      0 :::111                  :::*                                397/rpcbind     
udp6       0      0 :::38007                :::*                                451/avahi-daemon: r
udp6       0      0 fe80::5054:ff:fe99::123 :::*                                539/ntpd        
udp6       0      0 2001:bc8:3a7e:210:a:123 :::*                                539/ntpd        
udp6       0      0 2001:bc8:3a7e:210:5:123 :::*                                539/ntpd        
udp6       0      0 ::1:123                 :::*                                539/ntpd        
udp6       0      0 :::123                  :::*                                539/ntpd        
udp6       0      0 :::5353                 :::*                                451/avahi-daemon: r
</computeroutput></screen>
			 <para>
				Som forventet, dette lister etablerte tilkoblinger, i dette tilfelle to SSH-forbindelser, og programmer som venter på innkommende forbindelser (listet som <literal>LISTEN</literal>), særlig Exim4 e-posttjeneren som lytter på port 25.
			</para>

		</section>
		 <section id="sect.nmap">
			<title>Fjerndiagnostikk: <command>nmap</command></title>
			 <indexterm>
				<primary><command>nmap</command></primary>
			</indexterm>
			 <para>
				<command>nmap</command> (i pakken med tilsvarende navn) er, på en måte, ekstern-motstykket som tilsvarer til <command>netstat</command>. Den kan skanne et sett med «kjente» porter for en eller flere eksterne tjenere, og liste portene der det er funnet et program som svarer på innkommende tilkoblinger. Videre kan <command>nmap</command> identifisere noen av disse programmene, noen ganger til og med versjonsnummeret. Motstykket til dette verktøyet er at, siden det kjører eksternt, kan det ikke gi informasjon om prosesser eller brukere. Det kan imidlertid operere med flere mål samtidig.
			</para>
			 <para>
				En typisk <command>nmap</command>-påkalling bruker bare <literal>-A</literal>-valget (slik at <command>nmap</command> forsøker å identifisere versjoner av tjenerprogramvaren den finner) etterfulgt av én eller flere IP-adresser eller DNS-navn på maskiner som skal skannes. Igjen, det finnes mange muligheter til finkontroll av hvordan <command>nmap</command> kjøres. Referer gjerne til dokumentasjonen i <citerefentry> <refentrytitle>nmap</refentrytitle>
				 <manvolnum>1</manvolnum> </citerefentry> manualside.
			</para>
			 
<screen role="scale" width="80">
<computeroutput># </computeroutput><userinput>nmap mirtuel</userinput>
<computeroutput>
Starting Nmap 6.47 ( http://nmap.org ) at 2015-03-09 16:46 CET
Nmap scan report for mirtuel (192.168.1.242)
Host is up (0.000013s latency).
rDNS record for 192.168.1.242: mirtuel.internal.placard.fr.eu.org
Not shown: 998 closed ports
PORT    STATE SERVICE
22/tcp  open  ssh
111/tcp open  rpcbind

Nmap done: 1 IP address (1 host up) scanned in 2.41 seconds
# </computeroutput><userinput>nmap -A localhost</userinput>
<computeroutput>
Starting Nmap 6.47 ( http://nmap.org ) at 2015-03-09 16:46 CET
Nmap scan report for localhost (127.0.0.1)
Host is up (0.000013s latency).
Other addresses for localhost (not scanned): 127.0.0.1
Not shown: 997 closed ports
PORT    STATE SERVICE VERSION
22/tcp  open  ssh     OpenSSH 6.7p1 Debian 3 (protocol 2.0)
|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)
25/tcp  open  smtp    Exim smtpd 4.84
| smtp-commands: mirtuel Hello localhost [127.0.0.1], SIZE 52428800, 8BITMIME, PIPELINING, HELP, 
|_ Commands supported: AUTH HELO EHLO MAIL RCPT DATA NOOP QUIT RSET HELP 
111/tcp open  rpcbind 2-4 (RPC #100000)
| rpcinfo: 
|   program version   port/proto  service
|   100000  2,3,4        111/tcp  rpcbind
|   100000  2,3,4        111/udp  rpcbind
|   100024  1          36568/tcp  status
|_  100024  1          39172/udp  status
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.7 - 3.15
Network Distance: 0 hops
Service Info: Host: mirtuel; OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 11.54 seconds
</computeroutput></screen>
			 <para>
				Som forventet er SSH- og Exim4-applikasjoner oppført. Merk at ikke alle programmer følger med på alle IP-adresser; siden Exim4 kun er tilgjengelig på <literal>lo</literal>-grensesnittet for filmontering. Det vises bare ved en analyse av <literal>localhost</literal>, og ikke ved skanning av <literal>mirtuel</literal> (som viser videre til <literal>eth0</literal>-grensesnittet på den samme maskinen).
			</para>

		</section>
		 <section id="sect.sniffers">
			<title>Sniffers: <command>tcpdump</command> og <command>wireshark</command></title>
			 <para>
				Noen ganger må man se på hva som faktisk er i ledningen, pakke for pakke. Disse tilfellene ber om en «rammeanalysator», mer kjent som <emphasis>sniffer</emphasis>. Et slikt verktøy observerer alle pakkene som når et gitt nettverksgrensesnitt, og viser dem på en brukervennlig måte.
			</para>
			 <indexterm>
				<primary><command>tcpdump</command></primary>
			</indexterm>
			 <para>
				Det respekterte verktøyet i dette domenet er <command>tcpdump</command>, og tilgjengelig som et standard verktøy på et bredt spekter av plattformer. Det gjør at mange typer nettverkstrafikk kan fanges opp, men gjengivelsen av denne trafikken er temmelig dunkel (obskur). Vi vil derfor ikke beskrive det nærmere.
			</para>
			 <indexterm>
				<primary><command>wireshark</command></primary>
			</indexterm>
			 <para>
				Et nyere (og mer moderne) verktøy, <command>wireshark</command> (i <emphasis role="pkg">wireshark</emphasis>-pakken), har blitt den nye referansen i analyse av nettverkstrafikk på grunn av sine mange dekodingsmoduler med mulighet for en forenklet analyse av de pakkene som er fanget opp. Pakkene vises grafisk organisert etter protokollagene. Dette gjør det mulig for en bruker å visualisere alle protokoller som er involvert i en pakke. For eksempel, gitt en pakke som inneholder en HTTP-forespørsel, <command>wireshark</command> viser, hver for seg, den informasjonen om det fysiske laget, Ethernet laget, IP-pakkeinformasjon, TCP-tilkoblingsparametere, og til slutt HTTP-forespørselen selv.
			</para>
			 <figure id="figure.wireshark">
				<title><command>wireshark</command> til analyse av nettverkstrafikk</title>
				 <mediaobject>
					<imageobject>
						<imagedata fileref="images/wireshark.png" format="PNG" scalefit="1" width="75%" />
					</imageobject>

				</mediaobject>

			</figure>
			 <para>
				I vårt eksempel er pakkene som går over SSH filtrert ut (med <literal>!tcp.port == 22</literal>-filteret). Pakken som vises nå ble rullet ut på HTTP-laget.
			</para>
			 <sidebar> <title><emphasis>TIPS</emphasis> <command>wireshark </command>uten grafisk grensesnitt: <command>tshark</command></title>
			 <indexterm>
				<primary><command>tshark</command></primary>
			</indexterm>
			 <para>
				Når man ikke kan kjøre et grafisk grensesnitt, eller ikke ønsker å gjøre det uansett grunn, er det også en tekstversjon av <command>wireshark</command> med navnet <command>tshark</command> (i en separat <emphasis role="pkg">tshark</emphasis>-pakke). De fleste av fangst- og dekodingsfunksjonene er fortsatt tilgjengelige, men mangelen på et grafisk grensesnitt begrenser nødvendigvis samhandlingen med programmet (filtreringspakker etter at de har blitt fanget, sporing av en gitt TCP-tilkobling, og så videre). Det kan likevel brukes som en første tilnærming. Hvis ytterligere håndtering er hensikten, og det krever det grafiske grensesnittet, kan pakkene lagres til en fil, og den filen kan lastes inn i en grafisk <command>wireshark</command> som kjører på en annen maskin.
			</para>
			 </sidebar>
		</section>

	</section>
</chapter>

