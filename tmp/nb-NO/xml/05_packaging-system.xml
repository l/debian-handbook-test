<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="packaging-system" lang="nb-NO">
	<chapterinfo>
		 <keywordset>
			<keyword>Binærpakke</keyword>
			 <keyword>Kildepakke</keyword>
			 <keyword>dpkg</keyword>
			 <keyword>avhengigheter</keyword>
			 <keyword>konflikt</keyword>

		</keywordset>

	</chapterinfo>
	 <title>Pakkesystem: Verktøy og grunnleggende prinsipper</title>
	 <highlights> <para>
		Som en Debian systemadministrator, vil du rutinemessig håndtere <filename>.deb</filename>-pakker, siden de inneholder konsistente funksjonelle enheter (programmer, dokumentasjon, etc.), som gjør installasjon og vedlikehold mulig. Det er derfor en god idé å vite hva de er, og hvordan du bruker dem.
	</para>
	 </highlights> <para>
		Dette kapitlet beskriver strukturen og innholdet av «binære»- og «kilde»-pakker. De første er <filename>.deb</filename>-filer, som kan brukes direkte av <command>dpkg</command>, mens sistnevnte inneholder kildekoden, så vel som instruksjoner for å bygge binære pakker.
	</para>
	 <section id="sect.binary-package-structure">
		<title>Binær pakkestruktur</title>
		 <indexterm>
			<primary>pakke</primary>
			<secondary>binærpakke</secondary>
		</indexterm>
		 <indexterm>
			<primary><command>ar</command></primary>
		</indexterm>
		 <para>
			Debian pakkeformat er utformet slik at innholdet kan pakkes ut i et Unix-system som har de klassiske kommandoer <command>ar</command>, <command>tar</command>, og <command>gzip</command> (sometimes <command>xz</command>, eller <command>bzip2</command>). Denne tilsynelatende trivielle egenskapen er viktig for overførbarhet og gjenoppretting etter alvorlige uhell.
		</para>
		 <para>
			Forestill deg, for eksempel, at du ved en feil har slettet <command>dpkg</command>-programmet, og at du ikke lenger kunne installere Debian-pakker. Ettersom <command>dpkg</command> selv er en Debian-pakke, ville det virke som om det var gjort for systemet ditt ... Heldigvis vet du formatet for en pakke, og kan derfor laste ned <filename>.deb</filename>-filen til <emphasis role="pkg">dpkg</emphasis>-pakken, og installere den manuelt (se sidemeny <xref linkend="sidebar.dpkg-apt-ar" />). Hvis, ved et uhell, en eller flere av programmene <command>ar</command>, <command>tar</command> eller <command>gzip</command>/<command>xz</command>/<command>bzip2</command> har forsvunnet, trenger du bare å kopiere det manglende programmet fra et annet system (siden hver av disse opererer helt selvstendig, uten avhengigheter, er en enkel kopi tilstrekkelig). Hvis systemet møter en enda mer uheldig skjebne, slik at selv disse ikke fungerer (kanskje de dypeste systembiblioteker mangler?), skal du prøve den statiske versjonen av <command>busybox</command> (fremskaffet fra <emphasis role="pkg">busybox-static</emphasis>-pakken), som er enda mer selvstendig, og gir delkommandoer som <command>busybox ar</command>, <command>busybox tar</command> og <command>busybox gunzip</command>.
		</para>
		 <sidebar id="sidebar.dpkg-apt-ar"> <title><emphasis>VERKTØY</emphasis> <command>dpkg</command>, <command>APT</command>, og <command>ar</command></title>
		 <indexterm>
			<primary><command>dpkg</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>ar</command></primary>
		</indexterm>
		 <indexterm>
			<primary>APT</primary>
		</indexterm>
		 <para>
			<command>dpkg</command> er programmet som håndterer <filename>.deb</filename>-filer, og spesielt pakker ut, analyserer og åpner dem.
		</para>
		 <para>
			<command>APT</command> er en gruppe av programmer som tillater utførelsen av høyere-nivå modifikasjoner i systemet: Installerer eller fjerner en pakke (mens du har kontroll på avhengighetene), oppdatering av systemet, en liste over de tilgjengelige pakkene, etc.
		</para>
		 <indexterm>
			<primary><command>ar</command></primary>
		</indexterm>
		 <para>
			As for the <command>ar</command> program, it allows handling files of the same name: <command>ar t <replaceable>archive</replaceable></command> displays the list of files contained in such an archive, <command>ar x <replaceable>archive</replaceable></command> extracts the files from the archive into the current working directory, <command>ar d <replaceable>archive</replaceable> <replaceable>file</replaceable></command> deletes a file from the archive, etc. Its man page (<citerefentry><refentrytitle>ar</refentrytitle>
			<manvolnum>1</manvolnum></citerefentry>) documents all its other features. <command>ar</command> is a very rudimentary tool that a Unix administrator would only use on rare occasions, but admins routinely use <command>tar</command>, a more evolved archive and file management program. This is why it is easy to restore <command>dpkg</command> in the event of an erroneous deletion. You would only have to download the Debian package and extract the content from the <filename>data.tar.gz</filename> archive in the system's root (<filename>/</filename>):
		</para>
		 
<screen>
<computeroutput># </computeroutput><userinput>ar x dpkg_1.17.23_amd64.deb</userinput>
<computeroutput># </computeroutput><userinput>tar -C / -p -xzf data.tar.gz</userinput></screen>
		 </sidebar> <sidebar> <title><emphasis>TILBAKE TIL BASIS</emphasis> Man-side-merknad</title>
		 <para>
			Det kan være forvirrende for nybegynnere å finne referanser til “<citerefentry><refentrytitle>ar</refentrytitle>
			<manvolnum>1</manvolnum></citerefentry>” i litteraturen. Det er generelt en beleilig måte å vise til en man-side med tittelen <literal>ar</literal> i seksjon 1.
		</para>
		 <para>
			Noen ganger er denne merknaden også benyttet til å fjerne uklarheter, for eksempel å skille mellom <command>printf</command>-kommandoen, som også kan indikeres av <citerefentry><refentrytitle>printf</refentrytitle>
			<manvolnum>1</manvolnum></citerefentry> og <function>printf</function>-funksjonen i programspråket C, som også kan bli vist til som <citerefentry><refentrytitle>printf</refentrytitle>
			<manvolnum>3</manvolnum></citerefentry>.
		</para>
		 <para>
			<xref linkend="solving-problems" /> drøfter manuelle sider i større detalj (se <xref linkend="sect.manual-pages" />).
		</para>
		 </sidebar> <para>
			Kast et blikk på innholdet i en <filename>.deb</filename>-fil:
		</para>
		 
<screen><computeroutput>$ </computeroutput><userinput>ar t dpkg_1.17.23_amd64.deb</userinput>
<computeroutput>debian-binary
control.tar.gz
data.tar.gz
$ </computeroutput><userinput>ar x dpkg_1.17.23_amd64.deb</userinput>
<computeroutput>$ </computeroutput><userinput>ls</userinput>
<computeroutput>control.tar.gz  data.tar.gz  debian-binary  dpkg_1.17.23_amd64.deb
$ </computeroutput><userinput>tar tzf data.tar.gz | head -n 15</userinput>
<computeroutput>./
./var/
./var/lib/
./var/lib/dpkg/
./var/lib/dpkg/parts/
./var/lib/dpkg/info/
./var/lib/dpkg/alternatives/
./var/lib/dpkg/updates/
./etc/
./etc/logrotate.d/
./etc/logrotate.d/dpkg
./etc/dpkg/
./etc/dpkg/dpkg.cfg.d/
./etc/dpkg/dpkg.cfg
./etc/alternatives/
$ </computeroutput><userinput>tar tzf control.tar.gz</userinput>
<computeroutput>./
./conffiles
./postinst
./md5sums
./prerm
./preinst
./control
./postrm
$ </computeroutput><userinput>cat debian-binary</userinput>
<computeroutput>2.0</computeroutput></screen>
		 <para>
			Som du kan se, <command>ar</command>-arkivet i en Debian-pakke omfattes av tre filer:
		</para>
		 <itemizedlist>
			<listitem>
				<para>
					<filename>debian-binary</filename>. Dette er en tekstfil som i enkelhet indikerer versjonen av den benyttede <filename>.deb</filename>-filen (i 2015: versjon 2.0).
				</para>

			</listitem>
			 <listitem>
				<para>
					<filename>control.tar.gz</filename>. Denne arkivfilen inneholder all tilgjengelig meta-informasjon, som navn og pakkens versjon. Noe av denne meta-informasjonen tillater pakkehåndteringsverktøyene å fastslå om det er mulig å installere eller avinstallere den, for eksempel ut fra listen over pakker som allerede er på maskinen.
				</para>

			</listitem>
			 <listitem>
				<para>
					<filename>data.tar.gz</filename>. Dette arkivet inneholder alle filene i pakken som kan pakkes ut. Dette er der kjørbare filer, dokumentasjon, etc., alle er lagret. Noen pakker kan bruke andre komprimeringsformater, og da filen vil bli navngitt annerledes (<filename>data.tar.bz2</filename> for bzip2, <filename>data.tar.xz</filename> for XZ).
				</para>

			</listitem>

		</itemizedlist>

	</section>
	 <section id="sect.package-meta-information">
		<title>Meta pakkeinformasjon</title>
		 <indexterm>
			<primary>pakke-meta-informasjon</primary>
		</indexterm>
		 <indexterm>
			<primary>pakke</primary>
			<secondary>meta-informasjon</secondary>
		</indexterm>
		 <para>
			Debian-pakken er ikke bare et arkiv med filene beregnet for installasjon. Det er en del av en større helhet, og den beskriver forholdet til andre Debian-pakker (avhengigheter, konflikter, forslag). Den gir også skript som muliggjør kjøring av kommandoer på forskjellige stadier i pakkens livssyklus (installasjon, fjerning, oppgraderinger). Disse dataene brukes av pakkens styringsverktøy, men er ikke en del av pakkens programvare; I pakken er de det som kalles dens «meta-informasjon» (informasjon om annen informasjon).
		</para>
		 <section id="sect.control">
			<title>Bekrivelse; <filename>kontroll</filename>-filen</title>
			 <indexterm>
				<primary>pakke-meta-informasjon</primary>
			</indexterm>
			 <indexterm>
				<primary>pakke</primary>
				<secondary>meta-informasjon</secondary>
			</indexterm>
			 <indexterm>
				<primary><filename>kontroll</filename></primary>
			</indexterm>
			 <para>
				Denne filen bruker en struktur tilsvarende e-postoverskrifter (som definert av RFC 2822). For eksempel, for <emphasis role="pkg">apt</emphasis>, ser <filename>kontroll</filename>-filen ut som den følgende:
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>apt-cache show apt</userinput>
<computeroutput>Package: apt
Version: 1.0.9.6
Installed-Size: 3788
Maintainer: APT Development Team &lt;deity@lists.debian.org&gt;
Architecture: amd64
Replaces: manpages-it (&lt;&lt; 2.80-4~), manpages-pl (&lt;&lt; 20060617-3~), openjdk-6-jdk (&lt;&lt; 6b24-1.11-0ubuntu1~), sun-java5-jdk (&gt;&gt; 0), sun-java6-jdk (&gt;&gt; 0)
Depends: libapt-pkg4.12 (&gt;= 1.0.9.6), libc6 (&gt;= 2.15), libgcc1 (&gt;= 1:4.1.1), libstdc++6 (&gt;= 4.9), debian-archive-keyring, gnupg
Suggests: aptitude | synaptic | wajig, dpkg-dev (&gt;= 1.17.2), apt-doc, python-apt
Conflicts: python-apt (&lt;&lt; 0.7.93.2~)
Breaks: manpages-it (&lt;&lt; 2.80-4~), manpages-pl (&lt;&lt; 20060617-3~), openjdk-6-jdk (&lt;&lt; 6b24-1.11-0ubuntu1~), sun-java5-jdk (&gt;&gt; 0), sun-java6-jdk (&gt;&gt; 0)
Description-en: commandline package manager
 This package provides commandline tools for searching and
 managing as well as querying information about packages
 as a low-level access to all features of the libapt-pkg library.
 .
 These include:
  * apt-get for retrieval of packages and information about them
    from authenticated sources and for installation, upgrade and
    removal of packages together with their dependencies
  * apt-cache for querying available information about installed
    as well as installable packages
  * apt-cdrom to use removable media as a source for packages
  * apt-config as an interface to the configuration settings
  * apt-key as an interface to manage authentication keys
Description-md5: 9fb97a88cb7383934ef963352b53b4a7
Tag: admin::package-management, devel::lang:ruby, hardware::storage,
 hardware::storage:cd, implemented-in::c++, implemented-in::perl,
 implemented-in::ruby, interface::commandline, network::client,
 protocol::ftp, protocol::http, protocol::ipv6, role::program,
 role::shared-lib, scope::application, scope::utility, sound::player,
 suite::debian, use::downloading, use::organizing, use::searching,
 works-with::audio, works-with::software:package, works-with::text
Section: admin
Priority: important
Filename: pool/main/a/apt/apt_1.0.9.6_amd64.deb
Size: 1107560
MD5sum: a325ccb14e69fef2c50da54e035a4df4
SHA1: 635d09fcb600ec12810e3136d51e696bcfa636a6
SHA256: 371a559ce741394b59dbc6460470a9399be5245356a9183bbeea0f89ecaabb03</computeroutput></screen>
			 <sidebar> <title><emphasis>TILBAKE TIL BASIS</emphasis> RFC — Internett-standarder</title>
			 <indexterm>
				<primary>RFC</primary>
			</indexterm>
			 <indexterm>
				<primary>Request For Comments - Ønske om kommentarer</primary>
			</indexterm>
			 <para>
				RFC er forkortelse for «Request For Comments» - Ønske om kommentarer. En RFC er generelt et teknisk dokument som beskriver hva som vil bli en Internett-standard. Før den blir standardisert og frosset, sendes disse standardene til offentlig gjennomsyn (derav navnet). IETF (Internet Engineering Task Force) avgjør utviklingen av status for disse dokumentene (foreslått standard, utkast til standard, eller standard).
			</para>
			 <para>
				RFC 2026 definerer prosessen for standardisering av Internett-protokoller. <ulink type="block" url="http://www.faqs.org/rfcs/rfc2026.html" />
			</para>
			 </sidebar> <section>
				<title>Avhengigheter: <literal>Avhengig</literal>-feltet</title>
				 <indexterm>
					<primary>avhengighet</primary>
				</indexterm>
				 <indexterm>
					<primary><literal>Avhengig</literal>, topptekst</primary>
				</indexterm>
				 <indexterm>
					<primary>pakke</primary>
					<secondary>avhengighet</secondary>
				</indexterm>
				 <para>
					Avhengighetene er definert i <literal>Avhenger</literal>-feltet i pakkens topptekst. Dette er en liste over vilkår som må oppfylles for pakken skal fungere riktig. Denne informasjonen blir brukt av verktøy som <command>apt</command> for å installere de forutsatte biblioteker i riktige versjoner som tar hensyn til de avhengighetene i den pakken som skal installeres. For hver avhengighet er det mulig å begrense omfanget av versjoner som oppfyller denne betingelsen. Med andre ord, er det mulig å uttrykke det faktum at vi trenger pakken<emphasis role="pkg">libc6</emphasis> i en versjon som er lik eller større enn «2.15» (skrevet “<command>libc6 (&gt;= 2.15)</command>”). For versjonssammenligning er operatørene som følger:
				</para>
				 <itemizedlist>
					<listitem>
						<para>
							<command>&lt;&lt;</command>: mindre enn;
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>&lt;=</command>: Mindre enn eller lik;
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>=</command>: er lik (merk at “<literal>2.6.1</literal>” er ikke lik “<literal>2.6.1-1</literal>”);
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>&gt;=</command>: større enn eller lik;
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>&gt;&gt;</command>: større enn.
						</para>

					</listitem>

				</itemizedlist>
				 <para>
					I en liste over vilkår som må oppfylles, brukes skilletegnet komma. Det må forstås som en logisk «og». I forhold, uttrykker vertikal strek ("|") en logisk «eller» (det er en inkluderende «eller», ikke en eksklusiv «enten/eller»). Med høyere prioritet enn «og», kan det brukes så mange ganger som nødvendig. Dermed er avhengigheten «(A eller B) og C», skrevet <command>A | B, C</command>. I kontrast skal uttrykket «A or (B and C)» skrives som «(A or B) og (A or C)», ettersom <literal>Avhenger</literal>-feltet ikke tolerere parenteser som forandrer prioritetsrekkefølgen mellom de lokgiske operatorene «eller» og «og». Det skulle i tilfelle ha blitt skrevet <command>A | B, A | C</command>. <ulink type="block" url="http://www.debian.org/doc/debian-policy/ch-relationships.html" />
				</para>
				 <indexterm>
					<primary>meta-pakke</primary>
				</indexterm>
				 <para>
					Avhengighetssystemet er en god mekanisme for å sikre driften av et program, men det har en annen anvendelse med «Meta-pakker». Dette er tomme pakker som kun beskriver avhengigheter. De muliggjør installasjon av en konsistent gruppe av programmer forhåndsvalgt av Meta-pakkeutvikleren; slik at, <command>apt install <replaceable>meta-pakke</replaceable></command> vil automatisk installere alle disse programmene ved hjelp av Meta-pakkens avhengigheter. <emphasis role="pkg">gnome</emphasis>, <emphasis role="pkg">kde-full</emphasis> og <emphasis role="pkg">linux-image-amd64</emphasis>-pakkene er eksempler på Meta-pakker.
				</para>
				 <sidebar> <title><emphasis>DEBIAN POLICY</emphasis> <literal>Før-avhengig</literal>, et mer krevende <literal>Avhengig</literal></title>
				 <indexterm>
					<primary><literal>Før-avhengig</literal>, topptekst</primary>
				</indexterm>
				 <indexterm>
					<primary>Før-avhengighet</primary>
				</indexterm>
				 <para>
					«Før-avhengigheter» som er listet i “<literal>Før-avhengig</literal>”-feltet i pakkeoverskriftene, fullfører de normale avhengighetene; syntaksen deres er identiske. En normal avhengighet indikerer at pakken det gjelder må pakkes ut og konfigureres før konfigurasjon av pakken sier ifra om avhengighet. En pre-avhengighet stipulerer at pakken det gjelder må pakkes ut og konfigureres før kjøring av pakkens pre-installasjonskript sier ifra om før-avhengigheten, det vil si før installasjon.
				</para>
				 <para>
					En før-avhengighet er svært krevende for <command>apt</command>, fordi den legger en streng begrensning på bestillingen av pakker for installasjon. Slik sett er pre-avhengigheter frarådet hvis ikke de er absolutt nødvendige. Det er også anbefalt å ta kontakt med andre utviklere på <email>debian-devel@lists.debian.org</email> før man legger til en før-avhengighet. Det er vanligvis mulig å finne en annen alternativ løsning.
				</para>
				 </sidebar> <sidebar> <title><emphasis>DEBIAN POLICY</emphasis> <literal>Anbefaler</literal>, <literal>Foreslår</literal>, og <literal>Forbedrer</literal>-felter</title>
				 <indexterm>
					<primary><literal>Anbefaler</literal>, topptekst</primary>
				</indexterm>
				 <indexterm>
					<primary><literal>Foreslår</literal>, topptekst</primary>
				</indexterm>
				 <para>
					<literal>Anbefaler</literal> og <literal>Foreslår</literal>-felter beskriver ikke obligatoriske avhengigheter. De «anbefalte» avhengigheter, det viktigste, forbedrer vesentlig funksjonaliteten som tilbys av pakken, men er ikke uunnværlig for driften av dem. De «foreslåtte» avhengigheter av underordnet betydning, indikerer at enkelte pakker kan utfylle og øke sin respektive nytteverdi, men det er helt fornuftig å installere en av dem uten de andre.
				</para>
				 <para>
					Du bør alltid installere de «anbefalte» pakker, med mindre du vet nøyaktig hvorfor du ikke trenger dem. Motsatt er det ikke nødvendig å installere «foreslåtte» pakker med mindre du vet hvorfor du trenger dem.
				</para>
				 <indexterm>
					<primary><literal>Forbedrer</literal>, topptekst</primary>
				</indexterm>
				 <para>
					<literal>Forbedrer</literal>-feltet beskriver også et forslag, men i en annen sammenheng. Det ligger faktisk i den foreslåtte pakken, og ikke i den pakken som drar nytte av forslaget. Poenget ligger i at det er mulig å legge til et forslag uten å måtte modifisere den pakken det gjelder. Dermed kan alle tillegg - add-ons , plug-ins og andre utvidelser av et program dukke opp i listen over forslag til programvaren. Selv om det har eksistert i flere år, er dette siste felt fremdeles i stor grad ignorert av programmer som<command>apt</command> eller <command>synaptic</command>. Formålet med et forslag fra <literal>Forbredrer</literal>-feltet er å vises for brukeren i tillegg til de tradisjonelle forslagene fra <literal>Forslag</literal>-feltet.
				</para>
				 </sidebar>
			</section>
			 <section>
				<title>Konflikter: <literal>Konflikter</literal>-feltet</title>
				 <indexterm>
					<primary>konflikter</primary>
				</indexterm>
				 <indexterm>
					<primary><literal>Konflikter</literal>, topptekst</primary>
				</indexterm>
				 <indexterm>
					<primary>pakke</primary>
					<secondary>konflikt</secondary>
				</indexterm>
				 <para>
					<literal>Konflikt</literal>-feltet indikerer når en pakke ikke kan installeres samtidig med en annen. De vanligste årsakene er at begge pakkene inkluderer en fil med samme navn, gir den samme tjenesten fra samme TCP-port, eller ville hindre hverandres drift.
				</para>
				 <para>
					<command>dpkg</command> vil avslå å installere en pakke hvis det utløser en konflikt med en allerede installert pakke, bortsett fra hvis den nye pakken presiserer at den vil «erstatte» den installerte pakken, i så fall vil <command>dpkg</command> velge å erstatte den gamle pakken med den nye. <command>apt</command> følger alltid dine instruksjoner: Hvis du velger å installere en ny pakke, vil den automatisk tilby å avinstallere pakken som utgjør et problem.
				</para>

			</section>
			 <section>
				<title>Manglende samsvar: <literal>Pauser</literal>-feltet</title>
				 <indexterm>
					<primary>inkompatibiliteter</primary>
				</indexterm>
				 <indexterm>
					<primary><literal>Pauser</literal>, topptekst</primary>
				</indexterm>
				 <indexterm>
					<primary>pakke</primary>
					<secondary>inkompatibilitet</secondary>
				</indexterm>
				 <para>
					<literal>Pauser</literal>-feltet har en effekt lik <literal>Konflikter</literal>-feltet, men med en spesiell mening. Det signaliserer at installasjonen av en pakke vil «bryte» med en annen pakke (eller bestemte versjoner av den). Generelt er manglende samsvar mellom to pakker forbigående, og <literal>Pauser</literal>-forholdet refererer spesifikt til de inkompatible versjonene.
				</para>
				 <para>
					<command>dpkg</command> vil avslå å installere en pakke som bryter med en allerede installert pakke, og <command>apt</command> vil forsøke å løse problemet ved å oppdaterte pakken som ville blitt brutt, til en nyere versjon (som forventes å være fikset, og således kompatibel igjen).
				</para>
				 <para>
					Denne typen situasjoner kan oppstå ved oppdateringer uten bakoverkompatibilitet: Det er tilfellet hvis den nye versjonen ikke lenger fungerer med en eldre versjon, og fører til en feil i et annet program uten å ta spesielle forholdsregler. <literal>Pauser</literal>-feltet hindrer brukeren å komme inn i disse problemene.
				</para>

			</section>
			 <section>
				<title>Leveranser: <literal>Levere</literal>-feltet</title>
				 <indexterm>
					<primary><literal>Levere</literal>, topptekst</primary>
				</indexterm>
				 <para>
					Dette feltet introduserer interessant konsept for en «virtuell pakke». Det har mange oppgaver, men to er av særlig betydning. Den første rollen består i å bruke en virtuell pakke for å knytte en generisk tjeneste til den (pakken «levere»-tjenesten). Den andre angir at en pakke fullstendig erstatter den andre, og at for dette formål kan den også tilfredsstille de avhengigheter som den andre ville tilfredsstille. Det er således mulig å opprette en erstatningspakke uten å måtte bruke samme pakkenavn .
				</para>
				 <sidebar> <title><emphasis>ORDFORRÅD</emphasis> Meta-pakke og virtuell pakke</title>
				 <indexterm>
					<primary>meta-pakke</primary>
				</indexterm>
				 <indexterm>
					<primary>pakke</primary>
					<secondary>virtuell pakke</secondary>
				</indexterm>
				 <indexterm>
					<primary>virtuell pakke</primary>
				</indexterm>
				 <para>
					Det er viktig å skille klart Meta-pakker fra virtuelle pakker. Den tidligere er ekte pakker (medregnet virkelige <filename>.deb</filename>-filer), hvis eneste formål er å vise avhengigheter.
				</para>
				 <para>
					Imidlertid eksisterer virtuelle pakker ikke fysisk, de er bare et hjelpemiddel til å identifisere virkelige pakker ut fra vanlige, logiske kriterier (tjeneste levert, kompatibilitet med et standard program, eller en tidligere installert pakke, etc.).
				</para>
				 </sidebar> <section>
					<title>Levere en «Tjeneste»</title>
					 <para>
						La oss diskutere det første tilfellet i større detalj med et eksempel: Alle e-posttjenere, for eksempel <emphasis role="pkg">postfix</emphasis> eller <emphasis role="pkg">sendmail</emphasis> sies å «levere» den virtuelle <emphasis role="pkg">mail-transport-agent</emphasis>-pakken. Derfor, alle pakker som trenger denne tjenesten for å være funksjonelle (f.eks en postliste manager, som for eksempel <emphasis role="pkg">smartlist</emphasis>, eller <emphasis role="pkg">sympa</emphasis>) oppgir bare i sine avhengigheter at det krever en <emphasis role="pkg">mail-transport-agent</emphasis> i stedet for å angi en stor, men fremdeles ufullstendig liste over mulige løsninger (f.eks <command>postfix | sendmail | exim4 | …</command>). Videre er det nytteløst å installere to posttjenere på samme maskin, noe som er grunnen til at begge disse pakkene viser en konflikt med den virtuelle pakken <emphasis role="pkg">mail-transport-agent</emphasis>. En konflikt mellom en pakke og den selv ignoreres av systemet, men denne teknikken vil hindre installasjon av to posttjenere ved siden av hverandre.
					</para>
					 <sidebar> <title><emphasis>DEBIAN POLICY</emphasis> Liste over virtuelle pakker</title>
					 <indexterm>
						<primary>pakke</primary>
						<secondary>virtuell pakke</secondary>
					</indexterm>
					 <para>
						For virtual packages to be useful, everyone must agree on their name. This is why they are standardized in the Debian Policy. The list includes among others <emphasis role="pkg">mail-transport-agent</emphasis> for mail servers, <emphasis role="pkg">c-compiler</emphasis> for C programming language compilers, <emphasis role="pkg">www-browser</emphasis> for web browsers, <emphasis role="pkg">httpd</emphasis> for web servers, <emphasis role="pkg">ftp-server</emphasis> for FTP servers, <emphasis role="pkg">x-terminal-emulator</emphasis> for terminal emulators in graphical mode (<command>xterm</command>), and <emphasis role="pkg">x-window-manager</emphasis> for window managers.
					</para>
					 <para>
						Hele listen kan finnes på nettet. <ulink type="block" url="http://www.debian.org/doc/packaging-manuals/virtual-package-names-list.txt" />
					</para>
					 </sidebar>
				</section>
				 <section>
					<title>Utbyttbarheten med en annen pakke</title>
					 <para>
						<literal>Levere</literal>-feltet er også interessant når innholdet av en pakke inngår i en større pakke. For eksempel, <emphasis role="pkg">libdigest-md5-perl</emphasis> Perl-modulen var en valgfri modul i Perl 5.6, og er integrert som standard i Perl 5.8 (og senere versjoner som 5.20 som ligger i <emphasis role="distribution">Jessie</emphasis>). Som sådan har pakken <emphasis role="pkg">perl</emphasis> siden versjon 5.8 formidlet <literal>Provides: libdigest-md5-perl</literal> slik at avhengighetene på denne pakken er imøtekommet dersom brukeren har Perl 5.8 (eller nyere). Selve <emphasis role="pkg">libdigest-md5-perl</emphasis>-pakken har eventulet blitt slettet, siden den ikke lenger har noe formål etter at gamle Perl-versjoner ble fjernet.
					</para>
					 <figure>
						<title>Bruk av et <literal>Levere</literal>-felt for å ikke bryte avhengigheter</title>
						 <mediaobject>
							<imageobject>
								<imagedata fileref="images/virtual-package.png" format="PNG" width="50%" />
							</imageobject>

						</mediaobject>

					</figure>
					 <para>
						Denne funksjonen er svært nyttig, siden det aldri er mulig å forutse tilfeldigheter i utviklingsarbeid, og det er nødvendig både å kunne gi foreldet programvare nye navn, og kunne utføre automatiske utskiftinger.
					</para>
					 <sidebar> <title><emphasis>TILBAKE TIL BASIS</emphasis> Perl, et programmeringsspråk</title>
					 <indexterm>
						<primary>Perl</primary>
					</indexterm>
					 <indexterm>
						<primary>CPAN</primary>
					</indexterm>
					 <para>
						Perl (Practical Extraction and Report Language) er et svært populært programmeringsspråk . Det har mange klare-til-bruk moduler som dekker et stort spekter av applikasjoner, og som distribueres av CPAN-tjenere (Comprehensive Perl Archive Network), et uttømmende nettverk av Perl-pakker. <ulink type="block" url="http://www.perl.org/" /> <ulink type="block" url="http://www.cpan.org/" />
					</para>
					 <para>
						Siden det er et tolket språk, kreves ikke et program skrevet i Perl-kompilering før kjpring. Det er derfor de kalles "Perl-skript".
					</para>
					 </sidebar>
				</section>
				 <section>
					<title>Tidligere begrensninger</title>
					 <para>
						Virtuelle pakker pleide å ha noen begrensninger, den mest betydningsfulle var mangelen på et versjonsnummer. For å gå tilbake til det forrige eksemplet, en avhengighet som <literal>Avhengig: libdigest-md5-perl (&gt;= 1.6)</literal>, ville, tross tilstedeværelsen av Perl 5.10, aldri bli betraktet som tilfredsstilt av pakkesystemet - mens den i virkeligheten mest sannsynlig er tilfredsstilt. Uvitende om dette, valgte pakkesystemet det minst risikable alternativet, ved å anta at versjonene ikke samsvarer.
					</para>
					 <para>
						Denne begrensningen er opphevet i <emphasis role="pkg">dpkg</emphasis> 1.17.11, og er ikke lenger relevant i Jessie. Pakker kan tildele en versjon til den virtuelle pakker de leverer, med en avhengighet som <literal>Levere: libdigest-md5-perl (= 1.8)</literal>.
					</para>

				</section>

			</section>
			 <section>
				<title>Erstatte filer: <literal>Erstatte</literal> felt</title>
				 <indexterm>
					<primary>erstatning</primary>
				</indexterm>
				 <indexterm>
					<primary><literal>Erstatte</literal>, topptekst</primary>
				</indexterm>
				 <indexterm>
					<primary>pakke</primary>
					<secondary>erstatning</secondary>
				</indexterm>
				 <para>
					<literal>Erstatter</literal>-feltet indikerer at pakken inneholder filer som også er tilstede i en annen pakke, men at pakken har lov til å erstatte dem. Uten denne spesifikasjonen, feiler <command>dpkg</command> og sier at den ikke kan overskrive filene i en annen pakke (teknisk er det mulig å tvinge den til å gjøre det med <literal>--tvinge-overskriving</literal>-valget, men som ikke regnes som en standard operasjon). Dette gjør det mulig å identifisere potensielle problemer, og krever at vedlikeholderen ser på saken før man velger om man legger inn et slikt felt.
				</para>
				 <para>
					Bruken av dette felt er berettiget når pakkenavn endres, eller når en pakke er inkludert i en annen. Dette skjer også når vedlikeholderen bestemmer seg for å distribuere filer ulikt mellom forskjellige binære pakker produsert fra samme kildepakke: Når en erstattet fil ikke lenger tilhører den gamle pakken, men bare til den nye.
				</para>
				 <para>
					Hvis alle filene i en installert pakke er blitt erstattet, er pakken klar til å bli fjernet. Endelig, dette feltet oppmuntrer også <command>dpkg</command> til å fjerne den erstattede pakken der det er en konflikt.
				</para>
				 <sidebar id="sidebar.debtags"> <title><emphasis>GOING FURTHER</emphasis> The <literal>Tag</literal> field</title>
				 <para>
					In the <emphasis role="pkg">apt</emphasis> example above, we can see the presence of a field that we have not yet described, the <literal>Tag</literal> field. This field does not describe a relationship between packages, but is simply a way of categorizing a package in a thematic taxonomy. This classification of packages according to several criteria (type of interface, programming language, domain of application, etc.) has been available for a long time. Despite this, not all packages have accurate tags and it is not yet integrated in all Debian tools; <command>aptitude</command> displays these tags, and allows them to be used as search criteria. For those who are repelled by <command>aptitude</command>'s search criteria, the following website allows navigation of the tag database: <ulink type="block" url="http://debtags.alioth.debian.org/" />
				</para>
				 </sidebar>
			</section>

		</section>
		 <section id="sect.configuration-scripts">
			<title>Konfigurasjonsskript</title>
			 <indexterm>
				<primary><filename>postinst</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>preinst</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>postrm</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>prerm</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>control.tar.gz</filename></primary>
			</indexterm>
			 <para>
				I tillegg til <filename>kontroll</filename>-filen, kan <filename>control.tar.gz</filename>-katalogen for hver Debian-pakke inneholde et antall skripter, hentet av <command>dpkg</command> på ulike stadier i behandlingen av en pakke. Debian Policy beskriver de mulige tilfellene i detalj, og spesifiserer de skript det bes om, og de argumentene de mottar. Disse sekvensene kan være kompliserte, fordi dersom et av skriptene svikter, vil <command>dpkg</command> prøve å gå tilbake til en tilfredsstillende tilstand ved å avslutte installasjonen, eller fjerne dem underveis (i den grad det er mulig).
			</para>
			 <sidebar> <title><emphasis>GÅR VIDERE</emphasis> <command>dpkg</command>'s database</title>
			 <indexterm>
				<primary><filename>/var/lib/dpkg/</filename></primary>
			</indexterm>
			 <indexterm>
				<primary>dpkg</primary>
				<secondary>database</secondary>
			</indexterm>
			 <para>
				Alle konfigurasjonsskript for installerte pakker blir lagret i <filename>/var/lib/dpkg/info/</filename>-mappen i form av en fil med pakkenavnet lagt inn på forhånd. Denne katalogen inneholder også en fil med <filename>.list</filename>-utvidelse for hver pakke, med en liste med filer som hører til den pakken.
			</para>
			 <para>
				<filename>/var/lib/dpkg/status</filename>-filen inneholder en serie datablokker (med formatet til de berømte posthodene, RFC 2822) som beskriver status for hver pakke. Informasjonen fra <filename>kontroll</filename>-filen med de installerte pakkene er også gjentatt der.
			</para>
			 </sidebar> <para>
				Generelt er <filename>preinst</filename>-skriptet utført før installasjonen av pakken, mens <filename>postinst</filename> følger etter. På samme måte er <filename>prerm</filename> aktivert før en pakke fjernes og <filename>postrm</filename> etterpå. Oppdatering av en pakke tilsvarer å fjerne den tidligere versjonen og installasjon av den nye. Det er ikke mulig å beskrive i detalj alle mulige scenarier her, men vi vil diskutere den to vanligste to: En installasjon/oppdatering, og en fjerning.
			</para>
			 <sidebar> <title><emphasis>FORSIKTIG</emphasis> Symbolske skript-navn</title>
			 <para>
				Sekvensene beskrevet i denne seksjonen omtaler konfigurasjonsskript med spesifikke navn, for eksempel <command>gammel-prerm</command>, eller <command>ny-postinst</command>. De er, respektivt, <command>prerm</command>-skripter fra den gamle pakkeversjonen (installert før oppdateringen), og <command>postinst</command>-skriptet fra den nye versjonen (installert i og med oppdateringen).
			</para>
			 </sidebar> <sidebar> <title><emphasis>TIP</emphasis> Statusdiagrammer</title>
			 <para>
				Manoj Srivastava laget disse diagrammene som forklarer hvordan konfigurasjonsskripter benevnes av <command>dpkg</command>. Lignende diagrammer er også utviklet av Debian Women-prosjektet; De er litt enklere å forstå, men mindre fullstendige. <ulink type="block" url="https://people.debian.org/~srivasta/MaintainerScripts.html" /> <ulink type="block" url="https://wiki.debian.org/MaintainerScripts" />
			</para>
			 </sidebar> <section>
				<title>Installasjon og oppgradering</title>
				 <indexterm>
					<primary><command>dpkg</command></primary>
					<secondary>intern drift</secondary>
				</indexterm>
				 <para>
					Her er hva som skjer under en installasjon (eller en oppdatering):
				</para>
				 <orderedlist>
					<listitem>
						<para>
							For an update, <command>dpkg</command> calls the <command>old-prerm upgrade <replaceable>new-version</replaceable></command>.
						</para>

					</listitem>
					 <listitem>
						<para>
							Fremdeles for en oppdatering, <command>dpkg</command> utfører så <command>new-preinst upgrade <replaceable>old-version</replaceable></command>. Som en første installasjon igangsetter den <command>new-preinst install</command>. Den kan legge til den gamle versjonen i den siste parameteren, hvis pakken allerede er installert og deretter frakoblet (men ikke fjernet, konfigurasjonsfilene er bevart).
						</para>

					</listitem>
					 <listitem>
						<para>
							De nye pakkefiler er så pakket ut. Hvis en fil allerede finnes, blir den erstattet, men en sikkerhetskopi lages midlertidig.
						</para>

					</listitem>
					 <listitem>
						<para>
							For en oppdatering, utfører <command>dpkg</command> <command>old-postrm upgrade <replaceable>new-version</replaceable></command>.
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>dpkg</command> oppdaterer alle interne data (filliste, konfigurasjonsskript, etc.) og fjerner sikkerhetskopier av de erstattede filene. Det er det ingen vei tilbake:<command>dpkg</command> har ikke lenger tilgang til alle de elementer som er nødvendige for å gå tilbake til slik det var før.
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>dpkg</command> vil oppdatere konfigurasjonsfilene, be brukeren om å avgjøre om den ikke kan håndtere denne oppgaven automatisk. Detaljene ved denne fremgangsmåten er omtalt i <xref linkend="sect.conffiles" />.
						</para>

					</listitem>
					 <listitem>
						<para>
							Tilslutt, <command>dpkg</command> konfigurerer pakken ved å utføre <command>new-postinst configure <replaceable>last-version-configured</replaceable></command>.
						</para>

					</listitem>

				</orderedlist>

			</section>
			 <section>
				<title>Fjerning av pakke</title>
				 <para>
					Her er det som skjer når en pakke fjernes:
				</para>
				 <orderedlist>
					<listitem>
						<para>
							<command>dpkg</command> calls <command>prerm remove</command>.
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>dpkg</command> fjerner alle filer i pakken, med unntak av konfigurasjonsfiler og konfigurasjonsskript.
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>dpkg</command> executes <command>postrm remove</command>. Alle konfigurasjonsskiftene, unntatt <filename>postrm</filename>, er fjernet. Hvis brukeren ikke har brukt «purge»-alternativet (rydde-opp-i-alternativet), stopper prosessen her.
						</para>

					</listitem>
					 <listitem>
						<para>
							For en fullstendig fjerning av pakken (kommandoen gitt med <command>dpkg --purge</command> eller <command>dpkg -P</command>), er konfigurasjonsfilene også slettet, så vel som et bestemt antall kopier (<filename>*.dpkg-tmp</filename>, <filename>*.dpkg-old</filename>, <filename>*.dpkg-new</filename>) og midlertidige filer; <command>dpkg</command> så utfører <command>postrm purge</command>.
						</para>

					</listitem>

				</orderedlist>
				 <sidebar> <title><emphasis>ORDFORRÅD</emphasis> Opprydding, en komplett fjerning</title>
				 <indexterm>
					<primary>rydde opp i en pakke</primary>
				</indexterm>
				 <para>
					Når en Debian-pakke er fjernet, blir konfigurasjonsfilene beholdt for å tilrettelegge for eventuell re-installasjon. På samme måte, blir data generert av en nisse vanligvis beholdt (for eksempel innholdet i en LDAP-tjenerkatalog, eller innholdet i en database for en SQL-tjener).
				</para>
				 <para>
					To remove all data associated with a package, it is necessary to “purge” the package with the command, <command>dpkg -P <replaceable>package</replaceable></command>, <command>apt-get remove --purge <replaceable>package</replaceable></command> or <command>aptitude purge <replaceable>package</replaceable></command>.
				</para>
				 <para>
					Gitt den endelige virkningen av slik fjerning av data, bør en ikke ta lett på oppryddingen.
				</para>
				 </sidebar> <indexterm>
					<primary><filename>config</filename>, <command>debconf</command> script</primary>
				</indexterm>
				 <para>
					De fire skriptene detaljert ovenfor er supplert med et <filename>config</filename> skript, fra pakker som bruker <command>debconf</command> for å få brukerinformasjon til konfigurering. Under installasjonen, definerer dette skriptet i detalj de spørsmålene som stilles fra <command>debconf</command>. Svarene registreres i <command>debconf</command>-databasen for fremtidig henvisning. Skriptet er generelt utført av <command>apt</command> før pakkene installeres én etter én, for å gruppere alle spørsmålene og stille dem til brukeren når prosessen begynner. Før- og etter-installasjonsskripter kan deretter bruke denne informasjonen til å operere etter brukerens ønsker.
				</para>
				 <sidebar> <title><emphasis>VERKTØY</emphasis> <command>debconf</command></title>
				 <indexterm>
					<primary><command>debconf</command></primary>
				</indexterm>
				 <para>
					<command>debconf</command> ble opprettet for å løse et tilbakevendende problem i Debian. Alle Debian-pakker som ikke virket uten et minimum av konfigurasjon, brukte å stille spørsmål med kontakt til <command>echo</command> og <command>read</command> kommandoer i <filename>postinst</filename>-skallskripter (og andre tilsvarende skripter). Men dette betyr også at, under en stor installasjon eller oppdatering må brukeren være ved sin datamaskin for å svare på ulike spørsmål som når som helst kan komme. Disse manuelle inngrep er nå nesten helt avviklet, takket være <command>debconf</command>-verktøyet.
				</para>
				 <para>
					<command>debconf</command> har mange interessante funksjoner. Den krever at utvikleren spesifiserer brukermedvirkning; den tillater lokalisering av alle strengene som vises til brukere (alle oversettelser blir lagret i <filename>templates</filename>-filen som beskriver medvirkningen); den har forskjellige grensesnitt for å vise spørsmålene til brukeren (tekstmodus, grafisk modus, ikke-interaktiv), og den tillater opprettelsen av en sentral database med svar for å dele samme konfigurasjon med flere datamaskiner ... men det viktigste er at det nå er mulig å presentere alle spørsmålene i en rekke for brukeren, før du starter en lang installasjons- eller oppdateringsprosess. Brukeren kan fortsette med sin virksomhet, mens systemet tar seg av installasjon på egen hånd, uten å måtte være der og stirre på skjermen og vente på spørsmål.
				</para>
				 </sidebar>
			</section>

		</section>
		 <section id="sect.conffiles">
			<title>Checksums, Liste med konfiguasjonsfiler</title>
			 <indexterm>
				<primary><filename>md5sums</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>conffiles</filename></primary>
			</indexterm>
			 <indexterm>
				<primary>kontrollsummer (checksums)</primary>
			</indexterm>
			 <indexterm>
				<primary>filer</primary>
				<secondary>konfigurasjonsfiler</secondary>
			</indexterm>
			 <indexterm>
				<primary>konfigurasjon</primary>
				<secondary>filer</secondary>
			</indexterm>
			 <para>
				I tillegg til vedlikeholderens skript og styringsdata som allerede er nevnt i forrige avsnitt, <filename>control.tar.gz</filename>-katalogen, kan Debian-pakken inneholde andre interessante filer. Den første, <filename>md5sums</filename>, inneholder MD5 checksums (kontrollsummer) for alle pakkens filer. Dens største fordel er at den tillater <command>dpkg --verify</command> (som vi vil se nærmere på i <xref linkend="sect.dpkg-verify" />) for å sjekke om disse filene har blitt endret etter installasjonen. Legg merke til at når denne filen ikke eksisterer, vil <command>dpkg</command> generere den dynamisk ved installasjonstidspunktet (og lagre den i dpkgs database akkurat som andre kontrollfiler).
			</para>
			 <para>
				<filename>conffiles</filename> lister pakkefiler som må behandles som konfigurasjonsfiler. Konfigurasjonsfiler kan endres av administrator, og <command>dpkg</command> vil forsøke å ta vare på disse forandringene under pakkeoppdateringen.
			</para>
			 <para>
				I praksis, i denne situasjonen, oppfører <command>dpkg</command> seg så intelligent som mulig: Hvis ikke den standard konfigurasjonsfilen har endret seg mellom de to versjonene, gjør det ingenting. Hvis, derimot, filen er endret, vil den prøve å oppdatere denne filen. To tilfeller er mulig; enten at administrator ikke har rørt denne konfigurasjonsfilen, og i så fall installerer <command>dpkg</command> automatisk den nye versjonen, eller, filen er endret. I så tilfelle spør <command>dpkg</command> administratoren om hvilken versjon de ønsker å bruke (den gamle med modifikasjoner, eller den nye som følger med pakken). For å bistå i denne beslutningen tilbyr <command>dpkg</command> å vise en “<command>diff</command>” som viser forskjellen mellom de to versjonene. Hvis brukeren velger å beholde den gamle versjonen, vil den nye lagres på samme sted i en fil med <filename>.dpkg-dist</filename>-ending. Hvis brukeren velger den nye versjonen, blir den gamle beholdt i en fil med <filename>.dpkg-old</filename>-endingen. En annen tilgjengelig handling er å straks avbryte <command>dpkg</command> for å redigere filen og forsøke å sette inn igjen de relevante endringene (tidligere identifisert med <command>diff</command>).
			</para>
			 <sidebar id="sidebar.questions-conffiles"> <title><emphasis>GÅR VIDERE</emphasis> Å unngå å konfiguere filspørsmålene</title>
			 <para>
				<command>dpkg</command> håndterer konfigurasjonsfiloppdateringer, men, mens det gjøres, avbrytes arbeidet regelmessig for å få innspill fra administrator. Dette gjør det mindre enn hyggelig for dem som ønsker å kjøre oppdateringer ikke-interaktivt. Dette er grunnen til at dette programmet tilbyr alternativer som gjør at systemet til å respondere automatisk etter samme logikk: <command>--force-confold</command> beholder den gamle versjonen av filen; <command>--force-confnew</command> vil bruke den nye versjonen av filen (disse valgene blir respektert, selv om filen ikke har blitt endret av administratoren, som bare sjelden har den ønskede effekten). Å legge til <command>--force-confdef</command>-valget ber <command>dpkg</command> å bestemme selv når det er mulig (med andre ord, når den opprinnelige konfigurasjonsfilen ikke har blitt berørt), og bruker bare <command>--force-confnew</command> eller <command>--force-confold</command> i andre tilfeller.
			</para>
			 <para>
				Disse valgene gjelder <command>dpkg</command>, men mesteparten av tiden vil administrator arbeide direkte med <command>aptitude</command>, eller <command>apt-get</command>-programmene. Det er derfor nødvendig å vite at syntaksen brukes til å indikere valgene som skal sendes videre til <command>dpkg</command>-kommandoen (kommandogrensesnittene deres er svært like).
			</para>
			 
<screen>
<computeroutput># </computeroutput><userinput>apt -o DPkg::options::="--force-confdef" -o DPkg::options::="--force-confold" full-upgrade</userinput></screen>
			 <para>
				Disse valgene kan lagres direkte i <command>apt</command>s konfigurasjon. For å gjøre det, skriv ganske enkelt den følgende linjen i <filename>/etc/apt/apt.conf.d/local</filename>-filen:
			</para>
			 <informalexample> 
<programlisting>
DPkg::options { "--force-confdef"; "--force-confold"; }</programlisting>
			 </informalexample> <para>
				Å legge inn dette valget i konfigurasjonsfilen, betyr at det også vil bli brukt i det grafiske brukergrensesnittet, slik som <command>aptitude</command>.
			</para>
			 </sidebar> <sidebar id="sidebar.questions-conffiles-bis"> <title><emphasis>GÅR VIDERE</emphasis> Presse dpkg til å stille spørsmål om konfigureringsfil</title>
			 <para>
				<command>--force-confask</command>-valget krever at <command>dpkg</command> viser spørsmålene om konfigurasjonsfilene, selv i tilfeller hvor det normalt ikke ville være nødvendig. Så når du installerer en pakke med dette alternativet, vil <command>dpkg</command> stille spørsmålene på nytt for alle konfigurasjonsfiler som administrator har endret. Dette er veldig praktisk, spesielt for å installere den opprinnelige konfigurasjonsfilen hvis den har blitt slettet, og ingen annen kopi er tilgjengelig: En normal re-installasjon vil ikke fungere, fordi <command>dpkg</command> ser fjerning som en form for legitim endring, og dermed ikke installerer den filen du ønsker.
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.source-package-structure">
		<title>Kildepakkens struktur</title>
		 <indexterm>
			<primary>pakke</primary>
			<secondary>kildepakke</secondary>
		</indexterm>
		 <indexterm>
			<primary>kilde</primary>
			<secondary>pakke</secondary>
		</indexterm>
		 <section>
			<title>Format</title>
			 <indexterm>
				<primary>DSC-fil</primary>
			</indexterm>
			 <indexterm>
				<primary><filename>diff.gz</filename>-fil</primary>
			</indexterm>
			 <indexterm>
				<primary><filename>debian.tar.gz</filename>-fil</primary>
			</indexterm>
			 <indexterm>
				<primary><filename>orig.tar.gz</filename>-fil</primary>
			</indexterm>
			 <para>
				En kildepakke består vanligvis av tre filer: En <filename>.dsc</filename>, en <filename>.orig.tar.gz</filename>, og en <filename>.debian.tar.gz</filename> (eller <filename>.diff.gz</filename>). De tillater at det lages binære pakker (<filename>.deb</filename> filer beskrevet ovenfor) fra programmets kildekodefiler skrevet i et programmeringsspråk.
			</para>
			 <para>
				<filename>.dsc</filename> (Debian Source Control)-filen er en tekstfil som inneholder et RFC 2822 filhode (lik <filename>control</filename>-filen gjennomgått i <xref linkend="sect.control" />) som beskriver kildepakken og angir hvilke andre filer som inngår. Det er signert av sin vedlikeholder, som garanterer for ektheten. Se <xref linkend="sect.package-authentication" /> for flere detaljer om dette temaet.
			</para>
			 <example>
				<title>En <filename>.dsc</filename>-fil</title>
				 
<programlisting>
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Format: 3.0 (quilt)
Source: zim
Binary: zim
Architecture: all
Version: 0.62-3
Maintainer: Emfox Zhou &lt;emfox@debian.org&gt;
Uploaders: Raphaël Hertzog &lt;hertzog@debian.org&gt;
Homepage: http://zim-wiki.org
Standards-Version: 3.9.6
Vcs-Browser: http://anonscm.debian.org/gitweb/?p=collab-maint/zim.git
Vcs-Git: git://anonscm.debian.org/collab-maint/zim.git
Build-Depends: debhelper (&gt;= 9), xdg-utils, python (&gt;= 2.6.6-3~), libgtk2.0-0 (&gt;= 2.6), python-gtk2, python-xdg
Package-List:
 zim deb x11 optional arch=all
Checksums-Sha1:
 ad8de170826682323c10195b65b9f1243fd75637 1772246 zim_0.62.orig.tar.gz
 a4f70d6f7fb404022c9cc4870a4e62ea3ca08388 14768 zim_0.62-3.debian.tar.xz
Checksums-Sha256:
 19d62aebd2c1a92d84d80720c6c1dcdb779c39a2120468fed01b7f252511bdc2 1772246 zim_0.62.orig.tar.gz
 fc2e827e83897d5e33f152f124802c46c3c01c5158b75a8275a27833f1f6f1de 14768 zim_0.62-3.debian.tar.xz
Files:
 43419efba07f7086168442e3d698287a 1772246 zim_0.62.orig.tar.gz
 725a69663a6c2961f07673ae541298e4 14768 zim_0.62-3.debian.tar.xz

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2
Comment: Signed by Raphael Hertzog

iQEcBAEBCAAGBQJUR2jqAAoJEAOIHavrwpq5WFcH/RsdzCHc1oXXxHitU23hEqMj
T6ok29M1UFDJDowMXW75jQ1nT4WPUtvEGygkCHeoO/PvjEvB0sjU8GQlX+N9ddSB
aHfqfAYmVhADNGxrXQT5inZXUa8qGeeq2Sqf6YcWtsnuD56lDbvxkyf/XYopoIEl
oltfl05z/AI+vYsW482YrCz0fxNAKAvkyuPhDebYI8jnKWeAANoqmKpsNc/HYyvT
+ZiA5o57OiGdOKT6XGy3/FiF3dkHiRY8lXW7xdr1BbIgulwl9UmiUNwuxwOYbQO7
edtjiTJqOaFUA0x1zB/XGv5tHr1MjP8naT+kfVoVHTOox51CDbeu5D3DZY4imcY=
=Wtoa
-----END PGP SIGNATURE-----</programlisting>

			</example>
			 <indexterm>
				<primary><literal>Build-Depends</literal>, topptekst</primary>
			</indexterm>
			 <para>
				Merk at kildepakken også har avhengigheter (<literal>Build-Depends</literal>) helt forskjellige fra de binære pakkenes, fordi de indikerer verktøy som kreves til å kompilere den programvaren det gjelder og lager binærpakken dens.
			</para>
			 <sidebar> <title><emphasis>FORSIKTIG</emphasis> Tydelige navnerom</title>
			 <para>
				Her er det viktig å merke seg at det ikke kreves samsvar mellom navnet til kildepakken og på den binære pakken(e) som den genererer. Det er lett nok å forstå hvis du vet at hver kildepakke kan generere flere binære pakker. Dette er grunnen til at <filename>.dsc</filename>-filen har <literal>Source</literal> og <literal>Binary</literal>-feltene til eksplisitt å navngi kildepakken og lagre listen med binærpakkene som den genererer.
			</para>
			 </sidebar> <sidebar> <title><emphasis>KULTUR</emphasis> Hvorfor dele opp i flere pakker</title>
			 <para>
				Ganske ofte, kan en kildepakke (for en gitt programvare) generere flere binære pakker. Oppsplittingen er begrunnet i muligheten til å bruke (deler av) programvaren i ulike sammenhenger. Betraktet som et delt bibliotek, kan den være installert for å få et program til å virke (for eksempel, <emphasis role="pkg">libc6</emphasis>), eller den kan installeres for å lage et nytt program (<emphasis role="pkg">libc6-dev</emphasis> vil da være den riktige pakken). Vi finner den samme logikken for klient/server-tjenester der vi ønsker å installere serverdelen på en maskin og klientdelen på andre (dette er tilfelle, for eksempel for <emphasis role="pkg">openssh-server</emphasis> og <emphasis role="pkg">openssh-client</emphasis>).
			</para>
			 <para>
				Like ofte, når dokumentasjonen er levert i en egen pakke: kan brukeren installere den uavhengig av programvare, og kan når som helst velge å fjerne den for å spare lagringsplass. I tillegg sparer dette også plass på Debian-speilene, ettersom dokumentasjonspakken deles mellom alle arkitekturer (i stedet for å ha dokumentasjonen duplisert i pakkene for hver enkelt arkitektur).
			</para>
			 </sidebar> <sidebar> <title><emphasis>PERSPEKTIV</emphasis> Ulike kilde-pakkeformater</title>
			 <para>
				Orginalt var det bare ett kildepakkeformat. Det er <literal>1.0</literal>-formatet, som knytter et <filename>.orig.tar.gz</filename>-arkiv til et <filename>.diff.gz</filename>-«debianiserings»-skript (det er også en variant, som består av et enkelt <filename>.tar.gz</filename>-arkiv, som brukes automatisk hvis ikke <filename>.orig.tar.gz</filename> er tilgjengelig).
			</para>
			 <para>
				Etter Debian <emphasis role="distribution">Squeeze</emphasis>, har Debian-utviklere mulighet til å bruke nye formater som korrigerer for mange problemer i det gamle formatet. Formatet <literal>3.0 (quilt)</literal> kan kombinere ulike oppstrøms arkiver i den samme kildepakken: I tillegg til det vanlige <filename>.orig.tar.gz</filename>, kan i tillegg <filename>.orig-<replaceable>kommponent</replaceable>.tar.gz</filename>-katalogene bli inkludert. Dette er nyttig med programvare som er fordelt på flere oppstrøms komponenter, men hvor en enkelt kildepakke er ønskelig. Disse arkivene kan også komprimeres med <command>bzip2</command>, eller <command>xz</command> heller enn <command>gzip</command>, som sparer lagringsplass og nettverksressurser. Til slutt, det enhetlige skriptet,<filename>.diff.gz</filename> er erstattet av en <filename>.debian.tar.gz</filename>-katalog med kompileringsinstruksjonene, og et sett oppstrømsskript som pakkevedlikeholderen har bidratt med. Disse siste er lagt inn i et format som er kompatibelt med <command>quilt</command> - et verktøy som forenkler håndteringen av en rekke oppgraderingsskripter.
			</para>
			 </sidebar> <para>
				<filename>.orig.tar.gz</filename>-filen er et arkiv som inneholder kildekoden som er stilt til disposisjon av den opprinnelige utvikleren. Debian blir bedt om å ikke endre dette arkivet for å være i stand til enkelt å sjekke opprinnelsen og integriteten til filen (ved enkel sammenligning med en kontrollsum), og å respektere ønskene til noen forfattere.
			</para>
			 <para>
				<filename>.debian.tar.gz</filename> inneholder alle endringene laget av Debians vedlikeholder, spesielt tillegget med en <filename>debian</filename>-mappe med instruksjoner til å få konstruert en Debian-pakke.
			</para>
			 <sidebar> <title><emphasis>VERKTØY</emphasis> Å pakke ut en kildepakke</title>
			 <indexterm>
				<primary><command>dpkg-source</command></primary>
			</indexterm>
			 <indexterm>
				<primary>dekomprimering, kildepakke</primary>
			</indexterm>
			 <indexterm>
				<primary>pakke ut, kildepakke</primary>
			</indexterm>
			 <indexterm>
				<primary>pakke ut</primary>
				<secondary>kildepakke</secondary>
			</indexterm>
			 <para>
				Hvis du har en kildepakke, kan du bruke <command>dpkg-source</command>-kommandoen (fra <emphasis role="pkg">dpkg-dev</emphasis>-pakken) for å pakke den ut:
			</para>
			 
<screen><computeroutput>$ </computeroutput><userinput>dpkg-source -x package_0.7-1.dsc</userinput></screen>
			 <para>
				Du kan også bruke <command>apt-get</command> for å laste ned en kildepakke og pakke den opp med en gang. Det krever at de passende <literal>deb-src</literal>-linjer er til stede i <filename>/etc/apt/sources.list</filename>-filen, (for flere detaljer se gjerne <xref linkend="sect.apt-sources.list" />). Disse brukes til å liste «kildene» til kildepakkene (til servere der en gruppe kildepakker ligger).
			</para>
			 
<screen><computeroutput>$ </computeroutput><userinput>apt-get source <replaceable>package</replaceable></userinput></screen>
			 </sidebar>
		</section>
		 <section>
			<title>Bruk i Debian</title>
			 <para>
				Kildepakken er grunnlaget for alt i Debian. Alle Debian-pakkene kommer fra en kildepakke, og hver endring i en Debian-pakke er konsekvensen av en modifikasjon i kildepakken. Når Debians vedlikeholdere arbeider med kildepakken, er de vel vitende om konsekvensene av handlingene for de binære pakkene. Resultatet av arbeidet deres gjenfinnes derfor i kildepakkene fra Debian. Du kan enkelt gå tilbake til dem, og alt stammer derfra.
			</para>
			 <para>
				Når en ny versjon av en pakke (kildepakke og en eller flere binære pakker) kommer til en Debian-tjener, er kildepakken det viktigste. Faktisk vil den da bli brukt av et nettverk av maskiner med forskjellige kompileringsarkitekturer som Debian støtter. Det faktum at utvikleren også sender en eller flere binære pakker for en gitt arkitektur (vanligvis i386 eller AMD64) er relativt uviktig, siden disse like godt kunne ha blitt automatisk generert.
			</para>

		</section>

	</section>
	 <section id="sect.manipulating-packages-with-dpkg">
		<title>Behandle pakker med <command>dpkg</command></title>
		 <indexterm>
			<primary><command>dpkg</command></primary>
		</indexterm>
		 <para>
			<command>dpkg</command> er basiskommandoen for å behandle Debian-pakker for systemet. Hvis du har <filename>.deb</filename>-pakker, er det <command>dpkg</command> som tillater installasjon eller analyse av innholdet deres. Men dette programmet har bare en delvis oversikt over Debian-universet. Det vet hva som er installert på systemet, og hva det er gitt på kommandolinjen, men vet ingenting om andre tilgjengelige pakker. Den vil mislykkes hvis en avhengighet ikke er oppfylt. Verktøy som <command>apt</command>, vil tvert imot lage en liste over avhengigheter for å kunne installere alt så automatisk som mulig.
		</para>
		 <sidebar> <title><emphasis>NOTE</emphasis> <command>dpkg</command> eller <command>apt</command>?</title>
		 <para>
			<command>dpkg</command> skal sees som et systemverktøy (bakstykke), og <command>apt</command> som et verktøy nærmere brukeren, som overvinner begrensningene av det første. Disse verktøyene fungerer sammen, hver med sine særegenheter, egnet til spesifikke oppgaver.
		</para>
		 </sidebar> <section>
			<title>Å installere pakker</title>
			 <indexterm>
				<primary>installasjon</primary>
				<secondary>pakkeinstallasjon</secondary>
			</indexterm>
			 <indexterm>
				<primary>pakke</primary>
				<secondary>installasjon</secondary>
			</indexterm>
			 <para>
				<command>dpkg</command> er, fremfor alt, verktøy for å installere en allerede tilgjengelig Debian-pakke (fordi den ikke laster ned noe). For å gjøre det velger vi <literal>-i</literal> eller <literal>--install</literal> alternativet.
			</para>
			 <example>
				<title>Installasjon av en pakke med <command>dpkg</command></title>
				 
<screen role="scale">
<computeroutput># </computeroutput><userinput>dpkg -i man-db_2.7.0.2-5_amd64.deb</userinput>
<computeroutput>(Reading database ... 86425 files and directories currently installed.)
Preparing to unpack man-db_2.7.0.2-5_amd64.deb ...
Unpacking man-db (2.7.0.2-5) over (2.7.0.2-4) ...
Setting up man-db (2.7.0.2-5) ...
Updating database of manual pages ...
Processing triggers for mime-support (3.58) ...</computeroutput></screen>

			</example>
			 <para>
				Vi kan se de ulike trinnene som utføres av <command>dpkg</command>; vi vet derfor på hvilket punkt det kan ha oppstått noen feil. Installasjonen kan også påvirkes i to trinn; først utpakkingen, så konfigurasjonen.<command>apt-get</command> bruker fordelen med dette, noe som begrenser antall kontakter til <command>dpkg</command> (siden hver kontakt er kostbar på grunn av innlasting av databasen i minnet, spesielt listen over allerede installerte filer).
			</para>
			 <example>
				<title>Separat utpakking og konfigurering</title>
				 
<screen role="scale">
<computeroutput># </computeroutput><userinput>dpkg --unpack man-db_2.7.0.2-5_amd64.deb</userinput>
<computeroutput>(Reading database ... 86425 files and directories currently installed.)
Preparing to unpack man-db_2.7.0.2-5_amd64.deb ...
Unpacking man-db (2.7.0.2-5) over (2.7.0.2-5) ...
Processing triggers for mime-support (3.58) ...
# </computeroutput><userinput>dpkg --configure man-db</userinput>
<computeroutput>Setting up man-db (2.7.0.2-5) ...
Updating database of manual pages ...
</computeroutput></screen>

			</example>
			 <indexterm>
				<primary>pakke</primary>
				<secondary>utpakking</secondary>
			</indexterm>
			 <indexterm>
				<primary>utpakking</primary>
				<secondary>binærpakke</secondary>
			</indexterm>
			 <para>
				Noen ganger vil <command>dpkg</command> mislykkes med å installere en pakke, og melde om feil: Hvis brukeren beordrer den til å overse dette, vil den bare sende en advarsel. Det er derfor vi har de ulike <literal>--force-*</literal> valgmulighetene. <command>dpkg --force-help</command>-kommandoen, eller dokumentasjon for denne kommandoen, vil gi en fullstendig liste over disse alternativene. Den hyppigste feilen, som du er nødt til å treffe på før eller senere, er en filkollisjon. Når en pakke inneholder en fil som allerede er installert av en annen pakke, vil <command>dpkg</command>-kommandoen avslå å installere den. Da vil det følgende budskapet vises:
			</para>
			 
<screen>
<computeroutput>Unpacking libgdm (from .../libgdm_3.8.3-2_amd64.deb) ...
dpkg: error processing /var/cache/apt/archives/libgdm_3.8.3-2_amd64.deb (--unpack):
 trying to overwrite '/usr/bin/gdmflexiserver', which is also in package gdm3 3.4.1-9</computeroutput></screen>
			 <para>
				I dette tilfellet, hvis du tror at å erstatte denne filen er ikke en betydelig risiko for stabiliteten i systemet (som vanligvis er tilfelle), kan du bruke alternativet <literal>--force-overwrite</literal>, som ber <command>dpkg</command> om å ignorere denne feilen og overskive filen.
			</para>
			 <para>
				Mens det er mange tilgjengelige <literal>--force-*</literal> valgmuligheter, er det sannsynlig at bare <literal>--force-overwrite</literal> vil bli brukt jevnlig. Disse valgmulighetene er bare laget for helt spesielle situasjoner, og det er bedre å la dem være i fred så mye som mulig for å respektere reglene som pakkemekanismen pålegger. Ikke glem, disse reglene sikrer konsistens og stabilitet i ditt system.
			</para>
			 <sidebar> <title><emphasis>FORSIKTIG</emphasis> Effektiv bruk av <literal>--force-*</literal></title>
			 <indexterm>
				<primary>brutt avhengighet</primary>
			</indexterm>
			 <para>
				Hvis du ikke er forsiktig, kan bruken av valget <literal>--force-*</literal> føre til et system hvor APT-familien av kommandoer vil avslå å virke. Faktisk vil noen av disse alternativene tillate installasjon av en pakke selv om en avhengighet ikke er oppfylt, eller når det er en konflikt. Resultatet er et inkonsekvent system sett fra et avhengighetssynspunkt, og APT-kommandoer vil nekte å utføre handlinger, med unntak av de som vil bringe systemet tilbake til en konsistent tilstand (dette består ofte av å installere den manglende avhengighet, eller fjerne en problematisk pakke). Dette resulterer ofte i en melding som dette, som kom etter installasjon av en ny versjon av <emphasis role="pkg">rdesktop</emphasis>, samtidig som den ser bort fra dennes avhengigheten i en nyere versjon av <emphasis role="pkg">libc6</emphasis>:
			</para>
			 
<screen><computeroutput># </computeroutput><userinput>apt full-upgrade
</userinput><computeroutput>[...]
You might want to run 'apt-get -f install' to correct these.
The following packages have unmet dependencies:
  rdesktop: Depends: libc6 (&gt;= 2.5) but 2.3.6.ds1-13etch7 is installed
E: Unmet dependencies. Try using -f.</computeroutput></screen>
			 <para>
				En modig administrator, som er sikker på at sine analyser er riktig, kan velge å ignorere en avhengighet eller konflikt, og bruker den tilsvarende <literal>--force-*</literal> valgmuligheten. I dette tilfellet, hvis de ønsker å kunne forutsette å bruke <command>apt</command>, eller <command>aptitude</command>, må de redigere <filename>/var/lib/dpkg/status</filename> for å slette/endre avhengigheten, eller konflikten, som de valgte å overstyre.
			</para>
			 <para>
				Denne manipulasjon er en stygg rettelse, og bør aldri brukes, unntatt når det absolutt kreves. Ganske ofte er en mer passende løsning å rekompilere pakken som forårsaker problemet (se <xref linkend="sect.rebuilding-package" />), eller bruk en ny versjon (som muligens er rettet) fra et kodelager som <literal>stable-backports</literal> (se <xref linkend="sect.backports" />).
			</para>
			 </sidebar>
		</section>
		 <section>
			<title>Fjerning av pakke</title>
			 <indexterm>
				<primary>fjerning av en pakke</primary>
			</indexterm>
			 <indexterm>
				<primary>fullstendig fjerning av en pakke</primary>
			</indexterm>
			 <indexterm>
				<primary>pakke</primary>
				<secondary>fjerne</secondary>
			</indexterm>
			 <indexterm>
				<primary>pakke</primary>
				<secondary>slette helt</secondary>
			</indexterm>
			 <para>
				Å aktivere <command>dpkg</command> med <literal>-r</literal> eller <literal>--remove</literal>-valget, etterfulgt av navnet på en pakke, fjerner denne pakken. Denne fjerningen er imidlertid ikke komplett: Alle konfigurasjonsfiler, vedlikeholderskript, loggfiler (systemlogger) og andre brukerdata som håndteres av pakken forblir. Denne måten å deaktivere programmet på, gjøres enkelt ved å avinstallere det, og det er fortsatt mulig å raskt installere det på nytt med samme konfigurasjon. For å fjerne alt som er tilknyttet en pakke kan du bruke <literal>-P</literal> eller <literal>-- purge</literal>-valget, fulgt av pakkenavnet.
			</para>
			 <example>
				<title>Fjerning og frakobling av <emphasis role="pkg">debian-cd</emphasis>-pakken.</title>
				 
<screen><computeroutput># </computeroutput><userinput>dpkg -r debian-cd</userinput>
<computeroutput>(Reading database ... 97747 files and directories currently installed.)
Removing debian-cd (3.1.17) ...
# </computeroutput><userinput>dpkg -P debian-cd</userinput>
<computeroutput>(Reading database ... 97401 files and directories currently installed.)
Removing debian-cd (3.1.17) ...
Purging configuration files for debian-cd (3.1.17) ...</computeroutput></screen>

			</example>

		</section>
		 <section>
			<title>Spørre databasen til <command>dpkg</command>, og inspisere <filename>.deb</filename>-filer</title>
			 <indexterm>
				<primary>pakke</primary>
				<secondary>status</secondary>
			</indexterm>
			 <indexterm>
				<primary>pakke</primary>
				<secondary>filliste</secondary>
			</indexterm>
			 <indexterm>
				<primary>pakke</primary>
				<secondary>innholdssjekk</secondary>
			</indexterm>
			 <sidebar> <title><emphasis>TILBAKE TIL BASIS</emphasis> Option syntax (Alternativ syntaks)</title>
			 <para>
				De fleste alternativene er tilgjengelige i en «lang» versjon (en eller flere relevante ord, innledet med en dobbel bindestrek), og en «kort» versjon (en enkelt bokstav, ofte den første av ett ord fra den lange versjonen, og innledet med en enkelt bindestrek). Denne konvensjonen er så vanlig at den er en POSIX-standard.
			</para>
			 </sidebar> <para>
				Til slutt i denne seksjonen vil vi gjennomgå <command>dpkg</command>-valgene som søker i den interne database for å få informasjon. Ved først å gi de lange alternativene, og deretter de tilsvarende korte alternativene (som selvsagt vil ha med de samme mulige argumentene) siterer vi <literal>--listfiles <replaceable>pakke</replaceable></literal> (eller <literal>-L</literal>), som lister filene installert av denne pakken; <literal>--search <replaceable>fil</replaceable></literal> (eller <literal>-S</literal>), som finner pakken(e) som inneholder filen; <literal>--status <replaceable>pakke</replaceable></literal> (eller <literal>-s</literal>), som viser topptekstene til en installert pakke; <literal>--list</literal> (eller <literal>-l</literal>), som viser listen med pakker som systemet kjenner, og installasjonsstatusen deres; <literal>--contents <replaceable>file.deb</replaceable></literal> (eller <literal>-c</literal>), som lister filene i den spesifiserte Debian-pakken; <literal>--info<replaceable> file.deb </replaceable></literal> (eller <literal>-I</literal>), som viser topptekstene til denne Debian-pakken.
			</para>
			 <example>
				<title>Forskjellige søk med <command>dpkg</command></title>
				 
<screen role="scale" width="80">
<computeroutput>$ </computeroutput><userinput>dpkg -L base-passwd</userinput>
<computeroutput>/.
/usr
/usr/sbin
/usr/sbin/update-passwd
/usr/share
/usr/share/lintian
/usr/share/lintian/overrides
/usr/share/lintian/overrides/base-passwd
/usr/share/doc-base
/usr/share/doc-base/users-and-groups
/usr/share/base-passwd
/usr/share/base-passwd/group.master
/usr/share/base-passwd/passwd.master
/usr/share/man
/usr/share/man/pl
/usr/share/man/pl/man8
/usr/share/man/pl/man8/update-passwd.8.gz
/usr/share/man/ru
/usr/share/man/ru/man8
/usr/share/man/ru/man8/update-passwd.8.gz
/usr/share/man/ja
/usr/share/man/ja/man8
/usr/share/man/ja/man8/update-passwd.8.gz
/usr/share/man/fr
/usr/share/man/fr/man8
/usr/share/man/fr/man8/update-passwd.8.gz
/usr/share/man/es
/usr/share/man/es/man8
/usr/share/man/es/man8/update-passwd.8.gz
/usr/share/man/de
/usr/share/man/de/man8
/usr/share/man/de/man8/update-passwd.8.gz
/usr/share/man/man8
/usr/share/man/man8/update-passwd.8.gz
/usr/share/doc
/usr/share/doc/base-passwd
/usr/share/doc/base-passwd/users-and-groups.txt.gz
/usr/share/doc/base-passwd/changelog.gz
/usr/share/doc/base-passwd/copyright
/usr/share/doc/base-passwd/README
/usr/share/doc/base-passwd/users-and-groups.html
$ </computeroutput><userinput>dpkg -S /bin/date</userinput>
<computeroutput>coreutils: /bin/date
$ </computeroutput><userinput>dpkg -s coreutils</userinput>
<computeroutput>Package: coreutils
Essential: yes
Status: install ok installed
Priority: required
Section: utils
Installed-Size: 13855
Maintainer: Michael Stone &lt;mstone@debian.org&gt;
Architecture: amd64
Multi-Arch: foreign
Version: 8.23-3
Replaces: mktemp, realpath, timeout
Pre-Depends: libacl1 (&gt;= 2.2.51-8), libattr1 (&gt;= 1:2.4.46-8), libc6 (&gt;= 2.17), libselinux1 (&gt;= 2.1.13)
Conflicts: timeout
Description: GNU core utilities
 This package contains the basic file, shell and text manipulation
 utilities which are expected to exist on every operating system.
 .
 Specifically, this package includes:
 arch base64 basename cat chcon chgrp chmod chown chroot cksum comm cp
 csplit cut date dd df dir dircolors dirname du echo env expand expr
 factor false flock fmt fold groups head hostid id install join link ln
 logname ls md5sum mkdir mkfifo mknod mktemp mv nice nl nohup nproc numfmt
 od paste pathchk pinky pr printenv printf ptx pwd readlink realpath rm
 rmdir runcon sha*sum seq shred sleep sort split stat stty sum sync tac
 tail tee test timeout touch tr true truncate tsort tty uname unexpand
 uniq unlink users vdir wc who whoami yes
Homepage: http://gnu.org/software/coreutils
$ </computeroutput><userinput>dpkg -l 'b*'</userinput>
<computeroutput>Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                    Version          Architecture     Description
+++-=======================-================-================-====================================================
un  backupninja             &lt;none&gt;           &lt;none&gt;           (no description available)
ii  backuppc                3.3.0-2          amd64            high-performance, enterprise-grade system for backin
un  base                    &lt;none&gt;           &lt;none&gt;           (no description available)
un  base-config             &lt;none&gt;           &lt;none&gt;           (no description available)
ii  base-files              8                amd64            Debian base system miscellaneous files
ii  base-passwd             3.5.37           amd64            Debian base system master password and group files
[...]
$ </computeroutput><userinput>dpkg -c /var/cache/apt/archives/gnupg_1.4.18-6_amd64.deb</userinput>
<computeroutput>drwxr-xr-x root/root         0 2014-12-04 23:03 ./
drwxr-xr-x root/root         0 2014-12-04 23:03 ./lib/
drwxr-xr-x root/root         0 2014-12-04 23:03 ./lib/udev/
drwxr-xr-x root/root         0 2014-12-04 23:03 ./lib/udev/rules.d/
-rw-r--r-- root/root      2711 2014-12-04 23:03 ./lib/udev/rules.d/60-gnupg.rules
drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/
drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/lib/
drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/lib/gnupg/
-rwxr-xr-x root/root     39328 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_ldap
-rwxr-xr-x root/root     92872 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_hkp
-rwxr-xr-x root/root     47576 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_finger
-rwxr-xr-x root/root     84648 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_curl
-rwxr-xr-x root/root      3499 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_mailto
drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/bin/
-rwxr-xr-x root/root     60128 2014-12-04 23:03 ./usr/bin/gpgsplit
-rwxr-xr-x root/root   1012688 2014-12-04 23:03 ./usr/bin/gpg
[...]
$ </computeroutput><userinput>dpkg -I /var/cache/apt/archives/gnupg_1.4.18-6_amd64.deb</userinput>
<computeroutput> new debian package, version 2.0.
 size 1148362 bytes: control archive=3422 bytes.
    1264 bytes,    26 lines      control              
    4521 bytes,    65 lines      md5sums              
     479 bytes,    13 lines   *  postinst             #!/bin/sh
     473 bytes,    13 lines   *  preinst              #!/bin/sh
 Package: gnupg
 Version: 1.4.18-6
 Architecture: amd64
 Maintainer: Debian GnuPG-Maintainers &lt;pkg-gnupg-maint@lists.alioth.debian.org&gt;
 Installed-Size: 4888
 Depends: gpgv, libbz2-1.0, libc6 (&gt;= 2.15), libreadline6 (&gt;= 6.0), libusb-0.1-4 (&gt;= 2:0.1.12), zlib1g (&gt;= 1:1.1.4)
 Recommends: gnupg-curl, libldap-2.4-2 (&gt;= 2.4.7)
 Suggests: gnupg-doc, libpcsclite1, parcimonie, xloadimage | imagemagick | eog
 Section: utils
 Priority: important
 Multi-Arch: foreign
 Homepage: http://www.gnupg.org
 Description: GNU privacy guard - a free PGP replacement
  GnuPG is GNU's tool for secure communication and data storage.
  It can be used to encrypt data and to create digital signatures.
  It includes an advanced key management facility and is compliant
  with the proposed OpenPGP Internet standard as described in RFC 4880.
[...]</computeroutput></screen>

			</example>
			 <sidebar> <title><emphasis>Å GÅ VIDERE</emphasis> Å sammenligne versjoner</title>
			 <indexterm>
				<primary>versjon, sammenligning</primary>
			</indexterm>
			 <indexterm>
				<primary>sammenligning av versjoner</primary>
			</indexterm>
			 <para>
				Ettersom <command>dpkg</command> er programmet som behandler Debian-pakker, gir det også referanseimplementeringen for logikken som skal til for å sammenligne versjonsnumre. Dette er grunnen til at det har en <literal>--compare-versions</literal>-valgmulighet, som kan brukes av eksterne programmer (spesielt konfigureringsskript som kjøres med <command>dpkg</command> selv). Denne valgmuligheten krever tre parametre: Et versjonsummer, en sammenligningsoperatør, og et andre versjonsnummer. De forskjellige mulige operatørene er <literal>lt</literal> (absolutt mindre enn), <literal>le</literal> (mindre enn eller lik), <literal>eq</literal> (lik), <literal>ne</literal> (ikke lik), <literal>ge</literal> (større enn eller lik), og <literal>gt</literal> (absolutt større enn). Hvis sammenligningen er riktig, returnerer <command>dpkg</command> 0 (suksess); hvis ikke, gir den en ikke-zero verdi tilbake (som indikerer feil).
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>dpkg --compare-versions 1.2-3 gt 1.1-4</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>0
$ </computeroutput><userinput>dpkg --compare-versions 1.2-3 lt 1.1-4</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>1
$ </computeroutput><userinput>dpkg --compare-versions 2.6.0pre3-1 lt 2.6.0-1</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>1</computeroutput></screen>
			 <para>
				Legg merke til den uventede feilen i den siste sammenligningen: For <command>dpkg</command>, <literal>pre</literal>, betegner vanligvis en pre-release (pre-utgivelse), og har ingen spesiell betydning, og dette programmet sammenligner bokstaver på samme måte som tallene (en &lt; b &lt; c ...), i alfabetisk rekkefølge. Dette er grunnen til at det vurderer «<literal>0pre3</literal>» til å være større enn «<literal>0</literal>». Når vi ønsker en pakkes versjonsnummer for å vise at det er en pre-release, bruker vi tilde-tegnet, «<literal>~</literal>»:
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>dpkg --compare-versions 2.6.0~pre3-1 lt 2.6.0-1</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>0</computeroutput></screen>
			 </sidebar>
		</section>
		 <section>
			<title><command>dpkg</command>'s loggfil</title>
			 <para>
				<command>dpkg</command> tar vare på en logg med alle handlinger i <filename>/var/log/dpkg.log</filename>. Denne loggen er ekstremt ordrik, med detaljer for hver og en av de stadier som pakker, håndtert av <command>dpkg</command>, gjennomgår. I tillegg til å gi en måte å spore dpkgs oppførsel på, hjelper den fremfor alt til med å beholde en historie om utviklingen av systemet: Man kan finne det nøyaktige øyeblikket når hver pakke er installert eller oppdatert, og denne informasjonen kan være svært nyttig i å forstå en nylig endring i oppførselen. I tillegg er alle versjoner tatt vare på, så det er lett å kryssjekke informasjonen med <filename>changelog.Debian.gz</filename> for de pakker det gjelder, eller også med online bug-rapporter.
			</para>

		</section>
		 <section id="sect.multi-arch">
			<title>Støtte for multiarkitektur</title>
			 <indexterm>
				<primary>Multi-Arch</primary>
			</indexterm>
			 <indexterm>
				<primary>arkitektur</primary>
				<secondary>multi-arch støtte</secondary>
			</indexterm>
			 <para>
				Alle Debian pakker har et <literal>Architecture</literal>-felt i kontroll-informasjonen. Dette feltet kan inneholde enten “<literal>all</literal>” (eller pakker som er arkitekturuavhengig) eller navnet på den arkitekturen som den er rettet mot (som "amd64", "armhf", ...). I det sistnevnte tilfellet vil, som standard,<command>dpkg</command> bare akseptere å installere pakken hvis arkitekturen svarer til vertmaskinens arkitektur som meldt tilbake fra <command>dpkg --print-architecture</command>.
			</para>
			 <para>
				Denne begrensningen sikrer at brukerne ikke ender opp med binærfiler kompilert for feil arkitektur. Alt ville være perfekt, bortsett fra at (noen) datamaskiner kan kjøre binærfiler for flere arkitekturer, enten innebygd (en "amd64" system kan kjøre "i386" binærfiler) eller via etterlignere.
			</para>
			 <section>
				<title>Aktivere multi-ark</title>
				 <para>
					<command>dpkg</command>s multi-ark støtte tillater brukere å definere "fremmed arkitekturer" som kan installeres på det gjeldende systemet. Dette gjøres rett og slett med <command>dpkg --add-architecture</command> som i eksemplet nedenfor. Det er en tilsvarende <command>dpkg --remove-architecture</command> til å droppe støtte til en fremmed arkitektur, men den kan bare brukes når ingen pakker med denne arkitekturen er igjen.
				</para>
				 
<screen>
<computeroutput># </computeroutput><userinput>dpkg --print-architecture</userinput>
<computeroutput>amd64
# </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput># </computeroutput><userinput>dpkg -i gcc-4.9-base_4.9.1-19_armhf.deb</userinput>
<computeroutput>dpkg: error processing archive gcc-4.9-base_4.9.1-19_armhf.deb (--install):
 package architecture (armhf) does not match system (amd64)
Errors were encountered while processing:
 gcc-4.9-base_4.9.1-19_armhf.deb
# </computeroutput><userinput>dpkg --add-architecture armhf</userinput>
<computeroutput># </computeroutput><userinput>dpkg --add-architecture armel</userinput>
<computeroutput># </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput>armhf
armel
# </computeroutput><userinput>dpkg -i gcc-4.9-base_4.9.1-19_armhf.deb</userinput>
<computeroutput>Selecting previously unselected package gcc-4.9-base:armhf.
(Reading database ... 86425 files and directories currently installed.)
Preparing to unpack gcc-4.9-base_4.9.1-19_armhf.deb ...
Unpacking gcc-4.9-base:armhf (4.9.1-19) ...
Setting up gcc-4.9-base:armhf (4.9.1-19) ...
# </computeroutput><userinput>dpkg --remove-architecture armhf</userinput>
<computeroutput>dpkg: error: cannot remove architecture 'armhf' currently in use by the database
# </computeroutput><userinput>dpkg --remove-architecture armel</userinput>
<computeroutput># </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput>armhf</computeroutput></screen>
				 <sidebar> <title><emphasis>NOTE</emphasis> APTs multi-ark støtte</title>
				 <para>
					APT vil automatisk oppdage når dpkg er konfigurert til å støtte fremmede arkitekturer og vil starte nedlastingen av samsvarende <filename>Packages</filename>-filer som ledd i oppdateringsprosessen.
				</para>
				 <para>
					Fremmede pakker kan installeres med <command>apt install <replaceable>package</replaceable>:<replaceable>architecture</replaceable></command>.
				</para>
				 </sidebar> <sidebar> <title><emphasis>IN PRACTICE</emphasis> Ved hjelp av proprietære i386 binærfiler på AMD64</title>
				 <para>
					Det finnes flere bruksområder for multi-ark, men den mest populære er er muligheten til å kjøre 32-bits binærfiler (i386) på 64 bits systemer (AMD64), spesielt siden flere populære proprietære programmer (for eksempel Skype) bare leveres i 32 bits versjoner.
				</para>
				 </sidebar>
			</section>
			 <section>
				<title>Multi-ark relaterte endringer</title>
				 <para>
					For faktisk å gjøre multi-ark nyttig og brukbare, må biblioteker bli pakket på nytt og flyttet til en arkitektur-spesifikk katalog, slik at flere kopier (rettet mot ulike arkitekturer) kan installeres side ved side. Slike oppdaterte pakker inneholder "<literal>Multi-Arch: same </literal>" i topptekstfeltet for å fortelle pakkesystemet at de ulike arkitekturene i pakken trygt kan installeres side ved side (og at disse pakkene bare kan tilfredsstille avhengigheter i pakker med samme arkitektur). Siden multi-ark gjorde sin debut i Debian <emphasis role="distribution">Wheezy</emphasis>, har ikke alle bibliotekene blitt konvertert ennå.
				</para>
				 
<screen><computeroutput>$ </computeroutput><userinput>dpkg -s gcc-4.9-base
</userinput><computeroutput>dpkg-query: error: --status needs a valid package name but 'gcc-4.9-base' is not: ambiguous package name 'gcc-4.9-base' with more than one installed instance

Use --help for help about querying packages.
$ </computeroutput><userinput>dpkg -s gcc-4.9-base:amd64 gcc-4.9-base:armhf | grep ^Multi
</userinput><computeroutput>Multi-Arch: same
Multi-Arch: same
$ </computeroutput><userinput>dpkg -L libgcc1:amd64 |grep .so
</userinput><computeroutput>/lib/x86_64-linux-gnu/libgcc_s.so.1
$ </computeroutput><userinput>dpkg -S /usr/share/doc/gcc-4.9-base/copyright
</userinput><computeroutput>gcc-4.9-base:amd64, gcc-4.9-base:armhf: /usr/share/doc/gcc-4.9-base/copyright
</computeroutput></screen>
				 <para>
					Det er ikke verd noe at <literal>Multi-Arch: same</literal>-pakker må kvalifisere sine navn med sin arkitektur for å være entydig identifiserbare. De har også muligheten til å dele filer med andre forekomster med den samme pakken; <command>dpkg</command> sikrer at alle pakkene har bit-for-bit-identiske filer når de deles. Sist men ikke minst, må alle forekomster av en pakke ha den samme versjonen. De må de oppgraderes sammen.
				</para>
				 <para>
					Multi-Ark-støtte gir også noen interessante utfordringer i måten avhengigheter håndteres. Å tilfredsstille en avhengighet krever enten en pakke merket “<literal>Multi-Arch: foreign</literal>” eller en pakke hvis arkitektur samsvarer med den ene av pakken som inneholder avhengigheten (i denne prosessem med avhengighetsavklaring er arkitekturuavhengige pakker antatt å ha den samme arkitektur som verten). En avhengighet kan også bli svekket ved å tillate ulike arkitekturer å imøtekomme den, med <literal><replaceable>package</replaceable>:any</literal>-syntaks, men fremmede pakker kan bare tilfredsstille en slik avhengighet hvis de er merket “<literal>Multi-Arch: allowed</literal>”.
				</para>

			</section>

		</section>

	</section>
	 <section id="sect.coexistence-with-other-packaging-systems">
		<title>Sameksistens med andre pakkesystemer</title>
		 <indexterm>
			<primary>RPM</primary>
		</indexterm>
		 <indexterm>
			<primary>Red Hat Package Manager</primary>
		</indexterm>
		 <indexterm>
			<primary><command>alien</command></primary>
		</indexterm>
		 <para>
			Debian-pakker er ikke de eneste programvarepakker som brukes i fri programvare verden. Den viktigste konkurrent er RPM formatet til Red Hat Linux-distribusjon og dens mange derivater. Red Hat er en veldig populær, kommersiell distribusjon. Det er derfor vanlig at programvare levert av tredjeparter blir tilbudt som RPM-pakker i stedet for Debian.
		</para>
		 <para>
			I dette tilfelle, skal du vite at programmet <command>rpm</command>, som behandler RPM pakker, er tilgjengelig som en Debian-pakke, så det er mulig å bruke dette pakkeformatet på Debian. Imidlertid bør forsiktighet utvises for å begrense disse håndteringene med å trekke ut informasjon fra en pakke eller for å få bekreftet integriteten. Det er sant nok urimelig å bruke <command>rpm</command> for å installere en RPM i et Debian system; RPM bruker sin egen database, atskilt fra lokal programvare (for eksempel <command>dpkg</command>). Dette er grunnen til at det ikke er mulig å sikre en stabil sameksistens av to pakkesystemer.
		</para>
		 <para>
			På den annen side <emphasis role="pkg">alien</emphasis> verktøyet kan konvertere RPM pakker til Debian pakker og vice versa.
		</para>
		 <sidebar> <title><emphasis>COMMUNITY</emphasis> Encouraging the adoption of <filename>.deb</filename></title>
		 <para>
			Hvis du ofte bruker <command>alien</command>-programmet til å installere RPM-pakker fra en av dine leverandører, ikke nøl med å skrive til dem og med vennlighet gi uttrykh for din sterke preferanse for <filename>.deb</filename>-formatet. Noter at pakkeformatet ikke er alt: En <filename>.deb</filename>-pakke bygget med <command>alien</command> eller forberedt for en versjon av Debian ulik den du bruker, eller til og med for en avledet distribusjon som Ubuntu, vil trolig ikke tilby det samme kvalitetsnivået og integrasjonen som en pakke spesielt utviklet for Debian <emphasis role="distribution">Jessie</emphasis>.
		</para>
		 </sidebar> 
<screen>
<computeroutput>$ </computeroutput><userinput>fakeroot alien --to-deb phpMyAdmin-2.0.5-2.noarch.rpm</userinput> 
<computeroutput>phpmyadmin_2.0.5-2_all.deb generated
$ </computeroutput><userinput>ls -s phpmyadmin_2.0.5-2_all.deb</userinput>
<computeroutput>  64 phpmyadmin_2.0.5-2_all.deb</computeroutput></screen>
		 <para>
			Du vil finne at denne prosessen er svært enkel. Du må imidlertid vite at pakken som genereres ikke har noen informasjon om avhengighet, siden avhengigheter i de to pakkeformater ikke har systematisk samsvar. Administratoren må derfor manuelt sørge for at den konverterte pakken vil fungere på riktig måte, og dette er grunnen til Debian-pakker generert slik bør unngås så mye som mulig. Heldigvis har Debian den største samlingen av programvarepakker av alle distribusjoner, og det er sannsynlig at uansett hva du leter etter er det allerede der.
		</para>
		 <para>
			Ser du på "man page" for <command>alien</command> kommandoen, vil du også se at dette programmet håndterer andre pakkeformater, spesielt de som brukes av Slackware-distribusjonen (den er laget av en enkel <filename>tar.gz</filename>-mappe).
		</para>
		 <para>
			Stabiliteten til en programvare rullet ut ved å bruke <command>dpkg</command>-verktøyet som bidrar til Debian berømmelse. APT-verktøypakken, beskrevet i neste kapittel, tar vare på fordelen, og sparer administratoren fra å håndtere pakkestatus, en nødvendig, men vanskelig oppgave.
		</para>

	</section>
</chapter>

