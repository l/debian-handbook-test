<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="debian-packaging" lang="nb-NO">
	<chapterinfo>
		 <keywordset>
			<keyword>Bakdør</keyword>
			 <keyword>Gjenoppbygge</keyword>
			 <keyword>Kildepakke</keyword>
			 <keyword>Arkiv</keyword>
			 <keyword>Meta-pakke</keyword>
			 <keyword>Debian-utvikler</keyword>
			 <keyword>Vedlikeholder</keyword>

		</keywordset>

	</chapterinfo>
	 <title>Å lage en Debian-pakke</title>
	 <highlights> <para>
		Det er nokså vanlig for en administrator som har håndtert Debian-pakker jevnlig å etter hvert ønske å lage egne pakker, eller modifisere en eksisterende pakke. Dette kapittelet tar sikte på å svare på de vanligste spørsmålene på dette området, og gi nødvendige instrukser for å utnytte Debians infrastruktur på beste måte. Med litt flaks, etter å ha prøvd deg fram med lokale pakker, kan du kanskje til og med tenke deg å gå lengre, og bli med i Debian-prosjektet selv!
	</para>
	 </highlights> <section id="sect.rebuilding-package">
		<title>Å bygge om en pakke fra sine kilder</title>
		 <para>
			Å bygge om en binær pakke er nødvendig under flere omstendigheter. I noen tilfeller trenger administratoren en programvarefunksjon som krever at programvaren som skal kompileres fra kilder med et spesielt kompileringsalternativ; i andre er programvaren som er pakket i den installerte versjonen av Debian ikke ny nok. I det sistnevnte tilfellet vil administratoren vanligvis bygge en nyere pakke tatt fra en nyere versjon av Debian - så som <emphasis role="distribution">Testing</emphasis>, eller til og med <emphasis role="distribution">Unstable</emphasis> - slik at denne nye pakken virker i deres <emphasis role="distribution">Stable</emphasis>-distribusjon: Denne operasjonen kalles «backporting». Som vanlig bør man være forsiktig før en tar på seg en slik oppgave, men sjekke om den har blitt gjort allerede: Ta en rask titt på Debian Package Tracker for å se om pakken kan vise informasjon om det. <ulink type="block" url="https://tracker.debian.org/" /> <indexterm><primary>backport</primary></indexterm>
		</para>
		 <section>
			<title>Å skaffe kildene</title>
			 <para>
				Å bygge om en Debian-pakke starter med å skaffe seg kildekoden. Den enkleste måten er å bruke <command>apt-get source <replaceable>kildepakkenavn</replaceable></command>-kommandoen. Denne kommanoen krever en <literal>deb-src</literal>-linje i <filename>/etc/apt/sources.list</filename>-filen, og oppdaterte indeksfiler (det er <command>apt-get update</command>). Disse betingelsene skulle allerede være imøtekommet hvis du fulgte instruksjonene fra kapittelet om APT-konfigurasjon (se <xref linkend="sect.apt-sources.list" />). Merk imidlertid at du vil laste ned kildekodepakkene fra den Debian-versjonen som er nevnt i <literal>deb-src</literal>-linjen. Hvis du trenger en annen versjon, må du kanskje laste den ned manuelt fra et Debian-speil, eller fra nettstedet. Dette innebærer henting av to eller tre filer (med utvidelser <filename>*.dsc</filename> - for <emphasis>Debian Source Control</emphasis> - <filename>*.tar.<replaceable>comp</replaceable></filename>, og noen ganger <filename>*.diff.gz</filename> eller <filename>*.debian.tar.<replaceable>comp</replaceable></filename> - <replaceable>comp</replaceable> som tar en verdi blant <literal>gz</literal>, <literal>bz2</literal> eller <literal>xz</literal>, avhengig av det kompresjonsverktøyet som er i bruk), så kjør <command>dpkg-source -x <replaceable>file.dsc</replaceable></command>-kommandoen. Hvis <filename>*.dsc</filename>-filen er tilgjengelig direkte fra en gitt URL, er det til og med enklere vei å få tak i alt sammen, med <command>dget <replaceable>URL</replaceable></command>-kommandoen. Denne kommandoen (som kan bli funnet i <emphasis role="pkg">devscripts</emphasis>-pakken) fanger opp <filename>*.dsc</filename>-filen på den gitte adressen, så analyserer den innholdet, og filen eller filene det refereres til hentes automatisk. Når alt er lastet ned, pakkes kildepakken ut (såfremt <literal>-d</literal> eller <literal>--download-only</literal>-valget er benyttet).
			</para>

		</section>
		 <section>
			<title>Å lage forandringer</title>
			 <para>
				Pakkekilden er tilgjengelig i en katalog oppkalt etter kildepakkens versjon (for eksempel <emphasis>samba-4.1.17+dfsg</emphasis>): Dette er der vi skal jobbe med våre lokale endringer.
			</para>
			 <para>
				Det første du må gjøre er å endre pakkens versjonsnummer, slik at de gjenoppbygde pakkene kan skilles fra de opprinnelige pakkene som følger med Debian. Forutsatt at gjeldende versjon er <literal>2:4.1.17+dfsg-2</literal>, kan vi lage versjon <literal>2:4.1.17+dfsg-2falcot1</literal>, som tydelig viser opprinnelsen av pakken. Dette gjør pakkens versjonsnummer høyere enn den som tilbys av Debian, slik at pakken lett vil installeres som en oppdatering til den opprinnelige pakken. En slik endring er best utført med <command>dch</command>-kommandoen (<emphasis>Debian CHangelog</emphasis>) fra <emphasis role="pkg">devscripts</emphasis>-pakken med en kommando slik som <command>dch --local falcot</command>. Dette tar i bruk en tekstrediger (<command>sensible-editor</command> - dette burde være din favorittredigerer hvis den er nevnt i <varname>VISUAL</varname>, eller <varname>EDITOR</varname>-miljøvariablene, og ellers standardredigereren) for å tillate å dokumentere forskjellene som følger av denne ombyggingen. Denne redigereren viser oss at <command>dch</command> virkelig forandret <filename>debian/changelog</filename>-filen.
			</para>
			 <para>
				Når det kreves en endring i oppbyggingen, må det lages endringer i <filename>debian/rules</filename>, som skritt for skritt driver pakkens byggeprosess. I de enkleste tilfellene er linjene om den opprinnelige konfigurasjonen (<literal>./configure …</literal>), eller i den aktuelle utgaven (<literal>$(MAKE) …</literal>, eller <literal>make …</literal>) enkle å finne. Hvis disse kommandoene ikke påkalles eksplisitt, er de sannsynligvis en bivirkning av en annen eksplisitt kommando, i så fall kan du se i dokumentasjonen for å lære mer om hvordan du endrer standard virkemåten. Med pakker som bruker <command>dh</command>, kan du trenge å legge til en overstyring for <command>dh_auto_configure</command>, eller <command>dh_auto_build</command>-kommandoene (se de respektive manualsidene deres for forklaringer om hvordan du oppnår dette).
			</para>
			 <para>
				Avhengig av de lokale endringene i pakkene, kan en oppdatering også være nødvendig i <filename>debian/control</filename>-filen, som inneholder en beskrivelse av de genererte pakker. Spesielt inneholder denne filen <literal>Build-Depends</literal>-linjer som kontrollerer listen over avhengigheter som må være oppfylt når pakken bygges. Disse refererer ofte til versjonene til pakkene i distribusjonen som kildepakken kommer fra, men som kanskje ikke er tilgjengelig i distribusjonen som brukes til ombygging. Det er ingen automatisk måte å avgjøre om en avhengighet er ekte, eller bare spesifisert til å garantere at bygget kun skal bli forsøkt med den nyeste versjonen av et bibliotek - dette er den eneste tilgjengelige måten å tvinge en <emphasis>autobuilder</emphasis> til å bruke en gitt pakkeversjon under oppbyggingen, og det er derfor Debians vedlikeholdere ofte bruker strenge versjonsbestemte byggeavhengigheter.
			</para>
			 <para>
				Hvis du vet sikkert at disse byggeavhengigheter er for strenge, bør du føle deg fri til å løsne på dem lokalt. Å lese filene som dokumenterer den vanlige måten å bygge programvare på - disse filene blir ofte kalt <filename>INSTALL</filename> - vil hjelpe deg å finne de riktige avhengighetene. Ideelt sett bør alle avhengigheter være imøtekommet fra distribusjonen som brukes til ombygging. Hvis de ikke er det, starter en gjentakingsprosess, der pakkene nevnt i <literal>Build-Depends</literal>-feltet må «backportes» («tilbakeporting») før målet pakken kan bli det. Noen pakker trenger kanskje ikke tilbakeporting, og kan installeres som de er i løpet av byggeprosessen (et kjent eksempel er <emphasis role="pkg">debhelper</emphasis>). Merk at tilbakeportingsprosessen raskt kan bli komplisert hvis du ikke er forsiktig. Derfor bør tilbakeporting holdes på et absolutt minimum der det er mulig.
			</para>
			 <sidebar> <title><emphasis>TIPS</emphasis> innstallere <literal>Build-Depends</literal></title>
			 <indexterm>
				<primary><literal>Build-Depends</literal>, kontrollfelt</primary>
			</indexterm>
			 <para>
				<command>apt-get</command> tillater installasjon av alle pakker nevnt i <literal>Build-Depends</literal>-feltene til en kildepakke som er tilgjengelig i en distribusjon nevnt i en <literal>deb-src</literal>-linje i <filename>/etc/apt/sources.list</filename>-filen. Dette er så enkelt som å kjøre <command>apt-get build-dep <replaceable>kildepakken</replaceable></command>-kommandoen.
			</para>
			 </sidebar>
		</section>
		 <section>
			<title>Å starte gjenoppbyggingen</title>
			 <para>
				Når alle de nødvendige endringene har blitt brukt på kildene, kan vi starte å generere den aktuelle binære pakkefilen (<filename>.deb</filename>). Hele prosessen er håndtert av <command>dpkg-buildpackage</command>-kommandoen.
			</para>
			 <example>
				<title>Å bygge om en pakke</title>
				 
<screen><computeroutput>$ </computeroutput><userinput>dpkg-buildpackage -us -uc
</userinput><computeroutput>[...]
</computeroutput></screen>

			</example>
			 <sidebar id="sidebar.fakeroot"> <title><emphasis>VERKTØY</emphasis> <command>fakeroot</command></title>
			 <para>
				I hovedsak er prosessen med å bygge pakker en så enkel sak som, i et arkiv, å samle et sett av eksisterende (eller bygde) filer. De fleste filene vil så bli eid av <emphasis>rot</emphasis> i arkivet. Men å bygge hele pakken under denne brukeren skulle tilsi økt risiko. Heldigvis kan dette unngås med <command>fakeroot</command>-kommandoen. Dette verktøyet kan brukes til å kjøre et program, og gi inntrykk av at det kjører som <emphasis>root</emphasis>, og skaper filer med vilkårlig eierskap og rettigheter. Når programmet skaper arkivet som vil bli Debian-pakken, er det lurt å skape et arkiv som inneholder filer merket som tilhørende vilkårlige eiere, inkludert <emphasis>rot</emphasis>. Dette oppsettet er så praktisk at <command>dpkg-buildpackage</command> bruker <command>fakeroot</command> som standard ved pakkebygging.
			</para>
			 <para>
				Merk at programmet bare er lurt til å «tro» at det fungerer som en priviligert konto, og prosessen faktisk kjører som om brukeren kjører <command>fakeroot <replaceable>program</replaceable></command> (og filene faktisk er opprettet med den brukerens tillatelser). Ikke på noe tidspunkt får det faktisk rotprivilegier som det kunne misbruke.
			</para>
			 </sidebar> <para>
				Den tidligere kommandoen kan mislykkes hvis <literal>Build-Depends</literal>-feltene ikke har blitt oppdatert, eller hvis de relaterte pakker ikke er installert. I dette tilfellet er det mulig å overprøve denne sjekken ved å sende <literal>-d</literal>-valget til <command>dpkg-buildpackage</command>. Men å eksplisitt ignorere disse avhengigheter gir risiko for at byggeprosessen mislykkes på et senere tidspunkt. Verre; pakken kan synes å bli bygget riktig, men klarer ikke å kjøre skikkelig: Noen programmer deaktiverer automatisk noen av sine oppgaver når et nødvendig bibliotek ikke er tilgjengelig på byggetidspunktet.
			</para>
			 <para>
				I de fleste tilfeller bruker Debian-utviklere et høynivå-program som <command>debuild</command>. Dette kjører <command>dpkg-buildpackage</command> til vanlig, men legger også til en påkalling til et program som kjører mange kontroller for å validere den genererte pakken opp mot Debians retningslinjer. Dette skriptet renser også opp i miljøet, slik at lokale miljøvariabler ikke «forurenser» pakkebyggingen. Kommandoen <command>debuild</command> er et av verktøyene i <emphasis>devscripts</emphasis>-pakken, som deler noe konsistens og oppsett for å gjøre vedlikeholderens oppgave enklere.
			</para>
			 <sidebar> <title><emphasis>HURTIGVISNING</emphasis> <command>pbuilder</command></title>
			 <indexterm>
				<primary><command>pbuilder</command></primary>
			</indexterm>
			 <para>
				Programmet <command>pbuilder</command> (i pakken med det tilsvarende navnet) tillater bygging av en Debian-pakke i en <emphasis>chrooted</emphasis>-omgivelse. Den lager først en midlertidig katalog med det minimale systemet som kreves for å bygge pakken (inkludert pakkene nevnt i <emphasis>Build-Depends</emphasis>-feltet). Denne katalogen blir så brukt som rotkatalog (<filename>/</filename>), og bruker <command>chroot</command>-kommandoen under byggeprosessen.
			</para>
			 <para>
				Dette verktøyet gjør at byggeprosessen skjer i et miljø som ikke endres av brukernes virksomhet. Dette gir også mulighet for rask påvisning av manglende byggeavhengigheter (siden byggingen vil mislykkes uten dokumentasjon av de riktige avhengighetene). Til slutt: Det tillater å bygge en pakke for en Debian-versjon som ikke er den som brukes av systemet som helhet. Maskinen kan bruke <emphasis role="distribution">Stable</emphasis> i sitt normale arbeid, og en <command>pbuilder</command> som kjører på den samme maskinen, kan bruke <emphasis role="distribution">Unstable</emphasis> til pakkebygging.
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.building-first-package">
		<title>Å bygge din første pakke</title>
		 <section>
			<title>Meta-pakker eller falsk pakker</title>
			 <para>
				Falske pakker og meta-pakker er like ved at de er tomme skall som bare eksisterer for effektene meta-dataene deres har på pakkehåndteringsstabelen.
			</para>
			 <para>
				Formålet med en falsk pakke er å lure <command>dpkg</command> og <command>apt</command> til å tro at noen pakker er installert, selv om de bare er et tomt skall. Dette tillater å tilfredsstille avhengigheter i en pakke når den tilsvarende programvaren ble installert utenfor rammen av pakkesystemet. En slik metode fungerer, men bør likevel unngås når det er mulig, ettersom det ikke er noen garanti for at den manuelt installerte programvaren oppfører seg akkurat som den tilsvarende pakken ville ha gjort, og andre pakker som er avhengig av den, ikke vil fungere ordentlig.
			</para>
			 <para>
				På den annen side, en meta-pakke består oftest som en samling av avhengigheter, slik at montering av meta-pakken faktisk vil føre inn et sett av andre pakker i et enkelt trinn.
			</para>
			 <para>
				Begge disse pakkesalgene kan lages av kommandoene <command>equivs-control</command> og <command>equivs-build</command> (i <emphasis role="pkg">equivs</emphasis>-pakken). Kommandoene <command>equivs-control <replaceable>filen</replaceable></command> oppretter en Debian-pakke topptekstfil som skal redigeres for å inneholde navnet på den forventede pakken, dens versjonsnummer, navnet på vedlikeholderen, avhengighetene, og beskrivelsen. Andre felt uten en standardverdi er valgfrie, og kan slettes. Feltene <literal>Copyright</literal>, <literal>Changelog</literal>, <literal>Readme</literal> og <literal>Extra-Files</literal> er ikke standard felt i Debian-pakker; de bare gir mening innenfor rammen av <command>equivs-build</command>, og de vil ikke bli beholdt i overskriftene til den genererte pakken.
			</para>
			 <example>
				<title>Topptekstfil for den falske pakken <emphasis>libxml-libxml-perl</emphasis></title>
				 
<programlisting>
Section: perl
Priority: optional
Standards-Version: 3.9.6

Package: libxml-libxml-perl
Version: 2.0116-1
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Depends: libxml2 (&gt;= 2.7.4)
Architecture: all
Description: Fake package - module manually installed in site_perl
 This is a fake package to let the packaging system
 believe that this Debian package is installed. 
 .
 In fact, the package is not installed since a newer version
 of the module has been manually compiled &amp; installed in the
 site_perl directory.
</programlisting>

			</example>
			 <para>
				Det neste skrittet er å generere Debian-pakken med kommandoen <command>equivs-build <replaceable>filen</replaceable></command>. Og plutselig er pakken opprettet i den gjeldende katalogen, og kan håndteres som enhver annen Debian-pakke ville blitt.
			</para>

		</section>
		 <section>
			<title>Et enkelt filarkiv</title>
			 <para>
				For å lette utplasseringen av et sett med dokumentasjon på et stort antall maskiner, trenger Falcot Corp-administratorene å lage en Debian-pakke. Administratoren med ansvaret for denne oppgaven leser først «Guide for nye Debian vedlikeholder» («New Maintainer's Guide»), og begynner så å jobbe med sin første pakke. <ulink type="block" url="https://www.debian.org/doc/manuals/maint-guide/" />
			</para>
			 <para>
				Det første skrittet er å lage en <filename>falcot-data-1.0</filename>-mappe som skal inneholde mål-kildepakken. Pakken vil logisk nok få navnet <literal>falcot-data</literal>, og bære versjonsnummeret <literal>1.0</literal>. Administratoren plasserer så dokumentasjonsfilene i en <filename>data</filename>-undermappe. Så påkaller de <command>dh_make</command>-kommandoen (fra <emphasis role="pkg">dh-make</emphasis>-pakken) for å legge til filene som kreves for pakke-genereringsprosessen - som alle blir lagret i en <filename>debian</filename>-undermappe:
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>cd falcot-data-1.0</userinput>
<computeroutput>$ </computeroutput><userinput>dh_make --native</userinput>
<computeroutput>
Type of package: single binary, indep binary, multiple binary, library, kernel module, kernel patch?
 [s/i/m/l/k/n] </computeroutput><userinput>i</userinput>
<computeroutput>
Maintainer name : Raphael Hertzog
Email-Address   : hertzog@debian.org
Date            : Fri, 04 Sep 2015 12:09:39 -0400
Package Name    : falcot-data
Version         : 1.0
License         : gpl3
Type of Package : Independent
Hit &lt;enter&gt; to confirm:
Currently there is no top level Makefile. This may require additional tuning.
Done. Please edit the files in the debian/ subdirectory now. You should also
check that the falcot-data Makefiles install into $DESTDIR and not in / .
$</computeroutput></screen>
			 <para>
				Den valgte pakketypen (<emphasis>enkelt binære (indep binary)</emphasis>) indikerer at denne kildepakken vil generere en enkelt binærpakke som kan deles på tvers av alle arkitekturer (<literal>Architecture: all</literal>). <emphasis>enkelt binære</emphasis> virker som en motpart, og fører til en enkelt binærpakke som er avhengig av målarkitekturen (<literal>Architecture: any</literal>). I dette tilfellet er valget mer relevant, siden pakken bare inneholder dokumentasjon, og ingen binære programmer, slik at den kan brukes på samme måten på datamaskiner av alle arkitekturer.
			</para>
			 <indexterm>
				<primary>pakketyper</primary>
			</indexterm>
			 <indexterm>
				<primary>pakke</primary>
				<secondary>typer</secondary>
			</indexterm>
			 <para>
				<emphasis>multippel binær</emphasis>-typen svarer til en kildekodepakke som leder til forskjellige binærpakker. Et spesielt tilfelle, <emphasis>bibliotek</emphasis>, er nyttig for delte biblioteker, siden de må følge strenge pakkeregler. På lignende måte skal <emphasis>kernel module</emphasis>, eller <emphasis>kernel patch</emphasis> begrenses til pakker som inneholder kjernemoduler.
			</para>
			 <sidebar> <title><emphasis>TIPS</emphasis> Vedlikeholders navn og e-post</title>
			 <para>
				De fleste programmene involvert i pakkevedlikeholdet vil søke etter ditt navn og e-postadresse i <varname>DEBFULLNAME</varname> og <varname>DEBEMAIL</varname>, eller <varname>EMAIL</varname>-miljøvariabler. Ved å definere dem en gang for alle, vil du unngå å måtte sortere dem flere ganger. Hvis ditt vanlige skall er <command>bash</command>, er det bare å legge til følgende to linjer i din <filename>~/.bashrc</filename>-file (du vil ganske sikkert erstatte verdiene med noen mer relevante!):
			</para>
			 
<programlisting>
export EMAIL="hertzog@debian.org"
export DEBFULLNAME="Raphael Hertzog"
</programlisting>
			 </sidebar> <para>
				Kommandoen <command>dh_make</command> laget en <filename>debian</filename>-undermappe med mange filer. Noen kreves, spesielt <filename>rules</filename>, <filename>control</filename>, <filename>changelog</filename> og <filename>copyright</filename>. Filer med <filename>.ex</filename>-forlengelsen er eksempelfiler som kan brukes ved å modifisere dem (og fjerne forlengelsen) når det passer. Når de ikke er nødvendige, anbefales det å fjerne dem. <filename>compat</filename> bør beholdes, ettersom den er nødvendig for riktig funksjon av <emphasis>debhelper</emphasis>-programpakken (som alle begynner med <command>dh_</command>-forstavelsen), og som brukes på ulike stadier i pakkebyggingsprosessen.
			</para>
			 <para>
				<filename>copyright</filename> må inneholde informasjon om forfatterne av dokumentasjonen som er inkludert i pakken, og den tilhørende lisensen. I vårt tilfelle er intern dokumentasjon og bruken av den begrenset til til Falcot Corp-selskapet. Standardfilen <filename>changelog</filename> er vanligvis hensiktsmessig; den erstatter «Første utgivelse» med en mer detaljert forklaring, og endre disgtribusjonen fra <literal>unstable</literal> til <literal>internal</literal> er nok. <filename>control</filename>-filen ble også oppdatert: <literal>Section</literal>-feltet er forandret til <emphasis>misc</emphasis>, og <literal>Homepage</literal>, <literal>Vcs-Git</literal> og <literal>Vcs-Browser</literal>-feltene ble forandret. <literal>Depends</literal>-feltene ble komplettert med <literal>iceweasel | www-browser</literal> for å sikre tilgjengeligheten for en pålitelig nettleser som kan vise dokumentasjonen i pakken.
			</para>
			 <example>
				<title><filename>control</filename>-filen</title>
				 
<programlisting>
Source: falcot-data
Section: misc
Priority: optional
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Build-Depends: debhelper (&gt;= 9)
Standards-Version: 3.9.5

Package: "falcot-data
Architecture: all
Depends: iceweasel | www-browser, ${misc:Depends}
Description: Internal Falcot Corp Documentation
 This package provides several documents describing the internal
 structure at Falcot Corp.  This includes:
  - organization diagram
  - contacts for each department.
 .
 These documents MUST NOT leave the company.
 Their use is INTERNAL ONLY.</programlisting>

			</example>
			 <example>
				<title><filename>changelog</filename>-filen</title>
				 
<programlisting>
falcot-data (1.0) internal; urgency=low

  * Initial Release.
  * Let's start with few documents:
    - internal company structure;
    - contacts for each department.

 -- Raphael Hertzog &lt;hertzog@debian.org&gt;  Fri, 04 Sep 2015 12:09:39 -0400
</programlisting>

			</example>
			 <example>
				<title><filename>copyright</filename>-filen</title>
				 
<programlisting>
Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: falcot-data

Files: *
Copyright: 2004-2015 Falcot Corp
License: 
 All rights reserved.
</programlisting>

			</example>
			 <sidebar> <title><emphasis>DET GRUNNLEGGENDE</emphasis> <filename>Makefile</filename>-fil</title>
			 <indexterm>
				<primary><filename>Makefile</filename></primary>
			</indexterm>
			 <para>
				<filename>Makefile</filename>-filen er et skript som brukes av <command>make</command>-programmet: Det beskriver regler for hvordan man skal bygge et sett med filer fra hverandre i et tre med avhengigheter (for eksempel kan et program bygges fra et sett med kildefiler). <filename>Makefile</filename>-filen beskriver disse reglene i det følgende formatet:
			</para>
			 
<programlisting>
target: source1 source2 ...
        command1
        command2
</programlisting>
			 <para>
				Tolkningen av slik regel er som følger: Hvis en av <literal>source*</literal>-filene er nyere enn <literal>target</literal>-filen, trenger målet generering ved å bruke <command>command1</command> og <command>command2</command>.
			</para>
			 <para>
				Merk at kommandolinjene må starte med et TAB-tegn; Merk også at når en kommandolinje starter med en skråstrek (<literal>-</literal>), avbryter ikke feil i kommandoen hele prosessen.
			</para>
			 </sidebar> <para>
				Filen <filename>rules</filename> inneholder vanligvis et sett med regler til å konfigurere, bygge og installere programvaren i en egen underkatalog (oppkalt etter den genererte binære pakken). Innholdet i denne underkatalogen blir deretter arkivert i Debian-pakken som om det var roten i filsystemet. I vårt tilfelle vil filene bli installert i <filename>debian/falcot-data/usr/share/falcot-data/</filename>-undermappe, slik at å installere den genererte pakken, vil plassere filene under <filename>/usr/share/falcot-data/</filename>. Filen <filename>rules</filename> blir brukt som en <filename>Makefile</filename>, med noen få standard mål (medregnet <literal>clean</literal> og <literal>binary</literal>, respektivt brukt til å rydde opp i kildemappen og generere binærpakken).
			</para>
			 <para>
				Selv om denne filen er hjertet av prosessen, inneholder den i økende grad bare et minimum for å kjøre et standard sett med kommandoer gitt av <command>debhelper</command>-verktøyet. Slik er tilfellet for filer generert av <command>dh_make</command>. For å installere våre filer må vi ganske enkelt sette opp atferden til <command>dh_install</command>-kommandoen ved å lage den følgende <filename>debian/falcot-data.install</filename>-filen:
			</para>
			 
<programlisting>
data/* usr/share/falcot-data/</programlisting>
			 <para>
				På dette tidspunktet kan pakken opprettes. Vi vil imidlertid legge til et malingstrøk. Siden administratorene ønsker at dokumentasjonen blir lett tilgjengelig fra menyene i grafiske skrivebordsmiljøer, legger vi til en <filename>falcot-data.desktop</filename>-file og får den installert i <filename>/usr/share/applications</filename> ved å legger til en andre linje til <filename>debian/falcot-data.install</filename>.
			</para>
			 <example>
				<title>Filen <filename>falcot-data.desktop</filename></title>
				 
<programlisting>
[Desktop Entry]
Name=Internal Falcot Corp Documentation
Comment=Starts a browser to read the documentation
Exec=x-www-browser /usr/share/falcot-data/index.html
Terminal=false
Type=Application
Categories=Documentation;
</programlisting>

			</example>
			 <para>
				Den oppdaterte <filename>debian/falcot-data.install</filename> ser slik ut:
			</para>
			 
<programlisting>
data/* usr/share/falcot-data/
falcot-data.desktop usr/share/applications/
</programlisting>
			 <para>
				Vår kildepakke er nå klar. Alt som gjenstår å gjøre er å generere den binære pakken med den samme metoden vi brukte tidligere for å bygge om pakker: vi kjører <command>dpkg-buildpackage -us -uc</command>-kommandoen fra <filename>falcot-data-1.0</filename>-mappen.
			</para>

		</section>

	</section>
	 <section id="sect.setup-apt-package-repository">
		<title>Å lage en pakkebrønn for APT</title>
		 <indexterm>
			<primary>pakkearkiv</primary>
		</indexterm>
		 <indexterm>
			<primary>pakke</primary>
			<secondary>Debian</secondary>
			<tertiary>arkiv</tertiary>
		</indexterm>
		 <para>
			Falcot Corp begynte gradvis å vedlikeholde en rekke Debian-pakker, enten lokalt endret fra eksisterende pakker, eller laget fra bunnen av, for å distribuere interne data og programmer.
		</para>
		 <para>
			For å gjøre utplassering lettere ønsker de å integrere disse pakkene i et pakkearkiv som kan brukes direkte av APT. Av åpenbare vedlikeholdsgrunner ønsker de å skille interne pakker fra lokalt ombygde pakker. Målet for de samsvarende oppføringene i en <filename>/etc/apt/sources.list.d/falcot.list</filename>-fil er som følger:
		</para>
		 
<programlisting>
deb http://packages.falcot.com/ updates/
deb http://packages.falcot.com/ internal/
</programlisting>
		 <indexterm>
			<primary><command>mini-dinstall</command></primary>
		</indexterm>
		 <para>
			Administratorene konfigurerer derfor en virtuell maskin på deres interne HTTP-tjener, med <filename>/srv/vhosts/packages/</filename> som roten til det tilhørende nettområdet. Håndteringen av selve arkivet er delegert til <command>mini-dinstall</command>-kommandoen (i den tilsvarende navngitte pakken). Dette verktøyet holder et øye med en <filename>incoming/</filename>-mappe (i vårt tilfelle, <filename>/srv/vhosts/packages/mini-dinstall/incoming/</filename>), og venter på nye pakker der; når en pakke er lastet opp, blir den installert i et Debian-arkiv på <filename>/srv/vhosts/packages/</filename>. Kommandoen <command>mini-dinstall</command> leser <filename>*.changes</filename>-filen som opprettes når Debian-pakken blir generert. Disse filene inneholder en liste med alle andre filer knyttet til den versjonen av pakken (<filename>*.deb</filename>, <filename>*.dsc</filename>, <filename>*.diff.gz</filename>/<filename>*.debian.tar.gz</filename>, <filename>*.orig.tar.gz</filename>, eller tilsvarende med andre komprimeringsverktøy), og disse åpner for at <command>mini-dinstall</command> får vite hvilke filer som skal installeres. <filename>*.changes</filename>-filer inneholder også navnet på måldistribusjonen (ofte <literal>unstable</literal>) nevnt i den siste <filename>debian/changelog</filename>-inngangen, og <command>mini-dinstall</command> bruker denne informasjonen til å avgjøre hvor pakken skal installeres. Dette er grunnen til at administratorer alltid må endre dette feltet før de bygger en pakke, og setter det til <literal>internal</literal>, eller <literal>updates</literal>, avhengig av måldistribusjonen. <command>mini-dinstall</command> genererer deretter filene som kreves av APT, for eksempel <filename>Packages.gz</filename>.
		</para>
		 <sidebar> <title><emphasis>ALTERNATIV</emphasis> <command>apt-ftparchive</command></title>
		 <indexterm>
			<primary><command>apt-ftparchive</command></primary>
		</indexterm>
		 <para>
			Hvis <command>mini-dinstall</command> ser for omfattende ut for dine Debian-arkivbehov, kan du også bruke <command>apt-ftparchive</command>-kommandoen. Dette verktøyet skanner innholdet i en katalog, og viser (i sine standard utdata) en samsvarende <filename>Packages</filename>-fil. I tilfellet Falcot Corp kunne administratorer laste pakkene direkte inn i <filename>/srv/vhosts/packages/updates/</filename>, eller <filename>/srv/vhosts/packages/internal/</filename>, og så kjøre de følgende kommandoer for å lage <filename>Packages.gz</filename>-filene:
		</para>
		 
<screen>
<computeroutput>$ </computeroutput><userinput>cd /srv/vhosts/packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages updates &gt;updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages internal &gt;internal/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip internal/Packages</userinput></screen>
		 <para>
			Kommandoen <command>apt-ftparchive sources</command> åpner for å lage <filename>Sources.gz</filename>-filer på en lignende måte.
		</para>
		 </sidebar> <para>
			Å konfigurere <command>mini-dinstall</command> krever oppsett av en <filename>~/.mini-dinstall.conf</filename>-fil; i Falcot Corp-tilfellet er innholdet som følger:
		</para>
		 
<programlisting>
[DEFAULT]
archive_style = flat
archivedir = /srv/vhosts/packages

verify_sigs = 0
mail_to = admin@falcot.com

generate_release = 1
release_origin = Falcot Corp
release_codename = stable

[updates]
release_label = Recompiled Debian Packages

[internal]
release_label = Internal Packages
</programlisting>
		 <para>
			En avgjørelse verdt å merke seg er generasjonen <filename>Release</filename>-filer for hvert arkiv. Dette kan hjelpe til med å administrere pakkeinstallasjonsprioriteringer med hjelp av <filename>/etc/apt/preferences</filename>-konfigurasjonsfilen (se <xref linkend="sect.apt.priorities" /> for detaljer).
		</para>
		 <sidebar> <title><emphasis>SIKKERHET</emphasis> <command>mini-dinstall</command> og tillatelser</title>
		 <para>
			Etter at <command>mini-dinstall</command> er designet for å kjøres som en vanlig bruker, er det ikke nødvendig å kjøre den som rot. Den enkleste måten er å konfigurere alt innen brukerkontoen som tilhører administratoren med ansvar for å lage Debian-pakker. Ettersom bare denne administratoren har de nødvendige tillatelsene til å sette filer inn i <filename>incoming/</filename>-katalogen, kan vi utlede at administratoren har autentisert opprinnelsen til hver pakke før utplasseringen, og <command>mini-dinstall</command> trenger ikke å gjøre det igjen. Dette forklarer <literal>verify_sigs = 0</literal>-parameteret (noe som betyr at signaturene ikke behøver å være bekreftet). Men hvis innholdet i pakkene er sensitivt, kan vi snu innstillingen, og velge å godkjenne en ring med nøkler som inneholder offentlige nøkler til personer med lov til å lage pakker (konfigurert med <literal>extra_keyrings</literal>-parameter); <command>mini-dinstall</command> vil så sjekke opprinnelsen til hver innkommende pakke ved å analysere signaturen integrert i <filename>*.changes</filename>-filen.
		</para>
		 </sidebar> <para>
			Å påkalle <command>mini-dinstall</command> starter faktisk en nisse i bakgrunnen. Så lenge denne nissen kjører, vil den se etter nye pakker i <filename>incoming/</filename>-mappen hver halvtime. Når en ny pakke kommer, vil den bli flyttet til arkivet, og riktige <filename>Packages.gz</filename> og <filename>Sources.gz</filename>-filer blir fornyet. Hvis det å kjøre en nisse er et problem, kan og <command>mini-dinstall</command> påkalles manuelt i rekkefølge (med <literal>-b</literal>-valget) hver gang en pakke blir lastet inn i <filename>incoming/</filename>-mappen. Andre muligheter som ligger i <command>mini-dinstall</command> er dokumentert på sin <citerefentry><refentrytitle>mini-dinstall</refentrytitle>
			 <manvolnum>1</manvolnum></citerefentry>-manualside.
		</para>
		 <sidebar> <title><emphasis>EKSTRA</emphasis> Å genere et signert arkiv</title>
		 <para>
			For å sikre autentisiteten kontrollerer APT-pakken en kjede med kryptografiske signaturer for pakkene den håndterer før de installeres (se <xref linkend="sect.package-authentication" />). Private APT-arkiver kan så bli et problem, ettersom maskinene som bruker dem vil holde på med å vise advarsler om usignerte pakker. En flittig administrator vil derfor integrere privatarkiver med den sikre APT-mekanismen.
		</para>
		 <para>
			For å hjelpe til med denne prosessen inkluderer <command>mini-dinstall</command> et <literal>release_signscript</literal>-oppsettsalternativ som tillater å spesifisere et skript som skal brukes til å generere signaturen. Et godt utgangspunkt er <filename>sign-release.sh</filename>-skriptet fra <emphasis role="pkg">mini-dinstall</emphasis>-pakken i <filename>/usr/share/doc/mini-dinstall/examples/</filename>; lokale endringer kan være relevante.
		</para>
		 </sidebar>
	</section>
	 <section id="sect.becoming-package-maintainer">
		<title>Å bli en pakkevedlikeholder</title>
		 <section>
			<title>Å lære å lage pakker</title>
			 <para>
				Å opprette en Debian-pakke med kvalitet er ikke alltid en enkel oppgave, å bli en pakkeutvikler krever litt læring, både teori og praksis. Det er ingen enkel sak å bygge og installere programvare; for mesteparten av kompleksiteten kommer fra å forstå problemer og konflikter, og mer generelt samhandlingene, med utallige andre pakker tilgjengelige.
			</para>
			 <section>
				<title>Regler</title>
				 <para>
					En Debian-pakke må være i samsvar med de presise regler utarbeidet i Debians retningslinjer, og hver pakkeutvikler må kjenne til dem. Det er ingen krav om å kjenne dem utenat, men heller å vite at de eksisterer, og referere til dem når et valg presenterer et ikke-trivielt alternativ. Hver Debian-vedlikeholder har gjort feil ved å ikke kjenne til en regel, men det er ikke et stort problem, så lenge feilen blir fikset når en bruker rapporterer den som en feilrapport (som pleier å skje ganske snart, takket være avanserte brukere). <ulink type="block" url="https://www.debian.org/doc/debian-policy/" />
				</para>

			</section>
			 <section>
				<title>Prosedyrer</title>
				 <indexterm>
					<primary>Debians utviklerreferanse</primary>
				</indexterm>
				 <para>
					Debian er ikke en enkel samling av enkeltpakker. Alles pakkearbeid er en del av et kollektivt prosjekt; å være en Debian-utvikler innebærer å vite hvordan Debian-prosjektet fungerer som en helhet. Hver utbygger vil, før eller senere, samhandle med andre. Debians utviklerreferanse (Debian Developer's Reference) (i <emphasis role="pkg">developers-reference</emphasis>-package) oppsummerer hva alle utviklere må vite for å samhandle så smidig som mulig med de ulike teamene i prosjektet, og for å få mest mulig ut av de tilgjengelige ressursene. Dette dokumentet oppsummerer også en rekke oppgaver en utvikler forventes å oppfylle. <ulink type="block" url="https://www.debian.org/doc/manuals/developers-reference/" />
				</para>

			</section>
			 <section>
				<title>Verktøy</title>
				 <para>
					Mange verktøy hjelper pakkevedlikeholdere med deres arbeid. Denne seksjonen gir en rask gjennomgang, uten alle detaljene, ettersom verktøyene har sin egen omfattende dokumentasjon.
				</para>
				 <section>
					<title>Programmet <command>lintian</command></title>
					 <indexterm>
						<primary><command>lintian</command></primary>
					</indexterm>
					 <para>
						Dette verktøyet er et av de viktigste: Det er Debian-pakkesjekkeren. Den bygger på et stort utvalg av tester opprettet fra Debians retningslinjer, og oppdager raskt og automatisk mange feil som deretter kan rettes før pakkene utgis.
					</para>
					 <para>
						Dette verktøyet er bare en hjelper, og noen ganger gjør den feil (for eksempel, siden Debians retningslinjer endrer seg over tid, blir <command>lintian</command> noen ganger utdatert). Det er heller ikke uttømmende: Selv om du ikke får noen Lintian-feilmelding, bør dette ikke tolkes som et bevis på at pakken er perfekt; i beste fall unngås de vanligste feilene.
					</para>

				</section>
				 <section>
					<title>Programmet <command>piuparts</command></title>
					 <indexterm>
						<primary><command>piuparts</command></primary>
					</indexterm>
					 <para>
						Dette er et annet viktig redskap: Det automatiserer installasjonen, oppgraderer, fjerner og renser en pakke (i et isolert miljø), og kontrollerer at ingen av disse operasjonene fører til feil. Det kan hjelpe til med å avdekke manglende avhengigheter, og det oppdager også når filer feilaktig er til overs etter at pakken er renset.
					</para>

				</section>
				 <section>
					<title>devscripts</title>
					 <indexterm>
						<primary><emphasis role="pkg">devscripts</emphasis></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debuild</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>dch</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>uscan</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debi</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debc</command></primary>
					</indexterm>
					 <para>
						Pakken <emphasis role="pkg">devscripts</emphasis> inneholder mange programmer som hjelper til på et stort område i Debian-utviklerens jobb:
					</para>
					 <itemizedlist>
						<listitem>
							<para>
								<command>debuild</command> tillater å generere en pakke (med <command>dpkg-buildpackage</command>), og kjøre <command>lintian</command> for så å sjekke overensstemmelsen med Debians retningslinjer.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debclean</command> renser en kildepakke etter at en binærpakke har blitt generert.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>dch</command> tillater en rask og enkel redigering av en <filename>debian/changelog</filename>-fil i en kildepakke.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>uscan</command> sjekker om en ny programvareversjon er utgitt av oppstrømsforfatteren; dette krever en <filename>debian/watch</filename>-fil med beskrivelse av plasseringen av slike utgivelser.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debi</command> tillater installering (med <command>dpkg -i</command>) av Debian-pakken som nettopp ble generert, uten å måtte skrive inn dens fulle navn og sti.
							</para>

						</listitem>
						 <listitem>
							<para>
								På lignende måte tillater <command>debc</command> skanning av innholdet i den nylig generert pakken (med <command>dpkg -c</command>), uten å måtte skrive inn dens fulle navn og sti.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>bts</command> styrer feilrapporteringssystemet fra kommandolinjen; dette programmet genererer automatisk de riktige e-postene.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debrelease</command> laster opp en nylig generert pakke til en ekstern tjener, uten å måtte skrive hele navnet og banen til den relaterte <filename>.changes</filename>-filen.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debsign</command> signerer <filename>*.dsc</filename> og <filename>*.changes</filename>-filene.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>uupdate</command> automatiserer opprettelsen av ny revisjon av en pakke når en ny oppstrømsversjon er utgitt.
							</para>

						</listitem>

					</itemizedlist>

				</section>
				 <section>
					<title><emphasis role="pkg">debhelper</emphasis> og <emphasis role="pkg">dh-make</emphasis></title>
					 <indexterm>
						<primary><emphasis>debhelper</emphasis></primary>
					</indexterm>
					 <indexterm>
						<primary><emphasis>dh-make</emphasis></primary>
					</indexterm>
					 <para>
						Debhelper er et sett med skript som letter det å lage pakker som holder seg til retningslinjene: Disse skriptene påkalles fra <filename>debian/rules</filename>. Debhelper er bredt akseptert innen Debian, noe som gjenspeiles av det faktum at den brukes av de fleste offisielle Debian-pakker. Alle kommandoene den inneholder har en <command>dh_</command>-forstavelse.
					</para>
					 <para>
						Skriptet <command>dh_make</command> (i <emphasis>dh-make</emphasis>-pakken) lager filer som kreves for å generere en Debian-pakke i en katalog som i utgangspunktet inneholder kildene for et stykke programvare. Som det kan gjettes fra navnet på programmet, bruker de genererte filene debhelper som standard.
					</para>

				</section>
				 <section>
					<title><command>dupload</command> og <command>dput</command></title>
					 <indexterm>
						<primary><command>dupload</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>dput</command></primary>
					</indexterm>
					 <para>
						Kommandoene <command>dupload</command> og <command>dput</command> tillater å laste opp en Debian-pakke til en (muligens ekstern) tjener. Dette tillater utviklere å publisere sin pakke på Debians hovedtjener (<literal>ftp-master.debian.org</literal>) slik at den kan integreres i arkivet, og distribueres av speil. Disse kommandoene tar <filename>*.changes</filename>-filen som et parameter, og utleder de andre relevante filene fra innholdet sitt.
					</para>

				</section>

			</section>

		</section>
		 <section>
			<title>Aksepteringsprosess</title>
			 <para>
				Å bli en «Debian-utvikler» er ikke en enkel administrativ sak. Fremgangsmåten omfatter flere trinn, og er like mye en igangsetting som det er utvelgelsesprosess. I alle fall er det formalisert og godt dokumentert, slik at alle kan spore sin progresjon på nettsiden dedikert til prosessen for det nye medlemmet. <ulink type="block" url="https://nm.debian.org/" />
			</para>
			 <sidebar> <title><emphasis>EKSTRA</emphasis> Lettvektsprosessen for «Debian vedlikeholdere »</title>
			 <para>
				«Debian-vedlikeholder» er en annen status som gir færre privilegier enn «Debian-utvikler», men tilknytningsprosessen går raskere. Med denne statusen kan bidragsyterne bare vedlikeholde sine egne pakker. En Debian-utvikler trenger bare å utføre en sjekk på en første opplasting, og avgi en uttalelse om at de stoler på den potensielle vedlikeholderens evne til å vedlikeholde pakken på egenhånd.
			</para>
			 <indexterm>
				<primary>Debian-vedlikeholdere </primary>
			</indexterm>
			 </sidebar> <section>
				<title>Forutsetninger</title>
				 <para>
					Alle kandidater forventes å ha i det minste arbeidskunnskap om det engelske språket. Dette er nødvendig på alle nivåer: for den første kommunikasjon med den som gjennomgår, selvfølgelig, men også senere, siden engelsk er det foretrukne språket for det meste av dokumentasjonen. I tillegg vil pakkebrukerne kommunisere på engelsk ved innrapportering av feil, og de vil forvente svar på engelsk.
				</para>
				 <para>
					Den andre forutsetningen omhandler motivasjon. Å bli en Debian-utvikler er en prosess som bare gir mening dersom kandidaten vet at interessen for Debian vil vare i mange måneder. Aksepteringsprosessen kan i seg selv vare flere måneder, og Debian trenger langtidsutviklere. Hver pakke trenger permanent vedlikehold, og ikke bare en første opplasting.
				</para>

			</section>
			 <section>
				<title>Registrering</title>
				 <para>
					Det første (virkelige) trinnet består i å finne en sponsor eller talsperson. Det betyr en offisiell utvikler som er villig til å si at de tror at å akseptere, <emphasis>X</emphasis> vil bli en god ting for Debian. Dette innebærer vanligvis at kandidaten allerede har vært aktiv i samfunnet, og at arbeidet har blitt verdsatt. Dersom kandidaten er sjenert, og arbeidet ikke er offentlig kjent, kan de prøve å overbevise en Debian-utvikler til å argumentere for dem ved å vise deres arbeid i fortrolighet.
				</para>
				 <indexterm>
					<primary>nøkkelpar</primary>
				</indexterm>
				 <para>
					Samtidig må kandidaten generere et offentlig/privat RSA-nøkkelpar med GnuPG, som skal være underskrevet av minst to offisielle Debian-utviklere. Signaturen godkjenner navnet på nøkkelen. Under et nøkkelsigneringsselskap må faktisk hver deltaker vise en offisiell identifikasjon (vanligvis et ID-kort eller pass) sammen med sine nøkkelidentifiseringer. Dette trinnet bekrefter sammenhengen mellom mennesker og nøklene. Denne signaturen krever dermed at en møtes i det virkelige liv. Hvis du ennå ikke har møtt noen Debian-utviklere på en offentlig fri programvarekonferanse, kan du eksplisitt søke utviklere som bor i nærheten ved hjelp av en liste på følgende nettside som utgangspunkt. <ulink type="block" url="https://wiki.debian.org/Keysigning" />
				</para>
				 <para>
					Så snart registeringen på <literal>nm.debian.org</literal> er blitt validert av en talsperson, blir en <emphasis>programleder (Application Manager)</emphasis> tildelt kandidaten. Søknadsbehandleren vil så kjøre prosessen gjennom flere forhåndsdefinerte trinn og sjekker.
				</para>
				 <para>
					Den første bekreftelsen er en identitetssjekk. Hvis du allerede har en nøkkel signert av to Debian-utviklere, er dette trinnet lett; ellers vil søknadsbehandleren prøve å veilede deg i ditt søk etter Debian-utviklere i nærheten, for å organisere et møte og en nøkkelsignering.
				</para>

			</section>
			 <section>
				<title>Å akeseptere prinsippene</title>
				 <para>
					Disse administrative formaliteter følges ut fra filosofiske betraktninger. Poenget er å sørge for at kandidaten forstår og aksepterer den sosiale kontrakten og prinsippene bak fri programvare. Å bli med i Debian er bare mulig hvis man deler de verdier som forener dagens utviklere, som uttrykt i de grunnleggende tekster (og oppsummert i <xref linkend="the-debian-project" />).
				</para>
				 <para>
					I tillegg skal hver kandidat som ønsker å bli med i Debian rekker forventes å kjenne arbeidet i prosjektet, og hvordan de skal samhandle på riktig måte for å løse de problemene de vil utvilsomt vil møte under tiden. All denne informasjonen er vanligvis dokumentert i manualer rettet mot de nye vedlikeholderne, og i Debian utvikler-referanse. En oppmerksom lesing av dette dokumentet bør være nok til å svare på eksaminators spørsmål. Hvis svarene ikke er tilfredsstillende, vil kandidaten bli informert. De vil da måtte lese (igjen) den relevant dokumentasjonen før de prøver igjen. I de tilfeller hvor den eksisterende dokumentasjonen ikke inneholder riktig svar på spørsmålet, kan kandidaten vanligvis kommer et svar fra litt praktisk erfaring innen Debian, eller potensielt ved å diskutere med andre Debian-utviklere. Denne mekanismen sikrer at kandidatene blir noe involvert i Debian, før de blir en full del av det. Dette er en bevisst politikk, der kandidatene som til slutt blir med i prosjektet, er integrert som en del av et uendelig utvidbart puslespill.
				</para>
				 <indexterm>
					<primary><emphasis>Philosophy &amp; Procedures</emphasis></primary>
				</indexterm>
				 <para>
					Dette trinnet er kjent som <emphasis>Philosophy &amp; Procedures</emphasis> (P&amp; P i kortform) i språket til utviklerne som er involvert i nye medlemmer-prosessen.
				</para>

			</section>
			 <section>
				<title>å sjekke ferdigheter</title>
				 <para>
					Hver søknad om å bli en offisiell Debian-utvikler må begrunnes. Å bli en prosjektdeltaker krever at en viser at denne statusen er legitim, og at den letter kandidatens jobb med å hjelpe Debian. Den vanligste begrunnelsen er, at å ha fått Debian-utvikler status letter vedlikehold av en Debian-pakke, men det er ikke den eneste. Noen utviklere deltar i prosjektet for å bidra til portering til en bestemt arkitektur, andre ønsker å forbedre dokumentasjon, og så videre.
				</para>
				 <para>
					Dette trinnet representerer muligheten for kandidaten til å si fra om hva de har tenkt å gjøre i Debian-prosjektet, og for å vise hva de allerede har gjort for dette formålet. Debian er et pragmatisk prosjekt og sier noe er ikke nok, hvis handlinger ikke samsvarer med hva som er annonsert. Vanligvis, når den tiltenkte rolle i prosjektet er knyttet til å pakkevedlikehold, må en første versjon av den potensielle pakken være godkjent teknisk og lastet opp til Debian-tjenere med en sponsor blant de eksisterende Debian-utviklerne.
				</para>
				 <sidebar> <title><emphasis>COMMUNITY</emphasis> Sponsoring</title>
				 <indexterm>
					<primary>sponsoring</primary>
				</indexterm>
				 <para>
					Debian-utviklerne kan være "sponsor" for pakker utarbeidet av en annen, noe som betyr at de publiserer dem i de offisielle Debian kildebrønner etter å ha utført en nøye gjennomgang. Denne mekanismen gjør at eksterne personer, som ennå ikke har gått gjennom prosessen for nye medlemmer, fra tid til annen kan bidra til prosjektet. Samtidig sikrer det at alle pakker som er inkludert i Debian alltid har blitt sjekket av et offisielt medlem.
				</para>
				 </sidebar> <para>
					Til slutt kontrollerer eksaminator kandidatens tekniske (pakke-) ferdigheter med et detaljert spørreskjema. Dårlige svar er ikke tillatt, men svartiden er ikke begrenset. All dokumentasjon er tilgjengelig og flere forsøk er tillatt dersom de første svarene er ikke tilfredsstillende. Dette trinnet har ikke til hensikt å diskriminere, men skal sikre minst et minstemål av kunnskap felles for nye bidragsytere.
				</para>
				 <indexterm>
					<primary><emphasis>Tasks &amp; Skills</emphasis></primary>
				</indexterm>
				 <para>
					Dette skrittet er kjent som <emphasis>Tasks &amp; Skills</emphasis> trinnet (T&amp;S for kort) i eksaminator-språket.
				</para>

			</section>
			 <section>
				<title>Første godkjenning</title>
				 <para>
					I aller siste trinn blir hele prosessen gjennomgått av en DAM (<emphasis>Debian Account Manager</emphasis>). DAM vil gjennomgå all informasjon om kandidaten som sensor samlet inn, og gjør vedtak om det skal opprettes en konto på Debian-tjenerne. I tilfeller der ekstra informasjon er nødvendig, kan å opprette en konto bli forsinket. Avslag er ganske sjeldne hvis eksaminator gjør en god jobb med å følge prosessen, men kan skje noen ganger. De er aldri permanente, og kandidaten kan gratis prøve igjen på et senere tidspunkt.
				</para>
				 <para>
					DAMs avgjørelse er autoritativ og (nesten) uten ankemuligheter, noe som forklarer hvorfor folk i det setet ofte har blitt kritisert i det siste.
				</para>

			</section>

		</section>

	</section>
</chapter>

