<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="packaging-system">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-packaging-system.png" scalefit="1" />
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>Pacchetto binario</keyword>
      <keyword>Pacchetto sorgente</keyword>
      <keyword>dpkg</keyword>
      <keyword>dipendenze</keyword>
      <keyword>conflitto</keyword>
    </keywordset>
  </chapterinfo>
  <title>Sistema dei pacchetti: strumenti e principi fondamentali</title>
  <highlights>
    <para>Come amministratore di sistema Debian, si gestiranno abitualmente pacchetti <filename>.deb</filename>, dal momento che contengono unità funzionali coordinate (applicazioni, documentazione, ecc.), di cui facilitano l'installazione e la manutenzione. È perciò una buona idea conoscere cosa sono e come usarli.</para>
  </highlights>

  <para>Questo capitolo descrive la struttura e il contenuto dei pacchetti "binari" e "sorgenti". I primi sono file <filename>.deb</filename>, direttamente utilizzabili da <command>dpkg</command>, mentre i secondi contengono il codice sorgente e le istruzioni per costruire pacchetti binari.</para>
  <section id="sect.binary-package-structure">
    <title>Struttura di un pacchetto binario</title>
    <indexterm><primary>pacchetto</primary><secondary>pacchetto binario</secondary></indexterm>
    <indexterm><primary><command>ar</command></primary></indexterm>

    <para>Il formato dei pacchetti Debian è progettato in modo che il suo contenuto possa essere estratto su qualsiasi sistema Unix che abbia i classici comandi <command>ar</command>, <command>tar</command> e <command>gzip</command> (qualche volta <command>xy</command> o <command>bzip2</command>. Questa proprietà apparentemente banale è importante per la portabilità e il disaster recovery.</para>

    <para>Immagina, ad esempio, di aver eliminato per errore il programma <command>dpkg</command> e perciò di non poter più installare pacchetti Debian. Dal momento che <command>dpkg</command> è esso stesso un pacchetto Debian, sembrerebbe che il sistema sia spacciato… Fortunatamente, si conosce il formato di un pacchetto e perciò si può scaricare il file <filename>.deb</filename> del pacchetto <emphasis role="pkg">dpkg</emphasis> e installarlo manualmente (vedi il riquadro "<xref linkend="sidebar.dpkg-apt-ar" />). Se per sfortuna uno o più dei programmi <command>ar</command>, <command>tar</command> o <command>gzip</command>/<command>xz</command>/<command>bzip2</command> fosse scomparso, sarà necessario solamente copiare il programma mancante da un altro sistema (dal momento che ognuno di essi opera in maniera completamente autonoma, senza dipendenze, una semplice copia è sufficiente). Se il sistema è stato ancora più sfortunato, ed anche questi non funzionano (forse mancano le librerie principali del sistema?), si dovrebbe provare la versione statica di <command>busybox</command> (fornito col pacchetto <emphasis role="pkg">busybox-static</emphasis>), che è ancora più autosufficiente, e fornisce sottocomandi come <command>busybox ar</command>, <command>busybox tar</command> e <command>busybox gunzip</command>.</para>

    <sidebar id="sidebar.dpkg-apt-ar">
      <title><emphasis>STRUMENTI</emphasis> <command>dpkg</command>, <command>APT</command> e <command>ar</command></title>
      <indexterm><primary><command>dpkg</command></primary></indexterm>
      <indexterm><primary><command>ar</command></primary></indexterm>
      <indexterm><primary>APT</primary></indexterm>

      <para><command>dpkg</command> è il programma che gestisce i file <filename>.deb</filename>, in particolare l'estrazione, l'analisi e lo spacchettamento.</para>

      <para><command>APT</command> è un gruppo di programmi che permette l'esecuzione di modifiche di più alto livello al sistema: installazione o rimozione di un pacchetto (mantenendo soddisfatte le dipendenze), aggiornamento del sistema, elenco dei pacchetti disponibili, ecc.</para>
    
      <indexterm><primary><command>ar</command></primary></indexterm>
      <para>Per quanto riguarda il programma <command>ar</command>, esso permette la gestione dei file con lo stesso nome: <command>ar t <replaceable>archive</replaceable></command> visualizza l'elenco dei file contenuti in tale archivio, <command>ar x <replaceable>archive</replaceable></command> estrae i file dall'archivio nella directory di lavoro corrente, <command>ar d <replaceable>archive</replaceable> <replaceable>file</replaceable></command> elimina un file dall'archivio, ecc. La sua pagina di manuale (<citerefentry><refentrytitle>ar</refentrytitle><manvolnum>1</manvolnum></citerefentry>) documenta le sue numerose operazioni. <command>ar</command> è uno strumento molto rudimentale che un amministratore Unix userebbe solo in rare occasioni, ma gli amministratori abitualmente usano <command>tar</command>, un programma di archiviazione e gestione file più evoluto. Questo è il motivo per cui è facile da ripristinare <command>dpkg</command> in caso di una sua eliminazione accidentale. Dovrai solo scaricare il pacchetto Debian ed estrarre il contenuto dall'archivio <filename>data.tar.gz</filename> nella radice del sistema (root) (<filename>/</filename>):</para>

      <screen>
<computeroutput># </computeroutput><userinput>ar x dpkg_1.17.23_amd64.deb</userinput>
<computeroutput># </computeroutput><userinput>tar -C / -p -xzf data.tar.gz</userinput></screen>
    </sidebar>

    <sidebar>
      <title><emphasis>FONDAMENTALI</emphasis> Notazione delle pagine di manuale</title>

      <para>I principianti possono essere disorientati dal trovare riferimenti a "<citerefentry><refentrytitle>ar</refentrytitle><manvolnum>1</manvolnum></citerefentry>" nella documentazione. Questo è generalmente un modo comodo per riferirsi alla pagina di manuale intitolata <literal>ar</literal> nella sezione 1.</para>

      <para>Talvolta questa notazione è usata anche per evitare ambiguità, per esempio per distinguere tra il comando <command>printf</command> che può essere anche indicato da <citerefentry><refentrytitle>printf</refentrytitle><manvolnum>1</manvolnum></citerefentry> e la funzione <function>printf</function> nel linguaggio di programmazione C, a cui ci si può riferire anche come <citerefentry><refentrytitle>printf</refentrytitle><manvolnum>3</manvolnum></citerefentry>.</para>

      <para><xref linkend="solving-problems" /> tratta le pagine di manuale per maggiori dettagli (vedere la <xref linkend="sect.manual-pages" />).</para>
    </sidebar>

    <para>Questo è il contenuto di un file <filename>.deb</filename>:</para>

    <screen><computeroutput>$ </computeroutput><userinput>ar t dpkg_1.17.23_amd64.deb</userinput>↵
<computeroutput>debian-binary↵
control.tar.gz↵
data.tar.gz↵
$ </computeroutput><userinput>ar x dpkg_1.17.23_amd64.deb</userinput>↵
<computeroutput>$ </computeroutput><userinput>ls</userinput>↵
<computeroutput>control.tar.gz  data.tar.gz  debian-binary  dpkg_1.17.23_amd64.deb↵
$ </computeroutput><userinput>tar tzf data.tar.gz | head -n 15</userinput>↵
<computeroutput>./↵
./var/↵
./var/lib/↵
./var/lib/dpkg/↵
./var/lib/dpkg/parts/↵
./var/lib/dpkg/info/↵
./var/lib/dpkg/alternatives/↵
./var/lib/dpkg/updates/↵
./etc/↵
./etc/logrotate.d/↵
./etc/logrotate.d/dpkg/↵
./etc/dpkg/↵
./etc/dpkg/dpkg.cfg.d/↵
./etc/dpkg/dpkg.cfg↵
./etc/alternatives/↵
$ </computeroutput><userinput>tar tzf control.tar.gz</userinput>↵
<computeroutput>./↵
./conffiles↵
./postinst↵
./md5sums↵
./prerm↵
./preinst↵
./control↵
./postrm↵
$ </computeroutput><userinput>cat debian-binary</userinput>↵
<computeroutput>2.0</computeroutput>↵</screen>

    <para>Come si può vedere, l'archivio <command>ar</command> di un pacchetto Debian è composto da tre file:</para>
    <itemizedlist>
      <listitem>
	<para><filename>debian-binary</filename>. Questo è un file di testo che indica semplicemente la versione del file <filename>.deb</filename> usato (nel 2015: versione 2.0).</para>
      </listitem>
      <listitem>
	<para><filename>control.tar.gz</filename>. Questo file archivio contiene tutte le meta-informazioni disponibili, come il nome e la versione del pacchetto. Alcune di queste meta-informazioni permettono agli strumenti di gestione dei pacchetti di determinare se è possibile installarlo o disinstallarlo, per esempio secondo l'elenco dei pacchetti già sulla macchina.</para>
      </listitem>
      <listitem>
	<para><filename>data.tar.gz</filename>. Questo archivio contiene tutti i file che devono essere estratti dal pacchetto; qui è dove sono memorizzati i file eseguibili, la documentazione, ecc. Alcuni pacchetti possono usare altri formati di compressione, nel qual caso il file avrà un altro nome (<filename>data.tar.bz2</filename> per bzip2, <filename>data.tar.xz</filename> per XZ).</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="sect.package-meta-information">
    <title>Meta-informazioni sul pacchetto</title>
    <indexterm><primary>meta-informazioni pacchetto</primary></indexterm>
    <indexterm><primary>pacchetto</primary><secondary>meta-informazioni</secondary></indexterm>

    <para>Il pacchetto Debian non è solo un archivio di file da installare. È parte di un insieme più ampio e descrive le proprie relazioni con altri pacchetti Debian (dipendenze, conflitti, consigli). Fornisce anche degli script che permettono l'esecuzione di comandi nei diversi stadi del ciclo di vita del pacchetto (installazione, rimozione, aggiornamenti). Questi dati sono usati dagli strumenti di gestione dei pacchetti ma non fanno parte del software contenuto nel pacchetto; essi sono, all'interno del pacchetto, ciò che viene chiamato "meta-informazione" (informazioni riguardanti altre informazioni).</para>

    <section id="sect.control">
      <title>Descrizione: il file <filename>control</filename></title>
      <indexterm><primary>meta-informazioni pacchetto</primary></indexterm>
      <indexterm><primary>pacchetto</primary><secondary>meta-informazioni</secondary></indexterm>
      <indexterm><primary><filename>control</filename></primary></indexterm>

      <para>Questo file usa una struttura simile alle intestazioni delle email (come definite dalla RFC 2822). Per esempio, per <emphasis role="pkg">apt</emphasis>, il file <filename>control</filename> è fatto così:</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>apt-cache show apt</userinput>
<computeroutput>Package: apt
Version: 1.0.9.8.2
Installed-Size: 3085
Maintainer: APT Development Team &lt;deity@lists.debian.org&gt;
Architecture: amd64
Replaces: manpages-it (&lt;&lt; 2.80-4~), manpages-pl (&lt;&lt; 20060617-3~), openjdk-6-jdk (&lt;&lt; 6b24-1.11-0ubuntu1~), sun-java5-jdk (&gt;&gt; 0), sun-java6-jdk (&gt;&gt; 0)
Depends: libapt-pkg4.12 (&gt;= 1.0.9.6), libc6 (&gt;= 2.15), libgcc1 (&gt;= 1:4.1.1), libstdc++6 (&gt;= 4.9), debian-archive-keyring, gnupg
Suggests: aptitude | synaptic | wajig, dpkg-dev (&gt;= 1.17.2), apt-doc, python-apt
Conflicts: python-apt (&lt;&lt; 0.7.93.2~)
Breaks: manpages-it (&lt;&lt; 2.80-4~), manpages-pl (&lt;&lt; 20060617-3~), openjdk-6-jdk (&lt;&lt; 6b24-1.11-0ubuntu1~), sun-java5-jdk (&gt;&gt; 0), sun-java6-jdk (&gt;&gt; 0)
Description-it: gestore di pacchetti a riga di comando
 Questo pacchetto fornisce strumenti a riga di comando per cercare e gestire
 pacchetti, così come per interrogare le informazioni sui pacchetti, usando
 l'accesso a basso livello a tutte le funzionalità della libreria libapt-pkg.
 .
 Includono:
  * apt-get per recuperare pacchetti e informazioni su di essi da fonti
    autenticate e per l'installazione, aggiornamento e rimozione dei
    pacchetti insieme alle loro dipendenze;
  * apt-cache per interrogare le informazioni disponibili sui pacchetti
    installati, così come su quelli installabili;
  * apt-cdrom per usare supporti rimovibili come fonte per i pacchetti;
  * apt-config come interfaccia alle impostazioni di configurazione;
  * apt-key come interfaccia per la gestione delle chiavi di autenticazione.
Description-md5: 9fb97a88cb7383934ef963352b53b4a7
Tag: admin::package-management, devel::lang:ruby, hardware::storage,
 hardware::storage:cd, implemented-in::c++, implemented-in::perl,
 implemented-in::ruby, interface::commandline, network::client,
 protocol::ftp, protocol::http, protocol::ipv6, role::program,
 role::shared-lib, scope::application, scope::utility, sound::player,
 suite::debian, use::downloading, use::organizing, use::searching,
 works-with::audio, works-with::software:package, works-with::text
Section: admin
Priority: important
Filename: pool/main/a/apt/apt_1.0.9.6_amd64.deb
Size: 1107560
MD5sum: a325ccb14e69fef2c50da54e035a4df4
SHA1: 635d09fcb600ec12810e3136d51e696bcfa636a6
SHA256: 371a559ce741394b59dbc6460470a9399be5245356a9183bbeea0f89ecaabb03</computeroutput></screen>

      <sidebar>
        <title><emphasis>FONDAMENTALI</emphasis> RFC — Standard per Internet</title>
        <indexterm><primary>RFC</primary></indexterm>
        <indexterm><primary>Richiesta Di Commenti</primary></indexterm>

	<para>RFC è l'acronimo di "Request For Comments" ("Richiesta di commenti"). Una RFC è generalmente un documento tecnico che descrive ciò che diventerà uno standard per Internet. Prima di diventare standardizzati e congelati, questi standard sono sottoposti a una revisione pubblica (da cui il loro nome). La IETF (Internet Engineering Task Force) decide sull'evoluzione e sullo stato di questi documenti (proposta di standard, bozza di standard, standard).</para>

	<para>RFC 2026 definisce la procedura per la standardizzazione dei protocolli Internet. <ulink type="block" url="http://www.faqs.org/rfcs/rfc2026.html" /></para>
      </sidebar>
      <section>
        <title>Dipendenze: il campo <literal>Depends</literal></title>
        <indexterm><primary>dipendenza</primary></indexterm>
        <indexterm><primary><literal>Depends</literal>, campo dell'intestazione</primary></indexterm>
        <indexterm><primary>pacchetto</primary><secondary>dipendenza</secondary></indexterm>

	<para>Le dipendenze sono definite nel campo <literal>Depends</literal> dell'intestazione del pacchetto. Questo è un elenco di condizioni che devono essere verificate perché il pacchetto lavori correttamente; queste informazioni sono usate da strumenti come <command>apt</command> per installare le librerie richieste, nelle versioni appropriateche soddisfano le dipendenze del pacchetto da installare. Per ogni dipendenza, è possibile restringere l'intervallo di versioni che verificano una condizione. In altre parole, è possibile esprimere il fatto che è necessario il pacchetto <emphasis role="pkg">libc6</emphasis> in una versione uguale o superiore a "2.15" (scritto "<command>libc6 (&gt;= 2.15)</command>"). Gli operatori di confronto per la versione sono i seguenti:</para>
        <itemizedlist>
          <listitem>
	    <para><command>&lt;&lt;</command>: minore;</para>
          </listitem>
          <listitem>
	    <para><command>&lt;=</command>: minore o uguale;</para>
          </listitem>
          <listitem>
	    <para><command>=</command>: uguale a (notare che "<literal>2.6.1</literal>" non è uguale a "<literal>2.6.1-1</literal>");</para>
          </listitem>
          <listitem>
	    <para><command>&gt;=</command>: maggiore o uguale;</para>
          </listitem>
          <listitem>
	    <para><command>&gt;&gt;</command>: maggiore.</para>
          </listitem>
        </itemizedlist>

	<para>In un elenco di condizioni che devono essere verificate, la virgola serve come separatore. In logica il suo significato sarebbe interpretato come "and". Nelle condizioni, la barra verticale ("|") esprime "or" in logica (è un "or" inclusivo, diverso dal significato "o... o..."). Ha una priorità superiore di "and" e può essere usata tante volte quanto necessario. Perciò, la dipendenza "(A o B) e C" viene scritta <command>A | B, C</command>. Invece l'espressione "A o (B e C)" deve essere scritta come "(A o B) e (A o C)", perché il campo <literal>Depends</literal> non accetta parentesi che cambino la priorità tra gli operatori logici "or" e "and". Verrebbe perciò scritta come <command>A | B, A | C</command>. <ulink type="block" url="http://www.debian.org/doc/debian-policy/ch-relationships.html" /></para>

        <indexterm><primary>meta-pacchetto</primary></indexterm>
	<para>Il sistema delle dipendenze è un buon meccanismo per garantire il funzionamento di un programma, ma ha un altro uso con i "meta-pacchetti". Questi sono pacchetti vuoti che descrivono solamente le dipendenze. Essi facilitano l'installazione di gruppi coerenti di programmi prescelti dal manutentore del meta-pacchetto; in tal modo, <command>apt-get install <replaceable>meta-pacchetto</replaceable></command> installerà automaticamente tutti questi programmi usando le dipendenze del meta-pacchetto. Esempi di meta-pacchetti sono <emphasis role="pkg">gnome</emphasis>, <emphasis role="pkg">kde</emphasis> e <emphasis role="pkg">linux-image-2.6-686</emphasis>.</para>

        <sidebar>
          <title><emphasis>POLICY DEBIAN</emphasis> <literal>Pre-Depends</literal>, più esigente di <literal>Depends</literal></title>
          <indexterm><primary><literal>Pre-Depends</literal>, campo dell'intestazione</primary></indexterm>
          <indexterm><primary>pre-dipendenza</primary></indexterm>

	  <para>Le "pre-dipendenze", che sono elencate nel campo "<literal>Pre-Depends</literal>" nelle intestazioni del pacchetto, completano le normali dipendenze; la loro sintassi è identica. Una normale dipendenza indica che il pacchetto in questione deve essere scompattato e configurato prima del pacchetto che dichiara la pre-dipendenza. Una pre-dipendenza indica espressamente che il pacchetto in questione deve essere scompattato e configurato prima dell'esecuzione dello script di pre-installazione del pacchetto che dichiara la pre-dipendenza, cioè prima della sua installazione.</para>

	  <para>Una pre-dipendenza è molto forte per <command>apt</command> perché aggiunge un vincolo stretto sull'ordine dei pacchetti da installare. Pertanto, le pre-dipendenze sono scoraggiate se non assolutamente necessarie. È anche consigliato consultare altri sviluppatori in <email>debian-devel@lists.debian.org</email> prima di aggiungere una pre-dipendenza. In genere è possibile trovare un'altra soluzione per aggirare il problema.</para>
        </sidebar>

        <sidebar>
          <title><emphasis>POLICY DEBIAN</emphasis> I campi <literal>Recommends</literal>, <literal>Suggests</literal> e <literal>Enhances</literal></title>
          <indexterm><primary><literal>Recommends</literal>, campo dell'intestazione</primary></indexterm>
          <indexterm><primary><literal>Suggests</literal>, campo dell'intestazione</primary></indexterm>

	  <para>I campi <literal>Recommends</literal> e <literal>Suggests</literal> descrivono dipendenze non obbligatorie. Le dipendenze "raccomandate", le più importanti, migliorano considerevolmente le funzionalità offerte dal pacchetto, ma non sono indispensabili al suo funzionamento. Le dipendenze "consigliate", di importanza secondaria, indicano che certi pacchetti possono integrare o aumentare la loro rispettiva utilità, ma è perfettamente ragionevole installarne uno senza gli altri.</para>

	  <para>Si dovrebbe sempre installare i pacchetti "raccomandati", a meno che non si sappia esattamente perché non se ne ha bisogno. Al contrario, non è necessario installare i pacchetti "consigliati" a meno che non si sappia perché se ne ha bisogno.</para>

          <indexterm><primary><literal>Enhances</literal>, campo dell'intestazione</primary></indexterm>

	  <para>Anche il campo <literal>Enhances</literal> descrive un consiglio, ma in un contesto differente. Infatti si trova nel pacchetto consigliato, non nel pacchetto che beneficia del consiglio. È interessante perché è possibile aggiungere un consiglio senza dover modificare il pacchetto interessato. Perciò, tutte le aggiunte, plug-in, e altre estensioni a un programma possono prendere posto nell'elenco di consigli relativi a quel software. Sebbene esista da diversi anni, quest'ultimo campo è ancora largamente ignorato da programmi come <command>apt-get</command> o <command>synaptic</command>. Il suo scopo è far apparire all'utente un consiglio fatto dal campo <literal>Enhances</literal> in aggiunta ai tradizionali consigli trovati nel campo <literal>Suggests</literal>.</para>
        </sidebar>
      </section>
      <section>
        <title>Conflitti: il campo <literal>Conflicts</literal></title>
        <indexterm><primary>conflitti</primary></indexterm>
        <indexterm><primary><literal>Conflicts</literal>, campo dell'intestazione</primary></indexterm>
        <indexterm><primary>pacchetto</primary><secondary>conflitto</secondary></indexterm>

	<para>Il campo <literal>Conflitti</literal> indica quando un pacchetto non può essere installato insieme a un altro. La ragione più comune è che entrambi i pacchetti contengono un file con lo stesso nome o forniscono lo stesso servizio sulla stessa porta TCP, oppure si ostacolerebbero a vicenda nel funzionamento.</para>

	<para><command>dpkg</command> si rifiuterà di installare un pacchetto che provoca un conflitto con un pacchetto già installato, a meno che il nuovo pacchetto non specifichi che "sostituisce" il pacchetto installato, nel qual caso <command>dpkg</command> sceglierà di sostituire il vecchio pacchetto con quello nuovo. <command>apt</command> segue sempre le istruzioni: se si sceglie di installare un nuovo pacchetto, offrirà automaticamente di disinstallare il pacchetto che crea un problema.</para>
      </section>
      <section>
        <title>Incompatibilità: il campo <literal>Breaks</literal></title>
        <indexterm><primary>incompatibilità</primary></indexterm>
        <indexterm><primary><literal>Breaks</literal>, campo dell'intestazione</primary></indexterm>
        <indexterm><primary>pacchetto</primary><secondary>incompatibilità</secondary></indexterm>

	<para>Il campo <literal>Breaks</literal> ha un effetto simile a <literal>Conflicts</literal>, ma con un significato speciale. Segnala che l'installazione di un pacchetto "renderà difettoso" un altro pacchetto (o delle sue versioni particolari). In generale, questa incompatibilità tra due pacchetti è transitoria e la relazione <literal>Breaks</literal> fa specifico riferimento alle versioni incompatibili.</para>

	<para><command>dpkg</command> si rifiuterà di installare un pacchetto che rende difettoso un pacchetto già installato e <command>apt</command> cercherà di risolvere il problema aggiornando il pacchetto che sarebbe reso difettoso a una nuova versione (che si suppone corretta e, perciò, di nuovo compatibile).</para>

	<para>Questo tipo di situazione può accadere in caso di aggiornamenti senza compatibilità all'indietro: questo è il caso di una nuova versione che non funziona più insieme alla vecchia versione e causa un malfunzionamento in un altro programma senza avere accorgimenti speciali. Il campo <literal>Breaks</literal> evita che l'utente incontri tali problemi.</para>
      </section>
      <section>
        <title>Oggetti forniti: il campo <literal>Provides</literal></title>
        <indexterm><primary><literal>Provides</literal>, campo dell'intestazione</primary></indexterm>

	<para>Questo campo introduce il concetto molto interessante di "pacchetto virtuale". Ha molti ruoli, ma due sono particolarmente importanti. Il primo ruolo consiste nell'usare un pacchetto virtuale per associare ad esso un servizio generico (il pacchetto "fornisce" il servizio). Il secondo indica che un pacchetto sostituisce completamente un altro e che per questo scopo può anche soddisfare le dipendenze che l'altro soddisferebbe. Perciò è possibile creare un pacchetto sostitutivo senza dover usare il solito nome di pacchetto.</para>

        <sidebar>
          <title><emphasis>VOCABOLARIO</emphasis> Meta-pacchetto e pacchetto virtuale</title>
          <indexterm><primary>meta-pacchetto</primary></indexterm>
          <indexterm><primary>pacchetto</primary><secondary>pacchetto virtuale</secondary></indexterm>
          <indexterm><primary>pacchetto virtuale</primary></indexterm>

	  <para>È essenziale distinguere chiaramente i meta-pacchetti dai pacchetti virtuali. I primi sono pacchetti reali (che comprendono dei file <filename>.deb</filename> reali), il cui unico scopo è di esprimere dipendenze.</para>

	  <para>I pacchetti virtuali, invece, non esistono fisicamente; sono solo un mezzo per identificare pacchetti reali in base a criteri comuni e logici (servizio fornito, compatibilità con un programma standard o con un pacchetto preesistente, ecc.).</para>
        </sidebar>
        <section>
          <title>Fornire un "servizio"</title>

	  <para>Il primo caso può essere discusso nei dettagli con un esempio: si dice che tutti server di posta, come <emphasis role="pkg">postfix</emphasis> o <emphasis role="pkg">sendmail</emphasis> "forniscono" il pacchetto virtuale <emphasis role="pkg">mail-transport-agent</emphasis>. Perciò, ogni pacchetto che abbia bisogno di questo servizio per funzionare (es. un gestore di mailing list come <emphasis role="pkg">smartlist</emphasis> o <emphasis role="pkg">sympa</emphasis>) semplicemente dichiara nelle proprie dipendenze di richiedere <emphasis role="pkg">mail-transport-agent</emphasis> invece di specificare un lungo ed incompleto elenco di possibili soluzioni (es. <command>postfix | sendmail | exim | …</command>). Inoltre, è inutile installare due server di posta sulla stessa macchina, questo è il motivo per cui ognuno di tali pacchetti dichiara un conflitto con il pacchetto virtuale <emphasis role="pkg">mail-transport-agent</emphasis>. Il conflitto di un pacchetto con sé stesso viene ignorato dal sistema, ma questa tecnica impedisce l'installazione contemporanea di due server di posta.</para>

          <sidebar>
            <title><emphasis>POLICY DEBIAN</emphasis> Elenco di pacchetti virtuali</title>
            <indexterm><primary>pacchetto</primary><secondary>pacchetto virtuale</secondary></indexterm>

	    <para>Perché i pacchetti virtuali siano utili, tutti devono concordare sul loro nome. Questo è il motivo per cui sono standardizzati nella Policy Debian. L'elenco include tra gli altri <emphasis role="pkg">mail-transport-agent</emphasis> per i server di posta, <emphasis role="pkg">c-compiler</emphasis> per i compilatori del linguaggio di programmazione C, <emphasis role="pkg">www-browser</emphasis> per i browser web, <emphasis role="pkg">httpd</emphasis> per i server web, <emphasis role="pkg">ftp-server</emphasis> per i server FTP, <emphasis role="pkg">x-terminal-emulator</emphasis> per gli emulatori di terminale in modalità grafica (<command>xterm</command>) e <emphasis role="pkg">x-window-manager</emphasis> per i gestori di finestre.</para>

	    <para>L'elenco completo si può trovare sul Web. <ulink type="block" url="http://www.debian.org/doc/packaging-manuals/virtual-package-names-list.txt" /></para>
          </sidebar>
        </section>
        <section>
          <title>Interscambiabilità con un altro pacchetto</title>

	  <para>Il campo <literal>Provides</literal> è interessante anche quando il contenuto di un pacchetto è incluso in un pacchetto più grande. Per esempio, il modulo Perl <emphasis role="pkg">libdigest-md5-perl</emphasis> era un modulo opzionale in Perl 5.6 ed è stato integrato come standard in Perl 5.8 (e in versioni successive, come la 5.20 presente in <emphasis role="distribution">Jessie</emphasis>). Perciò, dalla versione 5.8 il pacchetto <emphasis role="pkg">perl</emphasis> ha dichiarato <literal>Provides: libdigest-md5-perl</literal> così che le dipendenze da questo pacchetto sono soddisfate se l'utente ha Perl 5.8 (o successivi). Il pacchetto <emphasis role="pkg">libdigest-md5-perl</emphasis> vero e proprio è stato infine eliminato, dal momento che non aveva più alcuno scopo quando le vecchie versioni di Perl sono state rimosse.</para>

          <figure>
            <title>Uso del campo <literal>Provides</literal> per non lasciare dipendenze non soddisfatte</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="images/virtual-package.png" width="50%" />
              </imageobject>
            </mediaobject>
          </figure>

	  <para>Questa caratteristica è molto utile dal momento che non è mai possibile anticipare le variabilità dello sviluppo ed è necessario essere in grado di adattarsi ai cambiamenti di nome del software obsoleto e ad altre sostituzioni automatiche.</para>

          <sidebar>
            <title><emphasis>FONDAMENTALI</emphasis> Perl, un linguaggio di programmazione</title>
            <indexterm><primary>Perl</primary></indexterm>
            <indexterm><primary>CPAN</primary></indexterm>

	    <para>Perl (Practical Extraction and Report Language) è un linguaggio di programmazione molto popolare. Ha molti moduli pronti all'uso che coprono un vasto spettro di applicazioni e che sono distribuiti tramite i server CPAN (Comprehensive Perl Archive Network), una completa rete di pacchetti Perl. <ulink type="block" url="http://www.perl.org/" /> <ulink type="block" url="http://www.cpan.org/" /></para>

	    <para>Dal momento che è un linguaggio interpretato, un programma scritto in Perl non richiede una compilazione prima dell'esecuzione. Questo è il motivo per cui sono chiamati "script Perl".</para>
          </sidebar>
        </section>
        <section>
          <title>Limitazioni Passate</title>

	  <para>I pacchetti virtuali soffrono di alcune limitazioni problematiche, la più significativa delle quali è l'assenza di un numero di versione. Per tornare all'esempio precedente, una dipendenza come <literal>Depends: libdigest-md5-perl (&gt;= 1.6)</literal>, nonostante la presenza di Perl 5.10, non verrà mai considerata soddisfatta dal sistema dei pacchetti — mentre in realtà molto probabilmente è soddisfatta. Inconsapevole di ciò, il sistema dei pacchetti sceglie l'opzione meno rischiosa, supponendo che le versioni non coincidano.</para>

          <para>Questa limitazione è stata sollevata in <emphasis role="pkg">dpkg</emphasis> 1.17.11, e non è più presente in Jessie. I pacchetti possono assegnare una versione ai pacchetti virtuali ai quali forniscono una dipendenza come <literal>Provides: libdigest-md5-perl (= 1.8)</literal>.</para>
        </section>
      </section>

      <section>
        <title>Sostituzione di file: il campo <literal>Replaces</literal></title>
        <indexterm><primary>sostituzione</primary></indexterm>
        <indexterm><primary><literal>Replaces</literal>, campo dell'intestazione</primary></indexterm>
        <indexterm><primary>pacchetto</primary><secondary>sostituzione</secondary></indexterm>

	<para>Il campo <literal>Replaces</literal> indica che il pacchetto contiene file che sono presenti anche in un altro pacchetto, ma che il pacchetto è legittimamente titolato a sostituirli. Senza questa specificazione, <command>dpkg</command> fallisce dichiarando che non può sovrascrivere i file di un altro pacchetto (tecnicamente è possibile obbligarlo a farlo con l'opzione <literal>--force-overwrite</literal>, ma questa non è considerata un'operazione regolare). Ciò permette di identificare potenziali problemi e obbliga il manutentore a studiare la situazione prima di scegliere se aggiungere tale campo.</para>

	<para>L'uso di questo campo è giustificato quando il nome del pacchetto cambia o quando un pacchetto è incluso in un altro. Questo succede anche quando il manutentore decide di distribuire i file in maniera differente tra i vari pacchetti binari prodotti dallo stesso pacchetto sorgente: un file sostituito non appartiene più al vecchio pacchetto, ma solo a quello nuovo.</para>

	<para>Se tutti i file di un pacchetto installato sono stati sostituiti, il pacchetto è considerato come rimosso. Infine, questo campo incoraggia <command>dpkg</command> a rimuovere il pacchetto sostituito quando c'è un conflitto.</para>

        <sidebar id="sidebar.debtags">
          <title><emphasis>APPROFONDIMENTI</emphasis> Il campo <literal>Tag</literal></title>

	  <para>Nell'esempio precedente su <emphasis role="pkg">apt</emphasis>, si può vedere la presenza di un campo che non è stato ancora descritto, il campo <literal>Tag</literal>. Questo campo non descrive una relazione tra pacchetti, ma è semplicemente un modo per classificare i pacchetti in categorie in base al tema. Questa classificazione di pacchetti secondo diversi criteri (tipo di interfaccia, linguaggio di programmazione, campo di applicazione, ecc.) è uno sviluppo recente in Debian. Per questo motivo, non tutti i pacchetti hanno etichette accurate e non è ancora integrata in tutti gli strumenti di Debian; <command>aptitude</command> mostra queste etichette e permette di usarle come criteri di ricerca. Per coloro che provano repulsione verso i criteri di ricerca di <command>aptitude</command>, il seguente sito permette la navigazione del database delle etichette: <ulink type="block" url="http://debtags.alioth.debian.org/" /></para>
        </sidebar>
      </section>
    </section>
    <section id="sect.configuration-scripts">
      <title>Script di configurazione</title>
      <indexterm><primary><filename>postinst</filename></primary></indexterm>
      <indexterm><primary><filename>preinst</filename></primary></indexterm>
      <indexterm><primary><filename>postrm</filename></primary></indexterm>
      <indexterm><primary><filename>prerm</filename></primary></indexterm>
      <indexterm><primary><filename>control.tar.gz</filename></primary></indexterm>

      <para>In aggiunta al file <filename>control</filename>, l'archivio <filename>control.tar.gz</filename> per ogni pacchetto Debian può contenere alcuni script, chiamati da <command>dpkg</command> a differenti stadi dell'elaborazione di un pacchetto. La Policy Debian descrive nei dettagli i casi possibili, specificando gli script chiamati e gli argomenti che ricevono. Queste sequenze possono essere complicate, dal momento che, se uno degli script fallisce, <command>dpkg</command> cercherà di ritornare a uno stato soddisfacente annullando l'installazione o la rimozione in corso (per quanto possibile).</para>

      <sidebar>
        <title><emphasis>APPROFONDIMENTI</emphasis> Il database di <command>dpkg</command></title>
        <indexterm><primary><filename>/var/lib/dpkg/</filename></primary></indexterm>
	<indexterm><primary>dpkg</primary><secondary>database</secondary></indexterm>

	<para>Tutti gli script di configurazione per i pacchetti installati sono memorizzati nella directory <filename>/var/lib/dpkg/info/</filename>, sotto forma di file il cui nome inizia con il nome del pacchetto. Questa directory comprende anche un file con l'estensione <filename>.list</filename> per ogni pacchetto, che contiene l'elenco dei file che appartengono a tale pacchetto.</para>

	<para>Il file <filename>/var/lib/dpkg/status</filename> contiene una serie di blocchi di dati (nel formato delle note intestazioni di posta, RFC 2822) che descrive lo stato di ogni pacchetto. Anche le informazioni del file <filename>control</filename> del pacchetto installato sono duplicate qui.</para>
      </sidebar>

      <para>In genere, lo script <filename>preinst</filename> viene eseguito prima dell'installazione del pacchetto, mentre <filename>postinst</filename> la segue. Nella stessa maniera, <filename>prerm</filename> viene invocato prima della rimozione di un pacchetto e <filename>postrm</filename> dopo. Un aggiornamento di un pacchetto equivale alla rimozione della versione precedente e all'installazione di quella nuova. Non è possibile qui descrivere nei dettagli tutti i possibili scenari, ma saranno discussi i due più comuni: un'installazione/aggiornamento e una rimozione.</para>

      <sidebar>
        <title><emphasis>ATTENZIONE</emphasis> Nomi simbolici degli script</title>

	<para>Le sequenze descritte in questa sezione chiamano gli script di configurazione con nomi specifici come <command>old-prerm</command> o <command>new-postinst</command>. Sono rispettivamente lo script <command>prerm</command> contenuto nella vecchia versione del pacchetto (installata prima dell'aggiornamento) e lo script <command>postinst</command> contenuto nella nuova versione (installata dall'aggiornamento).</para>
      </sidebar>

      <sidebar>
        <title><emphasis>SUGGERIMENTO</emphasis> Diagrammi di stato</title>

	<para>Manoj Srivastava ha creato questi diagrammi che spiegano come gli script di configurazione vengono chiamati da <command>dpkg</command>. Diagrammi simili sono stati sviluppati anche dal progetto Debian Women; sono un po' più semplici da comprendere, ma meno completi. <ulink type="block" url="https://people.debian.org/~srivasta/MaintainerScripts.html" /> <ulink type="block" url="https://wiki.debian.org/MaintainerScripts" /></para>
      </sidebar>
      <section>
        <title>Installazione e aggiornamento</title>
        <indexterm><primary><command>dpkg</command></primary><secondary>funzionamento interno</secondary></indexterm>

	<para>Ecco cosa succede durante un'installazione (o un aggiornamento):</para>
        <orderedlist>
          <listitem>
	    <para>Per un aggiornamento, <command>dpkg</command> chiama <command>old-prerm upgrade <replaceable>new-version</replaceable></command>.</para>
          </listitem>
          <listitem>
	    <para>Per un aggiornamento, <command>dpkg</command> poi esegue <command>new-preinst upgrade <replaceable>vecchia-versione</replaceable></command>; per una prima installazione, esegue <command>new-preinst install</command>. Può anche aggiungere la vecchia versione nell'ultimo parametro, se il pacchetto è già stato installato e rimosso (ma non completamente e i vecchi file di configurazione sono stati conservati).</para>
          </listitem>
          <listitem>
	    <para>Poi i file del nuovo pacchetto vengono scompattati. Se un file esiste già, viene sostituito, ma viene fatta temporaneamente una copia di backup.</para>
          </listitem>
          <listitem>
	    <para>Per un aggiornamento, <command>dpkg</command> esegue <command>old-postrm upgrade <replaceable>nuova-versione</replaceable></command>.</para>
          </listitem>
          <listitem>
	    <para><command>dpkg</command> aggiorna tutti i dati interni (elenco file, script di configurazione, ecc.) e rimuove i backup dei file sostituiti. Questo è il punto di non ritorno: <command>dpkg</command> non ha più accesso a tutti gli elementi necessari a ritornare allo stato precedente.</para>
          </listitem>
          <listitem>
	    <para><command>dpkg</command> aggiornerà i file di configurazionek, chiedendo all'utente di decidere se non è in grado di gestire automaticamente questo compito. I dettagli di questa procedura sono discussi nella <xref linkend="sect.conffiles" />.</para>
          </listitem>
          <listitem>
	    <para>Infine, <command>dpkg</command> configura il pacchetto eseguendo <command>new-postinst configure <replaceable>ultima-versione-configurata</replaceable></command>.</para>
          </listitem>
        </orderedlist>
      </section>
      <section>
        <title>Rimozione di pacchetti</title>

	<para>Ecco cosa succede durante la rimozione di un pacchetto:</para>
        <orderedlist>
          <listitem>
	    <para><command>dpkg</command> chiama <command>prerm remove</command>.</para>
          </listitem>
          <listitem>
	    <para><command>dpkg</command> rimuove tutti i file del pacchetto, con l'eccezione dei file di configurazione e gli script di configurazione.</para>
          </listitem>
          <listitem>
	    <para><command>dpkg</command> esegue <command>postrm remove</command>. Tutti gli script di configurazione, eccetto <filename>postrm</filename>, vengono rimossi. Se l'utente non ha usato l'opzione "purge", le operazioni sono terminate qui.</para>
          </listitem>
          <listitem>
	    <para>Per una eliminazione completa del pacchetto (comando impartito con <command>dpkg --purge</command> o <command>dpkg -P</command>), anche i file di configurazione vengono eliminati, così come certe copie (<filename>*.dpkg-tmp</filename>, <filename>*.dpkg-old</filename>, <filename>*.dpkg-new</filename>) e certi file temporanei; poi <command>dpkg</command> esegue <command>postrm purge</command>.</para>
          </listitem>
        </orderedlist>

        <sidebar>
          <title><emphasis>VOCABOLARIO</emphasis> Purge, una rimozione completa</title>
          <indexterm><primary>eliminazione completa di un pacchetto</primary></indexterm>

	  <para>Quando un pacchetto Debian viene rimosso, i file di configurazione sono conservati per facilitare una possibile reinstallazione. Per lo stesso motivo, i dati generati da un demone (come i contenuti della directory di un server LDAP o il contenuto di un database per un server SQL) normalmente sono conservati.</para>

	  <para>Per rimuovere tutti i dati associati a un pacchetto, è necessario eseguirne il "purge" con il comando <command>dpkg -P <replaceable>pacchetto</replaceable></command>, <command>apt-get remove --purge <replaceable>pacchetto</replaceable></command> oppure <command>aptitude purge <replaceable>pacchetto</replaceable></command>.</para>

	  <para>Vista la natura definitiva di tale rimozione di dati, una rimozione con purge non dovrebbe essere effettuata con leggerezza.</para>
        </sidebar>

        <indexterm><primary><filename>config</filename>, script di <command>debconf</command></primary></indexterm>

	<para>I quattro script descritti più avanti sono complementati da uno script <filename>config</filename>, fornito dai pacchetti usando <command>debconf</command> per acquisire dall'utente le informazioni per la configurazione. Durante l'installazione, questo script definisce nei dettagli le domande poste da <command>debconf</command>. Le risposte sono registrate del database di <command>debconf</command> per usi futuri. Lo script è generalmente eseguito da <command>apt</command> prima di installare i pacchetti uno per uno in modo da raggruppare tutte le domande e porle all'utente all'inizio del procedimento. Gli script pre- e post-installazione possono quindi usare queste informazioni per operare secondo i desideri dell'utente.</para>

        <sidebar>
          <title><emphasis>STRUMENTO</emphasis> <command>debconf</command></title>
          <indexterm><primary><command>debconf</command></primary></indexterm>

	  <para><command>debconf</command> è stato creato per risolvere un problema ricorrente in Debian. Tutti i pacchetti Debian che non sono in grado di funzionare senza un minimo di configurazione ponevano le loro domande con chiamate ai comandi <command>echo</command> e <command>read</command> in script della shell come <filename>postinst</filename> e script simili. Ma questo significava che durante un'installazione o un aggiornamento importante l'utente doveva stare davanti al computer per rispondere alle varie domande che potevano essere poste in qualsiasi momento. Queste interazioni manuali sono quasi completamente eliminate grazie allo strumento <command>debconf</command>.</para>

	  <para><command>debconf</command> ha molte caratteristiche interessanti: richiede che lo sviluppatore specifichi l'interazione con l'utente; permette la localizzazione di varie stringhe di caratteri visualizzate (tutte le traduzioni sono memorizzate nel file <filename>templates</filename> che descrive le interazioni); ha diversi modelli di visualizzazione per sottoporre le domande all'utente (modalità testo, modalità grafica, non interattiva); permette la creazione di un database centrale di risposte per condividere la stessa configurazione con diversi computer... ma la più importante è che ora è possibile presentare tutte le domande in blocco prima di iniziare un lungo processo di installazione o di aggiornamento. L'utente può fare altre cose mentre il sistema gestisce da solo l'installazione, senza dove stare a fissare lo schermo in attesa di domande.</para>
        </sidebar>
      </section>
    </section>
    <section id="sect.conffiles">
      <title>Somme di controllo, elenco di file di configurazione</title>
      <indexterm><primary><filename>md5sums</filename></primary></indexterm>
      <indexterm><primary><filename>conffiles</filename></primary></indexterm>
      <indexterm><primary>conflitti</primary></indexterm>
      <indexterm><primary>file</primary><secondary>file di configurazione</secondary></indexterm>
      <indexterm><primary>configurazione</primary><secondary>file</secondary></indexterm>

      <para>Oltre ai file di configurazione menzionati nelle sezioni precedenti, il file <filename>control.tar.gz</filename> contenuto in un pacchetto Debian potrebbe contenere altri file interessanti. Il primo, <filename>md5sums</filename>, contiene i checksum MD5 per tutti i file del pacchetto. Il suo vantaggio principale è che permette a <command>dpkg --verify</command> (che sarà studiato nella <xref linkend="sect.dpkg-verify" />) di controllare se questi file sono stati modificati dopo la loro installazione. Si noti che quando il file non esiste, <command>dpkg</command> lo genererà in modo dinamico al momento dell'installazione (e lo memorizzerà nel database di dpkg come gli altri file di controllo).</para>

      <para><filename>conffiles</filename> elenca i file del pacchetto che devono essere gestiti come file di configurazione. I file di configurazione possono essere modificati dall'amministratore, e <command>dpkg</command> cercherà di  mantenere questi cambiamenti durante l'aggiornamento del pacchetto.</para>

      <para>In effetti, in questa situazione, <command>dpkg</command> si comporta il più intelligentemente possibile: non fa niente se il file di configurazione standard non è cambiato tra le due versioni. Se, invece, il file è cambiato, cercherà di aggiornarlo. Sono possibili due casi: o l'amministratore non ha toccato questo file di configurazione, nel qual caso <command>dpkg</command> installa automaticamente la nuova versione; oppure il file è stato modificato, nel qual caso <command>dpkg</command> chiede all'amministratore quale versione desidera usare (quella vecchia con modifiche o quella nuova fornita con il pacchetto). Per aiutare nella decisione, <command>dpkg</command> offre la possibilità di visualizzare un "<command>diff</command>" che mostra le differenze tra le due versioni. Se l'utente sceglie di tenere la vecchia versione, quella nuova sarà memorizzata nella stessa posizione, in un file con il suffisso <filename>.dpkg-dist</filename>. Se l'utente sceglie la nuova versione, quella vecchia è mantenuta in un file con il suffisso <filename>.dpkg-old</filename>. Un'altra azione disponibile consiste nell'interrompere momentaneamente <command>dpkg</command> per modificare il file e tentare di applicare di nuovo le relative modifiche (precedentemente identificate con <command>diff</command>).</para>

      <sidebar id="sidebar.questions-conffiles">
        <title><emphasis>APPROFONDIMENTI</emphasis> Evitare le domande del file di configurazione</title>

	<para><command>dpkg</command> gestisce gli aggiornamenti del file di configurazione, ma interrompe regolarmente queste operazioni per chiedere input dall'amministratore. Questo lo rende poco piacevole per chi desidera eseguire gli aggiornamenti in maniera non interattiva. Questo è il motivo per cui questo programma offre opzioni che permettono al sistema di rispondere automaticamente secondo la stessa logica: <command>--force-confold</command> mantiene la vecchia versione del file; <command>--force-confnew</command> userà la nuova versione del file (queste scelte sono rispettate anche se il file non è stato cambiato dall'amministratore, cosa che solo raramente ha l'effetto desiderato). L'aggiunta dell'opzione <command>--force-confdef</command> dice a <command>dpkg</command> di usare l'opzione predefinita quando è offerta una scelta (in altre parole, quando il file di configurazione originale non è stato toccato) e usa <command>--force-confnew</command> o <command>--force-confold</command> per gli altri casi.</para>

	<para>Queste opzioni si applicano a <command>dpkg</command>, ma la maggior parte del tempo l'amministratore lavorerà direttamente con i programmi <command>aptitude</command> o <command>apt-get</command>. È, perciò, necessario conoscere la sintassi usata per indicare le opzioni da passare al comando <command>dpkg</command> (le loro interfacce da riga di comando sono molto simili).</para>

        <screen>
<computeroutput># </computeroutput><userinput>apt-get -o DPkg::Options::="--force-confdef" -o DPkg::options::="--force-confold" dist-upgrade</userinput></screen>

	<para>Queste opzioni possono essere memorizzate direttamente nella configurazione del programma <command>apt</command>, invece che specificarle ogni volta sulla riga di commando. Per far ciò, è sufficiente scrivere la riga seguente nel file <filename>/etc/apt/apt.conf.d/local</filename>:</para>
        <informalexample>
          <programlisting>
DPkg::Options { "--force-confdef"; "--force-confold"; }</programlisting>
        </informalexample>

	<para>Includere questa opzione nel file di configurazione permetterà di usarlo anche in un'interfaccia grafica come <command>aptitude</command>.</para>
      </sidebar>

      <sidebar id="sidebar.questions-conffiles-bis">
        <title><emphasis>APPROFONDIMENTI</emphasis> Obbligare dpkg a porre le domande del file di configurazione</title>

	<para>L'opzione <command>--force-confask</command> richiede che <command>dpkg</command> visualizzi le domande sui file di configurazione, anche nei casi in cui non sarebbe normalmente necessario. Perciò, durante la reinstallazione di un pacchetto con questa opzione, <command>dpkg</command> porrà di nuovo le domande per tutti i file di configurazione modificati dall'amministratore. Questo è molto comodo, specialmente per reinstallare il file di configurazione originale se è stato eliminato e non ne è disponibile un'altra copia: una normale reinstallazione non funzionerebbe perché <command>dpkg</command> considera la rimozione come una forma legittima di modifica e perciò non installa il file di configurazione desiderato.</para>
      </sidebar>
    </section>
  </section>
  <section id="sect.source-package-structure">
    <title>Struttura di un pacchetto sorgente</title>
    <indexterm><primary>pacchetto</primary><secondary>pacchetto sorgente</secondary></indexterm>
    <indexterm><primary>sorgente</primary><secondary>pacchetto</secondary></indexterm>
    <section>
      <title>Formato</title>
      <indexterm><primary>file DSC</primary></indexterm>
      <indexterm><primary><filename>diff.gz</filename> file</primary></indexterm>
      <indexterm><primary><filename>diff.gz</filename> file</primary></indexterm>
      <indexterm><primary><filename>diff.gz</filename> file</primary></indexterm>

      <para>Un pacchetto sorgente è normalmente composto da tre file, un <filename>.dsc</filename>, un <filename>.orig.tar.gz</filename> e un <filename>.debian.tar.gz</filename> o <filename>.diff.gz</filename>. Essi permettono la creazione di pacchetti binari (i file <filename>.deb</filename> descritti precedentemente) per uno o più programmi dal loro codice sorgente, scritto in un linguaggio di programmazione.</para>

      <para>Il file <filename>.dsc</filename> (Debian Source Control) è un breve file di testo che contiene un'intestazione RFC 2822 (proprio come il file <filename>control</filename> esaminato nella <xref linkend="sect.control" />) che descrive il pacchetto sorgente e indica quali altri file ne fanno parte. È firmato dal suo manutentore, il che garantisce la sua autenticità. Vedere la <xref linkend="sect.package-authentication" /> per ulteriori dettagli su questo argomento.</para>

      <example>
        <title>Un file <filename>.dsc</filename></title>

        <programlisting>
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Format: 3.0 (quilt)
Source: zim
Binary: zim
Architecture: all
Version: 0.62-3
Maintainer: Emfox Zhou &lt;emfox@debian.org&gt;
Uploaders: Raphaël Hertzog &lt;hertzog@debian.org&gt;
Homepage: http://zim-wiki.org
Standards-Version: 3.9.6
Vcs-Browser: http://anonscm.debian.org/gitweb/?p=collab-maint/zim.git
Vcs-Git: git://anonscm.debian.org/collab-maint/zim.git
Build-Depends: debhelper (&gt;= 9), xdg-utils, python (&gt;= 2.6.6-3~), libgtk2.0-0 (&gt;= 2.6), python-gtk2, python-xdg
Package-List:
 zim deb x11 optional arch=all
Checksums-Sha1:
 ad8de170826682323c10195b65b9f1243fd75637 1772246 zim_0.62.orig.tar.gz
 a4f70d6f7fb404022c9cc4870a4e62ea3ca08388 14768 zim_0.62-3.debian.tar.xz
Checksums-Sha256:
 19d62aebd2c1a92d84d80720c6c1dcdb779c39a2120468fed01b7f252511bdc2 1772246 zim_0.62.orig.tar.gz
 fc2e827e83897d5e33f152f124802c46c3c01c5158b75a8275a27833f1f6f1de 14768 zim_0.62-3.debian.tar.xz
Files:
 43419efba07f7086168442e3d698287a 1772246 zim_0.62.orig.tar.gz
 725a69663a6c2961f07673ae541298e4 14768 zim_0.62-3.debian.tar.xz

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2
Comment: Signed by Raphael Hertzog

iQEcBAEBCAAGBQJUR2jqAAoJEAOIHavrwpq5WFcH/RsdzCHc1oXXxHitU23hEqMj
T6ok29M1UFDJDowMXW75jQ1nT4WPUtvEGygkCHeoO/PvjEvB0sjU8GQlX+N9ddSB
aHfqfAYmVhADNGxrXQT5inZXUa8qGeeq2Sqf6YcWtsnuD56lDbvxkyf/XYopoIEl
oltfl05z/AI+vYsW482YrCz0fxNAKAvkyuPhDebYI8jnKWeAANoqmKpsNc/HYyvT
+ZiA5o57OiGdOKT6XGy3/FiF3dkHiRY8lXW7xdr1BbIgulwl9UmiUNwuxwOYbQO7
edtjiTJqOaFUA0x1zB/XGv5tHr1MjP8naT+kfVoVHTOox51CDbeu5D3DZY4imcY=
=Wtoa
-----END PGP SIGNATURE-----</programlisting>
      </example>

      <indexterm><primary><literal>Build-Depends</literal>, campo dell'intestazione</primary></indexterm>

      <para>Notare che anche il pacchetto sorgente ha delle dipendenze (<literal>Build-Depends</literal>) completamente distinte da quelle del pacchetto binario, dal momento che indicano gli strumenti richiesti per compilare il software in questione e costruire il suo pacchetto binario.</para>

      <sidebar>
        <title><emphasis>ATTENZIONE</emphasis> Spazi di nomi distinti</title>

	<para>È importante notare qui che non c'è una forte corrispondenza tra il nome del pacchetto sorgente e quello dei pacchetti binari che genera. È abbastanza facile da capire se si sa che ogni pacchetto sorgente può generare diversi pacchetti binari. Questo è il motivo per cui il file <filename>.dsc</filename> ha dei campi <literal>Source</literal> e <literal>Binary</literal> per nominare esplicitamente il pacchetto sorgente e memorizzare l'elenco dei pacchetti binari che esso genera.</para>
      </sidebar>

      <sidebar>
        <title><emphasis>CULTURA</emphasis> Perché dividere in diversi pacchetti</title>

	<para>Piuttosto di frequente, un pacchetto sorgente (per un certo gruppo di programmi) può generare diversi pacchetti binari. Le ragioni sono molteplici: un programma può spesso essere usato in contesti diversi, per cui una libreria condivisa può essere installata per far funzionare un'applicazione (per esempio <emphasis role="pkg">libc6</emphasis>) o può essere installata per sviluppare un nuovo programma (<emphasis role="pkg">libc6-dev</emphasis> sarà allora il pacchetto corretto). La stessa logica si trova per servizi client/server dove la parte server è installata su una macchina e la parte client su altre (questo è il caso, per esempio, di <emphasis role="pkg">openssh-server</emphasis> e di <emphasis role="pkg">openssh-client</emphasis>).</para>

	<para>Altrettanto di frequente, la documentazione è fornita in un pacchetto dedicato: l'utente può installarla indipendentemente dal software e può in qualsiasi momento scegliere di rimuoverla per risparmiare spazio su disco. Inoltre, ciò risparmia spazio su disco anche sui mirror di Debian, dal momento che il pacchetto con la documentazione sarà condiviso tra tutte le architetture (invece di avere la documentazione duplicata nei pacchetti per ogni architettura).</para>
      </sidebar>

      <sidebar>
        <title><emphasis>IN PROSPETTIVA</emphasis> Differenti formati di pacchetti sorgenti</title>

	<para>Inizialmente c'era un solo formato per i pacchetti sorgenti. È il formato <literal>1.0</literal> che associa un archivio <filename>.orig.tar.gz</filename> a una patch <filename>.diff.gz</filename> di "debianizzazione" (c'è anche una variante che consiste di un singolo archivio <filename>.tar.gz</filename> che è usato automaticamente se non c'è alcun <filename>.orig.tar.gz</filename> disponibile).</para>

	<para>A partire da Debian <emphasis role="distribution">Squeeze</emphasis>, gli sviluppatori Debian hanno l'opzione di usare dei nuovi formati che correggono molti problemi del formato storico. Il formato <literal>3.0 (quilt)</literal> può unire più archivi a monte in uno stesso pacchetto sorgente: in aggiunta al solito <filename>.orig.tar.gz</filename>, archivi supplementari <filename>.orig-<replaceable>componente</replaceable>.tar.gz</filename>. Ciò è utile con software che è distribuito in diversi componenti a monte ma per il quale si desidera un singolo pacchetto sorgente. Questi archivi possono anche essere compressi con <command>bzip2</command> o <command>xz</command> piuttosto che con <command>gzip</command>), il che risparmia spazio su disco e risorse di rete. Infine, la patch monolitica, <filename>.diff.gz</filename>, è stata sostituita dall'archivio <filename>.debian.tar.gz</filename> che contiene le istruzioni di compilazione e un insieme di patch a monte dal manutentore del pacchetto. Queste ultime sono registrate in un formato compatibile con <command>quilt</command> — uno strumento che facilita la gestione di una serie di patch.</para>
      </sidebar>

      <para>Il <filename>.orig.tar.gz</filename> è un archivio che contiene il codice sorgente del programma come fornito dallo sviluppatore originale. Ai manutentori dei pacchetti Debian viene chiesto di non modificare questo archivio in modo da poter facilmente verificare la fonte e l'integrità del file (con un semplice confronto con una somma di controllo) e per rispettare i desideri di alcuni autori.</para>

      <para><filename>.debian.tar.gz</filename> contiene tutte le modifiche fatte dal manutentore Debian, specialmente l'aggiunta della directory <filename>debian</filename> che contiene le istruzioni da eseguire per costruire un pacchetto Debian.</para>

      <sidebar>
        <title><emphasis>STRUMENTO</emphasis> Decomprimere un pacchetto sorgente</title>
        <indexterm><primary><command>dpkg-source</command></primary></indexterm>
	<indexterm><primary>sorgente (pacchetto)</primary></indexterm>
	<indexterm><primary>sorgente (pacchetto)</primary></indexterm>
	<indexterm><primary>pacchetto</primary><secondary>pacchetto sorgente</secondary></indexterm>

	<para>Avendo un pacchetto sorgente, si può usare <command>dpkg-source</command> (dal pacchetto <emphasis>dpkg-dev</emphasis>) per decomprimerlo:</para>

        <screen><computeroutput>$ </computeroutput><userinput>dpkg-source -x package_0.7-1.dsc</userinput></screen>

	<para>Si può anche usare <command>apt-get</command> per scaricare un pacchetto sorgente e scompattarlo immediatamente. È richiesto che le appropriate righe <literal>deb-src</literal> siano presenti nel file <filename>/etc/apt/sources.list</filename>, comunque (per ulteriori dettagli, vedere la <xref linkend="sect.apt-sources.list" />). Esse sono usate per elencare le "fonti" di un pacchetto sorgente (intendendo i server sui quali è ospitato un gruppo di pacchetti sorgente).</para>

        <screen><computeroutput>$ </computeroutput><userinput>apt-get source <replaceable>pacchetto</replaceable></userinput></screen>
      </sidebar>
    </section>
    <section>
      <title>Uso con Debian</title>

      <para>Il pacchetto sorgente è alla base di tutto in Debian. Tutti i pacchetti Debian provengono da un pacchetto sorgente e ogni modifica in un pacchetto Debian è la conseguenza di una modifica fatta al pacchetto sorgente. I manutentori Debian lavorano con i pacchetti sorgenti, conoscendo, però, le conseguenze delle loro azioni sui pacchetti binari. I frutti del loro lavoro si trovano, perciò, nei pacchetti sorgenti disponibili da Debian: si può facilmente tornare indietro e seguire ogni cosa.</para>

      <para>Quando una nuova versione di un pacchetto (pacchetto sorgente e uno o più pacchetti binari) arriva su un server Debian, il pacchetto sorgente è il più importante. Infatti, sarà usato da una rete di macchine con architetture differenti per la compilazione delle varie architetture supportate da Debian. Il fatto che lo sviluppatore invii anche uno o più pacchetti binari per una data architettura (solitamente i386 o amd64) è relativamente non importante, dal momento che potrebbero anche essere stati generati automaticamente.</para>
    </section>
  </section>
  <section id="sect.manipulating-packages-with-dpkg">
    <title>Manipolazione dei pacchetti con <command>dpkg</command></title>
    <indexterm><primary><command>dpkg</command></primary></indexterm>

    <para><command>dpkg</command> è il comando di base per gestire i pacchetti Debian sul sistema. Se si hanno dei pacchetti <filename>.deb</filename>, è <command>dpkg</command> che permette l'installazione o l'analisi del loro contenuto. Ma questo programma ha solo una visione parziale dell'universo Debian: conosce cosa è installato sul sistema e ciò che è dato sulla riga di comando, ma non conosce nulla degli altri pacchetti disponibili. Perciò, fallirà se una dipendenza non è soddisfatta. Strumenti come <command>apt-get</command>, al contrario, creano un elenco di dipendenze da installare il più automaticamente possibile.</para>

    <sidebar>
      <title><emphasis>NOTA</emphasis> <command>dpkg</command> o <command>apt-get</command>?</title>

      <para><command>dpkg</command> dovrebbe esere visto come uno strumento di sistema (backend) e <command>apt-get</command> come uno strumento più vicino all'utente, che supera le precedenti limitazioni. Questi strumenti lavorano insieme, ognuno con le proprie peculiarità, adatte a compiti specifici.</para>
    </sidebar>
    <section>
      <title>Installazione dei pacchetti</title>
      <indexterm><primary>installazione</primary><secondary>di pacchetti</secondary></indexterm>
      <indexterm><primary>pacchetto</primary><secondary>installazione</secondary></indexterm>

      <para><command>dpkg</command> è, soprattutto, uno strumento per installare un pacchetto Debian già disponibile (perché non scarica niente). Per fare ciò, si usa la sua opzione <literal>-i</literal> oppure <literal>--install</literal>.</para>

      <example>
        <title>Installazione di un pacchetto con <command>dpkg</command></title>

        <screen role="scale">
<computeroutput># </computeroutput><userinput>dpkg -i man-db_2.7.0.2-5_amd64.deb</userinput>
<computeroutput>(Reading database... 86425 files and directories currently installed.)
Preparing to unpack man-db_2.7.0.2-5_amd64.deb ...
Unpacking man-db (2.7.0.2-5) over (2.7.0.2-4) ...
Setting up man-db (2.7.0.2-5) ...
Updating database of manual pages ...
Processing triggers for mime-support (3.58) ...</computeroutput></screen>
      </example>

      <para>Si possono vedere i differenti passi eseguiti da <command>dpkg</command>; si può sapere, perciò, a quale punto si è verificato un errore. L'installazione può anche essere effettuata in due stadi: prima lo spacchettamento, poi la configurazione. <command>apt-get</command> si avvantaggia di ciò, limitando il numero di chiamate a <command>dpkg</command> (dal momento che ogni chiamata è onerosa a causa del caricamento del database in memoria, specialmente l'elenco dei file già installati).</para>

      <example>
        <title>Spacchettamento e configurazione separati</title>

        <screen role="scale">
<computeroutput># </computeroutput><userinput>dpkg --unpack man-db_2.7.0.2-5_amd64.deb</userinput>
<computeroutput>(Reading database ... 86425 files and directories currently installed.)
Preparing to unpack man-db_2.7.0.2-5_amd64.deb ...
Unpacking man-db (2.7.0.2-5) over (2.7.0.2-5) ...
Processing triggers for mime-support (3.58) ...
# </computeroutput><userinput>dpkg --configure man-db</userinput>
<computeroutput>Setting up man-db (2.7.0.2-5) ...
Updating database of manual pages ...
</computeroutput></screen>
      </example>
      <indexterm><primary>pacchetto</primary><secondary>spacchettamento</secondary></indexterm>
      <indexterm><primary>pacchetto</primary><secondary>pacchetto binario</secondary></indexterm>

      <para>Talvolta <command>dpkg</command> non riuscirà a installare un pacchetto e restituirà un errore; se l'utente ordina di ignorarlo, verrà emesso soltanto un avvertimento; è per questo motivo che esistono le diverse opzioni <literal>--force-*</literal>. Il comando <command>dpkg --force-help</command>, o la documentazione di questo comando, dà un elenco completo di queste opzioni. L'errore più frequente, che prima o poi si incontrerà, è una collisione tra file. Quando un pacchetto contiene un file che è già installato da un altro pacchetto, <command>dpkg</command> si rifiuterà di installarlo. Il seguente messaggio apparirà:</para>

      <screen>
<computeroutput>Unpacking libisc52 (from .../libisc52_1%3a9.6.ESV.R1+dfsg-0+lenny2_amd64.deb) ...
dpkg : error processing /var/cache/apt/archives/libisc52_1%3a9.6.ESV.R1+dfsg-0+lenny2_amd64.deb (--unpack) :
 trying to overwrite "/usr/lib/libisc.so.50", which is also in package libisc50 1:9.6.1.dfsg.P1-3</computeroutput></screen>

      <para>In questo caso, se si pensa che sostituire questo file non sia un rischio significativo per la stabilità del sistema (e solitamente è così), si può usare l'opzione <literal>--force-overwrite</literal>, che dice a <command>dpkg</command> di ignorare questo errore e di sovrascrivere il file.</para>

      <para>Anche se ci sono molte opzioni <literal>--force-*</literal>, è probabile che solo <literal>--force-overwrite</literal> sia usata regolarmente. Queste opzioni esistono solamente per situazioni eccezionali ed è meglio lasciarle stare il più possibile per rispettare le regole imposte dal meccanismo dei pacchetti. Non si dimentichi che queste regole assicurano la coerenza e la stabilità del sistema.</para>

      <sidebar>
        <title><emphasis>ATTENZIONE</emphasis> Uso efficace di <literal>--force-*</literal></title>
        <indexterm><primary>dipendenza non soddisfatta</primary></indexterm>

	<para>Se non si presta attenzione, l'uso di un'opzione <literal>--force-*</literal> può condurre a un sistema in cui la famiglia di comandi APT si rifiuterà di funzionare. Infatti, alcune di queste opzioni permettono l'installazione di un pacchetto quando una dipendenza non è soddisfatta o quando c'è un conflitto. Il risultato è un sistema non coerente dal punto di vista delle dipendenze e i comandi APT si rifiuteranno di eseguire qualsiasi azione a meno che l'azione non permetta di tornare a uno stato coerente (questo spesso consiste nell'installazione della dipendenza mancante o nella rimozione di un pacchetto problematico). Questo spesso risulta in un messaggio come il seguente, ottenuto dopo l'installazione di una nuova versione di <emphasis role="pkg">rdesktop</emphasis> ignorando la sua dipendenza da una nuova versione di <emphasis role="pkg">libc6</emphasis>:</para>

        <screen><computeroutput># </computeroutput><userinput>apt full-upgrade
</userinput><computeroutput>[...]
You might want to run 'apt-get -f install' to correct these.
The following packages have unmet dependencies:
  rdesktop: Depends: libc6 (&gt;= 2.5) but 2.3.6.ds1-13etch7 is installed
E: Unmet dependencies. Try using -f.</computeroutput></screen>

	<para>Un amministratore coraggioso che sia certo della correttezza della propria analisi può scegliere di ignorare una dipendenza o un conflitto e usare la corrispondente opzione <literal>--force-*</literal>. In questo caso, se si vuole continuare a usare <command>apt-get</command> o <command>aptitude</command>, bisogna modificare <filename>/var/lib/dpkg/status</filename> per eliminare o modificare la dipendenza, o il conflitto, che si è scelto di scavalcare.</para>

	<para>Questa manipolazione è una "porcheria" e non dovrebbe esser fatta, eccetto nei casi più estremi di necessità. Piuttosto di frequente, una soluzione più adatta è di ricompilare il pacchetto che sta causando il problema (consultare la <xref linkend="sect.rebuilding-package" />) o usare una nuova versione (potenzialmente corretta) da un sito come <literal>backports.debian.org</literal> (consultare la <xref linkend="sect.backports" />).</para>
      </sidebar>
    </section>
    <section>
      <title>Rimozione di pacchetti</title>
      <indexterm><primary>rimozione di un pacchetto</primary></indexterm>
      <indexterm><primary>eliminazione completa di un pacchetto</primary></indexterm>
      <indexterm><primary>pacchetto</primary><secondary>rimozione</secondary></indexterm>
      <indexterm><primary>pacchetto</primary><secondary>eliminazione completa</secondary></indexterm>

      <para>Invocare <command>dpkg</command> con l'opzione <literal>-r</literal> o <literal>--remove</literal> seguita dal nome del pacchetto, rimuove tale pacchetto. Questa rimozione, comunque, non è completa: rimangono tutti i file di configurazione e gli script, i file di registro (registri di sistema) e altri dati dell'utente gestiti dal pacchetto. La ragione della loro conservazione è di disabilitare il programma disinstallandolo, preservando allo stesso tempo l'opzione di reinstallarlo velocemente e con la stessa configurazione. Per rimuovere completamente ogni cosa associata al pacchetto, usare l'opzione <literal>-P</literal> o <literal>--purge</literal> seguita dal nome del pacchetto.</para>

      <example>
        <title>Rimozione ed eliminazione completa del pacchetto <emphasis>debian-cd</emphasis></title>

        <screen><computeroutput># </computeroutput><userinput>dpkg -r debian-cd</userinput>
<computeroutput>(Reading database... 14170 files and directories already installed.)
Removing debian-cd ...
# </computeroutput><userinput>dpkg -P debian-cd</userinput>
<computeroutput>(Reading database... 13794 files and directories already installed.)
Removing debian-cd ...
Removing debian-cd configuration files...</computeroutput></screen>
      </example>
    </section>
    <section>
      <title>Interrogazione del Database di <command>dpkg</command> ed Ispezione dei File <filename>.deb</filename></title>
      <indexterm><primary>pacchetto</primary><secondary>stato</secondary></indexterm>
      <indexterm><primary>pacchetto</primary><secondary>elenco file</secondary></indexterm>
      <indexterm><primary>pacchetto</primary><secondary>ispezione del contenuto</secondary></indexterm>

      <sidebar>
        <title><emphasis>FONDAMENTALI</emphasis> Sintassi delle opzioni</title>

	<para>La maggior parte delle opzioni è disponibile nella versione "lunga" (una o più parole precedute da due trattini) o nella versione "corta" (una singola lettera, spesso l'iniziale di una parola della versione lunga, preceduta da un singolo trattino). Questa convenzione è così comune che è uno standard POSIX.</para>
      </sidebar>

      <para>Prima di concludere questa sezione, si noti che alcune opzioni di <command>dpkg</command> possono interrogare il database interno per ottenere informazioni. Mostrando prima le opzioni lunghe e poi le corrispondenti opzioni corte (che evidentemente accettano i soliti argomenti) we cite <literal>--listfiles <replaceable>pacchetto</replaceable></literal> (o <literal>-L</literal>), che elenca i file installati da questo pacchetto; <literal>--search <replaceable>file</replaceable></literal> (o <literal>-S</literal>), che trova il pacchetto da cui proviene il file; <literal>--status <replaceable>pacchetto</replaceable></literal> (o <literal>-s</literal>), che mostra le intestazioni di un pacchetto installato; <literal>--list</literal> (o <literal>-l</literal>), che mostra l'elenco dei pacchetti conosciuti dal sistema e il loro stato di installazione; <literal>--contents <replaceable>file.deb</replaceable></literal> (o <literal>-c</literal>), che elenca i file nel pacchetto Debian specificato; <literal>--info<replaceable> file.deb </replaceable></literal> (o <literal>-I</literal>), che mostra le intestazioni del pacchetto Debian.</para>

      <example>
        <title>Varie richieste con <command>dpkg</command></title>

        <screen role="scale" width="80">
<computeroutput>$ </computeroutput><userinput>dpkg -L base-passwd</userinput>
<computeroutput>/.
/usr
/usr/sbin
/usr/sbin/update-passwd
/usr/share
/usr/share/lintian
/usr/share/lintian/overrides
/usr/share/lintian/overrides/base-passwd
/usr/share/doc-base
/usr/share/doc-base/users-and-groups
/usr/share/base-passwd
/usr/share/base-passwd/group.master
/usr/share/base-passwd/passwd.master
/usr/share/man
/usr/share/man/pl
/usr/share/man/pl/man8
/usr/share/man/pl/man8/update-passwd.8.gz
/usr/share/man/ru
/usr/share/man/ru/man8
/usr/share/man/ru/man8/update-passwd.8.gz
/usr/share/man/ja
/usr/share/man/ja/man8
/usr/share/man/ja/man8/update-passwd.8.gz
/usr/share/man/fr
/usr/share/man/fr/man8
/usr/share/man/fr/man8/update-passwd.8.gz
/usr/share/man/es
/usr/share/man/es/man8
/usr/share/man/es/man8/update-passwd.8.gz
/usr/share/man/de
/usr/share/man/de/man8
/usr/share/man/de/man8/update-passwd.8.gz
/usr/share/man/man8
/usr/share/man/man8/update-passwd.8.gz
/usr/share/doc
/usr/share/doc/base-passwd
/usr/share/doc/base-passwd/users-and-groups.txt.gz
/usr/share/doc/base-passwd/changelog.gz
/usr/share/doc/base-passwd/copyright
/usr/share/doc/base-passwd/README
/usr/share/doc/base-passwd/users-and-groups.html
$ </computeroutput><userinput>dpkg -S /bin/date</userinput>
<computeroutput>coreutils: /bin/date
$ </computeroutput><userinput>dpkg -s coreutils</userinput>
<computeroutput>Package: coreutils
Essential: yes
Status: install ok installed
Priority: required
Section: utils
Installed-Size: 13855
Maintainer: Michael Stone &lt;mstone@debian.org&gt;
Architecture: amd64
Multi-Arch: foreign
Version: 8.23-3
Replaces: mktemp, realpath, timeout
Pre-Depends: libacl1 (&gt;= 2.2.51-8), libattr1 (&gt;= 1:2.4.46-8), libc6 (&gt;= 2.17), libselinux1 (&gt;= 2.1.13)
Conflicts: timeout
Description: GNU core utilities
 This package contains the basic file, shell and text manipulation
 utilities which are expected to exist on every operating system.
 .
 Specifically, this package includes:
 arch base64 basename cat chcon chgrp chmod chown chroot cksum comm cp
 csplit cut date dd df dir dircolors dirname du echo env expand expr
 factor false flock fmt fold groups head hostid id install join link ln
 logname ls md5sum mkdir mkfifo mknod mktemp mv nice nl nohup nproc numfmt
 od paste pathchk pinky pr printenv printf ptx pwd readlink realpath rm
 rmdir runcon sha*sum seq shred sleep sort split stat stty sum sync tac
 tail tee test timeout touch tr true truncate tsort tty uname unexpand
 uniq unlink users vdir wc who whoami yes
Homepage: http://gnu.org/software/coreutils
$ </computeroutput><userinput>dpkg -l 'b*'</userinput>
<computeroutput>Voluto=U (non noto)/I (installato)/R (rimosso)/P (rimosso totale)/H (in attesa)
| Stato=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(nessuno)/R (reinstallazione richiesta) (Stato,Err: maiuscolo=grave)
||/ Nome                    Versione          Architettura     Descrizione
+++-=======================-================-================-====================================================
un  backupninja             &lt;nessuna&gt;           &lt;nessuna&gt;           (nessuna descrizione disponibile)
un  base                    &lt;nessuna&gt;           &lt;nessuna&gt;           (nessuna descrizione disponibile)
un  base-config             &lt;none&gt;           &lt;none&gt;           (nessuna descrizione disponibile)
ii  base-files              8+deb8u2                amd64            Debian base system miscellaneous files
ii  base-passwd             3.5.37           amd64            Debian base system master password and group files
[...]
$ </computeroutput><userinput>dpkg -c /var/cache/apt/archives/gnupg_1.4.18-6_amd64.deb</userinput>
<computeroutput>drwxr-xr-x root/root         0 2014-12-04 23:03 ./
drwxr-xr-x root/root         0 2014-12-04 23:03 ./lib/
drwxr-xr-x root/root         0 2014-12-04 23:03 ./lib/udev/
drwxr-xr-x root/root         0 2014-12-04 23:03 ./lib/udev/rules.d/
-rw-r--r-- root/root      2711 2014-12-04 23:03 ./lib/udev/rules.d/60-gnupg.rules
drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/
drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/lib/
drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/lib/gnupg/
-rwxr-xr-x root/root     39328 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_ldap
-rwxr-xr-x root/root     92872 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_hkp
-rwxr-xr-x root/root     47576 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_finger
-rwxr-xr-x root/root     84648 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_curl
-rwxr-xr-x root/root      3499 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_mailto
drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/bin/
-rwxr-xr-x root/root     60128 2014-12-04 23:03 ./usr/bin/gpgsplit
-rwxr-xr-x root/root   1012688 2014-12-04 23:03 ./usr/bin/gpg
[...]
$ </computeroutput><userinput>dpkg -I /var/cache/apt/archives/gnupg_1.4.18-6_amd64.deb</userinput>
<computeroutput> nuovo pacchetto debian, version 2.0.
 size 1148362 bytes: control archive=3422 bytes.
    1264 bytes,    26 lines      control              
    4521 bytes,    65 lines      md5sums              
     479 bytes,    13 lines   *  postinst             #!/bin/sh
     473 bytes,    13 lines   *  preinst              #!/bin/sh
 Package: gnupg
 Version: 1.4.18-6
 Architecture: amd64
 Maintainer: Debian GnuPG-Maintainers &lt;pkg-gnupg-maint@lists.alioth.debian.org&gt;
 Installed-Size: 4888
 Depends: gpgv, libbz2-1.0, libc6 (&gt;= 2.15), libreadline6 (&gt;= 6.0), libusb-0.1-4 (&gt;= 2:0.1.12), zlib1g (&gt;= 1:1.1.4)
 Recommends: gnupg-curl, libldap-2.4-2 (&gt;= 2.4.7)
 Suggests: gnupg-doc, libpcsclite1, parcimonie, xloadimage | imagemagick | eog
 Section: utils
 Priority: important
 Multi-Arch: foreign
 Homepage: http://www.gnupg.org
 Description: GNU privacy guard - a free PGP replacement
  GnuPG is GNU's tool for secure communication and data storage.
  It can be used to encrypt data and to create digital signatures.
  It includes an advanced key management facility and is compliant
  with the proposed OpenPGP Internet standard as described in RFC 4880.
[...]</computeroutput></screen>
      </example>

      <sidebar>
        <title><emphasis>APPROFONDIMENTI</emphasis> Confronto di versioni</title>
        <indexterm><primary>versione, confronto</primary></indexterm>
        <indexterm><primary>confronto di versioni</primary></indexterm>

	<para>Dal momento che <command>dpkg</command> è il programma per gestire pacchetti Debian, fornisce anche l'implementazione tipo della logica di confronto dei numeri di versione. Questo è il motivo per cui ha un'opzione <literal>--compare-versions</literal> utilizzabile da programmi esterni (specialmente gli script di configurazione eseguiti dallo stesso <command>dpkg</command>). Questa opzione richiede tre parametri: un numero di versione, un operatore di confronto e un secondo numero di versione. I diversi operatori possibili sono <literal>lt</literal> (strettamente minore), <literal>le</literal> (minore o uguale), <literal>eq</literal> (uguale), <literal>ne</literal> (diverso), <literal>ge</literal> (maggiore o uguale) e <literal>gt</literal> (strettamente maggiore). Se il confronto è corretto, <command>dpkg</command> restituisce il codice di ritorno 0 (successo), altrimenti restituisce un valore di ritorno diverso da zero (che indica fallimento).</para>

        <screen>
<computeroutput>$ </computeroutput><userinput>dpkg --compare-versions 1.2-3 gt 1.1-4</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>0
$ </computeroutput><userinput>dpkg --compare-versions 1.2-3 lt 1.1-4</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>1
$ </computeroutput><userinput>dpkg --compare-versions 2.6.0pre3-1 lt 2.6.0-1</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>1</computeroutput></screen>

	<para>Si noti il fallimento inatteso dell'ultimo confronto: per <command>dpkg</command>, <literal>pre</literal>, che normalmente indica un pre-rilascio, non ha alcun particolare significato e questo programma confronta i caratteri alfabetici nello stesso modo dei numeri (a &lt;b &lt;c ...) in ordine alfabetico. Questo è il motivo per cui "<literal>0pre3</literal>" è considerato maggiore di "<literal>0</literal>". Quando si vuole che un numero di versione di un pacchetto indichi che si tratta di un pre-rilascio, si deve usare il carattere tilde "<literal>~</literal>":</para>

        <screen>
<computeroutput>$ </computeroutput><userinput>dpkg --compare-versions 2.6.0~pre3-1 lt 2.6.0-1</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>0</computeroutput></screen>
      </sidebar>
    </section>
    <section>
      <title>File di registro di <command>dpkg</command></title>

      <para>Una funzionalità introdotta recentemente in <command>dpkg</command> è che mantiene un registro di tutte le proprie azioni in <filename>/var/log/dpkg.log</filename>. Questo registro è estremamente prolisso, dal momento che contiene dettagli di ciascun stato attraverso cui passano i pacchetti gestiti da <command>dpkg</command>. Oltre a offrire un modo per tenere traccia del comportamento di dpkg, ciò aiuta, soprattutto, a mantenere una cronologia dello sviluppo del sistema: si può trovare il momento esatto in cui ciascun pacchetto è stato installato o aggiornato e queste informazioni possono essere estremamente utili nel comprendere un recente cambiamento di comportamento. Inoltre, siccome tutte le versioni sono registrate, è facile incrociare queste informazioni con il <filename>changelog.Debian.gz</filename> dei pacchetti in questione o anche con le segnalazioni di bug online.</para>
    </section>
    <section id="sect.multi-arch">
      <title>Supporto Multi-Arch</title>
      <indexterm><primary>APT</primary></indexterm>
      <indexterm><primary>pacchetto</primary><secondary>conflitto</secondary></indexterm>

      <para>Tutti i pacchetti Debian hanno un campo <literal>Architecture</literal> nelle loro informazioni di controllo. Questo campo può contenere tutti “<literal>all</literal>” (per i pacchetti indipendenti dalle architetture) oppure il nome dell'architettura per la quale è sviluppato il pacchetto (come “amd64”, “armhf”, …). In quest'ultimo caso, per impostazione predefinita, <command>dpkg</command> accetterà di installare il pacchetto solo se la sua architettura corrisponde a quella dell'host come restituito da <command>dpkg --print-architecture</command>.</para>

      <para>Questa restrizione assicura che gli utenti non finiscano con binari compilati per un'architettura sbagliata. Tutto sarebbe perfetto, se non fosse che (alcuni) i computer possono eseguire binari per architetture multiple, sia nativamente (un sistema "amd64" può eseguire binari "i386") che attraverso emulatori.</para>
      
      <section>
        <title>Abilitazione Multi-Arch</title>
	<para>Il supporto multi-arch di <command>dpkg</command> consente agli utenti di definire le "architetture esterne" che possono essere installate sul sistema corrente. Questo può essere fatto semplicemnete con <command>dpkg --add-architecture</command> come nell'esempio qui sotto. C'è un comando corrispondente per rimuovere il supporto ad un'architettura esterna che è <command>dpkg --remove-architecture</command>, ma può essere utilizzato solo quando non rimangono pacchetti di questa archietttura.</para>

	<screen>
<computeroutput># </computeroutput><userinput>dpkg --print-architecture</userinput>
<computeroutput>amd64
# </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput># </computeroutput><userinput>dpkg -i gcc-4.9-base_4.9.1-19_armhf.deb</userinput>
<computeroutput>dpkg: error processing archive gcc-4.9-base_4.9.1-19_armhf.deb (--install):
 package architecture (armhf) does not match system (amd64)
Errors were encountered while processing:
 gcc-4.9-base_4.9.1-19_armhf.deb
# </computeroutput><userinput>dpkg --add-architecture armhf</userinput>
<computeroutput># </computeroutput><userinput>dpkg --add-architecture armel</userinput>
<computeroutput># </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput>armhf
armel
# </computeroutput><userinput>dpkg -i gcc-4.9-base_4.9.1-19_armhf.deb</userinput>
<computeroutput>Selecting previously unselected package gcc-4.9-base:armhf.
(Reading database ... 86425 files and directories currently installed.)
Preparing to unpack gcc-4.9-base_4.9.1-19_armhf.deb ...
Unpacking gcc-4.9-base:armhf (4.9.1-19) ...
Setting up gcc-4.9-base:armhf (4.9.1-19) ...
# </computeroutput><userinput>dpkg --remove-architecture armhf</userinput>
<computeroutput>dpkg: error: cannot remove architecture 'armhf' currently in use by the database
# </computeroutput><userinput>dpkg --remove-architecture armel</userinput>
<computeroutput># </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput>armhf</computeroutput></screen>

	<sidebar>
	  <title><emphasis>SUGGERIMENTO</emphasis> Diagrammi di stato</title>
	  <para>APT rileverà automaticamente quando dpkg è stato configurato per supportare architetture differenti ed inizierà a scaricare i corrispondenti file dei <filename>Pacchetti</filename> durante il suo processo di aggiornamento.</para>
	  <para>I pacchetti esterni possono essere installati con <command>apt install <replaceable>pacchetto</replaceable>:<replaceable>architettura</replaceable></command>.</para>
	</sidebar>

	<sidebar>
	  <title><emphasis>IN PRATICA</emphasis> Uso dei binari proprietari i386 su amd64</title>
	  <para>Ci sono diversi casi di utilizzo di multi-arch, ma il più popolare è la possibilità di eseguire binari a 32 bit (i386) su sistemi a 64 bit (amd64), in particolare poichè diverse applicazioni proprietarie popolari (come Skype) sono previste solo in versioni a 32 bit.</para>
	</sidebar>
      </section>
      <section>
	<title>Variazioni Relative a Multi-Arch</title>

	<para>Per rendere multi-arch realmente utile ed utilizzabile, le librerie hanno dovuto essere riassemblate e spostate in una directory specifica per l' architettura in modo che possano essere installate più copie (per diverse architetture) contemporaneamente. Tali pacchetti aggiornati contengono il campo header “<literal>Multi-Arch: same</literal>” per dire al sistema dei pacchetti che le varie architetture possono essere installate insieme in sicurezza. (e che quei pacchetti possono di soddisfare in modo sicuro solo le dipendenze dei pacchetti della stessa architettura). Dal debutto di multi-arch in Debian <emphasis role="distribution">Wheezy</emphasis>, non tutte le librerie sono state ancora convertite.</para>

	<screen><computeroutput>$ </computeroutput><userinput>dpkg -s gcc-4.9-base
</userinput><computeroutput>dpkg-query: error: --status needs a valid package name but 'gcc-4.9-base' is not: ambiguous package name 'gcc-4.9-base' with more than one installed instance

Use --help for help about querying packages.
$ </computeroutput><userinput>dpkg -s gcc-4.9-base:amd64 gcc-4.9-base:armhf | grep ^Multi
</userinput><computeroutput>Multi-Arch: same
Multi-Arch: same
$ </computeroutput><userinput>dpkg -L libgcc1:amd64 |grep .so
</userinput><computeroutput>/lib/x86_64-linux-gnu/libgcc_s.so.1
$ </computeroutput><userinput>dpkg -S /usr/share/doc/gcc-4.9-base/copyright
</userinput><computeroutput>gcc-4.9-base:amd64, gcc-4.9-base:armhf: /usr/share/doc/gcc-4.9-base/copyright
</computeroutput></screen>

	<para>Vale la pena notare che i pacchetti <literal>Multi-Arch: same</literal> devono avere i nomi che identificano le loro architetture per essere identificati senza ambiguità. Essi hanno anche la possibilità di condividere i file con altre istanze dello stesso pacchetto; <command>dpkg</command> assicura che tutti i pacchetti abbiano dei file identici bit-per-bit quando sono condivisi. Infine, tutte le istanze di un pacchetto devono avere la stessa versione. Essi devono quindi essere aggiornati insieme.</para>

	<para>Il supporto multi-Arch portacon sè anche alcune sfide interessanti nel modo in cui sono gestite le dipendenze. Soddisfare una dipendenza richiede o un pacchetto contrassegnato come “<literal>Multi-Arch: foreign</literal>” o un pacchetto la cui architettura corrisponde a quella del pacchetto del quale dichiara la dipendenza (in questo processo di risoluzione delle dipendenze, i pacchetti architettura-indipendenti si presume che siano della stessa architettura dell'host). Una dipendenza può anche essere indebolita per consentire a qualsiasi architettura di soddisfarla, con la sintassi <literal><replaceable>package</replaceable>:any</literal>, ma i pacchetti esterni sono in grado di soddisfarla solo se sono contrassegnati come “<literal>Multi-Arch: allowed</literal>”.</para>
      </section>
    </section>
  </section>
  <section id="sect.coexistence-with-other-packaging-systems">
    <title>Coesistenza con Altri Sistemi di Pacchetti</title>
    <indexterm><primary>RPM</primary></indexterm>
    <indexterm><primary>Red Hat Package Manager</primary></indexterm>
    <indexterm><primary><command>alien</command></primary></indexterm>

    <para>I pacchetti Debian non son gli unici pacchetti software usati nel monto del software libero. Il concorrente principale è il formato RPM per Red Hat Linux e le sue molte derivate. Red Hat è una distribuzione commerciale molto popolare. È comune che il software fornito da terze parti sia offerto come pacchetti RPM invece che Debian.</para>

    <para>In questo caso, si deve sapere che il programma <command>rpm</command>, che gestisce pacchetti RPM, è disponibile come pacchetto Debian, così è possibile usare questo formato di pacchetti su Debian. Si dovrebbe fare attenzione, comunque, a limitare queste manipolazioni all'estrazione di informazioni da un pacchetto o alla verifica della sua integrità. In realtà non è ragionevole usare <command>rpm</command> per installare un RPM su un sistema Debian; RPM usa un proprio database, separato da quello del software nativo (come <command>dpkg</command>). Questo è il motivo per cui non è possibile assicurare una coesistenza stabile dei due sistemi di pacchetti.</para>

    <para>D'altra parte, l'utilità <emphasis role="pkg">alien</emphasis> può convertire pacchetti RPM in pacchetti Debian e viceversa.</para>

    <sidebar>
      <title><emphasis>COMUNITÀ</emphasis> Incoraggiare l'adozione di <filename>.deb</filename></title>

      <para>Se si usa abitualmente il programma <command>alien</command> per installare pacchetti RPM provenienti da uno dei vostri fornitori, non si esiti a scrivergli ed esprimere amichevolmente la forte preferenza per il formato <filename>.deb</filename>. Si noti che il formato del pacchetto non è tutto: un pacchetto <filename>.deb</filename> costruito con <command>alien</command> o preparato per una versione differente di Debian rispetto a quella in uso, anche per una versione derivata come Ubuntu, probabilmente non offrirebbe lo stesso livello di qualità e di integrazione di un pacchetto sviluppato specificamente per Debian <emphasis role="distribution">Squeeze</emphasis>.</para>
    </sidebar>

    <screen>
<computeroutput>$ </computeroutput><userinput>fakeroot alien --to-deb phpMyAdmin-2.0.5-2.noarch.rpm</userinput> 
<computeroutput>phpmyadmin_2.0.5-2_all.deb generated
$ </computeroutput><userinput>ls -s phpmyadmin_2.0.5-2_all.deb</userinput>
<computeroutput>  64 phpmyadmin_2.0.5-2_all.deb</computeroutput></screen>

    <para>Questo procedimento è estremamente semplice. Si deve sapere, però, che il pacchetto generato non ha alcuna informazione sulle dipendenze, dal momento che le dipendenze nei due formati di pacchetti non hanno una corrispondenza sistematica. L'amministratore, perciò, deve assicurare manualmente che il pacchetto convertito funzioni correttamente e questo è il motivo per cui i pacchetti Debian generati in questo modo dovrebbe essere evitati il più possibile. Fortunatamente, Debian ha la più grande raccolta di pacchetti software rispetto a tutte le distribuzioni ed è probabile che qualunque cosa si cerchi ci sia già.</para>

    <para>Guardando la pagina di manuale per il comando <command>alien</command>, si noterà che questo programma gestisce anche altri formati di pacchetti, specificamente quello della distribuzione Slackware (è composto da un semplice archivio <filename>tar.gz</filename>).</para>

    <para>La stabilità del software installato usando lo strumento <command>dpkg</command> contribuisce alla fama di Debian. La suite di strumenti APT, descritta nel capitolo seguente, mantiene questo vantaggio, sollevando l'amministratore dal gestire lo stato dei pacchetti, un compito necessario, ma difficile.</para>
  </section>
</chapter>
