<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="debian-packaging">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-debian-packaging.png" scalefit="1" />
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>Backport</keyword>
      <keyword>Rigenerazione</keyword>
      <keyword>Pacchetto sorgente</keyword>
      <keyword>Archivio</keyword>
      <keyword>Meta-pacchetto</keyword>
      <keyword>Sviluppatore Debian</keyword>
      <keyword>Maintainer</keyword>
    </keywordset>
  </chapterinfo>
  <title>Creazione di un pacchetto Debian</title>
  <highlights>
    <para>È abbastanza comune, per un amministratore che gestisce regolarmente i pacchetti Debian, sentire la necessità di creare dei propri pacchetti, o di modificarne uno già esistente. Questo capitolo serve proprio a rispondere alle domande più comuni sulla pacchettizzazione e fornire gli elementi necessari per utilizzare l'infrastruttura Debian nel migliore dei modi. Con po' di fortuna, dopo essersi cimentati con i pacchetti locali, si può anche sentire il bisogno di andare oltre e aderire al progetto Debian!</para>
  </highlights>
  <section id="sect.rebuilding-package">
    <title>Rigenerare un pacchetto dai suoi sorgenti</title>

    <para>Rigenerare un pacchetto binario può rendersi necessario per una serie di motivi. In alcuni casi, l'amministratore ha bisogno di una funzionalità presente nel software che richiede la compilazione dello stesso dai sorgenti, con una particolare opzione di compilazione; in altri casi, il software pacchettizzato per la versione di Debian installata non è abbastanza recente. In quest'ultimo caso, l'amministratore di solito costruisce un pacchetto più recente prendendolo da una nuova versione di Debian — come <emphasis role="distribution">Testing</emphasis> o addirittura <emphasis role="distribution">Unstable</emphasis> — in modo che questo nuovo pacchetto funzioni nella distribuzione <emphasis role="distribution">Stable</emphasis>; questa operazione è chiamata "backporting". Come al solito, prima di cominciare, è necessario controllare se qualcun altro ha già effettuato quest'attività — un rapido sguardo alle pagine del sistema di tracciamento dei pacchetti può darci le informazioni che cerchiamo. <ulink type="block" url="https://tracker.debian.org/" /> <indexterm><primary>backport</primary></indexterm></para>
    <section>
      <title>Ottenere i sorgenti</title>

      <para>La prima cosa da fare per rigenerare un pacchetto Debian è quella di procurarsi i sorgenti. Il modo più semplice è quello di utilizzare il comando <command>apt-get source <replaceable>source-package-name</replaceable></command>. Questo comando richiede che sia presente una riga con <literal>deb-src</literal> nel file <filename>/etc/apt/sources.list</filename> e che i file di indice siano aggiornati (ad esempio con <command>apt-get update</command>). Se si sono seguite le istruzioni nel capitolo che tratta la configurazione di APT (si veda <xref linkend="sect.apt-sources.list" />), questi requisiti dovrebbero già essere soddisfatti. Si noti, tuttavia, che verranno scaricati i pacchetti sorgente della versione di Debian riportata nella riga <literal>deb-src</literal>. Se si ha bisogno di un'altra versione, potrebbe essere necessario scaricarla manualmente da un mirror Debian o dal sito web. Questo comporta il recupero di due o tre file (con estensione <filename>*.dsc</filename>, per i <emphasis>Debian Source Control</emphasis>, <filename>*.tar.<replaceable>comp</replaceable></filename> e a volte <filename>*.diff.gz</filename> o <filename>*.debian.tar.<replaceable>comp</replaceable></filename> — <replaceable>comp</replaceable> prendendo un valore tra <literal>gz</literal>, <literal>bz2</literal> o <literal>xz</literal> a seconda dello strumento di compressione che è stato utilizzato), e l'esecuzione del comando <command>dpkg-source -x <replaceable>file.dsc</replaceable></command>. Se il file <filename>*.dsc</filename> è accessibile direttamente da un determinato URL, c'è un modo ancora più semplice per recuperare il tutto, con il comando <command>dget <replaceable>URL</replaceable></command>. Questo comando (che si trova nel pacchetto <emphasis role="pkg">devscripts</emphasis>) recupera il file <filename>*.dsc</filename> dall'indirizzo indicato, analizza il suo contenuto, e recupera automaticamente il file o i file a cui fa riferimento. Una volta che tutto è scato scaricato, estrare il pacchetto sorgente (a meno che non venga utilizzata l'opzione <literal>-d</literal> or <literal>--download-only</literal>).</para>
    </section>
    <section>
      <title>Apportare modifiche</title>

      <para>Il sorgente del pacchetto è ora disponibile in una directory con lo stesso nome del pacchetto sorgente e della sua versione (per esempio, <emphasis>samba-4.1.17+dfsg</emphasis>); qui è dove verranno effetuate tutte le modifiche locali.</para>

      <para>La prima cosa da fare è cambiare il numero di versione del pacchetto, in modo che i pacchetti rigenerati possano essere distinti dai pacchetti originali forniti da Debian. Supponendo che la versione corrente sia la <literal>2:4.1.17+dfsg-2</literal>, possiamo creare la versione <literal>2:4.1.17+dfsg-2falcot1</literal>, che indica chiaramente l'origine del pacchetto. In questo modo il numero di versione del pacchetto sarà superiore a quello fornito da Debian, così il pacchetto verrà installato come un aggiornamento del pacchetto originale. Questa modifica può essere effettuata dal comando <command>dch</command> (<emphasis>Debian CHangelog</emphasis>) del pacchetto <emphasis role="pkg">devscripts</emphasis>, eseguendolo in questo modo: <command>dch --local falcot</command>. Questo comando richiama un editor di testo (<command>sensible-editor</command>, dovrebbe essere l'editor preferito se è stato impostato nelle variabili d'ambiente <varname>VISUAL</varname> o <varname>EDITOR</varname> altrimenti verrà utilizzato quello predefinito) per permettere di documentare le modifiche effettuate da questa rigenerazione del pacchetto. Questo editor mostra che <command>dch</command> ha modificato veramente il file <filename>debian/changelog</filename>.</para>

      <para>Quando è necessario cambiare delle opzioni di compilazione, devono essere apportate delle modifiche al file <filename>debian/rules</filename>, che definisce il processo di compilazione del pacchetto. Nei casi più semplici, le righe che riguardano la configurazione iniziale (<literal>./configure …</literal>) o la versione corrente (<literal>$(MAKE) …</literal> o <literal>make …</literal>) sono facili da individuare. Se questi comandi non sono chiamati esplicitamente, sono probabilmente un effetto collaterale di un altro comando esplicito, in questo caso si rimanda alla loro documentazione per saperne di più su come modificare il comportamento predefinito. Con i pacchetti che usano <command>dh</command>, potrebbe essere necessario aggiungere un override per i comandi <command>dh_auto_configure</command> o <command>dh_auto_build</command> (si vedano le rispettive pagine di manuale per le spiegazioni su come fare).</para>

      <para>A seconda delle modifiche locali apportate ai pacchetti, può essere richiesto un aggiornamento anche nel file <filename>debian/control</filename>, che contiene una descrizione dei pacchetti generati. In particolare, questo file contiene le righe <literal>Build-Depends</literal> che permettono di controllare la lista delle dipendenze che devono essere soddisfatte nel momento della generazione del pacchetto. Queste spesso si riferiscono alle versioni dei pacchetti contenuti nella distribuzione da cui proviene il pacchetto sorgente, ma che potrebbero non essere disponibili nella distribuzione utilizzata per la rigenerazione. Non esiste un modo automatico per determinare se una dipendenza è reale o è specificata solamente per garantire che la costruzione deve essere eseguita solamente con l'ultima versione di una libreria. Questo è l'unico modo possibile per forzare un <emphasis>autobuilder</emphasis> ad utilizzare una determinata versione del pacchetto durante la costruzione, ed è il motivo per cui i maintainer Debian spesso utilizzano le dipendenze per la compilazione con versioni specifiche.</para>

      <para>Se si sa per certo che queste dipendenze per la compilazione sono troppo stringenti, si possono rendere meno rigide localmente. I file che documentano il modo predefinito di costruire il software, spesso chiamati <filename>INSTALL</filename>, aiuteranno a capire quali sono le dipendenze appropriate. Idealmente, tutte le dipendenze devono poter essere soddisfatte dalla distribuzione utilizzata per la rigenerazione del pacchetto, se non lo sono, si avvia un processo ricorsivo, per cui per i pacchetti indicati nel campo <literal>Build-Depends</literal> deve essere fatto un «backport» prima che il pacchetto in questione sia costruito. Alcuni pacchetti non necessitano di backporting, e possono essere installati così come sono durante il processo di creazione (un esempio degno di nota è <emphasis role="pkg">debhelper</emphasis>). Si noti che il processo di backporting può rapidamente diventare complesso se non si è attenti. Pertanto, i backport dovrebbero essere ridotti al minimo indispensabile, quando possibile.</para>

      <sidebar>
        <title><emphasis>SUGGERIMENTO</emphasis> Installazione dei <literal>Build-Depends</literal></title>
        <indexterm><primary>Campo di controllo,<literal>Build-Depends</literal></primary></indexterm> 
	<para><command>apt-get</command> permette d'installare tutti i pacchetti nei campi <literal>Build-Depends</literal> di un pacchetto sorgente disponibile nella distribuzione indicata nella riga <literal>deb-src</literal> del file <filename>/etc/apt/sources.list</filename>. Per farlo basta eseguire il comando <command>apt-get build-dep <replaceable>source-package</replaceable></command>.</para>
      </sidebar>
    </section>
    <section>
      <title>Iniziare la rigenerazione del pacchetto</title>

      <para>Quando sono state apportate tutte le modifiche necessarie ai sorgenti, si può iniziare a generare il pacchetto binario (il file <filename>.deb</filename>). L'intero processo è gestito dal comando <command>dpkg-buildpackage</command>.</para>

      <example>
        <title>Rigenerazione di un pacchetto</title>

        <screen><computeroutput>$ </computeroutput><userinput>dpkg-buildpackage -us -uc
</userinput><computeroutput>[...]
</computeroutput></screen>
      </example>

      <sidebar id="sidebar.fakeroot">
        <title><emphasis>STRUMENTO</emphasis> <command>fakeroot</command></title>

	<para>Il processo di creazione di un pacchetto si occupa, in sostanza, di raccogliere una serie di file già esistenti (o costruiti) in un archivio, molti di questi file saranno di proprietà di <emphasis>root</emphasis>. Tuttavia, la costruzione di tutto il pacchetto utilizzando questo utente potrebbe comportare dei rischi, per fortuna questo può essere evitato con il comando <command>fakeroot</command>. Questo strumento può essere utilizzato per eseguire un programma, dandogli l'impressione che sia stato avviato dall'utente <emphasis>root</emphasis> e creare file con proprietà e permessi arbitrari. Quando il programma crea l'archivio che diventerà il pacchetto Debian, è indotto a creare un archivio contenente i file contrassegnati come appartenenti a proprietari arbitrari, incluso <emphasis>root</emphasis>. Questo è il tipo di configurazione consigliata, tanto che il programma <command>dpkg-buildpackage</command> utilizza <command>fakeroot</command> in maniera predefinita per la creazione dei pacchetti.</para>

	<para>È da notare che il programma è solamente portato a «credere» che è eseguito da un account privilegiato, il realtà il programma viene eseguito con l'utente che lancia il comando <command>fakeroot <replaceable>programma</replaceable></command> (ed i file vengono creati con gli stessi permessi di questo utente). In questo modo non si utilizzano effettivamente i privilegi dell'utente root, dato che potrebbe essere pericoloso.</para>
      </sidebar>

      <para>Il comando precedente può fallire se i campi <literal>Build-Depends</literal> non sono stati aggiornati o se i relativi pacchetti non sono installati. In questo caso è possibile saltare questo controllo passando l'opzione <literal>-d</literal> al comando <command>dpkg-buildpackage</command>. Tuttavia, ignorando esplicitamente queste dipendenze si corre il rischio che una fase successiva del processo di generazione fallisca. O peggio ancora, il pacchetto può sembrare generato correttamente, ma si comporta in modo anomalo: alcuni programmi disabilitano automaticamente alcune delle loro caratteristiche quando non è disponibile una libreria richiesta in fase di compilazione.</para>

      <para>Il più delle volte, gli sviluppatori Debian utilizzano un programma di alto livello come <command>debuild</command>. Questo esegue <command>dpkg-buildpackage</command> e richiama un programma che avvia molti controlli per convalidare le policy Debian del pacchetto generato. Questo script fa in modo che le variabili d'ambiente locali non «inquinino» la fase di generazione del pacchetto. Il comando <command>debuild</command> è uno degli strumenti della suite <emphasis>devscripts</emphasis>, che condividono la stessa consistenza e configurazione, per rendere il compito più facile ai maintainer.</para>

      <sidebar>
        <title><emphasis>APPROFONDIMENTI</emphasis> <command>pbuilder</command></title>
        <indexterm><primary><command>pbuilder</command></primary></indexterm>

	<para>Il programma <command>pbuilder</command> (disponibile nel pacchetto con lo stesso nome) permette di costruire un pacchetto Debian in un ambiente isolato attraverso <emphasis>chroot</emphasis>. Prima di tutto viene creata una directory temporanea con il sistema minimale richiesto per la costruzione del pacchetto (inclusi i pacchetti elencati nel campo <emphasis>Build-Depends</emphasis> field). Questa directory viene usata come directory radice (<filename>/</filename>), utilizzando il comando <command>chroot</command> durante la generazione del pacchetto.</para>

	<para>Questo strumento fa in modo che il processo di generazione del pacchetto avvenga in un ambiente che non può essere alterato dagli utenti. Ciò consente un veloce rilevamento delle mancate dipendenze di compilazione (dal momento che la costruzione non andrà a buon fine, a meno che non vengano documentate le dipendenze appropriate). Infine, permette la costruzione di un pacchetto per una distribuzione di Debian diversa da quella utilizzata nel sistema: la macchina può usare la distribuzione <emphasis role="distribution">Stable</emphasis> per il suo normale lavoro e nella stessa macchina, avviare <command>pbuilder</command> per utilizzare la distribuzione <emphasis role="distribution">Unstable</emphasis> per costruire un pacchetto.</para>
      </sidebar>
    </section>
  </section>
  <section id="sect.building-first-package">
    <title>Creare il primo pacchetto</title>
    <section>
      <title>Meta-pacchetti o pacchetti finti</title>

      <para>I pacchetti finti e i meta-pacchetti sono simili, entrambi non hanno contenuti, hanno però dei meta-dati che agiscono sullo stack di gestione dei pacchetti.</para>

      <para>Lo scopo dei pacchetti finti è quello di far credere a <command>dpkg</command> e <command>apt</command> che un determinato pacchetto è installato anche se è soltanto un guscio vuoto. Questo permette di soddisfare le dipendenze di un pacchetto quando il software corrispondente è installato al di là delle scopo del sistema di pacchettizzazione. Questo sistema funziona, ma dovrebbe comunque essere evitato quando possibile, dato che non c'è alcuna garanzia che il software installato manualmente si comporti esattamente come il pacchetto corrispondente e i pacchetti che dipendono da esso potrebbero non funzionare correttamente.</para>

      <para>D'altra parte, lo scopo principale di un meta-pacchetto è quello di raggruppare una serie di dipendenze, in modo che con il meta-pacchetto si installino una serie di altri pacchetti in un unico passaggio.</para>

      <para>Entrambi i tipi di pacchetti possono essere creati dai comandi <command>equivs-control</command> e <command>equivs-build</command> (nel pacchetto <emphasis role="pkg">equivs</emphasis>). Il comando <command>equivs-control <replaceable>file</replaceable></command> crea un file d'intestazione del pacchetto Debian che dovrebbe essere modificato per contenere il nome del pacchetto, il numero di versione, il nome del manutentore, le dipendenze e la descrizione. Gli altri campi senza un valore predefinito sono opzionali e possono essere eliminati. I campi <literal>Copyright</literal>, <literal>Changelog</literal>, <literal>Readme</literal> e <literal>Extra-Files</literal> non sono campi standard nei pacchetti Debian, hanno senso solo nell'ambito di <command>equivs-build</command> e non saranno conservati nelle intestazioni del pacchetto generato.</para>

      <example>
        <title>File d'intestazione del pacchetto finto <emphasis>libxml-libxml-perl</emphasis></title>

        <programlisting>
Section: perl
Priority: optional
Standards-Version: 3.9.6

Package: libxml-libxml-perl
Version: 2.0116-1
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Depends: libxml2 (&gt;= 2.7.4)
Architecture: all
Description: Fake package - module manually installed in site_perl
 This is a fake package to let the packaging system
 believe that this Debian package is installed. 
 .
 In fact, the package is not installed since a newer version
 of the module has been manually compiled &amp; installed in the
 site_perl directory.</programlisting>
      </example>

      <para>Il passo successivo è quello di generare il pacchetto Debian con il comando <command>equivs-build <replaceable>file</replaceable></command>. Voilà: il pacchetto viene creato nella directory corrente e può essere gestito come qualsiasi altro pacchetto Debian.</para>
    </section>
    <section>
      <title>Semplice file di archivio</title>

      <para>Gli amministratori della Falcot Corp hanno bisogno di creare un pacchetto Debian per facilitare la distribuzione di una serie di documenti su un gran numero di macchine. L'amministratore incaricato di questo compito prima legge la "Guida al nuovo Maintainer", quindi inizia a lavorare sul pacchetto. <ulink type="block" url="https://www.debian.org/doc/manuals/maint-guide/" /></para>

      <para>Il primo passo è la creazione della directory <filename>falcot-data-1.0</filename> che conterrà il sorgente del pacchetto interessato. Il nome del pacchetto sarà logicamente <literal>falcot-data</literal> con il numero di versione <literal>1.0</literal>. L'amministratore mette i file dei documenti nella sotto-directory <filename>data</filename>. Dopo viene eseguito il comando <command>dh_make</command> (dal pacchetto <emphasis role="pkg">dh-make</emphasis>) per aggiungere i file necessari per il processo di generazione del pacchetto, che saranno memorizzati nella sotto-directory <filename>debian</filename>:</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>cd falcot-data-1.0</userinput>
<computeroutput>$ </computeroutput><userinput>dh_make --native</userinput>
<computeroutput>
Type of package: single binary, indep binary, multiple binary, library, kernel module, kernel patch?
 [s/i/m/l/k/n] </computeroutput><userinput>i</userinput>
<computeroutput>
Maintainer name : Raphael Hertzog
Email-Address   : hertzog@debian.org
Date            : Fri, 04 Sep 2015 12:09:39 -0400
Package Name    : falcot-data
Version         : 1.0
License         : gpl3
Type of Package : Independent
Hit &lt;enter&gt; to confirm:
Currently there is no top level Makefile. This may require additional tuning.
Done. Please edit the files in the debian/ subdirectory now. You should also
check that the falcot-data Makefiles install into $DESTDIR and not in / .
$</computeroutput></screen>

      <para>Il tipo di pacchetto selezionato (<emphasis>binario indep</emphasis>) indica che questo pacchetto sorgente genererà un pacchetto binario singolo che può essere condiviso tra tutte le architetture (<literal>Architecture: all</literal>).  Al contrario il tipo <emphasis>binario singolo</emphasis>, crea un singolo pacchetto binario che dipende dall'architettura a cui è destinato (<literal>Architecture: any</literal>). In questo caso, la scelta migliore è la prima, dato che il pacchetto contiene solo documenti e non binari, ino modo possa essere usato allo stesso modo su computer di tutte le architetture.</para>

      <indexterm><primary>tipi di pacchetti</primary></indexterm>
      <indexterm><primary>pacchetto</primary><secondary>tipi</secondary></indexterm>

      <para>Il tipo di pacchetto sorgente a <emphasis>binari multipli</emphasis> genera diversi pacchetti binari. Un caso particolare, sono i sorgenti dei pacchetti di tipo <emphasis>library</emphasis>, utile per le librerie condivise, in quanto hanno bisogno di seguire delle regole ben precise di pacchettizzazione. In modo simile, <emphasis>kernel module</emphasis> o <emphasis>kernel patch</emphasis> deve essere limitato ai pacchetti contenenti i moduli del kernel.</para>

      <sidebar>
        <title><emphasis>SUGGERIMENTO</emphasis> Nome ed indirizzo email del maintainer</title>

	<para>La maggior parte dei programmi coinvolti nella manutenzione dei pacchetti cercherà il nome del maintainer nelle variabili d'ambiente <varname>DEBFULLNAME</varname> e <varname>DEBEMAIL</varname> o <varname>EMAIL</varname>. Definire questi valori eviterà di doverli digitare più volte. Se la shell utilizzata abitualmente è la <command>bash</command>, si possono semplicemente aggiungere le due righe seguenti nei file <filename>~/.bashrc</filename> (ovviamente bisogna sostituire i valori con quelli più adeguati!):</para>

        <programlisting>
export EMAIL="hertzog@debian.org"
export DEBFULLNAME="Raphael Hertzog"</programlisting>
      </sidebar>

      <para>Il comando <command>dh_make</command> crea la sotto-directory <filename>debian</filename> con all'interno molti file. Alcuni di questi sono necessari, in particolare i file <filename>rules</filename>, <filename>control</filename>, <filename>changelog</filename> e <filename>copyright</filename>. I file con estensione <filename>.ex</filename> sono file di esempio che all'occorrenza possono essere modificati (e rimossa l'estensione). Quando non sono necessari, è consigliato eliminarli. Il file <filename>compat</filename> deve essere mantenuto, in quanto è necessario per la suite di programmi <emphasis>debhelper</emphasis> (che iniziano tutti con il prefisso <command>dh_</command>) utilizzati in diverse fasi del processo di generazione del pacchetto.</para>

      <para>Il file <filename>copyright</filename> deve contenere le informazioni sugli autori dei documenti inclusi nel pacchetto e la relativa licenza. In questo caso si tratta di documenti interni e il loro uso è limitato all'interno dell'azienda Falcot Corp. Il file <filename>changelog</filename>, generato in maniera predefinita, è generalmente corretto; è sufficiente sostituire la frase «Initial release» con una spiegazione più dettagliata e modificare la distribuzione da <literal>unstable</literal> a <literal>internal</literal>. Il file <filename>control</filename> è stato aggiornato: il campo <literal>Section</literal> è stao cambiato in <emphasis>misc</emphasis> e i campi <literal>Homepage</literal>, <literal>Vcs-Git</literal> e <literal>Vcs-Browser</literal> sono stati rimossi. I campi <literal>Depends</literal> sono stati completati con <literal>iceweasel | www-browser</literal> in modo da garantire la disponibilità di un browser web in grado di visualizzare i documenti nel pacchetto.</para>

      <example>
        <title>Il file <filename>control</filename></title>

        <programlisting>
Source: falcot-data
Section: misc
Priority: optional
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Build-Depends: debhelper (&gt;= 9)
Standards-Version: 3.9.5

Package: falcot-data
Architecture: all
Depends: iceweasel | www-browser, ${misc:Depends}
Description: Internal Falcot Corp Documentation
 This package provides several documents describing the internal
 structure at Falcot Corp.  This includes:
  - organization diagram
  - contacts for each department.
 .
 These documents MUST NOT leave the company.
 Their use is INTERNAL ONLY.</programlisting>
      </example>

      <example>
        <title>Il file <filename>changelog</filename></title>

        <programlisting>
falcot-data (1.0) internal; urgency=low

  * Initial Release.
  * Let's start with few documents:
    - internal company structure;
    - contacts for each department.

 -- Raphael Hertzog &lt;hertzog@debian.org&gt;  Fri, 04 Sep 2015 12:09:39 -0400</programlisting>
      </example>

      <example>
        <title>Il file <filename>copyright</filename></title>

        <programlisting>
Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: falcot-data

Files: *
Copyright: 2004-2015 Falcot Corp
License: 
 All rights reserved.</programlisting>
      </example>

      <sidebar>
        <title><emphasis>FONDAMENTALI</emphasis> Il file <filename>Makefile</filename></title>
        <indexterm><primary><filename>Makefile</filename></primary></indexterm>

	<para>Il file <filename>Makefile</filename> è uno script utilizzato dal programma <command>make</command>, e descrive le regole su come generare un insieme di file da un altro, utilizzando le dipendenze ad albero (ad esempio, un programma può essere costruito da un insieme di file sorgenti). Il file <filename>Makefile</filename> descrive queste regole nel seguente formato:</para>

        <programlisting>
target: source1 source2 ...
        command1
        command2</programlisting>

	<para>Il significato di questa regola è il seguente: se uno dei file <literal>sources*</literal> è più recente rispetto al file <literal>target</literal>, il target deve essere generato utilizzando <command>command1</command> e <command>command2</command>.</para>

	<para>Si noti che le righe di comando devono iniziare con un carattere di tabulazione; si noti pure che quando una riga di comando inizia con il carattere trattino (<literal>-</literal>), il fallimento del comando non interrompe l'intero processo.</para>
      </sidebar>

      <para>Il file <filename>rules</filename> di solito contiene un insieme di regole utilizzate per configurare, compilare e installare il software in una sotto-directory dedicata (con il nome del pacchetto binario generato). Il contenuto di questa sotto-directory viene archiviato all'interno del pacchetto Debian, come se fosse la radice del file system. In questo caso, i file verranno installati netta sotto-directory <filename>debian/falcot-data/usr/share/falcot-data/</filename>, in modo che l'installazione del pacchetto generato metta i file in <filename>/usr/share/falcot-data/</filename>. Il file <filename>rules</filename> viene utilizzato come un <filename>Makefile</filename>, con alcuni obbiettivi predefiniti (compresi <literal>clean</literal> e <literal>binary</literal>, utilizzati rispettivamente per pulire la directory dei sorgenti e per generare il pacchetto binario).</para>

      <para>Anche se questo file è il cuore di tutto il processo, contiene solo il minimo indispensabile per l'esecuzione di un insieme predefinito di comandi forniti dal programma <command>debhelper</command>. Questo è il caso per i file generati da <command>dh_make</command>. Per installare i file interessati, bisogna semplicemente configurare il comportamento del comando <command>dh_install</command> creando il seguente file <filename>debian/falcot-data.install</filename>:</para>

      <programlisting>
data/* usr/share/falcot-data/</programlisting>

      <para>A questo punto, il pacchetto può essere creato. Verrà comunque apportata una miglioria. Dal momento che gli amministratori vogliono che i documenti siano facilmente accessibili dal menu dell'ambiente grafico, si aggiunge un file <filename>falcot-data.desktop</filename> e lo si installa in <filename>/usr/share/applications</filename> aggiungendo una seconda riga a<filename>debian/falcot-data.install</filename>.</para>

      <example>
        <title>Il file <filename>falcot-data.desktop</filename></title>

        <programlisting>
[Desktop Entry]
Name=Internal Falcot Corp Documentation
Comment=Starts a browser to read the documentation
Exec=x-www-browser /usr/share/falcot-data/index.html
Terminal=false
Type=Application
Categories=Documentation;</programlisting>
      </example>

      <para>La versione aggiornata di <filename>debian/falcot-data.install</filename> è simile a questa:</para>
      <programlisting>
data/* usr/share/falcot-data/
falcot-data.desktop usr/share/applications/</programlisting>

      <para>Adesso il pacchetto sorgente è pronto.Tutto quello che resta da fare è generare il pacchetto binario, con lo stesso metodo usato in precedenza per la rigenerazione dei pacchetti: si esegue il comando <command>dpkg-buildpackage -us -uc</command> all'interno della directory <filename>falcot-data-1.0</filename>.</para>
    </section>
  </section>
  <section id="sect.setup-apt-package-repository">
    <title>Creazione di un repository di pacchetti per APT</title>
    <indexterm><primary>archivio pacchetti</primary></indexterm>
    <indexterm><primary>pacchetto</primary><secondary>Debian</secondary><tertiary>archivio di</tertiary></indexterm>

    <para>Falcot Corp ha cominciato gradualmente a mantenere un certo numero di pacchetti Debian, sia modificandoli localmente da pacchetti esistenti che creandoli da zero per distribuire dati interni e programmi.</para>

    <para>Per rendere la distribuzione dei pacchetti più facile, si vuole integrare questi pacchetti in un pacchetto archivio che può essere utilizzato direttamente da APT. Per ovvi motivi di manutenzione, si vuole separare i pacchetti interni da quelli rigenerati localmente. L'obiettivo è che le voci corrispondenti nel file <filename>/etc/apt/sources.list.d/falcot.list</filename> siano le seguenti:</para>

    <programlisting>
deb http://packages.falcot.com/ updates/
deb http://packages.falcot.com/ internal/</programlisting>
    <indexterm><primary><command>mini-dinstall</command></primary></indexterm>

    <para>Gli amministratori quindi devono configurare un virtual host nel server HTTP interno, utilizzando la directory <filename>/srv/vhosts/packages/</filename> come radice dello spazio web associato. La gestione dell'archivio stesso è delegata al comando <command>mini-dinstall</command> (presente nel pacchetto dal nome simile). Questo strumento controlla la directory <filename>incoming/</filename> (in questo caso, <filename>/srv/vhosts/packages/mini-dinstall/incoming/</filename>) e aspetta che vi siano inseriti dei nuovi pacchetti, quando un pacchetto viene caricato, viene installato in un archivio Debian in <filename>/srv/vhosts/packages/</filename>. Il comando <command>mini-dinstall</command> legge i file <filename>*.changes</filename> creati quando il pacchetto viene generato. Questi file contengono un elenco di tutti gli altri file associati alla versione del pacchetto (<filename>*.deb</filename>, <filename>*.dsc</filename>, <filename>*.diff.gz</filename>/<filename>*.debian.tar.gz</filename>, <filename>*.orig.tar.gz</filename>, o i loro equivalenti con altri strumenti di compressione), e permettono a <command>mini-dinstall</command> di sapere quali file installare. I file <filename>*.changes</filename> contengono anche il nome della distribuzione di destinazione (spesso <literal>unstable</literal>) citata nell'ultima voce del file <filename>debian/changelog</filename>, <command>mini-dinstall</command> usa questa informazione per decidere dove installare il pacchetto. È per questo che gli amministratori devono sempre cambiare questo campo prima di costruire un pacchetto, e impostarlo a <literal>internal</literal> o <literal>updates</literal>, a seconda del luogo di destinazione. <command>mini-dinstall</command> quindi genera i file necessari per APT, come ad esempio <filename>Packages.gz</filename>.</para>

    <sidebar>
      <title><emphasis>ALTERNATIVA</emphasis> <command>apt-ftparchive</command></title>
      <indexterm><primary><command>apt-ftparchive</command></primary></indexterm>

      <para>Se sembra troppo macchinoso far avviare <command>mini-dinstall</command> per un determinato archivio Debian, si può utilizzare al suo posto il comando <command>apt-ftparchive</command>. Questo strumento scansiona il contenuto di una directory e mostra (nello standard output) il corrispondente file <filename>Packages</filename>. Nel caso della Falcot Corp, gli amministratori possono caricare i pacchetti direttamente in <filename>/srv/vhosts/packages/updates/</filename> o <filename>/srv/vhosts/packages/internal/</filename>, quindi eseguire i seguenti comandi per creare i file <filename>Packages.gz</filename>:</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>cd /srv/vhosts/packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages updates &gt;updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages internal &gt;internal/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip internal/Packages</userinput></screen>

      <para>Il comando <command>apt-ftparchive sources</command> permette di creare i file <filename>Sources.gz</filename> in modo simile.</para>
    </sidebar>

    <para>Per la configurazione di <command>mini-dinstall</command> è necessario impostare il file <filename>~/.mini-dinstall.conf</filename>; nel caso della Falcot Corp, i contenuti sono i seguenti:</para>

    <programlisting>
[DEFAULT]
archive_style = flat
archivedir = /srv/vhosts/packages

verify_sigs = 0
mail_to = admin@falcot.com

generate_release = 1
release_origin = Falcot Corp
release_codename = stable

[updates]
release_label = Recompiled Debian Packages

[internal]
release_label = Internal Packages</programlisting>

    <para>Una decisione degna di nota è la generazione del file <filename>Release</filename> per ogni archivio. Questo può aiutare a gestire le priorità del pacchetto d'installazione utilizzando il file di configurazione <filename>/etc/apt/preferences</filename> (si veda la <xref linkend="sect.apt.priorities" /> per maggiori informazioni).</para>

    <sidebar>
      <title><emphasis>SICUREZZA</emphasis> <command>mini-dinstall</command> ed i permessi</title>

      <para>Dato che <command>mini-dinstall</command> è stato progettato per essere eseguito come un normale utente, non è necessario eseguirlo come root. Il modo più semplice è quello di configurare tutto all'interno di un account utente, appartenente all'amministratore, che ha il compito di creare i pacchetti Debian. Poiché solo quest'amministratore dispone dei permessi necessari per mettere i file nella directory <filename>incoming/</filename>, si può dedurre che l'amministratore abbia verificato l'origine di ogni pacchetto prima di distribuirlo e non è necessario farlo rifare a <command>mini-dinstall</command>. Questo spiega il parametro <literal>verify_sigs = 0</literal> (che indica che le firme non devono essere verificate). Tuttavia, se il contenuto dei pacchetti è sensibile, si può cambiare l'impostazione e scegliere di autenticare con un portachiavi contenente le chiavi pubbliche delle persone autorizzate a creare pacchetti (utilizzando il parametro <literal>extra_keyrings</literal>); poi <command>mini-dinstall</command> verificherà l'origine di ogni pacchetto in arrivo, analizzando la firma inclusa nel file <filename>*.changes</filename>.</para>
    </sidebar>

    <para>Quando viene eseguito <command>mini-dinstall</command> in realtà viene avviato un demone sullo sfondo. Finché questo demone rimane attivo, verifica ogni mezz'ora se ci sono nuovi pacchetti nella directory <filename>incoming/</filename>. Quando viene inserito un nuovo pacchetto, viene spostato nell'archivio e vengono rigenerati, in maniera appropriata, i file <filename>Packages.gz</filename> e <filename>Sources.gz</filename>. Se risulta problematico eseguire un demone, <command>mini-dinstall</command> può essere avviato manualmente in modalità batch (con l'opzione <literal>-b</literal>) ogni volta che viene caricato un pacchetto nella directory <filename>incoming/</filename>. I metodi alternativi messi a disposizione da <command>mini-dinstall</command> sono documentati nella sua pagina di manuale <citerefentry><refentrytitle>mini-dinstall</refentrytitle> <manvolnum>1</manvolnum></citerefentry>.</para>

    <sidebar>
      <title><emphasis>EXTRA</emphasis> Creazione di un archivio firmato</title>

      <para>La suite APT controlla una serie di firme crittografiche sui pacchetti che gestisce prima di installarli, per garantire la loro autenticità (si veda <xref linkend="sect.package-authentication" />). Gli archivi APT privati possono poi essere un problema, poichè le macchine che li utilizzano continueranno a visualizzare degli avvertimenti sui pacchetti non firmati. Un amministratore diligente integrerà pertanto gli archivi privati con la modalità sicura di APT.</para>

      <para>Per facilitare questo processo, <command>mini-dinstall</command> include l'opzione di configurazione <literal>release_signscript</literal> che permette di specificare uno script da utilizzare per generare la firma. Un buon punto di partenza è lo script <filename>sign-release.sh</filename> fornito dal pacchetto <emphasis role="pkg">mini-dinstall</emphasis> nella directory <filename>/usr/share/doc/mini-dinstall/examples/</filename>; le modifiche locali possono essere rilevanti.</para>
    </sidebar>
  </section>
  <section id="sect.becoming-package-maintainer">
    <title>Diventare un maintainer di pacchetti</title>
    <section>
      <title>Imparare a creare pacchetti</title>

      <para>La creazione di un pacchetto Debian di qualità non è sempre un compito semplice, diventare un maintainer di pacchetti richiede una fase di apprendimento teorico e pratico. Non è una semplice questione di costruzione e installazione del software, la parte più complessa è comprendere i problemi ed i conflitti, e più in generale le interazioni con la miriade di altri pacchetti disponibili.</para>
      <section>
        <title>Regole</title>

	<para>Un pacchetto Debian deve rispettare delle regole ben precise presenti nelle policy di Debian, ed ogni maintainer di pacchetti deve conoscerle. Non c'è l'obbligo di conoscerle a memoria, ma è importante sapere che esistono e che si possono consultare ogni volta che si presenta una scelta alternativa non banale. Ogni maintainer Debian ha fatto degli errori dovuto al fatto che non conosceva una regola, ma questo non è un grosso problema finchè l'errore verrà risolto quando un utente lo segnalerà con un bug report (cosa che normalmente accadere molto presto grazie agli utenti esperti). <ulink type="block" url="https://www.debian.org/doc/debian-policy/" /></para>
      </section>
      <section>
        <title>Procedure</title>
        <indexterm><primary>Guida di riferimento per lo sviluppatore Debian</primary></indexterm>

	<para>Debian non è una semplice raccolta di singoli pacchetti. Il lavoro di pacchettizzazione di ognuno è parte di un progetto collettivo; essere uno sviluppatore Debian implica conoscere come opera, nel suo complesso, il progetto Debian. Ogni sviluppatore, prima o poi, interagisce con gli altri. La guida di riferimento per lo sviluppatore Debian (nel pacchetto <emphasis role="pkg">developers-reference</emphasis>) riassume ciò che ogni sviluppatore deve conoscere per interagire nel miglior modo possibile con i vari team all'interno del progetto, e come usufruire dei possibili vantaggi dati delle risorse disponibili. Questo documento elenca anche una serie di doveri a cui uno sviluppatore dovrebbe adempiere. <ulink type="block" url="https://www.debian.org/doc/manuals/developers-reference/" /></para>
      </section>
      <section>
        <title>Strumenti</title>

	<para>Molti strumenti aiutano i maintainer di pacchetti nel loro lavoro. In questa sezione verranno descritti brevemente, tralasciando tutti i dettagli, dal momento che tutti hanno una propria documentazione completa.</para>
        <section>
          <title>Il programma <command>lintian</command></title>
          <indexterm><primary><command>lintian</command></primary></indexterm>

	  <para>Questo strumento è uno dei più importanti: si occupa di verificare i pacchetti Debian. Si basa su una vasta gamma di test creati dalla policy di Debian, e rileva in modo rapido e automatico molti errori che possono essere risolti prima che i pacchetti vengano rilasciati.</para>

	  <para>Questo strumento lo si deve considerare solamente come un aiuto e può capitare che a volte si comporti in modo errato (per esempio, poiché le policy di Debian cambiano nel corso del tempo, <command>lintian</command> a volte può essere obsoleto). Inoltre non è molto dettagliato: se non si riceve alcun errore da Lintian non di deve interpretare questo comportamento come la prova che il pacchetto sia perfetto ma che, al massimo, non contiene gli errori più comuni.</para>
        </section>
        <section>
          <title>Il programma <command>piuparts</command></title>
          <indexterm><primary><command>piuparts</command></primary></indexterm>

	  <para>Questo è un altro importante strumento: automatizza l'installazione, l'aggiornamento, la rimozione e l'eliminazione completa di un pacchetto (in un ambiente isolato), e controlla che nessuna di queste operazioni dia luogo ad un errore. Può essere d'aiuto nel rilevare le dipendenze mancanti, inoltre rileva anche quando i file vengono erroneamente lasciati dopo che il pacchetto è stato copmletamente eliminato.</para>
        </section>
        <section>
          <title>devscripts</title>
          <indexterm><primary><emphasis role="pkg">devscripts</emphasis></primary></indexterm>
          <indexterm><primary><command>debuild</command></primary></indexterm>
          <indexterm><primary><command>dch</command></primary></indexterm>
          <indexterm><primary><command>uscan</command></primary></indexterm>
          <indexterm><primary><command>debi</command></primary></indexterm>
          <indexterm><primary><command>debc</command></primary></indexterm>

	  <para>Il pacchetto <emphasis role="pkg">devscripts</emphasis> contiene molti programmi che aiutano in una vasta gamma del lavoro dello sviluppatore Debian:</para>
          <itemizedlist>
            <listitem>
	      <para><command>debuild</command> permette di generare un pacchetto (con <command>dpkg-buildpackage</command>) ed eseguire <command>lintian</command> per verificarne la conformità con le policy di Debian.</para>
            </listitem>
            <listitem>
	      <para><command>debclean</command> pulisce un pacchetto sorgente dopo che è stato generato un pacchetto binario.</para>
            </listitem>
            <listitem>
	      <para><command>dch</command> permette di modificare velocemente il file <filename>debian/changelog</filename> nel sorgente del pacchetto.</para>
            </listitem>
            <listitem>
	      <para><command>uscan</command> verifica se è stata rilasciata una nuova versione del software dall'autore originale; questo richiede il file <filename>debian/watch</filename> con una descrizione delle posizioni delle varie versioni.</para>
            </listitem>
            <listitem>
	      <para><command>debi</command> permette di installare (con <command>dpkg -i</command>) il pacchetto Debian che è stato appena generato senza bisogno di digitare il suo nome completo e il percorso.</para>
            </listitem>
            <listitem>
	      <para>In modo simile, <command>debc</command> consente la scansione dei contenuti del pacchetto generato di recente (con <command>dpkg -c</command>), senza la necessità di digitare il suo nome completo e il percorso.</para>
            </listitem>
            <listitem>
	      <para><command>bts</command> permette di controllare il sistema di tracciamento dei bug dalla riga di comando; questo programma genera automaticamente le e-mail in maniera appropriata.</para>
            </listitem>
            <listitem>
	      <para><command>debrelease</command> carica il pacchetto generato di recente in un server remoto, senza la necessità di digitare il nome completo e il percorso del relativo file <filename>.changes</filename>.</para>
            </listitem>
            <listitem>
	      <para><command>debsign</command> firma i file <filename>*.dsc</filename> e <filename>*.changes</filename>.</para>
            </listitem>
            <listitem>
	      <para><command>uupdate</command> automatizza la creazione di una nuova versione del pacchetto, appena è rilasciata una nuova versione del software originale.</para>
            </listitem>
          </itemizedlist>
        </section>
        <section>
          <title><emphasis role="pkg">debhelper</emphasis> e <emphasis role="pkg">dh-make</emphasis></title>
          <indexterm><primary><emphasis>debhelper</emphasis></primary></indexterm>
          <indexterm><primary><emphasis>dh-make</emphasis></primary></indexterm>

	  <para>Debhelper è un insieme di script che aiutano nella creazione di pacchetti conformi con la policy di Debian; questi script sono eseguiti da <filename>debian/rules</filename>. Debhelper è stato ampiamente adottato in Debian, come dimostra il fatto che è utilizzato dalla maggior parte dei pacchetti ufficiali di Debian. Tutti i comandi che contiene hanno come prefisso <command>dh_</command>.</para>

	  <para>Lo script <command>dh_make</command> (nel pacchetto <emphasis>dh-make</emphasis>) crea i file necessari per la generazione di un pacchetto Debian, in una directory contenente i sorgenti di un software. Come si può immaginare dal nome del programma, i file generati utilizzano debhelper in maniera predefinita.</para>
        </section>
        <section>
          <title><command>dupload</command> e <command>dput</command></title>
          <indexterm><primary><command>dupload</command></primary></indexterm>
          <indexterm><primary><command>dput</command></primary></indexterm>

	  <para>I comandi <command>dupload</command> e <command>dput</command> permettono il caricamento di un pacchetto Debian su un server (anche remoto). Questo permette agli sviluppatori di pubblicare il proprio pacchetto sul server principale di Debian (<literal>ftp-master.debian.org</literal>) in modo che possa essere integrato nell'archivio e distribuito nei mirror. Questi comandi prendono il file <filename>*.changes</filename> come parametro e deducono gli altri file importanti dal suo contenuto.</para>
        </section>
      </section>
    </section>
    <section>
      <title>Processo di accettazione</title>

      <para>Diventare uno sviluppatore Debian non è una semplice questione amministrativa. Il processo è costituito da diverse fasi, ed è tanto un'iniziazione quanto un processo di selezione. In ogni caso, l'intero processo è formalizzato e ben documentato, in modo che chiunque spuò monitorarne l'avanzamento di stato sul sito web dedicato al processo per il nuovo membro. <ulink type="block" url="http://nm.debian.org/" /></para>

      <sidebar>
        <title><emphasis>EXTRA</emphasis> Processo semplificato per «Maintainer Debian»</title>

        <para>"Debian maintainer" è un'altro status che da meno privilegi dello status di "Debian Developer" ma che ha un processo di associazione più veloce. Con questo status, i contributori possono mantenere solo i loro pacchetti. È necessario solo che uno sviluppatore Debian esegua un controllo sul caricamento iniziale, e pubblichi una dichiarazione in cui risulti che ci si fida della capacità del possibile futuro maintainer di mantenere il pacchetto in maniera autonoma.</para>
        <indexterm><primary>Debian Maintainer</primary></indexterm>
      </sidebar>
      <section>
        <title>Prerequisiti</title>

	<para>Tutti i candidati sono tenuti ad avere almeno una conoscenza di base della lingua inglese. Questo è necessario a tutti i livelli: per le comunicazioni iniziali con l'esaminatore, naturalmente, ma anche più avanti, dal momento che l'inglese è la lingua preferita per la maggior parte della documentazione, anche gli utilizzatori del pacchetto comunicheranno in inglese per la segnalazione di bug e si aspetteranno delle risposte in inglese.</para>

	<para>Altri prerequisiti dipendono dalla motivazione. Diventare uno sviluppatore Debian è un processo che ha senso solo se il candidato sa che l'interesse per Debian durerà per molti mesi. Il processo di accettazione può durare diversi mesi ed ha bisogno di sviluppatori Debian a lungo termine, ogni pacchetto ha bisogno di manutenzione permanente, e non solo un caricamento iniziale.</para>
      </section>
      <section>
        <title>Registrazione</title>

	<para>Il primo (vero) passo consiste nel trovare uno sponsor o un sostenitore, il che significa uno sviluppatore ufficiale disposto a dichiarare che crede che accettare <emphasis>X</emphasis> sarebbe una buona cosa per Debian. Ciò implica in genere che il candidato sia già attivo all'interno della comunità e che il suo lavoro sia stato apprezzato. Se il candidato è timido e il suo lavoro non viene elogiato pubblicamente, può cercare di convincere uno sviluppatore Debian a sostenerlo, mostrandogli il suo lavoro in privato.</para>

        <indexterm><primary>coppia di chiavi</primary></indexterm>
	<para>Al tempo stesso, il candidato deve generare una coppia, pubblica/privata, di chiavi RSA con GnuPG, che dovrebbe essere firmata da almeno due sviluppatore ufficiale Debian. La firma autentica il nome della chiave. In effetti, durante un key signing party, ogni partecipante deve mostrare un documento di identità ufficiale (solitamente una carta di identità o un passaporto) insieme all'identificativo della chiave. Questo passaggio conferma il legame tra la persona e la chiave. Questa firma richiede pertanto un riscontro nella vita reale. Se non si è ancora incontrato alcun sviluppatore Debian in una conferenza pubblica sul software libero, si possono cercare gli sviluppatori che vivono nelle vicinanze utilizzando l'elenco alla seguente pagina web come punto di partenza. <ulink type="block" url="https://wiki.debian.org/Keysigning" /></para>

	<para>Una volta che la registrazione sul sito <literal>nm.debian.org</literal> è stata convalidata dal sostenitore, al candidato viene assegnato un <emphasis>Application Manager</emphasis>. Da quel portale, l'application manager guiderà poi il processo attraverso diversi passaggi e controlli predefiniti.</para>

	<para>La prima verifica è un controllo d'identità. Se si possiede già una chiave firmata da due sviluppatori di Debian, questo passaggio è semplice; altrimenti, l'application manager cercherà di guidare il candidato alla ricerca di sviluppatori Debian nelle vicinanze per organizzare un incontro e firmare la chiave.</para>
      </section>
      <section>
        <title>Accettare i principi</title>

	<para>Queste formalità amministrative sono seguite da considerazioni filosofiche. Il punto è fare in modo che il candidato capisca e accetti il contratto sociale e i principi alla base del Software Libero. Partecipare a Debian è possibile solo se si condividono i valori che uniscono gli attuali sviluppatori, espressi nei testi dei fondamentali (e riassunti in <xref linkend="the-debian-project" />).</para>

	<para>Inoltre, ogni candidato che desidera aderire a Debian è tenuto a conoscere il funzionamento del progetto, e come interagire in modo appropriato per risolvere i problemi che, senza dubbio, si incontreranno col passare del tempo. Tutte queste informazioni sono generalmente documentate nei manuali rivolti ai nuovi maintainer e nella guida di riferimento per lo sviluppatore Debian. Una lettura attenta di questo documento dovrebbe essere sufficiente per rispondere alle domande dell'esaminatore. Se le risposte non sono soddisfacenti, il candidato sarà informato. Quindi, dovrà leggere (nuovamente) la relativa documentazione prima di riprovare. Nei casi in cui la documentazione esistente non contenesse la risposta appropriata per la domanda, il candidato di solito può trovare una risposta, facendo un po' di esperienza pratica in Debian, oppure discutendone con altri sviluppatori Debian. Questo meccanismo garantisce che i candidati vengano coinvolti un po' in Debian prima di diventare parte integrante del progetto. Si tratta di una scelta intenzionale, con la quale i candidati che alla fine aderiranno al progetto sono integrati come un altro pezzo di un puzzle infinitamente espandibile.</para>

        <indexterm><primary><emphasis>Filosofia &amp; Procedure</emphasis></primary></indexterm>
	<para>Questo passaggio è generalmente conosciuto come <emphasis>Philosophy &amp; Procedures</emphasis> (P&amp;P in breve) nel gergo degli sviluppatori coinvolti nel processo per i nuovi membri.</para>
      </section>
      <section>
        <title>Verifica delle capacità</title>

	<para>Ogni domanda per diventare uno sviluppatore ufficiale Debian deve essere giustificata. Per diventare un membro del progetto è necessario dimostrare di meritare tale stato e che lo stato di membro, semplifichi il contributo del candidato allo sviluppo di Debian. La giustificazione più comune è che sia concesso lo status di sviluppatore Debian perché facilita la manutenzione di un pacchetto Debian, ma non è l'unico motivo. Alcuni sviluppatori aderiscono al progetto per contribuire al porting di una specifica architettura, altri vogliono migliorare la documentazione, e così via.</para>

	<para>Questo passaggio rappresenta l'occasione per il candidato di indicare che cosa intende fare nell'ambito del progetto Debian e di mostrare ciò che ha già fatto in tal senso. Debian è un progetto pragmatico e dire qualcosa che non è sufficiente, se non si compiono le azioni vengono annunciate. Generalmente, quando il ruolo previsto all'interno del progetto è legato alla manutenzione dei pacchetti, una prima versione del potenziale pacchetto dovrà essere convalidata tecnicamente e caricata sui server di Debian da uno sponsor tra gli sviluppatori Debian.</para>

        <sidebar>
          <title><emphasis>COMUNITÀ</emphasis> Sponsorizzazione</title>
          <indexterm><primary>sponsorizzazione</primary></indexterm>

	  <para>Gli sviluppatori Debian possono «sponsorizzare» i pacchetti preparati da qualcun altro, pubblicandoli nei repository ufficiali di Debian dopo aver effettuato un attento esame. Questo meccanismo consente alle persone esterne, che non sono ancora passate attraverso il processo per il nuovo maintainer, di contribuire al progetto di tanto in tanto. Allo stesso tempo, garantisce che tutti i pacchetti in Debian siano sempre controllati da un membro ufficiale.</para>
        </sidebar>

	<para>Infine, l'esaminatore verifica le abilità tecniche del candidato (la pacchettizzazione) con un questionario dettagliato. Non sono ammesse risposte sbagliate, ma il tempo per rispondere è illimitato. Tutta la documentazione è disponibile e sono consentiti diversi tentativi, se le prime risposte non sono soddisfacenti. Questo passaggio non ha come obiettivo quello di discriminare i candidati, ma assicurarsi che i nuovi collaboratori abbiamo un minimo di conoscenza.</para>

        <indexterm><primary><emphasis>Compiti &amp; Abilità</emphasis></primary></indexterm>
	<para>Questo passaggio è noto come il passaggio <emphasis>Tasks &amp; Skills</emphasis> (T&amp;S abbreviato) nel gergo degli esaminatori.</para>
      </section>
      <section>
        <title>Approvazione finale</title>

	<para>Nell'ultima fase, l'intero processo è revisionato da un DAM (<emphasis>Debian Account Manager</emphasis>). Il DAM riesaminerà tutte le informazioni sul candidato che l'esaminatore ha raccolto e deciderà se creare o meno un account nei server Debian. Nei casi in cui sono richieste ulteriori informazioni, la creazione dell'account può essere rinviata. I rifiuti sono piuttosto rari se l'esaminatore fa un buon lavoro seguendo in maniera corretta l'iter, ma a volte succede. In ogni caso il rifiuto non è permanente e il candidato è libero di riprovare in un secondo momento.</para>

	<para>La decisione del DAM è autorevole e (quasi) senza appello, il che spiega perché le persone in questa posizione sono state spesso criticate in passato.</para>
      </section>
    </section>
  </section>
</chapter>
