<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="apt">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-apt.png" scalefit="1" />
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>apt</keyword>
      <keyword>apt-get</keyword>
      <keyword>apt-cache</keyword>
      <keyword>aptitude</keyword>
      <keyword>synaptic</keyword>
      <keyword>sources.list</keyword>
      <keyword>apt-cdrom</keyword>
    </keywordset>
  </chapterinfo>
  <title>Обслуживание и обновление: инструменты APT</title>
  <highlights>
    <para>Debian популярен среди администраторов благодаря лёгкости установки программного обеспечения и простоте обновления всей системы. Это уникальное преимущество обусловлено, главным образом, программой <emphasis>APT</emphasis>, которую администраторы Falcot Corp изучают с энтузиазмом.</para>
  </highlights>

  <para><indexterm><primary>APT</primary></indexterm> <indexterm><primary>Advanced Package Tool</primary></indexterm>APT — это аббревиатура от Advanced Package Tool (англ. улучшенный инструмент для работы с пакетами). «Улучшенной» её делает подход к работе с пакетами. APT не обрабатывает их по отдельности, а рассматривает их множество как единое целое и обеспечивает наилучшую из возможных комбинаций пакетов из тех, что доступны и совместимы (в соответствии с зависимостями).</para>

  <sidebar>
    <title><emphasis>СЛОВАРЬ</emphasis> Источник пакета и исходник пакета</title>

    <para>Слово <emphasis>источник (source)</emphasis> может быть истолковано неоднозначно. Исходник пакета(source package) — пакет, содержащий исходный код программы — не надо путать с источником пакетов (package source) — репозиторием (веб-сайтом, FTP-сервером, CD-ROM, локальным каталогом и т. д.) в котором хранятся пакеты.</para>
  </sidebar>

  <para>APT нуждается в получении "перечня пакетов из источников" (“list of package sources”): в файле <filename>/etc/apt/sources.list</filename> имеются примеры подключения различных хранилищ (или “sources” - то есть источники), на которых размещены пакеты Debian. Затем APT импортирует для каждого источника свой "перечень пакетов из источников" (“list of package sources”), размещённых (опубликованных) там. Это производится путём загрузки файла <filename>Packages.xz</filename> или файла с другим методом сжатия (такие как <filename>Packages.gz</filename> или <filename>.bz2</filename>) (в случае источника "of binary packages" - скомпилированного, бинарного пакета), и файла <filename>Sources.xz</filename> (в случае если был выбран источник пакетов с исходным кодами). После загрузки этих файлов APT производит анализ их содержания. Если старая копия этих файлов уже имеется, APT может обновить её, загрузив только отличающиеся части (смотри <xref linkend="sidebar.apt-pdiff" />).</para>
  <indexterm><primary><filename>Packages.xz</filename></primary></indexterm>
  <indexterm><primary><filename>Sources.xz</filename></primary></indexterm>

  <sidebar>
    <title><emphasis>ОСНОВЫ</emphasis> Форматы сжатия <command>gzip</command>, <command>bzip2</command>, <command>LZMA</command> and <command>XZ</command></title>
    <indexterm><primary><command>gzip</command></primary></indexterm>
    <indexterm><primary><command>bzip2</command></primary></indexterm>
    <indexterm><primary><command>lzma</command></primary></indexterm>
    <indexterm><primary><command>xz</command></primary></indexterm>

    <para>Расширение <filename>.gz</filename> относится к файлам, сжатым утилитой <command>gzip</command>. <command>gzip</command> является быстрой и эффективной традиционной Unix утилитой для сжатия файлов. Новые инструменты данной утилиты позволяют достичь большей степени сжатия, но требуют больших ресурсов (времени вычисления и памяти) для сжатия а распаковки файлов. Среди них, по порядку появления, можно выделить <command>bzip2</command> (формирует файлы с расширением <filename>.bz2</filename>), <command>lzma</command> (формирует файлы <filename>.lzma</filename>) и <command>xz</command> (формирует файлы <filename>.xz</filename>).</para>
  </sidebar>
  <section id="sect.apt-sources.list">
    <title>Содержимое файла <filename>sources.list</filename></title>
    <indexterm><primary><filename>sources.list</filename></primary></indexterm>
    <indexterm><primary>источник</primary><secondary>пакетов</secondary></indexterm>
    <indexterm><primary>пакета</primary><secondary>источник</secondary></indexterm>
    <indexterm><primary><filename>/etc/apt/sources.list</filename></primary></indexterm>

    <section>
      <title>Синтаксис</title>

      <para>Каждая используемая строка файла <filename>/etc/apt/sources.list</filename>содержит описание источника, которое состоит из 3 (или более) частей, разделённых пробелами. Пример "deb http://ftp.uk.debian.org/debian main" (3 части). (Пример из 6-ти частей "deb-src http://ftp.uk.debian.org/debian unstable main contrib non-free").</para>

      <para>Первое поле показывает тип источника:</para>
      <itemizedlist>
	<listitem>
	  <para>“<literal>deb</literal>” для двоичных (скомпилированных, бинарных) пакетов,</para>
	</listitem>
	<listitem>
	  <para>“<literal>deb-src</literal>” для пакетов с исходными кодами.</para>
	</listitem>
      </itemizedlist>

      <para>Второе поле содержит основной URL источника (если включены имена файлов, представленных в <filename>Packages.gz</filename>, необходим полный и корректный URL).  Здесь может быть источник с зеркалом Debian или любой другой архив пакетов, поставляемых третьей стороной. URL может начинаться с <literal>file://</literal>, чтобы показать локальный источник из файловой системы внутренней компьтерной сети  (не интернет), с <literal>http://</literal> чтобы показать источник, доступный на веб-сервере, или с <literal>ftp://</literal> для источников, доступных на ftp-сервере. URL также может начинаться с <literal>cdrom:</literal> для дистрибутивов на дисках CD-ROM/DVD-ROM/Blu-ray.  Метод с "CD-ROM/DVD-ROM/Blu-ray" встречается не так часто.  В настоящее время чаще применяются методы установки по сети.</para>

      <para>Синтаксис последнего поля зависит от структуры хранилища. В простейших случаях здесь может быть проста показана подпапка (с требуемыми конечными слэшами) требуемого источника (часто это просто “<filename>./</filename>”, которое показывает отсутствие подпапки — пакет расположен прямо на указанном URL). Но в общем случае хранилища структурированы как зеркальные сайты Debian, с множеством дистрибутивов, каждый из которых имеет множество компонент. В этих случае поле содержит имя выбранного дистибутива (по его “кодовому имени” — смотри перечень на вставке <xref linkend="sidebar.bruce-perens" /> — или по соответствующему “выпуску” — <literal>stable</literal>, <literal>testing</literal>, <literal>unstable</literal>).  Затем следуют доступные компоненты (или разделы) (выбранные из <literal>main</literal>, <literal>contrib</literal>, и <literal>non-free</literal> на обычном зеркальном сайте Debian).</para>

      <sidebar id="sidebar.sections">
	<title><emphasis>СЛОВАРЬ</emphasis> Архивы <literal>main</literal>, <literal>contrib</literal> и <literal>non-free</literal></title>
	<indexterm><primary>раздел</primary><secondary><literal>main</literal></secondary></indexterm>
	<indexterm><primary><literal>main</literal>, раздел</primary></indexterm>
	<indexterm><primary>раздел</primary><secondary><literal>contrib</literal></secondary></indexterm>
	<indexterm><primary><literal>contrib</literal>, раздел</primary></indexterm>
	<indexterm><primary>раздел</primary><secondary><literal>non-free</literal></secondary></indexterm>
	<indexterm><primary><literal>non-free</literal>, раздел</primary></indexterm>
	<indexterm><primary>компонент (хранилища)</primary></indexterm>

	<para>Дебиан использует три раздела для разделения пакетов согласно лицензиям, выбранным авторами каждой разработки. <literal>Main</literal> объединяет все пакеты, который полностью совместимы с "Критериями Debian по определению Свободного ПО".</para>

	<para>Архив <literal>non-free</literal> расположен отдельно, поскольку он содержит программное обеспечение, которое в целом не соответствует этим принципам и которое всё-таки может распространяться без ограничений. Этот архив, который не является официальной частью Debian, а является помощью (сервис-услугой) для пользователей, которым необходимо использование некоторых из этих программ. Однако Debian всегда рекомендует отдавать предпочтение свободному ПО. Существование данного раздела создаёт серьезную проблему для Ричарда Столлмана и не даёт возможность организации "Движению за Свободное ПО" (the Free Software Foundation) рекомендовать Debian пользователям.</para>

	<para><literal>Contrib</literal> (от contributions - взносы) - это набор ПО с открытым кодом, которое не может работать без некоторых несвободных элементов. Этими элементами может быть ПО из раздела <literal>non-free</literal>, или несвободные файлы, такие как игровые ROMs, BIOS консолей и т.д. <literal>Contrib</literal> также включает свободное программное обеспечение, компиляция которых требует элементов, имеющих собственников. В качестве примера можно привести пакет офисных программ OpenOffice.org, который требовал окружение Java для своей работы ( Java имеет собственника, а пакет OpenOffice.org ранее был в дистибутивах).</para>
      </sidebar>

      <sidebar>
	<title><emphasis>СОВЕТ</emphasis> Файлы <filename>/etc/apt/sources.list.d/*.list</filename></title>

	<para>Если имеются ссылки на множество источников пакетов, может быть полезным разделение их на несколько файлов. Каждая часть хранится в файлах типа <filename>/etc/apt/sources.list.d/<replaceable>имя файла</replaceable>.list</filename> (смотри вставку <xref linkend="sidebar.directory.d" />).</para>
      </sidebar>

      <indexterm><primary><command>apt-cdrom</command></primary></indexterm>
      <para>Записи <literal>cdrom</literal> описывают CD/DVD-ROMs, которые у вас есть. В противоположность другим записям, CD-ROM не всегда доступны, поскольку диск должен быть вставлен в привод и поскольку только один диск может быть прочитан за раз. Поэтому эти источники управляются несколько другим путём и добавляются с помощью программы <command>apt-cdrom</command>, которая обычно выполняется с параметром <literal>add</literal>. После запуска данная программа просит пользователя вставить диск в привод, а затем просматривает содержимое диска, ища файлы  <filename>Packages</filename>. Затем она использует эти файлы для обновления база данных доступных пактов (подобная операция обычно выполняется с помощью команды <command>apt update</command>). После этого APT может просить вставить диск, если ей требуется один из этих пакетов.</para>

    </section>
    <section>
      <title>Хранилища для пользователей стабильных версий <emphasis role="distribution">Stable</emphasis></title>
      
      <para>Здесь представлен стандартный файл <filename>sources.list</filename> для  систем, базирующихся на <emphasis role="distribution">стабильной (Stable)</emphasis> версии Debian:</para>

      
      <example id="example.stable-sources-list">
	<title>Файл <filename>/etc/apt/sources.list</filename> для пользователей Debian Stable</title>

	<programlisting># Security updates (обновления безопасности)
deb http://security.debian.org/ jessie/updates main contrib non-free
deb-src http://security.debian.org/ jessie/updates main contrib non-free

## Debian mirror (Зеркало Debian)

# Base repository (Основное хранилище)
deb http://ftp.debian.org/debian jessie main contrib non-free
deb-src http://ftp.debian.org/debian jessie main contrib non-free

# Stable updates (Стабильные обновления я)
deb http://ftp.debian.org/debian jessie-updates main contrib non-free
deb-src http://ftp.debian.org/debian jessie-updates main contrib non-free

# Stable backports (Стабильное ПО с обратной совместимостью)
deb http://ftp.debian.org/debian jessie-backports main contrib non-free
deb-src http://ftp.debian.org/debian jessie-backports main contrib non-free</programlisting>
      </example>

      <para>В этом файле перечислены все источники пакетов, связанные с версией Debian  <emphasis role="distribution">Jessie</emphasis> (текущей <emphasis role="distribution">Stable</emphasis> в  соответствии с данной записью). Мы предпочли явное название “jessie” вместо соответствующего обозначения “stable“ (<literal>stable</literal>, <literal>stable-updates</literal>, <literal>stable-backports</literal>), потому что мы не хотим столкнуться с ситуацией изменения основного дистрибутива не под нашим управлением после выхода следующей стабильной версии.</para>

      <para>Большинство пакетов может быть получено из "основного хранилища”, которое содержит все пакеты, но обновляется не часто (около раза в 2 месяца в “точке выпуска”). Остальные хранилища являются частичными (они не содержат все пакеты) и могут содержать обновления (пакеты с новыми версиями), которые APT может установить. В следующих разделах будут объяснены назначение и правила управлением каждым из этих хранилищ.</para>

      <para>Обратите внимание, что когда требуемая версия пакета доступна на нескольких хранилищах, первый из списка в файле  <filename>sources.list</filename> будет использован. Из-за этого неофициальные источники обычно добавляют в конец файла.</para>

      <para>В качестве примечания следует отметить, что большая часть сказанного в этом разделе о версии <emphasis role="distribution">Stable</emphasis> также относится и к версии <emphasis role="distribution">Oldstable</emphasis>, которая является просто более старой версией <emphasis role="distribution">Stable</emphasis>, поддерживаемой параллельно текущей.</para>

      <section id="sect.security-updates">
        <title>Обновления безопасности</title>
	<indexterm><primary><literal>security.debian.org</literal></primary></indexterm>
	<indexterm><primary>обновления безопасности</primary></indexterm>
	<indexterm><primary>обновления</primary><secondary>обновления безопасности</secondary></indexterm>

	<para>Обновления безопасности размещаются не в обычной сети зеркальных сайтов Debian, а на <literal>security.debian.org</literal> (на небольшом наборе машин, управляемых <link linkend="dsa-team">Системными администраторами Debian</link>). Этот архив содержит обновления безопасности  (подготовленные Командой Безопасности Debian и/или сопровождающими пакетов) для дистрибутива <emphasis role="distribution">Stable</emphasis>.</para>

	<para>На сервере также могут быть размещены обновления безопасности для версии <emphasis role="distribution">Testing</emphasis>, но это случается не очень часто, поскольку эти обновления попадают в <emphasis role="distribution">Testing</emphasis> через постоянный поток обновления, приходящий от <emphasis role="distribution">Unstable</emphasis>.</para>
      </section>

      <section id="sect.stable-updates">
        <title>Стабильные обновления</title>
	<indexterm><primary>стабильные обновления</primary></indexterm>
	<indexterm><primary><literal>стабильно-обновленный</literal></primary></indexterm>
	<indexterm><primary>обновления</primary><secondary>стабильные обновления</secondary></indexterm>

	<para>Стабильные обновления не являются необходимыми для обеспечения безопасности, но считаются достаточно важными, чтобы довести их до пользователей до выхода следующей стабильной версии.</para>

	<para>В этом хранилище обычно содержаться исправления критических ошибок, которые не были исправлены до выпуска версии или появились из-за последующих обновлений. При необходимости здесь также могут содержаться обновления для пакетов, которые постоянно изменяются … таких как правила определения спама <emphasis role="pkg">spamassassin</emphasis>, база вирусов <emphasis role="pkg">clamav</emphasis>, или правила перехода на летнее-зимнее время для всех часовых поясов (<emphasis role="pkg">tzdata</emphasis>).</para>

	<para>На деле, это хранилище является частью хранилища <literal>proposed-updates</literal>, прошедшего тщательный отбор Управляющими Стабильного Выпуска.</para>
      </section>

      <section id="sect.proposed-updates">
        <title>Предполагаемые обновления</title>
        <indexterm><primary><literal>предполагаемые обновления</literal></primary></indexterm>
        <indexterm><primary><literal>стабильные предполагаемые обновления</literal></primary></indexterm>

	<para>После выхода дистрибутив <emphasis role="distribution">Stable</emphasis> обновляется примерно раз в 2 месяца. В хранилище <literal>proposed-updates</literal> производится подготовка ожидаемых обновлений (под наблюдением Управляющих Стабильного Выпуска).</para>

	<para>Обновления безопасности и стабильные обновления, документально фиксируемые в официальном разделе, всегда включаются в состав хранилища, но здесь сопровождающие пакетов также имеют возможность исправить значимые ошибки, которые не требуют немедленного выпуска.</para>
	
	<para>Каждый может использовать это хранилище для проверки обновлений перед их официальным выпуском. В следующей выписке используется обозначение <literal>jessie-proposed-updates</literal>, которое является и более ясным, и более содержательным, поскольку также существует и <literal>wheezy-proposed-updates</literal> also exists (для обновлений <emphasis role="distribution">Oldstable</emphasis>):</para>

        <programlisting>deb http://ftp.debian.org/debian jessie-proposed-updates main contrib non-free</programlisting>
      </section>

      <section id="sect.backports">
        <title>Стабильное ПО с обратной совместимостью</title>
        <indexterm><primary><literal>стабильное ПО с обратной совместимостью</literal></primary></indexterm>
        <indexterm><primary>ПО с обратной совместимостью</primary></indexterm>
	<indexterm><primary>обновления</primary><secondary>ПО с обратной совместимостью</secondary></indexterm>

	<para>В хранилище <literal>stable-backports</literal> расположены “пакеты с обратной совместимостью”. Это определение относится к пакетом какого-то существующего программного обеспечения, которые были перекомпилированы для устаревшего дистрибутива, обычно для <emphasis role="distribution">Stable</emphasis>.</para>

	<para>Когда дистрибутив немного устаревает, множество проектов разработки ПО выпускает новые версии, которые уже не совместимы с текущей версией <emphasis role="distribution">Stable</emphasis> (которая дорабатывается только чтобы решить наиболее важные проблемы, такие как проблемы безопасности ). Поскольку выпуски <emphasis role="distribution">Testing</emphasis> и <emphasis role="distribution">Unstable</emphasis> могут быть более опасными, сопровождающие пакетов иногда предлагают перекомпилированное для версии  <emphasis role="distribution">Stable</emphasis> программное обеспечение, которое полезно тем, что ограничивает потенциальную неустойчивость при небольшом числе выбранных пакетов. <ulink type="block" url="http://backports.debian.org" /></para>

	
	<para>Хранилище <literal>stable-backports</literal> теперь доступно на обычных зеркалах Debian. Но ПО с обратной совместимостью для <emphasis role="distribution">Squeeze</emphasis> до сих пор размещены на отдельном сервере (<literal>backports.debian.org</literal>) и требуют следующей записи в файле <filename>sources.list</filename>:</para>

        <indexterm><primary><literal>backports.debian.org</literal></primary></indexterm>
        <programlisting>deb http://backports.debian.org/debian-backports squeeze-backports main contrib non-free</programlisting>

	<para>ПО с обратной совместимостью из <literal>stable-backports</literal> всегда создаётся из пакетов, доступных в <emphasis role="distribution">Testing</emphasis>. Этим обеспечивается то, что все установленное ПО с обратной совместимостью будет доступно для обновления для соответствующей стабильной версии при одновременной доступности следующего стабильного выпуска Debian.</para>

	<para>Несмотря на то, что данное хранилище предоставляет новые версии пакетов, APT не будет устанавливать их, пока вы не дадите для этого конкретных инструкций (или пока вы уже не сделали это с официальной версией данного ПО с обратной совместимостью):</para>

	<screen><computeroutput>$ </computeroutput><userinput>sudo apt-get install <replaceable>package</replaceable>/jessie-backports
</userinput><computeroutput>$ </computeroutput><userinput>sudo apt-get install -t jessie-backports <replaceable>package</replaceable>
</userinput></screen>

      </section>
    </section>

    <section>
      <title>Хранилища для пользователей версий <emphasis role="distribution">Testing</emphasis>/<emphasis role="distribution">Unstable</emphasis></title>

      <para>Здесь представлен стандартный <filename>sources.list</filename> для системы, выполняющей версию <emphasis role="distribution">Testing</emphasis> или <emphasis role="distribution">Unstable</emphasis> Debian:</para>

      <example id="example.testing-sources-list">
	<title>Файл <filename>/etc/apt/sources.list</filename> для пользователей Debian <emphasis role="distribution">Testing</emphasis>/<emphasis role="distribution">Unstable</emphasis></title>

	<programlisting>
# Unstable
deb http://ftp.debian.org/debian unstable main contrib non-free
deb-src http://ftp.debian.org/debian unstable main contrib non-free

# Testing
deb http://ftp.debian.org/debian testing main contrib non-free
deb-src http://ftp.debian.org/debian testing main contrib non-free

# Stable
deb http://ftp.debian.org/debian stable main contrib non-free
deb-src http://ftp.debian.org/debian stable main contrib non-free

# Security updates
deb http://security.debian.org/ stable/updates main contrib non-free
deb http://security.debian.org/ testing/updates main contrib non-free
deb-src http://security.debian.org/ stable/updates main contrib non-free
deb-src http://security.debian.org/ testing/updates main contrib non-free</programlisting>
      </example>

      <para>С таким файлом <filename>sources.list</filename> APT будет устанавливать пакеты из <emphasis role="distribution">Unstable</emphasis>. Если вам это не требуется, используйте настройку <literal>APT::Default-Release</literal> (смотри <xref linkend="sect.apt-upgrade" />), чтобы сообщить APT о необходимости брать пакеты из другого дистрибутива (наиболее вероятно <emphasis role="distribution">Testing</emphasis> в данном случае).</para>

      <para>Совершенно обоснованным является включение всех этих хранилищ, даже когда достаточно только одного. Пользователи <emphasis role="distribution">Testing</emphasis> оценят возможность выбрать хороший исправленный пакет из <emphasis role="distribution">Unstable</emphasis>, в случае когда версия <emphasis role="distribution">Testing</emphasis> содержит надоевшую ошибку. И наоборот, пользователи <emphasis role="distribution">Unstable</emphasis>, пострадавшие от неожиданных сбоев в пакетах, имеют возможность откатить пакеты до их (предположительно рабочей) версии <emphasis role="distribution">Testing</emphasis>.</para>

      <para>С включением <emphasis role="distribution">Stable</emphasis> имеется больше вопросов, но часто это даёт возможность доступа к некоторым пакетам, которые были удалены из разрабатываемых версий. Также это даёт уверенность. что вы получаете самые свежие обновления для пакетов, которые не изменялись с выпуска последней стабильной версии.</para>

      <section>
        <title><emphasis role="distribution">Экспериментальное</emphasis> хранилище</title>
        <indexterm><primary><emphasis role="distribution">Экспериментальный</emphasis></primary></indexterm>

	<para>Архив <emphasis role="distribution">Experimental</emphasis> (экспериментальных) пакетов представлен на всех зеркалах Debian и содержит пакет, которые до сих пор не вошли в версию <emphasis role="distribution">Unstable</emphasis> из-за их качества, не отвечающего стандарту — это зачастую версии разрабатываемого ПО или предварительные версии (альфа, бета, кандидат для выпуска…). Пакет также может быть отправлен сюда после последующих доработок, которые могут привести к проблемам. После этого сопровождающий пытается разрешить эти проблемы, пользуясь помощью продвинутых пользователей, которые могут подсказать правильное решение. После этой первой стадии пакет перемещается в <emphasis role="distribution">Unstable</emphasis>, где он получает гораздо большую аудиторию и где он будет протестирован гораздо более детально.</para>

	<para><emphasis role="distribution">Experimental</emphasis> в целом используется теми, кто не собирается ломать свои системы, а затем восстанавливать их. Этот дистрибутив даёт возможность импортировать пакет, с которым пользователь хочет попробовать поработать или для работы с которым у него возникла необходимость. Это как раз показывает подход Debian к таким пакетам, поскольку добавление этого хранилища в файл APT <filename>sources.list</filename> не приводит к постоянному использованию этих пакетов. Вот строк, которая должна быть добавлена:</para>
        <informalexample>
          <programlisting>deb http://ftp.debian.org/debian experimental main contrib non-free</programlisting>
        </informalexample>
      </section>
    </section>

    <section>
      <title>Неофициальные ресурсы: <literal>mentors.debian.net</literal></title>
      <indexterm><primary><literal>mentors.debian.net</literal></primary></indexterm>

      <para>Существуют многочисленные ресурсы пакетовDebian, созданных продвинутыми пользователями, которые перекомпилируют некоторые программы (Ubuntu сделала эту вещь популярной с помощью их службы Персонального Архива Пакетов), by программистами, которые делают свои творения доступными для всех и даже разработчиками Debian, которые предлагают предварительные версии своих пакетов онлайн.</para>

      <para>Сайт <literal>mentors.debian.net</literal> интересен тем (хотя он только предоставляет пакеты с исходными кодами), что нам нем собираются пакеты, созданный кандидатами на статус официальных разработчиков Debian или добровольцами, которые хотят создавать пакеты Debian без прохождения через этот процесс интеграции в сообщество разработчиков. Эти пакеты сделаны доступным без каких-либо гарантий относительно их качества;будьте уверены, что вы проверили их происхождение и целостность, а затем тестируйте их перед тем, как рассматривать вопрос их использования в работе.</para>

      <sidebar>
        <title><emphasis>СООБЩЕСТВО</emphasis> Сайты <literal>debian.net</literal></title>
        <indexterm><primary><emphasis>debian.net</emphasis></primary></indexterm>

	<para>Домен <emphasis>debian.net</emphasis> не является официальным ресурсом проекта Debian. Каждый разработчик Debian может использовать это имя домена для своих собственных целей. Эти сайты может содержать неофициальные службы (иногда персональные сайты), размещённые на машинах, которые не связаны с проектом и которые поддерживаются разработчиками Debian, или прототипы того, что может быть перемещено на <emphasis>debian.org</emphasis>. Существует две причины, по которым некоторые из этих прототипов остаются на <emphasis>debian.net</emphasis>: или никто не приложил достаточно усилий, чтобы преобразовать их в официальную службу (размещённую на домене <emphasis>debian.org</emphasis> с определённой гарантией по сопровождению), или служба является слишком спорной, чтобы стать официальной.</para>
      </sidebar>

      <para>Устанавливая пакет, вы даёте права администратора (root) его создателю, поскольку содержимое сценариев инициализации выполняется под этим пользователем. Официальные пакеты Debian создаются добровольцами, которые были прошли рассмотрение и включение в сообщество, и которые могут подписывать свои пакеты, так что их происхождение и целостность могут быть проверены.</para>

      <para>В целом, будьте осторожны с пакетами, происхождение которых вам не известно, и которые на размещены на официальных серверах Debain: оцените степень доверия к их создателю и проверьте целостность пакета. <ulink type="block" url="http://mentors.debian.net/" /></para>

      <sidebar id="sidebar.snapshot.debian.org">
        <title><emphasis>УГЛУБЛЯЕМСЯ</emphasis> Старые версии пакетов: <literal>snapshot.debian.org</literal></title>
        <indexterm><primary><literal>snapshot.debian.org</literal></primary></indexterm>

	<para>Служба <literal>snapshot.debian.org</literal>, запущенная в апреле 2010, может быть использована для того, чтобы “вернуться назад во времени” и найти старую версию пакета. Это может быть полезно, например, чтобы определить, какая в какой версии пакета была внесена ошибка, или более точно,чтобы вернуть к старой версии в ожидании исправления ошибки.</para>
      </sidebar>
    </section>
    <section>
      <title>Прокси-кэш для пакетов Debian</title>
      <indexterm><primary>кэш прокси</primary></indexterm>
      <indexterm><primary>прокси, кэширование</primary></indexterm>

      <para>В случае, когда целая сеть машин настроена на использование одного удалённого сервера для загрузки одних и тех же пакетов, каждый администратор знает, что полезно иметь промежуточный прокси -сервер, работающий как локальный кэш для данной сети (смотри вставку <xref linkend="sidebar.cache" />).</para>

      <para>Вы можете использовать APT на использование "стандартного" прокси (смотри <xref linkend="sect.apt-config" /> для APT и  <xref linkend="sect.http-ftp-proxy" /> для прокси), но экосистема Debian предлагает лучшие настройки для решения этой проблемы. Специальные программы, представленные в этом разделе, является более быстрыми, чем простой прокси-кэш, поскольку они зависят от специальных структур хранилищ APT(например, им известно, когда отдельные файлы становятся устаревшими, и таким образом устанавливают время, в течение которого они хранятся).</para>

      <indexterm><primary><emphasis role="pkg">apt-cacher</emphasis></primary></indexterm>
      <indexterm><primary><emphasis role="pkg">apt-cacher-ng</emphasis></primary></indexterm>
      <para><emphasis role="pkg">apt-cacher</emphasis> и <emphasis role="pkg">apt-cacher-ng</emphasis> работают как обычные прокси-кэш серверы. Файл APT<filename>sources.list</filename> остаётся неизменным, но APT настраивается для использования их как прокси для исходящих запросов.</para>
      
      <indexterm><primary><emphasis role="pkg">approx</emphasis></primary></indexterm>
      <para><emphasis role="pkg">approx</emphasis>, с другой стороны, действует как HTTP сервер, который “отражает” любое число хранилищ на своих URL верхнего уровня . Пути между теми директориями верхнего уровня и удалёнными URL хранилищ находятся в файле <filename>/etc/approx/approx.conf</filename>:</para>

      <programlisting>
# &lt;name&gt; &lt;repository-base-url&gt;
debian   http://ftp.debian.org/debian
security http://security.debian.org</programlisting>

      <para><emphasis role="pkg">approx</emphasis> по-умолчанию работает с портом 9999 через inetd (see <xref linkend="sect.inetd" />) и требуют, что бы пользователи указали в своём файле <filename>sources.list</filename> точку подключения к серверу approx:</para>

      <programlisting># Sample sources.list pointing to a local approx server
deb http://apt.falcot.com:9999/security jessie/updates main contrib non-free
deb http://apt.falcot.com:9999/debian jessie main contrib non-free
      </programlisting>
    </section>

  </section>
  <section id="sect.apt-get">
    <title>Команды <command>aptitude</command>, <command>apt-get</command> и <command>apt</command></title>
    <indexterm><primary><command>apt</command></primary></indexterm>
    <indexterm><primary><command>apt-get</command></primary></indexterm>
    <indexterm><primary><command>aptitude</command></primary></indexterm>

    <para>APT является большим проектом, в исходные планы которого входило создание графического интерфейса. Он основан на библиотеке, которая содержит приложение ядра, а <command>apt-get</command> является первым интерфейсом (основанным на режиме командной строки), который был разработан в рамках этого проекта. <command>apt</command> является вторым интерфейсом командной строки, предоставляемым APT, который устраняет некоторые ошибки проектирования <command>apt-get</command>.</para>

    <para>Большое число графических интерфейсов появилось позже как внешние проекты: <command>synaptic</command>, <command>aptitude</command> (который включает и текстовый интерфейс, и графический — хоть и не завершённый до сих пор), <command>wajig</command>, и т.д. Наиболее рекомендуемый интерфейс, <command>apt</command>, мы будем использовать в примерах, приведённых в этом разделе. Обратите внимание, что <command>apt-get</command> и <command>aptitude</command> имеют весьма схожий синтаксис командной строки. В случае, когда существуют значительные различия между <command>apt</command>, <command>apt-get</command> и <command>aptitude</command>, эти различия будут разобраны более подробно.</para>
    <section>
      <title>Инициализация</title>

      
      <para>При необходимости работы с APT должен быть обновлён список доступных пакетов; это просто сделать с помощью команды <command>apt update</command>. В зависимости от скорости вашего соединения, эта операция может занять достаточно времени, поскольку она включает загрузку определённого числа <filename>Packages</filename>/<filename>Sources</filename>/<filename>Translation-<replaceable>language-code</replaceable></filename> файлов, которые постепенно становятся всё больше и больше в процессе разработки Debian (по меньшей мере 10 МБ данных для секции <literal>main</literal>). Конечно, установка с набора CD-ROM не требует никакой загрузки — в этом случае операция является очень быстрой.</para>
      <indexterm><primary><command>apt update</command></primary></indexterm>
      <indexterm><primary><command>apt-get update</command></primary></indexterm>
      <indexterm><primary><command>aptitude update</command></primary></indexterm>
    </section>
    <section>
      <title>Установка и удаление</title>
      <indexterm><primary>пакет</primary><secondary>установка</secondary></indexterm>
      <indexterm><primary>пакет</primary><secondary>удаление</secondary></indexterm>
      <indexterm><primary>установка</primary><secondary>пакета</secondary></indexterm>
      <indexterm><primary>удаление пакета</primary></indexterm>

      <para>С помощью APT пакеты могут быть добавлены или удалены из системы командами <command>apt install <replaceable>пакет</replaceable></command> and <command>apt remove <replaceable>пакет</replaceable></command> соответственно. В обоих случаях APT автоматически установит необходимые пакеты, от которого зависит данный, или удалит пакеты, которые зависят от удаляемого пакета. Команды <command>apt purge <replaceable>пакет</replaceable></command> вызывают полное удаление — файлы настройки также будут удалены.</para>
      <indexterm><primary><command>apt install</command></primary></indexterm>
      <indexterm><primary><command>apt remove</command></primary></indexterm>
      <indexterm><primary><command>apt purge</command></primary></indexterm>
      <indexterm><primary><command>apt-get install</command></primary></indexterm>
      <indexterm><primary><command>apt-get remove</command></primary></indexterm>
      <indexterm><primary><command>apt-get purge</command></primary></indexterm>
      <indexterm><primary><command>aptitude install</command></primary></indexterm>
      <indexterm><primary><command>aptitude remove</command></primary></indexterm>
      <indexterm><primary><command>aptitude purge</command></primary></indexterm>

      <sidebar>
        <title><emphasis>СОВЕТ</emphasis> Установка одного и того же набора пакетов несколько раз</title>

	<para>Это может оказаться полезным при установке одного и того же перечня пакетов на различные компьютеры. И это может быть сделано достаточно просто.</para>

	<para>Во-первых, необходимо определить перечень пакетов, установленных на компьютере, который будет служить "моделью" для копирования.</para>

        <screen><computeroutput>$ </computeroutput><userinput>dpkg --get-selections &gt;pkg-list</userinput></screen>

	<para>После этого файл <filename>pkg-list</filename> будет содержать перечень установленных пактов. Следующим шагом необходимо передать файл <filename>pkg-list</filename> на компьютеры, на которых необходимо произвести обновление, и использовать следующие команды:</para>

        <screen>## Обновить базу данных dpkg's об известных пакетах
# <userinput>avail=`mktemp`</userinput>
# <userinput>apt-cache dumpavail &gt; "$avail"</userinput>
# <userinput>dpkg --merge-avail "$avail"</userinput>
# <userinput>rm -f "$avail"</userinput>
## Обновить выбор dpkg's
# <userinput>dpkg --set-selections &lt; pkg-list</userinput>
## Запросить у apt-get установку выбранных пакетов
# <userinput>apt-get dselect-upgrade</userinput></screen>

	<para>Первая команда записывает перечень доступных пакетов в базу данных dpkg database, затем <command>dpkg --set-selections</command> восстанавливает выбор пакетов, которые вы хотите установить, а вызов <command>apt-get</command> выполняет требуемые операции! <command>aptitude</command> не имеет этой команды.</para>
      </sidebar>

      <sidebar>
        <title><emphasis>СОВЕТ</emphasis> Удаление и установка в одной команде</title>

        <para>Можно использовать <command>apt</command> (или <command>apt-get</command>, или <command>aptitude</command>) для установки одних пакетов и удаления других одной командой путем добавления суффикса. Используя <command>apt install</command> добавьте «<literal>–</literal>» к именам пакетов, которые вы хотите удалить. Для <command>apt remove</command> добавьте «<literal>+</literal>» к именам пакетов, которые вы хотите установить.</para>

	<para>В следующем примере показано два разных способа для установки <replaceable>packet1</replaceable> и удаления <replaceable>packet2</replaceable>.</para>

        <screen># <userinput>apt install <replaceable>package1</replaceable> <replaceable>package2-</replaceable></userinput>
[...]
# <userinput>apt remove <replaceable>package1+</replaceable> <replaceable>package2</replaceable></userinput>
[...]</screen>

	<para>Это можно использовать для исключения пакетов, которые бы в противном случае были установлены, например из-за <literal>Recommends</literal>. В общем для разрешения зависимостей будет использована эта информация как подсказка для поиска альтернативных решений.</para>
      </sidebar>

      <sidebar>
        <title><emphasis>СОВЕТ</emphasis> <command>apt --reinstall</command> и <command>aptitude reinstall</command></title>
        <indexterm><primary>переустановка</primary></indexterm>

	<para>После удаления или изменения файлов в пакете, система может быть повреждена. Самый простой способ для восстановления этих файлов является переустановка таких пакет. К сожалению, система упаковки считает, что пакет уже установлен и вежливо отказывается переустановить его. Чтобы избежать этого, добавьте <literal>--reinstall</literal> к <command>apt</command> или <command>apt-get</command>. Следующая команда переустановит <emphasis role="pkg">postfix</emphasis> даже если он уже установлен:</para>

        <screen><computeroutput># </computeroutput><userinput>apt --reinstall install postfix</userinput></screen>

	<para>Команда <command>aptitude</command> немного отличается, но позволяет достичь такого же результата: <command>aptitude reinstall postfix</command>.</para>

	<para>Такая проблема не возникает при использовании <command>dpkg</command>, но сама команда редко используется.</para>

	<para>Будьте осторожны! Использование <command>apt --reinstall</command> для восстановления пакетов изменённых во время атак не восстановит систему до прежнего состояния. <xref linkend="sect.dealing-with-compromised-machine" /> содержит подробную информацию по восстановлению систем, подвергнувшихся атаке злоумышленниками.</para>
      </sidebar>

      <para>Если в файле <filename>sources.list</filename> упоминается несколько дистрибутивов, можно задать версию пакета для установки. Номер версии может быть запрошен, используя <command>apt install <replaceable>packet</replaceable>= <replaceable>version</replaceable></command>, с указанием происхождения (<emphasis role="distribution">Stable</emphasis>, <emphasis role="distribution">Testing</emphasis> или <emphasis role="distribution">Unstable</emphasis>) — <command>apt install <replaceable>package</replaceable>/<replaceable>distribution</replaceable></command> — обычно предпочтительно. Используя эту команду можно вернуться к старой версии пакета (если например вы знаете, что она работает хорошо), при условии, что он по-прежнему доступен в одном из источников, на которые ссылается файл <filename>sources.list</filename>. В противном случае может помочь архив <literal>snapshot.debian.org</literal> (см. <xref linkend="sidebar.snapshot.debian.org" />).</para>

      <example>
        <title>Установка <emphasis role="distribution">unstable</emphasis> версии <emphasis role="pkg">spamassassin</emphasis></title>

        <screen><computeroutput># </computeroutput><userinput>apt install spamassassin/unstable</userinput></screen>
      </example>

      <sidebar>
        <title><emphasis>УГЛУБЛЯЕМСЯ</emphasis> Кэш файлов <filename>.deb</filename></title>

	<para>APT сохраняет копию каждого загруженного <filename>.deb</filename> файла в каталоге <filename>/var/cache/apt/archives/</filename>. В случае частых обновлений этот каталог может занять много места на диске и иметь несколько версий одного пакета. Для очистки можно использовать две команды: <command>apt clean</command> полностью очищает каталог; <command>apt-get autoclean</command> удаляет пакеты, которые не могут быть больше загружены (потому что они исчезли из зеркала Debian) и поэтому явно бесполезны (параметр конфигурации <literal>APT::Clean-Installed</literal> может предотвратить удаление файлов <filename>.deb</filename> которые установлены). Обратите внимание, что <command>apt</command> не поддерживает эти команды.</para>
      </sidebar>
    </section>

    <section id="sect.apt-upgrade">
      <title>Обновление системы</title>
      <indexterm><primary>обновление</primary> <secondary>обновление системы</secondary></indexterm>

      <indexterm><primary><command>apt upgrade</command></primary></indexterm>
      <indexterm><primary><command>apt-get upgrade</command></primary></indexterm>
      <indexterm><primary><command>aptitude safe-upgrade</command></primary></indexterm>
      <para>Регулярные обновления рекомендуется, поскольку они включают последние обновления системы безопасности. Для обновления, используйте <command>apt upgrade</command>, <command>apt-get upgrade</command> или <command>aptitude safe-upgrade</command> (конечно после использования <command>apt update</command>). Эта команда ищет установленные пакеты, которые можно обновить без удаления других пакетов. Другими словами цель заключается в том, чтобы обеспечить наименее ограничительное возможность установки обновлений. Команда <command>apt-get</command> является немного более требовательной, чем <command>aptitude</command> или <command>apt</command> потому что она не будет устанавливать пакеты, которые не были установлены до этого.</para>

      <sidebar id="sidebar.apt-pdiff">
        <title><emphasis>СОВЕТ</emphasis> Инкрементальное обновление</title>

	
	<para>Как мы уже выяснили ранее, целью команды <command>apt update</command> является загрузка каждого исходного пакета (package source) соответствующего файлу <filename>Packages</filename> (или <filename>Sources</filename>). Тем не менее, даже после сжатия <command>bzip2</command> эти файлы остаются довольно большими (размер файла <filename>Packages.xz</filename> в <foreignphrase>основной</foreignphrase> части <emphasis role="distribution">Jessie</emphasis> занимает более 6 Мбайт). Если вы хотите обновляться регулярно, то загрузка может занимать много времени.</para>

	<para>Чтобы ускорить этот процесс APT может загружать “diff” файлы содержащие изменения с момента предыдущего обновления вместо загрузки всего файла целиком. Для достижения этой цели официальные зеркала Debian распространяют файлы различий, в которых содержится список изменений между одной версией файла <filename>Packages</filename> от следующей версии. Они генерируются с каждым обновлением архивов, а история сохраняется в течение одной недели. Каждый из этих «diff» файлов занимает несколько десятков килобайт для <emphasis role="distribution">Unstable</emphasis>, так что количество загружаемых еженедельных данных <command>apt update</command>  зачастую становится меньше в десять раз. Для дистрибутивов таких как Debian <emphasis role="distribution">Stable</emphasis> и <emphasis role="distribution">Testing</emphasis>, в которые вносится меньше изменений, выигрыш становится ещё более заметным.</para>

	<para>Однако, иногда необходимо принудительно загрузить целый файл <filename>Packages</filename>.  Это обычно происходит в случаях, когда последнее обновление сильно устарело, а выполненные пошаговые обновления не особо помогли. Это также может представлять интерес, если доступ к сети очень быстрый, но процессор компьютера довольно медленный для процесса обновления.  Так как время  загрузки файла будет меньше, чем время, затраченное компьютером на вычисление новых версии этих файлов (начиная с более старых версий и применяя загруженные различия). Чтобы это сделать, вы можете использовать параметр конфигурации <literal>Acquire::Pdiffs</literal> и установить его значение в <literal>false</literal>.</para>
      </sidebar>

      <para><command>apt</command> обычно будет выбирать последние версии (за исключением пакетов из <emphasis role="distribution">Experimental</emphasis> и <emphasis role="distribution">stable-backports</emphasis>, которые игнорируются независимо от номера версии). Если вы указали <emphasis role="distribution">Testing</emphasis> или <emphasis role="distribution">Unstable</emphasis> в своем <filename>sources.list</filename>, <command>apt upgrade</command> переключит большую часть вашей системы со <emphasis role="distribution">Stable</emphasis> на <emphasis role="distribution">Testing</emphasis> или <emphasis role="distribution">Unstable</emphasis>, что может быть не тем, чего вы ожидали.</para>

      <para>Чтобы <command>apt</command> искал обновлённые версии пакетов для определённого дистрибутива, используйте опцию <literal>-t</literal> или <literal>--target-release</literal>. После опции надо указать название выбранного вами дистрибутива (например: <command>apt -t stable upgrade</command>). Чтобы не указывать эту опцию каждый раз , когда вы используете <command>apt</command>, вы можете добавить <literal>APT::Default-Release "stable";</literal> в файл <filename>/etc/apt/apt.conf.d/local</filename>.</para>

      <indexterm><primary><command>apt full-upgrade</command></primary></indexterm>
      <indexterm><primary><command>apt dist-upgrade</command></primary></indexterm>
      <indexterm><primary><command>apt-get dist-upgrade</command></primary></indexterm>
      <indexterm><primary><command>aptitude dist-upgrade</command></primary></indexterm>
      <indexterm><primary><command>aptitude full-upgrade</command></primary></indexterm>

      <para>Для более важных обновлений, таких как переход от одной основной версии Debian к следующей, вы должны использовать <command>apt full-upgrade</command>. С помощью этой инструкции <command>apt</command> выполнит обновление, при этом он удалит некоторые устаревшие пакеты и установит новые зависимости. Также эта команда используется пользователями, которые ежедневно работают с <emphasis role="distribution">Unstable</emphasis> выпуском Debian и следят за его развитием день за днем. Это так просто, что вряд ли нуждается в объяснении: репутация APT основана на большой функциональности.</para>

      <para>В отличие от <command>apt</command> и <command>aptitude</command>, <command>apt-get</command> не знает команды <command>full-upgrade</command>. Вместо этого, вы должны использовать <command>apt-get dist-upgrade</command> («обновление дистрибутива»). <command>apt</command> и <command>aptitude</command> также принимают эту историческую и хорошо известную команду для удобства тех пользователей, которые привыкли пользоваться ей.</para>
    </section>

    <section id="sect.apt-config">
      <title>Параметры конфигурации</title>
      <indexterm><primary> APT</primary><secondary> Конфигурация</secondary></indexterm>
      <indexterm><primary><filename>apt.conf.d/</filename></primary></indexterm>
      <indexterm><primary><filename>/etc/apt/apt.conf.d/</filename></primary></indexterm>

      <para>Кроме уже упомянутых деталей конфигурации, можно сделать дополнительную настройку APT.  Для этого надо внести дополнительные параметры в файл , расположенный в <filename> /etc/apt/apt.conf.d/</filename>. Помните, что APT может указать <command> dpkg</command> игнорировать конфликты файлов, установив <literal> DPkg::options { "--force-overwrite"; }</literal>.</para>

      <para>If the Web can only be accessed through a proxy, add a line
      like <literal>Acquire::http::proxy
      "http://<replaceable>yourproxy</replaceable>:3128"</literal>. For an
      FTP proxy, write <literal>Acquire::ftp::proxy
      "ftp://<replaceable>yourproxy</replaceable>"</literal>. To discover
      more configuration options, read the
      <citerefentry><refentrytitle>apt.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>
      manual page with the <command>man apt.conf</command> command (for
      details on manual pages, see <xref linkend="sect.manual-pages" />).</para>

      <sidebar id="sidebar.directory.d">
        <title><emphasis>ВЕРНЁМСЯ К ОСНОВАМ</emphasis> Каталоги, оканчивающиеся на <filename>.d</filename></title>
        <indexterm><primary><filename>.d</filename></primary></indexterm>

	<para>Каталоги, название которых заканчивается на <filename>.d</filename>, встречаются всё чаще и чаще. Каждый каталог представляет собой конфигурационный файл, разделенный на несколько файлов . Таким образом все файлы в <filename>/etc/apt/apt.conf.d/</filename> это инструкции, настраивающие APT. APT применяет их в алфавитном порядке, поэтому более поздняя инструкция может изменять параметры, установленные предшествующим ей инструкциями.</para>

	<para>Такая система создает некоторую гибкость как для администраторов, так и для разработчиков. Администратор может легко изменять настройки программы добавляя уже готовый файл настроек в такой каталог и не изменяя уже существующий файл настроек. Разработчик пакета точно так же адаптирует конфигурацию другой программы, чтобы она наилучшим образом взаимодействовала с его. Политики Debian явно запрещают изменений конфигурации других пакетов — это допустимо делать только пользователям. Помните, что во время обновления пакета, если было обнаружено внесение изменений в файл конфигурации, то пользователю будет предложено выбрать какую версию файла конфигурации оставить. Любое стороннее изменение файла вызовет такой запрос, что обеспокоит администратора, который уверен, что точно ничего не менял.</para>

	<para>Without a <filename>.d</filename> directory, it is impossible
	for an external package to change the settings of a program without
	modifying its configuration file. Instead it must invite the user
	to do it themselves and lists the operations to be done in the file
	<filename>/usr/share/doc/<replaceable>package</replaceable>/README.Debian</filename>.</para>

	<para>Depending on the application, the <filename>.d</filename>
	directory is used directly or managed by an external script which
	will concatenate all the files to create the configuration file
	itself. It is important to execute the script after any change in
	that directory so that the most recent modifications are taken into
	account. In the same way, it is important not to work directly in
	the configuration file created automatically, since everything
	would be lost at the next execution of the script. The chosen
	method (<filename>.d</filename> directory used directly or a file
	generated from that directory) is usually dictated by implementation
	constraints, but in both cases the gains in terms of configuration
	flexibility more than make up for the small complications that they
	entail. The Exim 4 mail server is an example of the generated file
	method: it can be configured through several files
	(<filename>/etc/exim4/conf.d/*</filename>) which are concatenated
	into <filename>/var/lib/exim4/config.autogenerated</filename> by
	the <command>update-exim4.conf</command> command.</para>
      </sidebar>
    </section>
    <section id="sect.apt.priorities">
      <title>Управление приоритетами пакетов</title>

      <para>Один из многих важных аспектов в конфигурировании APT-а является управление приоритетами, ассоциироваными с каждым исходным пакетом. Для примера, ты можешь захотеть расширить  дистибутив (к примеру стабильный - Stable) одним или двуми пакетами из  других дистибутивов <emphasis role="distribution"> тестируемый (Testing) </emphasis> , <emphasis role="distribution"> нестабильный (Unstable) </emphasis> или <emphasis role="distribution"> экспериментальный (Experimental) </emphasis>. В этом случае имеется возможность определить приоритеты каждого доступного пакета (некоторые пакеты могут иметь свои приоритеты зависимостей к их версии или распространение -дистрибьютор предоставляет это). Те приоритеты будут влиять на поведение APT-а: для каждого пакета всегда будет выбираться версия с высочайшим приоритетом (кроме случаев, когда версия более старая, чем установлена в системе такая же и если его приоритет - меньше чем 1000).</para>
      <indexterm><primary>APT</primary><secondary><foreignphrase>закрепление</foreignphrase></secondary></indexterm>
      <indexterm><primary>pinning, APT pinning</primary></indexterm>
      <indexterm><primary>package</primary><secondary>priority</secondary></indexterm>
      <indexterm><primary>priority</primary><secondary>package priority</secondary></indexterm>
      <indexterm><primary>APT</primary><secondary>предпочтения</secondary></indexterm>
      <indexterm><primary><filename>предпочтения</filename></primary></indexterm>
      <indexterm><primary><filename>/etc/apt/preferences</filename></primary></indexterm>

      <para>APT определяет свои приоритеты по умолчанию. Каждая версия устанавливаемого пакета имеет приоритер 100. Не установленная версия имеет приоритет 500 по умолчанию, но это может прыгнуть (измениться) до 990 если это есть часть целевого (выпускаемого) релиза (определяется с <literal>-t</literal> опция командной строки или  <literal>APT::Default-Release</literal> конфигурирование указание).</para>

      <para>Ты можешь изменить (модифицировать) приоритеты путем дополнения записей в <filename>/etc/apt/preferences</filename> файл с именами затрагиваемых пакетов, их версия,  оригинальные (первоначальные) и их новые приоритеты.</para>

      <para>APT will never install an older version of a package (that is,
      a package whose version number is lower than the one of the currently
      installed package) except if its priority is higher than 1000. APT
      will always install the highest priority package which follows this
      constraint. If two packages have the same priority, APT installs the
      newest one (whose version number is the highest). If two packages of
      same version have the same priority but differ in their content, APT
      installs the version that is not installed (this rule has been
      created to cover the case of a package update without the increment
      of the revision number, which is usually required).</para>

      <para>In more concrete terms, a package whose priority is less
      than 0 will never be installed. A package with a priority ranging
      between 0 and 100 will only be installed if no other version of the
      package is already installed. With a priority between 100 and 500,
      the package will only be installed if there is no other newer version
      installed or available in another distribution. A package of priority
      between 501 and 990 will only be installed if there is no newer
      version installed or available in the target distribution. With a
      priority between 990 and 1000, the package will be installed except
      if the installed version is newer. A priority greater than 1000 will
      always lead to the installation of the package even if it forces APT
      to downgrade to an older version.</para>

      <para>When APT checks <filename>/etc/apt/preferences</filename>, it
      first takes into account the most specific entries (often those
      specifying the concerned package), then the more generic ones
      (including for example all the packages of a distribution). If
      several generic entries exist, the first match is used. The available
      selection criteria include the package's name and the source
      providing it. Every package source is identified by the information
      contained in a <filename>Release</filename> file that APT downloads
      together with the <filename>Packages</filename> files. It
      specifies the origin (usually “Debian” for the packages of
      official mirrors, but it can also be a person's or an organization's
      name for third-party repositories). It also gives the name of the
      distribution (usually <emphasis role="distribution">Stable</emphasis>, <emphasis role="distribution">Testing</emphasis>, <emphasis role="distribution">Unstable</emphasis> or <emphasis role="distribution">Experimental</emphasis> for the standard
      distributions provided by Debian) together with its version (for
      example 8 for Debian <emphasis role="distribution">Jessie</emphasis>). Let's have a look at its
      syntax through some realistic case studies of this mechanism.</para>

      <sidebar>
        <title><emphasis>SPECIFIC CASE</emphasis> Priority of <emphasis role="distribution">experimental</emphasis></title>
        <indexterm><primary><emphasis role="distribution">Экспериментальный</emphasis></primary></indexterm>

	<para>If you listed <emphasis role="distribution">Experimental</emphasis> in your
	<filename>sources.list</filename> file, the corresponding packages
	will almost never be installed because their default APT priority
	is 1. This is of course a specific case, designed to keep users
	from installing <emphasis role="distribution">Experimental</emphasis> packages by mistake.
	The packages can only be installed by typing <command>aptitude
	install <replaceable>package</replaceable>/experimental</command>
	— users typing this command can only be aware of the risks that
	they take. It is still possible (though <emphasis>not</emphasis>
	recommended) to treat packages of <emphasis role="distribution">Experimental</emphasis> like those of other
	distributions by giving them a priority of 500. This is done with
	a specific entry in
	<filename>/etc/apt/preferences</filename>:</para>
        <informalexample>
          <programlisting>Package: *
Pin: release a=experimental
Pin-Priority: 500
</programlisting>
        </informalexample>
      </sidebar>

      <para>Let's suppose that you only want to use packages from the
      stable version of Debian. Those provided in other versions should not
      be installed except if explicitly requested. You could write the
      following entries in the <filename>/etc/apt/preferences</filename>
      file:</para>
      <informalexample>
        <programlisting>Package: *
Pin: release a=stable
Pin-Priority: 900

Package: *
Pin: release o=Debian
Pin-Priority: -10
</programlisting>
      </informalexample>

      <para><literal>a=stable</literal> defines the name of the selected
      distribution. <literal>o=Debian</literal> limits the scope to
      packages whose origin is “Debian”.</para>

      <para>Let's now assume that you have a server with several local
      programs depending on the version 5.14 of Perl and that you want to
      ensure that upgrades will not install another version of it. You
      could use this entry:</para>
      <informalexample>
        <programlisting>Package: perl
Pin: version 5.14*
Pin-Priority: 1001
</programlisting>
      </informalexample>

      <para>The reference documentation for this configuration file is
      available in the manual page
      <citerefentry><refentrytitle>apt_preferences</refentrytitle><manvolnum>5</manvolnum></citerefentry>,
      which you can display with <command>man
      apt_preferences</command>.</para>

      <sidebar>
        <title><emphasis>TIP</emphasis> Comments in <filename>/etc/apt/preferences</filename></title>
        <indexterm><primary><literal>Explanation</literal></primary></indexterm>
        <indexterm><primary><literal>Pin</literal></primary></indexterm>
        <indexterm><primary><literal>Pin-Priority</literal></primary></indexterm>

	<para>There is no official syntax to put comments in the
	<filename>/etc/apt/preferences</filename> file, but some textual
	descriptions can be provided by putting one or more
	“<literal>Explanation</literal>” fields at the start of each
	entry:</para>
        <informalexample>
          <programlisting>Explanation: The package xserver-xorg-video-intel provided
Explanation: in experimental can be used safely
Package: xserver-xorg-video-intel
Pin: release a=experimental
Pin-Priority: 500
</programlisting>
        </informalexample>
      </sidebar>
    </section>
    <section id="sect.apt-mix-distros">
      <title>Working with Several Distributions</title>

      <para><command>apt</command> being such a marvelous tool, it is
      tempting to pick packages coming from other distributions. For
      example, after having installed a <emphasis role="distribution">Stable</emphasis> system, you might want to try
      out a software package available in <emphasis role="distribution">Testing</emphasis> or <emphasis role="distribution">Unstable</emphasis> without diverging too much
      from the system's initial state.</para>

      <para>Even if you will occasionally encounter problems while mixing
      packages from different distributions, <command>apt</command>
      manages such coexistence very well and limits risks very effectively.
      The best way to proceed is to list all distributions used in
      <filename>/etc/apt/sources.list</filename> (some people always put
      the three distributions, but remember that <emphasis role="distribution">Unstable</emphasis> is reserved for experienced
      users) and to define your reference distribution with the
      <literal>APT::Default-Release</literal> parameter (see <xref linkend="sect.apt-upgrade" />).</para>

      <para>Let's suppose that <emphasis role="distribution">Stable</emphasis> is your reference distribution
      but that <emphasis role="distribution">Testing</emphasis> and
      <emphasis role="distribution">Unstable</emphasis> are also listed in
      your <filename>sources.list</filename> file. In this case, you can
      use <command>apt install
      <replaceable>package</replaceable>/testing</command> to install a
      package from <emphasis role="distribution">Testing</emphasis>. If the
      installation fails due to some unsatisfiable dependencies, let it
      solve those dependencies within <emphasis role="distribution">Testing</emphasis> by adding the <literal>-t
      testing</literal> parameter. The same obviously applies to <emphasis role="distribution">Unstable</emphasis>.</para>

      <para>In this situation, upgrades (<command>upgrade</command>
      and <command>full-upgrade</command>) are done within <emphasis role="distribution">Stable</emphasis> except for packages already
      upgraded to another distribution: those will follow updates
      available in the other distributions. We will explain this behavior
      with the help of the default priorities set by APT below. Do not
      hesitate to use <command>apt-cache policy</command> (see sidebar <xref linkend="sidebar.apt-cache-policy" />) to
      verify the given priorities.</para>

      <para>Everything centers around the fact that APT only considers
      packages of higher or equal version than the installed one (assuming
      that <filename>/etc/apt/preferences</filename> has not been used to
      force priorities higher than 1000 for some packages).</para>

      <sidebar id="sidebar.apt-cache-policy">
        <title><emphasis>TIP</emphasis> <command>apt-cache policy</command></title>

	<para>To gain a better understanding of the mechanism of priority,
	do not hesitate to execute <command>apt-cache policy</command> to
	display the default priority associated with each package source.
	You can also use <command>apt-cache policy
	<replaceable>package</replaceable></command> to display the
	priorities of all available versions of a given package.</para>
      </sidebar>

      <para>Let's assume that you have installed version 1 of a first
      package from <emphasis role="distribution">Stable</emphasis> and that
      version 2 and 3 are available respectively in <emphasis role="distribution">Testing</emphasis> and <emphasis role="distribution">Unstable</emphasis>. The installed version has a
      priority of 100 but the version available in <emphasis role="distribution">Stable</emphasis> (the very same) has a priority
      of 990 (because it is part of the target release). Packages in
      <emphasis role="distribution">Testing</emphasis> and <emphasis role="distribution">Unstable</emphasis> have a priority of 500 (the
      default priority of a non-installed version). The winner is thus
      version 1 with a priority of 990. The package “stays in <emphasis role="distribution">Stable</emphasis>”.</para>

      <para>Let's take the example of another package whose version 2 has
      been installed from <emphasis role="distribution">Testing</emphasis>.
      Version 1 is available in <emphasis role="distribution">Stable</emphasis> and version 3 in <emphasis role="distribution">Unstable</emphasis>. Version 1 (of priority 990
      — thus lower than 1000) is discarded because it is lower than the
      installed version. This only leaves version 2 and 3, both of
      priority 500. Faced with this alternative, APT selects the newest
      version, the one from <emphasis role="distribution">Unstable</emphasis>.If you don't want a package
      installed from <emphasis role="distribution">Testing</emphasis> to
      migrate to <emphasis role="distribution">Unstable</emphasis>, you
      have to assign a priority lower than 500 (490 for example) to
      packages coming from <emphasis role="distribution">Unstable</emphasis>. You can modify
      <filename>/etc/apt/preferences</filename> to this effect:</para>

      <programlisting>Package: *
Pin: release a=unstable
Pin-Priority: 490
</programlisting>
    </section>
    <section id="sect.automatic-tracking">
      <title>Tracking Automatically Installed Packages</title>

      <para>One of the essential functionalities of
      <command>apt</command> is the tracking of packages installed
      only through dependencies. These packages are called “automatic”,
      and often include libraries for instance.</para>
      
      <para>With this information, when packages are removed, the package
      managers can compute a list of automatic packages that are
      no longer needed (because there is no “manually installed” packages
      depending on them). <command>apt-get autoremove</command> will get
      rid of those packages. <command>aptitude</command> and <command>apt</command> do not have
      this command: the former because it removes them automatically as
      soon as they are identified, and the latter probably because the
      user should not have to manually run such a command.
      In all cases, the tools display a clear message listing the affected
      packages.</para>

      <indexterm><primary><command>apt-mark auto</command></primary></indexterm>
      <indexterm><primary><command>apt-mark manual</command></primary></indexterm>
      <indexterm><primary><command>aptitude markauto</command></primary></indexterm>
      <indexterm><primary><command>aptitude unmarkauto</command></primary></indexterm>
      <para>It is a good habit to mark as automatic any package that you
      don't need directly so that they are automatically removed when they
      aren't necessary anymore. <command>apt-mark auto
      <replaceable>package</replaceable></command> will mark the given
      package as automatic whereas <command>apt-mark manual
      <replaceable>package</replaceable></command> does the
      opposite. <command>aptitude markauto</command> and
      <command>aptitude unmarkauto</command> work in the same way
      although they offer more features for marking many packages
      at once (see <xref linkend="sect.aptitude" />). The console-based
      interactive interface of <command>aptitude</command> also
      makes it easy to review the “automatic flag” on many packages.</para>

      <indexterm><primary><command>aptitude why</command></primary></indexterm>
      <para>People might want to know why an automatically installed
      package is present on the system. To get this information from the
      command line, you can use <command>aptitude why
        <replaceable>package</replaceable></command>
      (<command>apt</command> and <command>apt-get</command> have no
      similar feature):</para>

      <screen><computeroutput>$ </computeroutput><userinput>aptitude why python-debian
</userinput><computeroutput>i   aptitude         Recommends apt-xapian-index         
i A apt-xapian-index Depends    python-debian (&gt;= 0.1.15)
</computeroutput></screen>

      <sidebar>
	<title><emphasis>ALTERNATIVE</emphasis> <command>deborphan</command> and <command>debfoster</command></title>

	<indexterm><primary><command>deborphan</command></primary></indexterm>
	<indexterm><primary><command>debfoster</command></primary></indexterm>
        <para>In days where <command>apt</command>,
        <command>apt-get</command> and <command>aptitude</command> were
        not able to track automatic packages, there were two utilities
	producing lists of unnecessary packages:
	<command>deborphan</command> and
	<command>debfoster</command>.</para>

	<para><command>deborphan</command> is the most rudimentary of
	both. It simply scans the <literal>libs</literal> and
	<literal>oldlibs</literal> sections (in the absence of
	supplementary instructions) looking for the packages that are
	currently installed and that no other package depends on. The
	resulting list can then serve as a basis to remove unneeded
	packages.</para>

	<para><command>debfoster</command> has a more elaborate approach,
	very similar to APT's one: it maintains a
	list of packages that have been explicitly installed, and
	remembers what packages are really required between each
	invocation. If new packages appear on the system and if
	<command>debfoster</command> doesn't know them as required
	packages, they will be shown on the screen together with a list
	of their dependencies. The program then offers a choice: remove
	the package (possibly together with those that depend on it),
	mark it as explicitly required, or ignore it temporarily.</para>
      </sidebar>
    </section>
  </section>

  <section id="sect.apt-cache">
    <title>The <command>apt-cache</command> Command</title>
    <indexterm><primary><command>apt-cache</command></primary></indexterm>
    <indexterm><primary>APT</primary><secondary>package search</secondary></indexterm>
    <indexterm><primary>APT</primary><secondary>header display</secondary></indexterm>
    <indexterm><primary>search of packages</primary></indexterm>
    <indexterm><primary>package</primary><secondary>search</secondary></indexterm>

    <para>The <command>apt-cache</command> command can display much of the
    information stored in APT's internal database. This information is a
    sort of cache since it is gathered from the different sources listed in
    the <filename>sources.list</filename> file. This happens during the
    <command>apt update</command> operation.</para>

    <sidebar id="sidebar.cache">
      <title><emphasis>VOCABULARY</emphasis> Cache</title>

      <para>A cache is a temporary storage system used to speed up frequent
      data access when the usual access method is expensive
      (performance-wise). This concept can be applied in numerous
      situations and at different scales, from the core of microprocessors
      up to high-end storage systems.</para>

      <para>In the case of APT, the reference <filename>Packages</filename>
      files are those located on Debian mirrors. That said, it would be
      very ineffective to go through the network for every search that we
      might want to do in the database of available packages. That is why
      APT stores a copy of those files (in
      <filename>/var/lib/apt/lists/</filename>) and searches are done
      within those local files. Similarly,
      <filename>/var/cache/apt/archives/</filename> contains a cache of
      already downloaded packages to avoid downloading them again if you
      need to reinstall them after a removal.</para>
    </sidebar>

    <indexterm><primary><command>apt show</command></primary></indexterm>
    <indexterm><primary><command>apt search</command></primary></indexterm>
    <indexterm><primary><command>apt-cache show</command></primary></indexterm>
    <indexterm><primary><command>apt-cache search</command></primary></indexterm>
    <indexterm><primary><command>aptitude show</command></primary></indexterm>
    <indexterm><primary><command>aptitude search</command></primary></indexterm>
    <para>The <command>apt-cache</command> command can do keyword-based
    package searches with <command>apt-cache search
    <replaceable>keyword</replaceable></command>. It can also display the
    headers of the package's available versions with <command>apt-cache
    show <replaceable>package</replaceable></command>. This command
    provides the package's description, its dependencies, the name of its
    maintainer, etc. Note that <command>apt search</command>, <command>apt
    show</command>, <command>aptitude search</command>,
    <command>aptitude show</command> work in the same way.
    </para>

    <sidebar>
      <title><emphasis>ALTERNATIVE</emphasis> <command>axi-cache</command></title>
      <indexterm><primary><command>axi-cache</command></primary></indexterm>
      <indexterm><primary><emphasis role="pkg">apt-xapian-index</emphasis></primary></indexterm>

      <para><command>apt-cache search</command> is a very rudimentary tool,
      basically implementing <command>grep</command> on package's
      descriptions. It often returns too many results or none at all when
      you include too many keywords.</para>

      <para><command>axi-cache search <replaceable>term</replaceable></command>,
      on the other hand, provides better results, sorted by relevancy. It
      uses the <emphasis>Xapian</emphasis> search engine and is part of
      the <emphasis role="pkg">apt-xapian-index</emphasis> package whichs indexes
      all package information (and more, like the <filename>.desktop</filename>
      files from all Debian packages). It knows about tags
      (see sidebar <xref linkend="sidebar.debtags" />) and returns results in a matter
      of milliseconds.</para>

      <screen>$ <userinput>axi-cache search package use::searching</userinput>
105 results found.
Results 1-20:
100% packagesearch - GUI for searching packages and viewing package information
98% debtags - Enables support for package tags
94% debian-goodies - Small toolbox-style utilities 
93% dpkg-awk - Gawk script to parse /var/lib/dpkg/{status,available} and Packages
93% goplay - games (and more) package browser using DebTags
[...]
87% apt-xapian-index - maintenance and search tools for a Xapian index of Debian packages
[...]
More terms: search debian searching strigi debtags bsearch libbsearch
More tags: suite::debian works-with::software:package role::program interface::commandline implemented-in::c++ admin::package-management use::analysing
`axi-cache more' will give more results
      </screen>
    </sidebar>

    <indexterm><primary><command>apt-cache policy</command></primary></indexterm>
    <indexterm><primary><command>apt-cache dumpavail</command></primary></indexterm>
    <indexterm><primary><command>apt-cache pkgnames</command></primary></indexterm>
    <para>Some features are more rarely used. For instance,
    <command>apt-cache policy</command> displays the priorities of package
    sources as well as those of individual packages. Another example is
    <command>apt-cache dumpavail</command> which displays the headers of
    all available versions of all packages. <command>apt-cache
    pkgnames</command> displays the list of all the packages which appear
    at least once in the cache.</para>
  </section>

  <section id="sect.apt-frontends">
    <title>Frontends: <command>aptitude</command>, <command>synaptic</command></title>
    <indexterm><primary><command>aptitude</command></primary></indexterm>
    <indexterm><primary><command>synaptic</command></primary></indexterm>
    <indexterm><primary>APT</primary><secondary>interfaces</secondary></indexterm>

    <para>APT is a C++ program whose code mainly resides in the
    <command>libapt-pkg</command> shared library. Using a shared library
    facilitates the creation of user interfaces (front-ends), since the
    code contained in the library can easily be reused. Historically,
    <command>apt-get</command> was only designed as a test front-end for
    <command>libapt-pkg</command> but its success tends to obscure this
    fact.</para>
    <section id="sect.aptitude">
      <title><command>aptitude</command></title>

      <para><command>aptitude</command> is an interactive program that can
      be used in semi-graphical mode on the console. You can browse the
      list of installed and available packages, look up all the available
      information, and select packages to install or remove. The program is
      designed specifically to be used by administrators, so that its
      default behaviors are much more intelligent than
      <command>apt-get</command>'s, and its interface much easier to
      understand.</para>

      <figure>
        <title>The <command>aptitude</command> package manager</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/aptitude.png" scalefit="1" width="75%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>When it starts, <command>aptitude</command> shows a list of
      packages sorted by state (installed, non-installed, or installed but
      not available on the mirrors — other sections display tasks,
      virtual packages, and new packages that appeared recently on
      mirrors). To facilitate thematic browsing, other views are available.
      In all cases, <command>aptitude</command> displays a list combining
      categories and packages on the screen. Categories are organized
      through a tree structure, whose branches can respectively be unfolded
      or closed with the <keycombo><keycap>Enter</keycap></keycombo>,
      <keycombo><keycap>[</keycap></keycombo> and
      <keycombo><keycap>]</keycap></keycombo> keys.
      <keycombo><keycap>+</keycap></keycombo> should be used to mark a
      package for installation, <keycombo><keycap>-</keycap></keycombo> to
      mark it for removal and <keycombo><keycap>_</keycap></keycombo> to
      purge it (note than these keys can also be used for categories, in
      which case the corresponding actions will be applied to all the
      packages of the category). <keycombo><keycap>u</keycap></keycombo>
      updates the lists of available packages and <keycombo action="simul"><keycap>Shift</keycap><keycap>u</keycap></keycombo>
      prepares a global system upgrade.
      <keycombo><keycap>g</keycap></keycombo> switches to a summary view of
      the requested changes (and typing
      <keycombo><keycap>g</keycap></keycombo> again will apply the
      changes), and <keycombo><keycap>q</keycap></keycombo> quits the
      current view. If you are in the initial view, this will effectively
      close <command>aptitude</command>.</para>

      <sidebar>
        <title><emphasis>DOCUMENTATION</emphasis> <command>aptitude</command></title>

	<para>This section does not cover the finer details of using
	<command>aptitude</command>, it rather focuses on giving you a
	survival kit to use it. <command>aptitude</command> is rather well
	documented and we advise you to use its complete manual available
        in the <emphasis role="pkg">aptitude-doc-en</emphasis> package
        (see <filename>/usr/share/doc/aptitude/html/en/index.html</filename>).
	</para>
      </sidebar>

      <para>To search for a package, you can type
      <keycombo><keycap>/</keycap></keycombo> followed by a search pattern.
      This pattern matches the name of the package, but can also be applied
      to the description (if preceded by <literal>~d</literal>), to the
      section (with <literal>~s</literal>) or to other characteristics
      detailed in the documentation. The same patterns can filter the list
      of displayed packages: type the
      <keycombo><keycap>l</keycap></keycombo> key (as in
      <foreignphrase>limit</foreignphrase>) and enter the pattern.</para>

      <para>Managing the “automatic flag” of Debian packages (see <xref linkend="sect.automatic-tracking" />) is a breeze with
      <command>aptitude</command>. It is possible to browse the list of
      installed packages and mark packages as automatic with <keycombo action="simul"><keycap>Shift</keycap> <keycap>m</keycap></keycombo>
      or to remove the mark with the
      <keycombo><keycap>m</keycap></keycombo> key. “Automatic packages”
      are displayed with an “A” in the list of packages. This feature also
      offers a simple way to visualize the packages in use on a machine,
      without all the libraries and dependencies that you don't really
      care about. The related pattern that can be used with
      <keycombo><keycap>l</keycap></keycombo> (to activate the filter
      mode) is <literal>~i!~M</literal>. It specifies that you only want
      to see installed packages (<literal>~i</literal>) not marked as
      automatic (<literal>!~M</literal>).</para> 
      
      <sidebar>
	<title><emphasis>TOOL</emphasis> Using <command>aptitude</command> on the command-line interface</title>

	<para>Most of <command>aptitude</command>'s features are
	accessible via the interactive interface as well as via
	command-lines. These command-lines will seem familiar to regular
	users of <command>apt-get</command> and
	<command>apt-cache</command>.</para>

	<para>The advanced features of <command>aptitude</command> are
	also available on the command-line. You can use the same package
	search patterns as in the interactive version. For example, if you
	want to cleanup the list of “manually installed” packages, and if
	you know that none of the locally installed programs require any
	particular libraries or Perl modules, you can mark the
	corresponding packages as automatic with a single command:</para>

	<screen><computeroutput># </computeroutput><userinput>aptitude markauto '~slibs|~sperl'</userinput>
</screen>

	<para>Here, you can clearly see the power of the search pattern
	system of <command>aptitude</command>, which enables the instant
	selection of all the packages in the <literal>libs</literal> and
	<literal>perl</literal> sections.</para>

	<para>Beware, if some packages are marked as automatic and if no
	other package depends on them, they will be removed immediately
	(after a confirmation request).</para>
      </sidebar>

      <section>
        <title>Managing Recommendations, Suggestions and Tasks</title>

	<para>Another interesting feature of <command>aptitude</command> is
	the fact that it respects recommendations between packages while
	still giving users the choice not to install them on a case by case
	basis. For example, the <emphasis role="pkg">gnome</emphasis> package recommends
	<emphasis role="pkg">gdebi</emphasis> (among others).
	When you select the former for installation, the latter will also
	be selected (and marked as automatic if not already installed on
	the system). Typing <keycombo><keycap>g</keycap></keycombo> will
	make it obvious: <emphasis role="pkg">gdebi</emphasis> appears on the summary
	screen of pending actions in the list of packages installed
	automatically to satisfy dependencies. However, you can decide not
	to install it by deselecting it before confirming the
	operations.</para>

	<para>Note that this recommendation tracking feature does not apply
	to upgrades. For instance, if a new version of <emphasis role="pkg">gnome</emphasis> recommends a
	package that it did not recommend formerly, the package won't be
	marked for installation. However, it will be listed on the upgrade
	screen so that the administrator can still select it for
	installation.</para>

	<para>Suggestions between packages are also taken into account, but
	in a manner adapted to their specific status. For example, since
	<emphasis role="pkg">gnome</emphasis> suggests
	<emphasis role="pkg">dia-gnome</emphasis>, the latter will be
	displayed on the summary screen of pending actions (in the section
	of packages suggested by other packages). This way, it is visible
	and the administrator can decide whether to take the suggestion
	into account or not. Since it is only a suggestion and not a
	dependency or a recommendation, the package will not be selected
	automatically — its selection requires a manual intervention from
	the user (thus, the package will not be marked as
	automatic).</para>

	<para>In the same spirit, remember that <command>aptitude</command>
	makes intelligent use of the concept of task. Since tasks are
	displayed as categories in the screens of packages lists, you can
	either select a full task for installation or removal, or browse
	the list of packages included in the task to select a smaller
	subset.</para>
      </section>
      <section>
        <title>Better Solver Algorithms</title>

	<para>To conclude this section, let's note that
	<command>aptitude</command> has more elaborate algorithms compared
	to <command>apt-get</command> when it comes to resolving difficult
	situations. When a set of actions is requested and when these
	combined actions would lead to an incoherent system,
	<command>aptitude</command> evaluates several possible scenarios
	and presents them in order of decreasing relevance. However, these
	algorithms are not failproof. Fortunately there is always the
	possibility to manually select the actions to perform. When the
	currently selected actions lead to contradictions, the upper part
	of the screen indicates a number of “broken” packages (and you
	can directly navigate to those packages by pressing
	<keycombo><keycap>b</keycap></keycombo>). It is then possible to
	manually build a solution for the problems found. In particular,
	you can get access to the different available versions by simply
	selecting the package with
	<keycombo><keycap>Enter</keycap></keycombo>. If the selection of
	one of these versions solves the problem, you should not hesitate
	to use the function. When the number of broken packages gets down
	to zero, you can safely go to the summary screen of pending actions
	for a last check before you apply them.</para>

        <sidebar>
          <title><emphasis>NOTE</emphasis> <command>aptitude</command>'s log</title>

	  <para>Like <command>dpkg</command>, <command>aptitude</command>
	  keeps a trace of executed actions in its logfile
	  (<filename>/var/log/aptitude</filename>). However, since both
	  commands work at a very different level, you cannot find the same
	  information in their respective logfiles. While
	  <command>dpkg</command> logs all the operations executed on
	  individual packages step by step, <command>aptitude</command>
	  gives a broader view of high-level operations like a system-wide
	  upgrade.</para>

	  <para>Beware, this logfile only contains a summary of operations
	  performed by <command>aptitude</command>. If other front-ends (or
	  even <command>dpkg</command> itself) are occasionally used, then
	  <command>aptitude</command>'s log will only contain a partial
	  view of the operations, so you can't rely on it to build a
	  trustworthy history of the system.</para>
        </sidebar>
      </section>
    </section>
    <section>
      <title><command>synaptic</command></title>

      <para><command>synaptic</command> is a graphical package manager for
      Debian which features a clean and efficient graphical interface based
      on GTK+/GNOME. Its many ready-to-use filters give fast access to
      newly available packages, installed packages, upgradable packages,
      obsolete packages and so on. If you browse through these lists, you
      can select the operations to be done on the packages (install,
      upgrade, remove, purge); these operations are not performed
      immediately, but put into a task list. A single click on a button
      then validates the operations, and they are performed in one
      go.</para>

      <figure>
        <title><command>synaptic</command> package manager</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/synaptic.png" scalefit="1" width="75%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>
  <section id="sect.package-authentication">
    <title>Checking Package Authenticity</title>
    <indexterm><primary>package</primary><secondary>authenticity check</secondary></indexterm>
    <indexterm><primary>package</primary><secondary>seal</secondary></indexterm>
    <indexterm><primary>package</primary><secondary>signature</secondary></indexterm>
    <indexterm><primary>signature</primary><secondary>package signature</secondary></indexterm>
    <indexterm><primary>authentication</primary><secondary>package authentication</secondary></indexterm>

    <para>Security is very important for Falcot Corp administrators.
    Accordingly, they need to ensure that they only install packages which
    are guaranteed to come from Debian with no tampering on the way. A
    computer cracker could try to add malicious code to an otherwise
    legitimate package. Such a package, if installed, could do anything the
    cracker designed it to do, including for instance disclosing passwords
    or confidential information. To circumvent this risk, Debian provides a
    tamper-proof seal to guarantee — at install time — that a package
    really comes from its official maintainer and hasn't been modified by a
    third party.</para>

    <para>The seal works with a chain of cryptographical hashes and a
    signature. The signed file is the <filename>Release</filename> file,
    provided by the Debian mirrors. It contains a list of the
    <filename>Packages</filename> files (including their compressed forms,
    <filename>Packages.gz</filename> and <filename>Packages.xz</filename>,
    and the incremental versions), along with their MD5, SHA1 and SHA256
    hashes, which ensures that the files haven't been tampered with. These
    <filename>Packages</filename> files contain a list of the Debian
    packages available on the mirror, along with their hashes, which
    ensures in turn that the contents of the packages themselves haven't
    been altered either.</para>

    <indexterm><primary><command>apt-key</command></primary></indexterm>
    <indexterm><primary><emphasis role="pkg">debian-archive-keyring</emphasis></primary></indexterm>
    <indexterm><primary><filename>/etc/apt/trusted.gpg.d/</filename></primary></indexterm>
    <indexterm><primary><filename>Release.gpg</filename></primary></indexterm>
    <para>The trusted keys are managed with the <command>apt-key</command>
    command found in the <emphasis role="pkg">apt</emphasis> package. This
    program maintains a keyring of GnuPG public keys, which are used to
    verify signatures in the <filename>Release.gpg</filename> files
    available on the mirrors. It can be used to add new keys manually (when
    non-official mirrors are needed). Generally however, only the official
    Debian keys are needed. These keys are automatically kept up-to-date by
    the <emphasis role="pkg">debian-archive-keyring</emphasis> package
    (which puts the corresponding keyrings in <filename>/etc/apt/trusted.gpg.d</filename>).
    However, the first installation of this particular package
    requires caution: even if the package is signed like any other, the
    signature cannot be verified externally. Cautious administrators should
    therefore check the fingerprints of imported keys before trusting them
    to install new packages:</para>

    <screen role="scale"># <userinput>apt-key fingerprint</userinput>
/etc/apt/trusted.gpg.d/debian-archive-jessie-automatic.gpg
----------------------------------------------------------
pub   4096R/2B90D010 2014-11-21 [expires: 2022-11-19]
      Key fingerprint = 126C 0D24 BD8A 2942 CC7D  F8AC 7638 D044 2B90 D010
uid                  Debian Archive Automatic Signing Key (8/jessie) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-jessie-security-automatic.gpg
-------------------------------------------------------------------
pub   4096R/C857C906 2014-11-21 [expires: 2022-11-19]
      Key fingerprint = D211 6914 1CEC D440 F2EB  8DDA 9D6D 8F6B C857 C906
uid                  Debian Security Archive Automatic Signing Key (8/jessie) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-jessie-stable.gpg
-------------------------------------------------------
pub   4096R/518E17E1 2013-08-17 [expires: 2021-08-15]
      Key fingerprint = 75DD C3C4 A499 F1A1 8CB5  F3C8 CBF8 D6FD 518E 17E1
uid                  Jessie Stable Release Key &lt;debian-release@lists.debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-squeeze-automatic.gpg
-----------------------------------------------------------
pub   4096R/473041FA 2010-08-27 [expires: 2018-03-05]
      Key fingerprint = 9FED 2BCB DCD2 9CDF 7626  78CB AED4 B06F 4730 41FA
uid                  Debian Archive Automatic Signing Key (6.0/squeeze) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-squeeze-stable.gpg
--------------------------------------------------------
pub   4096R/B98321F9 2010-08-07 [expires: 2017-08-05]
      Key fingerprint = 0E4E DE2C 7F3E 1FC0 D033  800E 6448 1591 B983 21F9
uid                  Squeeze Stable Release Key &lt;debian-release@lists.debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-wheezy-automatic.gpg
----------------------------------------------------------
pub   4096R/46925553 2012-04-27 [expires: 2020-04-25]
      Key fingerprint = A1BD 8E9D 78F7 FE5C 3E65  D8AF 8B48 AD62 4692 5553
uid                  Debian Archive Automatic Signing Key (7.0/wheezy) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-wheezy-stable.gpg
-------------------------------------------------------
pub   4096R/65FFB764 2012-05-08 [expires: 2019-05-07]
      Key fingerprint = ED6D 6527 1AAC F0FF 15D1  2303 6FB2 A1C2 65FF B764
uid                  Wheezy Stable Release Key &lt;debian-release@lists.debian.org&gt;
</screen>

    <sidebar>
      <title><emphasis>IN PRACTICE</emphasis> Adding trusted keys</title>
      <indexterm><primary>trusted key</primary></indexterm>
      <indexterm><primary>key</primary><secondary>APT's authentication keys</secondary></indexterm>

      <para>When a third-party package source is added to the
      <filename>sources.list</filename> file, APT needs to be told to trust
      the corresponding GPG authentication key (otherwise it will keep complaining
      that it can't ensure the authenticity of the packages coming from
      that repository). The first step is of course to get the public key.
      More often than not, the key will be provided as a small text file,
      which we will call <filename>key.asc</filename> in the following
      examples.</para>

      <para>To add the key to the trusted keyring, the administrator can
      run <command>apt-key add &lt; key.asc</command>. Another way is to
      use the <command>synaptic</command> graphical interface: its
      “Authentication” tab in the
      <menuchoice><guimenu>Settings</guimenu>
      <guisubmenu>Repositories</guisubmenu></menuchoice> menu gives the
      possibility of importing a key from the <filename>key.asc</filename>
      file.</para>

      <indexterm><primary><emphasis role="pkg">gui-apt-key</emphasis></primary></indexterm>
      <para>For people who would want a dedicated application and more
      details on the trusted keys, it is possible to use
      <command>gui-apt-key</command> (in the package of the same name), a
      small graphical user interface which manages the trusted keyring.
      </para>
    </sidebar>

    <para>Once the appropriate keys are in the keyring, APT will check the
    signatures before any risky operation, so that front-ends will display
    a warning if asked to install a package whose authenticity can't be
    ascertained.</para>
  </section>
  <section id="sect.dist-upgrade">
    <title>Upgrading from One Stable Distribution to the Next</title>

    <para>One of the best-known features of Debian is its ability to
    upgrade an installed system from one stable release to the next:
    <foreignphrase>dist-upgrade</foreignphrase> — a well-known phrase —
    has largely contributed to the project's reputation. With a few
    precautions, upgrading a computer can take as little as a few minutes,
    or a few dozen minutes, depending on the download speed from the package
    repositories.</para>
    <section>
      <title>Recommended Procedure</title>

      <para>Since Debian has quite some time to evolve in-between stable
      releases, you should read the release notes before upgrading.</para>

      <sidebar>
        <title><emphasis>BACK TO BASICS</emphasis> Release notes</title>

	<para>The release notes for an operating system (and, more
	generally, for any software) are a document giving an overview of
	the software, with some details concerning the particularities of
	one version. These documents are generally short compared to the
	complete documentation, and they usually list the features which
	have been introduced since the previous version. They also give
	details on upgrading procedures, warnings for users of previous
	versions, and sometimes errata.</para>

	
	<para>Release notes are available online: the release notes for the
	current stable release have a dedicated URL, while older release
	notes can be found with their codenames:
	<ulink type="block" url="http://www.debian.org/releases/stable/releasenotes" />
	<ulink type="block" url="http://www.debian.org/releases/wheezy/releasenotes" /></para>
      </sidebar>

      
      <para>In this section, we will focus on upgrading a <emphasis role="distribution">Wheezy</emphasis> system to <emphasis role="distribution">Jessie</emphasis>. This is a major operation on
      a system; as such, it is never 100% risk-free, and should not be
      attempted before all important data has been backed up.</para>

      <para>Another good habit which makes the upgrade easier (and
      shorter) is to tidy your installed packages and keep only the ones
      that are really needed. Helpful tools to do that include
      <command>aptitude</command>, <command>deborphan</command> and
      <command>debfoster</command> (see <xref linkend="sect.automatic-tracking" />). For example, you can use the
      following command, and then use <command>aptitude</command>'s interactive
      mode to double check and fine-tune the scheduled removals:</para>

      <screen># <userinput>deborphan | xargs aptitude --schedule-only remove</userinput>
</screen>

      <para>Now for the upgrading itself. First, you need to change the
      <filename>/etc/apt/sources.list</filename> file to tell APT to get
      its packages from <emphasis role="distribution">Jessie</emphasis>
      instead of <emphasis role="distribution">Wheezy</emphasis>. If the
      file only contains references to <emphasis role="distribution">Stable</emphasis> rather than explicit codenames,
      the change isn't even required, since <emphasis role="distribution">Stable</emphasis> always refers to the latest
      released version of Debian. In both cases, the database of available
      packages must be refreshed (with the <command>apt
      update</command> command or the refresh button in
      <command>synaptic</command>).</para>

      <para>Once these new package sources are registered, you should
      first do a minimal upgrade with <command>apt upgrade</command>.
      By doing the upgrade in two steps, we ease the job of the
      package management tools and often ensure that we have the latest
      versions of those, which might have accumulated bugfixes and
      improvements required to complete the full distribution upgrade.
      </para>

      <para>Once this first upgrade is done, it is time to handle the
      upgrade itself, either with <command>apt full-upgrade</command>,
      <command>aptitude</command>, or
      <command>synaptic</command>. You should carefully check the suggested
      actions before applying them: you might want to add suggested
      packages or deselect packages which are only recommended and known
      not to be useful. In any case, the front-end should come up with a
      scenario ending in a coherent and up-to-date <emphasis role="distribution">Jessie</emphasis> system. Then, all you need is
      to do is wait while the required packages are downloaded, answer the
      Debconf questions and possibly those about locally modified
      configuration files, and sit back while APT does its magic.</para>
    </section>
    <section>
      <title>Handling Problems after an Upgrade</title>

      <para>In spite of the Debian maintainers' best efforts, a major
      system upgrade isn't always as smooth as you could wish. New software
      versions may be incompatible with previous ones (for instance, their
      default behavior or their data format may have changed). Also, some
      bugs may slip through the cracks despite the testing phase which
      always precedes a Debian release.</para>

      <para>To anticipate some of these problems, you can install the
      <emphasis role="pkg">apt-listchanges</emphasis> package, which
      displays information about possible problems at the beginning of a
      package upgrade. This information is compiled by the package
      maintainers and put in
      <filename>/usr/share/doc/<replaceable>package</replaceable>/NEWS.Debian</filename>
      files for the benefit of users. Reading these files (possibly through
      <emphasis role="pkg">apt-listchanges</emphasis>) should help you
      avoid bad surprises.</para>

      <para>You might sometimes find that the new version of a software
      doesn't work at all. This generally happens if the application isn't
      particularly popular and hasn't been tested enough; a last-minute
      update can also introduce regressions which are only found after the
      stable release. In both cases, the first thing to do is to have a
      look at the bug tracking system at
      <literal>https://bugs.debian.org/<replaceable>package</replaceable></literal>,
      and check whether the problem has already been reported. If it
      hasn't, you should report it yourself with
      <command>reportbug</command>. If it is already known, the bug report
      and the associated messages are usually an excellent source of
      information related to the bug:</para>
      <itemizedlist>
        <listitem>
	  <para>sometimes a patch already exists, and it is available on
	  the bug report; you can then recompile a fixed version of the
	  broken package locally (see <xref linkend="sect.rebuilding-package" />);</para>
        </listitem>
        <listitem>
	  <para>in other cases, users may have found a workaround for the
	  problem and shared their insights about it in their replies to
	  the report;</para>
        </listitem>
        <listitem>
	  <para>in yet other cases, a fixed package may have already been
	  prepared and made public by the maintainer.</para>
        </listitem>
      </itemizedlist>

      <para>Depending on the severity of the bug, a new version of the
      package may be prepared specifically for a new revision of the stable
      release. When this happens, the fixed package is made available in
      the <literal>proposed-updates</literal> section of the Debian mirrors
      (see <xref linkend="sect.proposed-updates" />). The corresponding
      entry can then be temporarily added to the
      <filename>sources.list</filename> file, and updated packages can be
      installed with <command>apt</command> or
      <command>aptitude</command>.</para>

      <para>Sometimes the fixed package isn't available in this section yet
      because it is pending a validation by the Stable Release Managers.
      You can verify if that's the case on their web page. Packages listed
      there aren't available yet, but at least you know that the
      publication process is ongoing. <ulink type="block" url="https://release.debian.org/proposed-updates/stable.html" /></para>
    </section>
  </section>
  <section id="sect.regular-upgrades">
    <title>Keeping a System Up to Date</title>

    <para>The Debian distribution is dynamic and changes continually. Most
    of the changes are in the <emphasis role="distribution">Testing</emphasis> and <emphasis role="distribution">Unstable</emphasis> versions, but even <emphasis role="distribution">Stable</emphasis> is updated from time to time,
    mostly for security-related fixes. Whatever version of Debian a system
    runs, it is generally a good idea to keep it up to date, so that you
    can get the benefit of recent evolutions and bug fixes.</para>

    <para>While it is of course possible to periodically run a tool to
    check for available updates and run the upgrades, such a repetitive
    task is tedious, especially when it needs to be performed on several
    machines. Fortunately, like many repetitive tasks, it can be partly
    automated, and a set of tools have already been developed to that
    effect.</para>

    <para>The first of these tools is <command>apticron</command>, in the
    package of the same name. Its main effect is to run a script daily (via
    <command>cron</command>). The script updates the list of available
    packages, and, if some installed packages are not in the latest
    available version, it sends an email with a list of these packages
    along with the changes that have been made in the new versions.
    Obviously, this package mostly targets users of Debian <emphasis role="distribution">Stable</emphasis>, since the daily emails would be
    very long for the faster paced versions of Debian. When updates are
    available, <command>apticron</command> automatically downloads them. It
    does not install them — the administrator will still do it — but
    having the packages already downloaded and available locally (in APT's
    cache) makes the job faster.</para>

    <para>Administrators in charge of several computers will no doubt
    appreciate being informed of pending upgrades, but the upgrades
    themselves are still as tedious as they used to be, which is where the
    <filename>/etc/cron.daily/apt</filename> script (in the <emphasis role="pkg">apt</emphasis> package) comes in handy. This script is also
    run daily (and non-interactively) by <command>cron</command>. To
    control its behavior, use APT configuration variables (which are
    therefore stored in a file under
    <filename>/etc/apt/apt.conf.d/</filename>). The main variables
    are:</para>
    <variablelist>
      <varlistentry>
        <term>
          <literal>APT::Periodic::Update-Package-Lists</literal>
        </term>
        <listitem>
	  <para>This option allows you to specify the frequency (in days)
	  at which the package lists are refreshed.
	  <command>apticron</command> users can do without this variable,
	  since <command>apticron</command> already does this task.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>APT::Periodic::Download-Upgradeable-Packages</literal>
        </term>
        <listitem>
	  <para>Again, this option indicates a frequency (in days), this
	  time for the downloading of the actual packages. Again,
	  <command>apticron</command> users won't need it.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>APT::Periodic::AutocleanInterval</literal>
        </term>
        <listitem>
	  <para>This option covers a feature that
	  <command>apticron</command> doesn't have. It controls how often
	  obsolete packages (those not referenced by any distribution
	  anymore) are removed from the APT cache. This keeps the APT cache
	  at a reasonable size and means that you don't need to worry about
	  that task.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <literal>APT::Periodic::Unattended-Upgrade</literal>
        </term>
        <listitem>
	  <indexterm><primary><emphasis role="pkg">unattended-upgrades</emphasis></primary></indexterm>
	  <para>When this option is enabled, the daily script will
	  execute <command>unattended-upgrade</command> (from the
	  <emphasis role="pkg">unattended-upgrades</emphasis> package)
	  which — as its name suggest — can automatize the upgrade
	  process for some packages (by default it only takes care of
	  security updates, but this can be customized in
	  <filename>/etc/apt/apt.conf.d/50unattended-upgrades</filename>).
	  Note that this option can be set with the help of debconf
	  by running <command>dpkg-reconfigure -plow unattended-upgrades</command>.
	  </para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>Other options can allow you to control the cache cleaning
    behavior with more precision. They are not listed here, but they are
    described in the <filename>/etc/cron.daily/apt</filename>
    script.</para>

    <indexterm><primary><emphasis role="pkg">gnome-packagekit</emphasis></primary></indexterm>
    <para>These tools work very well for servers, but desktop users
    generally prefer a more interactive system. That is why the “Debian
    desktop environment” task installs <emphasis role="pkg">gnome-packagekit</emphasis> (at least when you select GNOME
    as desktop environment). It provides an icon in the
    notification area of desktop environments when updates are available;
    clicking on this icon then runs <command>gpk-update-viewer</command>,
    a simplified interface to perform updates. You can browse through
    available updates, read the short description of the relevant packages
    and the corresponding <filename>changelog</filename> entries, and
    select whether to apply the update or not on a case-by-case
    basis.</para>

    <figure>
      <title>Upgrading with <command>gpk-update-viewer</command></title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/gnome-packagekit.png" scalefit="1" width="70%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="sect.automatic-upgrades">
    <title>Automatic Upgrades</title>
    <indexterm><primary>upgrade</primary><secondary>automatic system upgrade</secondary></indexterm>
    <indexterm><primary>automatic upgrade</primary></indexterm>

    <para>Since Falcot Corp has many computers but only limited manpower,
    its administrators try to make upgrades as automatic as possible. The
    programs in charge of these processes must therefore run with no human
    intervention.</para>
    <section>
      <title>Configuring <command>dpkg</command></title>

      <para>As we have already mentioned (see sidebar <xref linkend="sidebar.questions-conffiles" />), <command>dpkg</command> can
      be instructed not to ask for confirmation when replacing a
      configuration file (with the <literal>--force-confdef
      --force-confold</literal> options). Interactions can, however, have
      three other sources: some come from APT itself, some are handled by
      <command>debconf</command>, and some happen on the command line due
      to package configuration scripts.</para>
    </section>
    <section>
      <title>Configuring APT</title>

      <para>The case of APT is simple: the <literal>-y</literal> option (or
      <literal>--assume-yes</literal>) tells APT to consider the answer to
      all its questions to be “yes”.</para>
    </section>
    <section>
      <title>Configuring <command>debconf</command></title>

      <para>The case of <command>debconf</command> deserves more details.
      This program was, from its inception, designed to control the
      relevance and volume of questions displayed to the user, as well as
      the way they are shown. That is why its configuration requests a
      minimal priority for questions; only questions above the minimal
      priority are displayed. <command>debconf</command> assumes the
      default answer (defined by the package maintainer) for questions
      which it decided to skip.</para>

      <para>The other relevant configuration element is the interface used
      by the front-end. If you choose <literal>noninteractive</literal> out
      of the choices, all user interaction is disabled. If a package tries
      to display an informative note, it will be sent to the administrator
      by email.</para>

      <para>To reconfigure <command>debconf</command>, use the
      <command>dpkg-reconfigure</command> tool from the <emphasis role="pkg">debconf</emphasis> package; the relevant command is
      <command>dpkg-reconfigure debconf</command>. Note that the configured
      values can be temporarily overridden with environment variables when
      needed (for instance, <varname>DEBIAN_FRONTEND</varname> controls the
      interface, as documented in the
      <citerefentry><refentrytitle>debconf</refentrytitle><manvolnum>7</manvolnum></citerefentry>
      manual page).</para>
    </section>
    <section>
      <title>Handling Command Line Interactions</title>

      <para>The last source of interactions, and the hardest to get rid of,
      is the configuration scripts run by <command>dpkg</command>. There is
      unfortunately no standard solution, and no answer is overwhelmingly
      better than another.</para>

      <para>The common approach is to suppress the standard input by
      redirecting the empty content of <filename>/dev/null</filename> into
      it with <command><replaceable>command</replaceable>
      &lt;/dev/null</command>, or to feed it with an endless stream of
      newlines. None of these methods is 100 % reliable, but they
      generally lead to the default answers being used, since most scripts
      consider a lack of reply as an acceptance of the default
      value.</para>
    </section>
    <section>
      <title>The Miracle Combination</title>

      <para>By combining the previous elements, it is possible to design a
      small but rather reliable script which can handle automatic
      upgrades.</para>

      <example id="example.non-interactive-upgrade">
        <title>Non-interactive upgrade script</title>

        <programlisting>export DEBIAN_FRONTEND=noninteractive
yes '' | apt-get -y -o DPkg::options::="--force-confdef" -o DPkg::options::="--force-confold" dist-upgrade
</programlisting>
      </example>

      <sidebar>
        <title><emphasis>IN PRACTICE</emphasis> The Falcot Corp case</title>

	<para>Falcot computers are a heterogeneous system, with machines
	having various functions. Administrators will therefore pick the
	most relevant solution for each computer.</para>

	<para>In practice, the servers running <emphasis role="distribution">Jessie</emphasis> are configured with the
	“miracle combination” above, and are kept up to date
	automatically. Only the most critical servers (the firewalls, for
	instances) are set up with <command>apticron</command>, so that
	upgrades always happen under the supervision of an
	administrator.</para>

	<para>The office workstations in the administrative services also
	run <emphasis role="distribution">Jessie</emphasis>, but they are
	equipped with <emphasis role="pkg">gnome-packagekit</emphasis>,
	so that users trigger the upgrades themselves. The
	rationale for this decision is that if upgrades happen without an
	explicit action, the behavior of the computer might change
	unexpectedly, which could cause confusion for the main
	users.</para>

	<para>In the lab, the few computers using <emphasis role="distribution">Testing</emphasis> — to take advantage of the
	latest software versions — are not upgraded automatically either.
	Administrators only configure APT to prepare the upgrades but not
	enact them; when they decide to upgrade (manually), the tedious
	parts of refreshing package lists and downloading packages will be
	avoided, and administrators can focus on the really useful
	part.</para>
      </sidebar>
    </section>
  </section>
  <section id="sect.searching-packages">
    <title>Searching for Packages</title>

    <para>With the large and ever-growing amount of software in Debian,
    there emerges a paradox: Debian usually has a tool for most tasks, but
    that tool can be very difficult to find amongst the myriad other
    packages. The lack of appropriate ways to search for (and to find) the
    right tool has long been a problem. Fortunately, this problem has
    almost entirely been solved.</para>

    <para>The most trivial search possible is looking up an exact package
    name. If <command>apt show
    <replaceable>package</replaceable></command> returns a result, then the
    package exists. Unfortunately, this requires knowing or even guessing
    the package name, which isn't always possible.</para>

    <sidebar>
      <title><emphasis>TIP</emphasis> Package naming conventions</title>

      <para>Some categories of packages are named according to a
      conventional naming scheme; knowing the scheme can sometimes allow
      you to guess exact package names. For instance, for Perl modules, the
      convention says that a module called
      <literal>XML::Handler::Composer</literal> upstream should be packaged
      as <emphasis role="pkg">libxml-handler-composer-perl</emphasis>. The
      library enabling the use of the <command>gconf</command> system from
      Python is packaged as <emphasis role="pkg">python-gconf</emphasis>.
      It is unfortunately not possible to define a fully general naming
      scheme for all packages, even though package maintainers usually try
      to follow the choice of the upstream developers.</para>
    </sidebar>

    <para>A slightly more successful searching pattern is a plain-text
    search in package names, but it remains very limited. You can generally
    find results by searching package descriptions: since each package has
    a more or less detailed description in addition to its package name, a
    keyword search in these descriptions will often be useful.
    <command>apt-cache</command> and <command>axi-cache</command> are the
    tools of choice for this kind of
    search; for instance, <command>apt-cache search video</command> will
    return a list of all packages whose name or description contains the
    keyword “video”.</para>

    <para>For more complex searches, a more powerful tool such as
    <command>aptitude</command> is required. <command>aptitude</command>
    allows you to search according to a logical expression based on the
    package's meta-data fields. For instance, the following command
    searches for packages whose name contains <literal>kino</literal>,
    whose description contains <literal>video</literal> and whose
    maintainer's name contains <literal>paul</literal>:</para>

    <screen>$ <userinput>aptitude search kino~dvideo~mpaul</userinput>
p   kino  - Non-linear editor for Digital Video data
$ <userinput>aptitude show kino</userinput>
Package: kino
State: not installed
Version: 1.3.4-2.1+b1
Priority: extra
Section: video
Maintainer: Paul Brossier &lt;piem@debian.org&gt;
Architecture: amd64
Uncompressed Size: 8,472 k
Depends: libasound2 (&gt;= 1.0.16), libatk1.0-0 (&gt;= 1.12.4), libavc1394-0 (&gt;=
         0.5.3), libavcodec56 (&gt;= 6:11~beta1) | libavcodec-extra-56 (&gt;=
         6:11~beta1), libavformat56 (&gt;= 6:11~beta1), libavutil54 (&gt;=
         6:11~beta1), libc6 (&gt;= 2.14), libcairo2 (&gt;= 1.2.4), libdv4,
         libfontconfig1 (&gt;= 2.11), libfreetype6 (&gt;= 2.2.1), libgcc1 (&gt;=
         1:4.1.1), libgdk-pixbuf2.0-0 (&gt;= 2.22.0), libglade2-0 (&gt;= 1:2.6.4-2~),
         libglib2.0-0 (&gt;= 2.12.0), libgtk2.0-0 (&gt;= 2.24.0), libice6 (&gt;=
         1:1.0.0), libiec61883-0 (&gt;= 1.2.0), libpango-1.0-0 (&gt;= 1.14.0),
         libpangocairo-1.0-0 (&gt;= 1.14.0), libpangoft2-1.0-0 (&gt;= 1.14.0),
         libquicktime2 (&gt;= 2:1.2.2), libraw1394-11, libsamplerate0 (&gt;= 0.1.7),
         libsm6, libstdc++6 (&gt;= 4.9), libswscale3 (&gt;= 6:11~beta1), libx11-6,
         libxext6, libxml2 (&gt;= 2.7.4), libxv1, zlib1g (&gt;= 1:1.1.4)
Recommends: ffmpeg, curl
Suggests: udev | hotplug, vorbis-tools, sox, mjpegtools, lame, ffmpeg2theora
Conflicts: kino-dvtitler, kino-timfx, kinoplus
Replaces: kino-dvtitler, kino-timfx, kinoplus
Provides: kino-dvtitler, kino-timfx, kinoplus
Description: Non-linear editor for Digital Video data
 Kino allows you to record, create, edit, and play movies recorded with DV
 camcorders. This program uses many keyboard commands for fast navigating and
 editing inside the movie. 
 
 The kino-timfx, kino-dvtitler and kinoplus sets of plugins, formerly
 distributed as separate packages, are now provided with Kino.
Homepage: http://www.kinodv.org/

Tags: field::arts, hardware::camera, implemented-in::c, implemented-in::c++,
      interface::x11, role::program, scope::application, suite::gnome,
      uitoolkit::gtk, use::editing, use::learning, works-with::video,
      x11::application
</screen>

    <para>The search only returns one package, <emphasis role="pkg">kino</emphasis>, which satisfies all three criteria.</para>

    <para>Even these multi-criteria searches are rather unwieldy, which
    explains why they are not used as much as they could. A new tagging
    system has therefore been developed, and it provides a new approach to
    searching. Packages are given tags that provide a thematical
    classification along several strands, known as a “facet-based
    classification”. In the case of <emphasis role="pkg">kino</emphasis>
    above, the package's tags indicate that Kino is a Gnome-based software
    that works on video data and whose main purpose is editing.</para>

    <para>Browsing this classification can help you to search for a package
    which corresponds to known needs; even if it returns a (moderate)
    number of hits, the rest of the search can be done manually. To do
    that, you can use the <literal>~G</literal> search pattern in
    <command>aptitude</command>, but it is probably easier to simply
    navigate the site where tags are managed:
    <ulink type="block" url="http://debtags.alioth.debian.org/cloud/" />
    </para>

    <indexterm><primary><emphasis role="pkg">debtags</emphasis></primary></indexterm>
    <indexterm><primary>tag</primary></indexterm>
    <para>Selecting the <literal>works-with::video</literal> and
    <literal>use::editing</literal> tags yields a handful of packages,
    including the <emphasis role="pkg">kino</emphasis> and <emphasis role="pkg">pitivi</emphasis> video editors. This system of
    classification is bound to be used more and more as time goes on, and
    package managers will gradually provide efficient search interfaces
    based on it.</para>

    <para>To sum up, the best tool for the job depends on the complexity of
    the search that you wish to do:</para>
    <itemizedlist>
      <listitem>
	<para><command>apt-cache</command> only allows searching in package
	names and descriptions, which is very convenient when looking for a
	particular package that matches a few target keywords;</para>
      </listitem>
      <listitem>
	<para>when the search criteria also include relationships between
	packages or other meta-data such as the name of the maintainer,
	<command>synaptic</command> will be more useful;</para>
      </listitem>
      <listitem>
	<para>when a tag-based search is needed, a good tool is
	<command>packagesearch</command>, a graphical interface dedicated
	to searching available packages along several criteria (including
	the names of the files that they contain). For usage on the
	command-line, <command>axi-cache</command> will fit the bill.</para>
        <indexterm><primary><emphasis role="pkg">packagesearch</emphasis></primary></indexterm>
	<indexterm><primary><command>axi-cache</command></primary></indexterm>
      </listitem>
      <listitem>
	<para>finally, when the searches involve complex expressions with
	logic operations, the tool of choice will be
	<command>aptitude</command>'s search pattern syntax, which is quite
	powerful despite being somewhat obscure; it works in both the
	command-line and the interactive modes.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
