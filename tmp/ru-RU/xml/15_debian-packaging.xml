<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="debian-packaging" lang="ru-RU">
	<chapterinfo>
		 <keywordset>
			<keyword>Бэкпортирование</keyword>
			 <keyword>Пересборка</keyword>
			 <keyword>Пакет исходных кодов</keyword>
			 <keyword>Архив</keyword>
			 <keyword>Метапакет</keyword>
			 <keyword>Разработчик Debian</keyword>
			 <keyword>Сопровождающий</keyword>

		</keywordset>

	</chapterinfo>
	 <title>Создание пакета Debian</title>
	 <highlights> <para>
		Нередко администратор, постоянно имеющий дело с пакетами Debian, со временем чувствует необходимость в создании своих собственных пакетов или изменении существующего пакета. Цель этой главы состоит в том, чтобы ответить на наиболее распространенные вопросы в этой области, а также предоставить необходимые базовые знания для использования инфраструктуры Debian наилучшим образом. Если повезет, после попытки приложить руку к созданию локальных пакетов вы даже можете почувствовать потребность в том, чтобы пойти дальше и присоединиться к самому Проекту Debian!
	</para>
	 </highlights> <section id="sect.rebuilding-package">
		<title>Пересборка пакета из его исходного кода</title>
		 <para>
			Пересборка двоичного пакета требуется при ряде обстоятельств. В некоторых случаях администратору нужна функциональность программы, для активации которой необходима компиляция из исходного кода с определенной опцией; в других программное обеспечение, упакованное в установленной версии Debian, недостаточно актуально. В последнем случае администратору обычно нужно собрать более свежий пакет, взятый из более новой версии Debian — например <emphasis role="distribution">Testing</emphasis> или даже <emphasis role="distribution">Unstable</emphasis> — чтобы новый пакет заработал в дистрибутиве <emphasis role="distribution">Stable</emphasis>; эта операция называется «бэкпортирование». Как обычно, прежде чем приступать к такой задаче, следует проверить, не был ли такой пакет уже создан, — для этого достаточно беглого взгляда на страницу данного пакета в Системе отслеживания пакетов Debian. <ulink type="block" url="https://tracker.debian.org/" /> <indexterm><primary>бэкпорт</primary></indexterm>
		</para>
		 <section>
			<title>Получение исходного кода</title>
			 <para>
				Пересборка пакета Debian начинается с получения его исходного кода. Простейший способ состоит в использовании команды <command>apt-get source <replaceable>название-пакета-исходного-кода</replaceable></command>. Данная команда требует наличия строки <literal>deb-src</literal> в файле <filename>/etc/apt/sources.list</filename> и обновлённых файлов индекса (после выполнения <command>apt-get update</command>). Эти условия должны быть уже выполнены, если вы следовали инструкциям из главы, посвященной конфигурации APT (см. <xref linkend="sect.apt-sources.list" />). Однако заметьте, что вы будете загружать пакеты исходного кода из версии Debian, упомянутой в строке <literal>deb-src</literal>. Если необходима другая версия, вам может понадобиться загрузить её вручную с зеркала Debian или с веб-сайта. Для этого требуется получить два или три файла (с расширениями <filename>*.dsc</filename> — от <foreignphrase>Debian Source Control</foreignphrase> — <filename>*.tar.<replaceable>comp</replaceable></filename>, и иногда <filename>*.diff.gz</filename> или <filename>*.debian.tar.<replaceable>comp</replaceable></filename> — <replaceable>comp</replaceable> может принимать одно из значений: <literal>gz</literal>, <literal>bz2</literal> или <literal>xz</literal> в зависимости от используемого инструмента сжатия), затем запустить команду <command>dpkg-source -x <replaceable>file.dsc</replaceable></command>. Если файл <filename>*.dsc</filename> доступен напрямую по известному URL, то есть еще более простой способ получить это всё — с помощью команды <command>dget <replaceable>URL</replaceable></command>. Эта команда (которую можно найти в пакете <emphasis role="pkg">devscripts</emphasis>) загружает файл <filename>*.dsc</filename> по переданному ей адресу, затем анализирует его содержимое и автоматически загружает файл или файлы, перечисленные в нём. После того, как всё загружено, она распаковывает пакет исходных кодов (если только не используется опция <literal>-d</literal> или <literal>--download-only</literal>).
			</para>

		</section>
		 <section>
			<title>Внесение изменений</title>
			 <para>
				Исходный код пакета теперь доступен в каталоге, имя которого составлено из имени пакета исходного кода и его версии (например <emphasis>samba-4.1.17+dfsg</emphasis>); здесь мы будем работать над нашими локальными изменениями.
			</para>
			 <para>
				Первое, что необходимо сделать, это изменить версию пакета, чтобы пересобранные пакеты можно было отличить от оригинальных, предоставляемых Debian. Если предположить, что текущая версия — <literal>2:4.1.17+dfsg-2</literal>, мы можем создать версию <literal>2:4.1.17+dfsg-2falcot1</literal>, что явно указывает на происхождение пакета. Номер версии версии становится выше, чем у пакета, предоставленного Debian, таким образом, пакет можно будет легко установить как обновление оригинального пакета. Такое изменение лучше всего осуществляется с помощью команды <command>dch</command> (<emphasis>Debian CHangelog</emphasis>) из пакета <emphasis role="pkg">devscripts</emphasis>, запустив её с параметрами <command>dch --local falcot</command>. Это действие вызовет текстовый редактор (<command>sensible-editor</command> — это должен быть ваш любимый редактор, если он указан в переменной окружения <varname>VISUAL</varname> или <varname>EDITOR</varname>, а в противном случае редактор по умолчанию) для того, чтобы документировать изменения, внесенные данной пересборкой. Этот редактор показывает нам, что <command>dch</command> действительно изменила файл <filename>debian/changelog</filename>.
			</para>
			 <para>
				В случае, если требуются изменения в опциях сборки, они вносятся в файл <filename>debian/rules</filename>, который управляет шагами процесса сборки пакета. В простейших случаях строки, относящиеся к начальной конфигурации (<literal>./configure …</literal>) или к собственно сборке (<literal>$(MAKE) …</literal> или <literal>make …</literal>) легко обнаружить. Если эти команды не не вызываются явно, они, вероятно, являются побочным эффектом другой явной команды; в этом случае обратитесь к их документации, чтобы выяснить, как изменить поведение по умолчанию. В случае пакетов, использующих <command>dh</command>, может понадобиться переопределить команду <command>dh_auto_configure</command> или <command>dh_auto_build</command> (подробности см. на соответствующих страницах руководства).
			</para>
			 <para>
				В зависимости от локальных изменений в пакетах может потребоваться также обновление файла <filename>debian/control</filename>, который содержит описание создаваемых пакетов. В частности, этот файл содержит строки <literal>Build-Depends</literal>, контролирующие список зависимостей, которые должны быть удовлетворены на этапе сборки пакета. Они часто ссылаются на версии пакетов, содержащиеся в дистрибутиве, откуда взят исходный код, но которые могут быть недоступны в дистрибутиве, используемом для пересборки. Не существует автоматизированного способа определить, является ли зависимость реальной, или же она указана только с целью гарантировать выполнение сборки исключительно с последней версией библиотеки, — это единственный доступный способ заставить <emphasis>autobuilder</emphasis> использовать данную версию пакета во время сборки, из-за чего сопровождающие Debian часто используют строго версионированые сборочные зависимости.
			</para>
			 <para>
				Если вы точно знаете, что эти сборочные зависимости слишком строги, не стесняйтесь ослабить их локально. Чтение файлов, документирующих стандартный способ сборки программного обеспечения — эти файлы часто называют <filename>INSTALL</filename> — поможет выяснить соответствующие зависимости. В идеале все зависимости должны быть удовлетворены из дистрибутива, используемого для пересборки; в противном случае начинается рекурсивный процесс, в результате которого пакеты, упомянутые в поле <literal>Build-Depends</literal>, должны быть бэкпортированы раньше целевого пакета. Некоторые пакеты могут не требовать бэкпортирования, и их можно установить как есть в процессе сборки (ярким примером является <emphasis role="pkg">debhelper</emphasis>). Обратите внимание, что процесс бэкпортирования может стать лавинообразным, если вы не будете осторожны. Поэтому бэкпорты должны быть сведены к абсолютному минимуму, насколько это возможно.
			</para>
			 <sidebar> <title><emphasis>СОВЕТ</emphasis> Установка <literal>Build-Depends</literal></title>
			 <indexterm>
				<primary><literal>Build-Depends</literal>, поле control</primary>
			</indexterm>
			 <para>
				<command>apt-get</command> позволяет установить все пакеты, упомянутые в поле <literal>Build-Depends</literal> исходного пакета, которые доступны в дистрибутиве, указанном в строке <literal>deb-src</literal> файла <filename>/etc/apt/sources.list</filename>. Для этого достаточно запустить команду <command>apt-get build-dep <replaceable>пакет-исходного-кода</replaceable></command>.
			</para>
			 </sidebar>
		</section>
		 <section>
			<title>Запуск пересборки</title>
			 <para>
				Когда все необходимые изменения внесены в исходный код, мы можем запустить создание собственно двоичного пакета (файл <filename>.deb</filename>). Весь процесс управляется командой <command>dpkg-buildpackage</command>.
			</para>
			 <example>
				<title>Пересборка пакета</title>
				 
<screen><computeroutput>$ </computeroutput><userinput>dpkg-buildpackage -us -uc
</userinput><computeroutput>[...]
</computeroutput></screen>

			</example>
			 <sidebar id="sidebar.fakeroot"> <title><emphasis>ИНСТРУМЕНТ</emphasis> <command>fakeroot</command></title>
			 <para>
				В сущности процесс создания пакета является простым сбором в архив набора существующих (или скомпилированных) файлов; большинство файлов архива будут иметь в конечном итоге владельца <emphasis>root</emphasis>. Тем не менее, сборка всего пакета от имени этого пользователя подразумевала бы повышенный риск; к счастью, этого можно избежать с помощью команды <command>fakeroot</command>. Этот инструмент может быть использован для запуска программы и создания у неё впечатления, что она запущена от имени <emphasis>root</emphasis> и создает файлы с произвольным владельцем и правами. Когда программа создает архив, который станет пакетом Debian, она хитрым образом внедряется в процесс создания архива, содержащего файлы, помеченные как принадлежащие произвольным владельцам, в том числе <emphasis>root</emphasis>. Это поведение настолько удобно, что <command>dpkg-buildpackage</command> использует <command>fakeroot</command> по умолчанию при сборке пакетов.
			</para>
			 <para>
				Заметьте, что программу только заставляют «поверить» в то, что она работает под привилегированной учетной записью, но процесс на самом деле выполняется от имени пользователя, запустившего <command>fakeroot <replaceable>программа</replaceable></command> (и права на создаваемые файлы в действительности принадлежат этому пользователю). Фактически программа ни в какой момент времени не получает привилегий суперпользователя, которыми могла бы злоупотреблять.
			</para>
			 </sidebar> <para>
				Предыдущая команда может завершиться ошибкой, если поле <literal>Build-Depends</literal> не было обновлено или соответствующие пакеты не установлены. В таком случае можно исключить эту проверку, передав параметр <literal>-d</literal> команде <command>dpkg-buildpackage</command>. Тем не менее, явное игнорирование зависимостей влечёт риск ошибки сборки на более позднем этапе. Хуже того, пакет может казаться собранным корректно, но не запуститься надлежащим образом: некоторые программы автоматически отключают часть своего функционала, если требующаяся библиотека была недоступна во время сборки.
			</para>
			 <para>
				В большинстве случаев разработчики Debian используют программу более высокого уровня, такую как <command>debuild</command>; она запускает <command>dpkg-buildpackage</command> как обычно, но также добавляет вызов программы, выполняющей множество проверок пакета на соответствие политике Debian. Этот сценарий также очищает окружение, так что локальные переменные окружения не «загрязняют» сборку пакета. Команда <command>debuild</command> — один из инструментов набора <emphasis>devscripts</emphasis>, который берёт на себя часть работы по обеспечению постоянства и настройке, чтобы сделать задачу сопровождающего более легкой.
			</para>
			 <sidebar> <title><emphasis>КРАТКИЙ ОБЗОР</emphasis> <command>pbuilder</command></title>
			 <indexterm>
				<primary><command>pbuilder</command></primary>
			</indexterm>
			 <para>
				Программа <command>pbuilder</command> (в пакете с таким же названием) позволяет собирать пакет Debian в <emphasis>изолированном</emphasis> окружении. Она сперва создает временный каталог, содержащий минимальную систему, требующуюся для сборки пакета (включая пакеты, упомянутые в поле <emphasis>Build-Depends</emphasis>). Этот каталог в дальнейшем используется в качестве корневого каталога (<filename>/</filename>) командой <command>chroot</command> для сборки пакета.
			</para>
			 <para>
				Этот инструмент позволяет выполнять процесс сборки в окружении, не затрагиваемом пользовательскими манипуляциями. Он также позволяет быстро обнаружить недостающие сборочные зависимости (так как сборка завершится неудачно, если соответствующие зависимости не документированы). И наконец, он позволяет собрать пакет для версии Debian, отличной от установленной на данной машине: для обычной работы может использоваться <emphasis role="distribution">Stable</emphasis>, а в <command>pbuilder</command>, запущенном на том же оборудовании, для сборки пакетов может использоваться <emphasis role="distribution">Unstable</emphasis>.
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.building-first-package">
		<title>Сборка вашего первого пакета</title>
		 <section>
			<title>Метапакеты или пакеты-пустышки</title>
			 <para>
				Пакеты-пустышки и метапакеты схожи тем, что являются пустыми оболочками, существующими лишь ради эффектов, которые их метаданные оказывают на стек работы с пакетами.
			</para>
			 <para>
				Назначение пакета-пустышки состоит в том, чтобы обманом заставить <command>dpkg</command> и <command>apt</command> поверить в то, что какой-либо пакет установлен, даже если он пуст. Это позволяет удовлетворить зависимость от пакета, когда соответствующее программное обеспечение было установлено в обход системы управления пакетами. Хотя такой способ работает, его следует по возможности избегать, ведь нет никакой гарантии, что установленное вручную программное обеспечение ведет себя точно так же, как соответствующий пакет, и зависящие от него пакеты могут работать некорректно.
			</para>
			 <para>
				Наоборот, метапакет представляет собой прежде всего набор зависимостей, так что установка метапакета в действительности предоставит целый набор других пакетов разом.
			</para>
			 <para>
				Оба эти типа пакетов могут быть созданы командами <command>equivs-control</command> и <command>equivs-build</command> (из пакета <emphasis role="pkg">equivs</emphasis>). Команда <command>equivs-control <replaceable>файл</replaceable></command> создает заголовочный файл пакета Debian, который следует отредактировть таким образом, чтобы в нём содержалось название неоходимого пакета, номер его версии, имя сопровождающего, зависимости и описание. Прочие поля без значения по умолчанию являются необязательными и их можно удалить. Поля <literal>Copyright</literal>, <literal>Changelog</literal>, <literal>Readme</literal> и <literal>Extra-Files</literal> являются нестандартными в пакетах Debian; они имеют смысл только в рамках <command>equivs-build</command> и не будут сохранены в заголовках созданного пакета.
			</para>
			 <example>
				<title>Заголовочный файл пакета-пустышки <emphasis>libxml-libxml-perl</emphasis></title>
				 
<programlisting>
Section: perl
Priority: optional
Standards-Version: 3.9.6

Package: libxml-libxml-perl
Version: 2.0116-1
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Depends: libxml2 (&gt;= 2.7.4)
Architecture: all
Description: Fake package - module manually installed in site_perl
 This is a fake package to let the packaging system
 believe that this Debian package is installed. 
 .
 In fact, the package is not installed since a newer version
 of the module has been manually compiled &amp; installed in the
 site_perl directory.</programlisting>

			</example>
			 <para>
				Следующий шаг состоит в том, чтобы создать пакет Debian с помощью команды <command>equivs-build <replaceable>файл</replaceable></command>. Voilà: пакет создан в текущем каталоге и с ним можно работать, как с любым другим пакетом Debian.
			</para>

		</section>
		 <section>
			<title>Простое файловое хранилище</title>
			 <para>
				Администраторам Falcot Corp необходимо создать пакет для того, чтобы облегчить развёртывание набора документов на большом количестве машин. Администратор, отвечающий за эту задачу, сперва читает «Руководство начинающего разработчика Debian», после чего начинает работать над своим первым пакетом. <ulink type="block" url="https://www.debian.org/doc/manuals/maint-guide/" />
			</para>
			 <para>
				Первым шагом является создание каталога <filename>falcot-data-1.0</filename> для целевого пакета исходного кода. Пакет, логично, будет называться <literal>falcot-data</literal> и иметь номер версии <literal>1.0</literal>. Затем администратор размещает файлы документов в подкаталоге <filename>data</filename>. После этого вызывается команда <command>dh_make</command> (из пакета <emphasis role="pkg">dh-make</emphasis>) для того, чтобы добавить файлы, необходимые для создания пакета, которые будут сохранены в подкаталоге <filename>debian</filename>:
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>cd falcot-data-1.0</userinput>
<computeroutput>$ </computeroutput><userinput>dh_make --native</userinput>
<computeroutput>
Type of package: single binary, indep binary, multiple binary, library, kernel module, kernel patch?
 [s/i/m/l/k/n] </computeroutput><userinput>i</userinput>
<computeroutput>
Maintainer name : Raphael Hertzog
Email-Address   : hertzog@debian.org
Date            : Fri, 04 Sep 2015 12:09:39 -0400
Package Name    : falcot-data
Version         : 1.0
License         : gpl3
Type of Package : Independent
Hit &lt;enter&gt; to confirm:
Currently there is no top level Makefile. This may require additional tuning.
Done. Please edit the files in the debian/ subdirectory now. You should also
check that the falcot-data Makefiles install into $DESTDIR and not in / .
$</computeroutput></screen>
			 <para>
				The selected type of package (<emphasis>indep binary</emphasis>) indicates that this source package will generate a single binary package that can be shared across all architectures (<literal>Architecture: all</literal>). <emphasis>single binary</emphasis> acts as a counterpart, and leads to a single binary package that is dependent on the target architecture (<literal>Architecture: any</literal>). In this case, the former choice is more relevant since the package only contains documents and no binary programs, so it can be used similarly on computers of all architectures.
			</para>
			 <indexterm>
				<primary>package types</primary>
			</indexterm>
			 <indexterm>
				<primary>package</primary>
				<secondary>types</secondary>
			</indexterm>
			 <para>
				The <emphasis>multiple binary</emphasis> type corresponds to a source package leading to several binary packages. A particular case, <emphasis>library</emphasis>, is useful for shared libraries, since they need to follow strict packaging rules. In a similar fashion, <emphasis>kernel module</emphasis> or <emphasis>kernel patch</emphasis> should be restricted to packages containing kernel modules.
			</para>
			 <sidebar> <title><emphasis>СОВЕТ</emphasis> Имя и электронный адрес сопровождающего</title>
			 <para>
				Most of the programs involved in package maintenance will look for your name and email address in the <varname>DEBFULLNAME</varname> and <varname>DEBEMAIL</varname> or <varname>EMAIL</varname> environment variables. Defining them once and for all will avoid you having to type them multiple times. If your usual shell is <command>bash</command>, it is a simple matter of adding the following two lines in your <filename>~/.bashrc</filename> file (you will obviously replace the values with more relevant ones!):
			</para>
			 
<programlisting>
export EMAIL="hertzog@debian.org"
export DEBFULLNAME="Raphael Hertzog"
</programlisting>
			 </sidebar> <para>
				Команда <command>dh_make</command> создала подкаталог <filename>debian</filename> со множеством файлов. Некоторые из них являются обязательными, в частности, <filename>rules</filename>, <filename>control</filename>, <filename>changelog</filename> и <filename>copyright</filename>. Файлы с расширением <filename>.ex</filename> — это примеры файлов, которые могут быть использованы путем их модификации (и удаления расширения) при необходимости. Когда они не нужны, рекомендуется удалить их. Файл <filename>compat</filename> следует оставить, так как требуется для корректного функционирования набора программ <emphasis>debhelper</emphasis> (все они начинаются с префикса <command>dh_</command>), используемого на различных этапах процесса сборки пакета.
			</para>
			 <para>
				Файл <filename>copyright</filename> должен содержать информацию об авторах документов, включенных в пакет, а также соответствующих лицензиях. В нашем случае это внутренние документы, и их использование ограничено пределами компании Falcot Corp. Файл <filename>changelog</filename> по умолчанию в целом нам подходит; замена «Initial release» на более многословное объяснение и изменение дистрибутива с <literal>unstable</literal> на <literal>internal</literal> вполне достаточно. Файл <filename>control</filename> также был изменён: значение поля <literal>Section</literal> было заменено на <emphasis>misc</emphasis>, а поля <literal>Homepage</literal>, <literal>Vcs-Git</literal> и <literal>Vcs-Browser</literal> были удалены. В поле <literal>Depends</literal> было добавлено <literal>iceweasel | www-browser</literal>, чтобы обеспечить наличие веб-браузера, способного отображать документы, поставляемые в пакете.
			</para>
			 <example>
				<title>Файл <filename>control</filename></title>
				 
<programlisting>
Source: falcot-data
Section: misc
Priority: optional
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Build-Depends: debhelper (&gt;= 9)
Standards-Version: 3.9.5

Package: falcot-data
Architecture: all
Depends: iceweasel | www-browser, ${misc:Depends}
Description: Internal Falcot Corp Documentation
 This package provides several documents describing the internal
 structure at Falcot Corp.  This includes:
  - organization diagram
  - contacts for each department.
 .
 These documents MUST NOT leave the company.
 Their use is INTERNAL ONLY.
</programlisting>

			</example>
			 <example>
				<title>Файл <filename>changelog</filename></title>
				 
<programlisting>
falcot-data (1.0) internal; urgency=low

  * Initial Release.
  * Let's start with few documents:
    - internal company structure;
    - contacts for each department.

 -- Raphael Hertzog &lt;hertzog@debian.org&gt;  Fri, 04 Sep 2015 12:09:39 -0400
</programlisting>

			</example>
			 <example>
				<title>Файл <filename>copyright</filename></title>
				 
<programlisting>
Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: falcot-data

Files: *
Copyright: 2004-2015 Falcot Corp
License: 
 All rights reserved.</programlisting>

			</example>
			 <sidebar> <title><emphasis>К ОСНОВАМ</emphasis> Файл <filename>Makefile</filename></title>
			 <indexterm>
				<primary><filename>Makefile</filename></primary>
			</indexterm>
			 <para>
				Файл <filename>Makefile</filename> является сценарием, используемым программой <command>make</command>; он описывает правила для сборки набора файлов один из другого в соответствии с деревом зависимостей (к примеру, программа может быть собрана из набора файлов с исходным кодом). Файл <filename>Makefile</filename> описывает эти правила в следующем формате:
			</para>
			 
<programlisting>
target: source1 source2 ...
        command1
        command2
</programlisting>
			 <para>
				Интерпретация такого правила заключается в следующем: если один из файлов <literal>source*</literal> новее, чем файл <literal>target</literal>, то цель должна быть создана с помощью <command>command1</command> и <command>command2</command>.
			</para>
			 <para>
				Обратите внимание, что строки команд должны начинаться с символа табуляции; также стоит отметить, что когда командная строка начинается с дефиса (<literal>-</literal>), неудачное завершение команды не прерывает весь процесс.
			</para>
			 </sidebar> <para>
				Файл <filename>rules</filename> обычно содержит набор правил, используемых для конфигурирования, сборки и установки программного обеспечения в выделенный подкаталог (названный именем собранного двоичного пакета). Содержимое этого подкаталога затем архивируется в пакет Debian, как если бы это был корневой каталог файловой системы. В нашем случае файлы будут установлены в подкаталог <filename>debian/falcot-data/usr/share/falcot-data/</filename>, чтобы установка созданного пакета развернула файлы в <filename>/usr/share/falcot-data/</filename>. Файл <filename>rules</filename> используется в качестве <filename>Makefile</filename> с несколькими стандартными целями (включая <literal>clean</literal> и <literal>binary</literal>, используемые соответственно для очистки каталога с исходным кодом и создания двоичного пакета).
			</para>
			 <para>
				Хотя этот файл является центральным во всём процессе, он содержит лишь самый минимум для запуска стандартного набора команд, предоставляемых инструментом <command>debhelper</command>. Так обстоит дело с файлами, созданными с помощью <command>dh_make</command>. Чтобы установить наши файлы, мы просто настроим поведение команды <command>dh_install</command>, создав следующий файл <filename>debian/falcot-data.install</filename>:
			</para>
			 
<programlisting>
data/* usr/share/falcot-data/
</programlisting>
			 <para>
				At this point, the package can be created. We will however add a lick of paint. Since the administrators want the documents to be easily accessed from the menus of graphical desktop environments, we add a <filename>falcot-data.desktop</filename> file and get it installed in <filename>/usr/share/applications</filename> by adding a second line to <filename>debian/falcot-data.install</filename>.
			</para>
			 <example>
				<title>The <filename>falcot-data.desktop</filename> file</title>
				 
<programlisting>
[Desktop Entry]
Name=Internal Falcot Corp Documentation
Name[ru]=Внутренняя документация Falcot Corp
Comment=Starts a browser to read the documentation
Comment[ru]=Запускает браузер для чтения документации
Exec=x-www-browser /usr/share/falcot-data/index.html
Terminal=false
Type=Application
Categories=Documentation;</programlisting>

			</example>
			 <para>
				Изменённый файл <filename>debian/falcot-data.install</filename> выглядит следующим образом:
			</para>
			 
<programlisting>
data/* usr/share/falcot-data/
falcot-data.desktop usr/share/applications/</programlisting>
			 <para>
				Наш пакет исходного кода теперь готов. Все, что осталось сделать, это создать двоичный пакет тем же методом, который мы использовали ранее для пересборки пакетов: мы запускаем команду <command>dpkg-buildpackage -us -uc</command> в каталоге <filename>falcot-data-1.0</filename>.
			</para>

		</section>

	</section>
	 <section id="sect.setup-apt-package-repository">
		<title>Создание репозитория пакетов для APT</title>
		 <indexterm>
			<primary>архив пакетов</primary>
		</indexterm>
		 <indexterm>
			<primary>пакет</primary>
			<secondary>Debian</secondary>
			<tertiary>архив</tertiary>
		</indexterm>
		 <para>
			Falcot Corp со временем начала сопровождение нескольких пакетов Debian, либо локально модифицированных из существующих пакетов, либо созданных с нуля с целью распространять внутренние данные и программы.
		</para>
		 <para>
			To make deployment easier, they want to integrate these packages in a package archive that can be directly used by APT. For obvious maintenance reasons, they wish to separate internal packages from locally-rebuilt packages. The goal is for the matching entries in a <filename>/etc/apt/sources.list.d/falcot.list</filename> file to be as follows:
		</para>
		 
<programlisting>
deb http://packages.falcot.com/ updates/
deb http://packages.falcot.com/ internal/
</programlisting>
		 <indexterm>
			<primary><command>mini-dinstall</command></primary>
		</indexterm>
		 <para>
			The administrators therefore configure a virtual host on their internal HTTP server, with <filename>/srv/vhosts/packages/</filename> as the root of the associated web space. The management of the archive itself is delegated to the <command>mini-dinstall</command> command (in the similarly-named package). This tool keeps an eye on an <filename>incoming/</filename> directory (in our case, <filename>/srv/vhosts/packages/mini-dinstall/incoming/</filename>) and waits for new packages there; when a package is uploaded, it is installed into a Debian archive at <filename>/srv/vhosts/packages/</filename>. The <command>mini-dinstall</command> command reads the <filename>*.changes</filename> file created when the Debian package is generated. These files contain a list of all other files associated with the version of the package (<filename>*.deb</filename>, <filename>*.dsc</filename>, <filename>*.diff.gz</filename>/<filename>*.debian.tar.gz</filename>, <filename>*.orig.tar.gz</filename>, or their equivalents with other compression tools), and these allow <command>mini-dinstall</command> to know which files to install. <filename>*.changes</filename> files also contain the name of the target distribution (often <literal>unstable</literal>) mentioned in the latest <filename>debian/changelog</filename> entry, and <command>mini-dinstall</command> uses this information to decide where the package should be installed. This is why administrators must always change this field before building a package, and set it to <literal>internal</literal> or <literal>updates</literal>, depending on the target location. <command>mini-dinstall</command> then generates the files required by APT, such as <filename>Packages.gz</filename>.
		</para>
		 <sidebar> <title><emphasis>АЛЬТЕРНАТИВА</emphasis> <command>apt-ftparchive</command></title>
		 <indexterm>
			<primary><command>apt-ftparchive</command></primary>
		</indexterm>
		 <para>
			Если <command>mini-dinstall</command> кажется слишком сложным для вашего архива Debian, вы также можете использовать команду <command>apt-ftparchive</command>. Этот инструмент сканирует содержимое каталога и отображает (в своём стандартном выводе) соответствующий файл <filename>Packages</filename>. В случае Falcot Corp администраторы могут загрузить пакеты непосредственно в <filename>/srv/vhosts/packages/updates/</filename> или <filename>/srv/vhosts/packages/internal/</filename>, а затем запустить следующие команды для создания файлов <filename>Packages.gz</filename>:
		</para>
		 
<screen>
<computeroutput>$ </computeroutput><userinput>cd /srv/vhosts/packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages updates &gt;updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages internal &gt;internal/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip internal/Packages</userinput></screen>
		 <para>
			Команда <command>apt-ftparchive sources</command> позволяет создать файлы <filename>Sources.gz</filename> аналогичным образом.
		</para>
		 </sidebar> <para>
			Настройка <command>mini-dinstall</command> сводится к созданию файла <filename>~/.mini-dinstall.conf</filename>; в случае Falcot Corp содержимое его будет следующим:
		</para>
		 
<programlisting>
[DEFAULT]
archive_style = flat
archivedir = /srv/vhosts/packages

verify_sigs = 0
mail_to = admin@falcot.com

generate_release = 1
release_origin = Falcot Corp
release_codename = stable

[updates]
release_label = Recompiled Debian Packages

[internal]
release_label = Internal Packages
</programlisting>
		 <para>
			Решением, которое стоит отметить, является генерация файла <filename>Release</filename> для каждого хранилища. Это может помочь управлять приоритетами установки пакета с помощью конфигурационного файла <filename>/etc/apt/preferences</filename> (см. <xref linkend="sect.apt.priorities" />).
		</para>
		 <sidebar> <title><emphasis>БЕЗОПАСНОСТЬ</emphasis> <command>mini-dinstall</command> и права доступа</title>
		 <para>
			Поскольку <command>mini-dinstall</command> разработан с целью запуска от имени обычного пользователя, нет нужды запускать его от имени root. Самый простой способ — настроить всё в пределах учетной записи, принадлежащей администратору, отвечающему за создание пакетов Debian. Так как только этот администратор имеет необходимые полномочия, необходимые для размещения файлов в каталоге <filename>incoming/</filename> мы можем сделать вывод, что администратор проверил подлинное происхождение каждого пакета до развёртывания, и у <command>mini-dinstall</command> нет необходимости делать это снова. Это объясняет параметр <literal>verify_sigs = 0</literal> (который означает, что нет нужды проверять подписи). Однако, если содержимое пакетов уязвимо, мы можем изменить настройку и принять решение об аутентификации с помощью брелока, содержащего открытые ключи лиц, которым разрешено создавать пакеты (настроенного с помощью параметра <literal>extra_keyrings</literal>); в таком случае <command>mini-dinstall</command> проверит происхождение каждого входящего пакета, анализируя подпись, встроенную в файл <filename>*.changes</filename>.
		</para>
		 </sidebar> <para>
			Вызов <command>mini-dinstall</command> на самом деле запускает демон в фоне. Пока этот демон работает, он будет проверять наличие новых пакетов в каталоге <filename>incoming/</filename> каждые полчаса; когда прибывает новый пакет, он будет перемещён в архив, и файлы <filename>Packages.gz</filename> and <filename>Sources.gz</filename> создадутся заново. Если запуск демона проблематичен, <command>mini-dinstall</command> можно также вызывать вручную в пакетном режиме (с опцией <literal>-b</literal>) каждый раз, когда пакет загружается в каталог <filename>incoming/</filename>. Другие возможности, предоставляемые <command>mini-dinstall</command>, документированы на странице руководства <citerefentry><refentrytitle>mini-dinstall</refentrytitle>
			 <manvolnum>1</manvolnum></citerefentry>.
		</para>
		 <sidebar> <title><emphasis>ДОПОЛНИТЕЛЬНО</emphasis> Создание подписанного архива</title>
		 <para>
			The APT suite checks a chain of cryptographic signatures on the packages it handles before installing them, in order to ensure their authenticity (see <xref linkend="sect.package-authentication" />). Private APT archives can then be a problem, since the machines using them will keep displaying warnings about unsigned packages. A diligent administrator will therefore integrate private archives with the secure APT mechanism.
		</para>
		 <para>
			Для помощи в этом процессе в <command>mini-dinstall</command> есть опция конфигурации <literal>release_signscript</literal>, которая позволяет задать сценарий, используемый для генерации подписи. Хорошей отправной точкой является сценарий <filename>sign-release.sh</filename>, предоставляемый пакетом<emphasis role="pkg">mini-dinstall</emphasis> в каталоге <filename>/usr/share/doc/mini-dinstall/examples/</filename>; локальные изменения могут быть уместны.
		</para>
		 </sidebar>
	</section>
	 <section id="sect.becoming-package-maintainer">
		<title>Как стать сопровождающим пакета</title>
		 <section>
			<title>Учимся создавать пакеты</title>
			 <para>
				Создание качественного пакета Debian — не всегда простая задача, и чтобы стать сопровождающим пакета, нужно потратить некоторое время на обучение, включающее как теорию, так и практику. Это не просто сборка и установка программного обеспечения; большая часть сложностей требует понимания проблем и конфликтов, а также прочих взаимоотношений с мириадом других пакетов.
			</para>
			 <section>
				<title>Правила</title>
				 <para>
					A Debian package must comply with the precise rules compiled in the Debian policy, and each package maintainer must know them. There is no requirement to know them by heart, but rather to know they exist and to refer to them whenever a choice presents a non-trivial alternative. Every Debian maintainer has made mistakes by not knowing about a rule, but this is not a huge problem as long as the error gets fixed when a user reports it as a bug report (which tends to happen fairly soon thanks to advanced users). <ulink type="block" url="https://www.debian.org/doc/debian-policy/" />
				</para>

			</section>
			 <section>
				<title>Методика</title>
				 <indexterm>
					<primary>Справочник разработчика Debian</primary>
				</indexterm>
				 <para>
					Debian is not a simple collection of individual packages. Everyone's packaging work is part of a collective project; being a Debian developer involves knowing how the Debian project operates as a whole. Every developer will, sooner or later, interact with others. The Debian Developer's Reference (in the <emphasis role="pkg">developers-reference</emphasis> package) summarizes what every developer must know in order to interact as smoothly as possible with the various teams within the project, and to take the best possible advantages of the available resources. This document also enumerates a number of duties a developer is expected to fulfill. <ulink type="block" url="https://www.debian.org/doc/manuals/developers-reference/" />
				</para>

			</section>
			 <section>
				<title>Инструменты</title>
				 <para>
					Many tools help package maintainers in their work. This section describes them quickly, but does not give the full details, since they all have comprehensive documentation of their own.
				</para>
				 <section>
					<title>Программа <command>lintian</command></title>
					 <indexterm>
						<primary><command>lintian</command></primary>
					</indexterm>
					 <para>
						This tool is one of the most important: it's the Debian package checker. It is based on a large array of tests created from the Debian policy, and detects quickly and automatically many errors that can then be fixed before packages are released.
					</para>
					 <para>
						Этот инструмент является лишь вспомогательным, и иногда ошибается (например из-за того, что политики Debian со временем меняются, <command>lintian</command> иногда устаревает). Это тоже еще не все: отсутствие каких-либо ошибок, получаемых от Lintian, не следует интерпретировать как доказательство идеальности пакета; большее, на что он способен, это помочь избежать наиболее распространенных ошибок.
					</para>

				</section>
				 <section>
					<title>Программа <command>piuparts</command></title>
					 <indexterm>
						<primary><command>piuparts</command></primary>
					</indexterm>
					 <para>
						Это другой важный инструмент: он автоматизирует установку, обновление, удаление и полное удаление пакета (в изолированном окружении) и проверяет, что ни одна из этих операций не ведёт к ошибке. Он может помочь в обнаружении недостающих зависимостей, а также определяет, когда файлы по ошибке остаются в системе после полного удаления пакета.
					</para>

				</section>
				 <section>
					<title>devscripts</title>
					 <indexterm>
						<primary><emphasis role="pkg">devscripts</emphasis></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debuild</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>dch</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>uscan</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debi</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debc</command></primary>
					</indexterm>
					 <para>
						Пакет <emphasis role="pkg">devscripts</emphasis> содержит множество программ, оказывающих помощь в широком круге задач разработчика Debian:
					</para>
					 <itemizedlist>
						<listitem>
							<para>
								<command>debuild</command> позволяет создавать пакет (с помощью <command>dpkg-buildpackage</command>) и после этого запускать <command>lintian</command> для проверки его соответствия с политикой Debian.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debclean</command> очищает пакет исходных текстов после создания двоичного пакета.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>dch</command> позволяет быстро и легко редактировать файл <filename>debian/changelog</filename> из пакета исходного кода.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>uscan</command> проверяет, была ли выпущена новая версия программного обеспечения основными авторами; для этого требуется наличие файла <filename>debian/watch</filename> с описанием размещения таких выпусков.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debi</command> allows installing (with <command>dpkg -i</command>) the Debian package that was just generated without the need to type its full name and path.
							</para>

						</listitem>
						 <listitem>
							<para>
								Аналогичным образом, <command>debc</command> позволяет сканировать содержимое недавно созданного пакета (с помощью <command>dpkg -c</command>) без необходимости вводить его полное имя и путь.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>bts</command> контролирует систему отслеживания ошибок из командной строки; эта программа автоматически генерирует соответствующие письма.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debrelease</command> загружает недавно созданный пакет на удалённый сервер без необходимости ввода полного имени и пути соответствующего файла <filename>.changes</filename>.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debsign</command> подписывает файлы <filename>*.dsc</filename> и <filename>*.changes</filename>.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>uupdate</command> автоматизирует создание новой редакции пакета, как только новая версия будет выпущена разработчиками программы.
							</para>

						</listitem>

					</itemizedlist>

				</section>
				 <section>
					<title><emphasis role="pkg">debhelper</emphasis> и <emphasis role="pkg">dh-make</emphasis></title>
					 <indexterm>
						<primary><emphasis>debhelper</emphasis></primary>
					</indexterm>
					 <indexterm>
						<primary><emphasis>dh-make</emphasis></primary>
					</indexterm>
					 <para>
						Debhelper is a set of scripts easing the creation of policy-compliant packages; these scripts are invoked from <filename>debian/rules</filename>. Debhelper has been widely adopted within Debian, as evidenced by the fact that it is used by the majority of official Debian packages. All the commands it contains have a <command>dh_</command> prefix.
					</para>
					 <para>
						Сценарий <command>dh_make</command> (из пакета <emphasis>dh-make</emphasis>) создает файлы, необходимые для создания пакета Debian в каталоге, изначально содержащем исходный код программы. Как можно догадаться из названия программы, сформированные файлы по умолчанию используют debhelper.
					</para>

				</section>
				 <section>
					<title><command>dupload</command> и <command>dput</command></title>
					 <indexterm>
						<primary><command>dupload</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>dput</command></primary>
					</indexterm>
					 <para>
						Команды <command>dupload</command> и <command>dput</command> позволяют загружать пакет Debian на (возможно удалённый) сервер. Это позволяет разработчикам публиковать свой пакет на основном сервере Debian (<literal>ftp-master.debian.org</literal>), чтобы он мог быть интегрирован в архив и распространён при помощи зеркал. Эти команды принимают файл <filename>*.changes</filename> в качестве параметра и на основании его содержимого находят остальные сопутствующие файлы.
					</para>

				</section>

			</section>

		</section>
		 <section>
			<title>Процесс принятия</title>
			 <para>
				Becoming a “Debian developer” is not a simple administrative matter. The process comprises several steps, and is as much an initiation as it is a selection process. In any case, it is formalized and well-documented, so anyone can track their progression on the website dedicated to the new member process. <ulink type="block" url="https://nm.debian.org/" />
			</para>
			 <sidebar> <title><emphasis>ДОПОЛНИТЕЛЬНО</emphasis> Упрощённый процесс для «Сопровождающих Debian»</title>
			 <para>
				“Debian Maintainer” is another status that gives less privileges than “Debian developer” but whose associated process is quicker. With this status, the contributors can maintain their own packages only. A Debian developer only needs to perform a check on an initial upload, and issue a statement to the effect that they trust the prospective maintainer with the ability to maintain the package on their own.
			</para>
			 <indexterm>
				<primary>Сопровождающий Debian</primary>
			</indexterm>
			 </sidebar> <section>
				<title>Предварительные требования</title>
				 <para>
					Все кандидаты должны иметь, как минимум, практическое знание английского языка. Это необходимо на всех уровнях: само собой, для начальной связи с экзаменатором, и позднее, так как английский язык является предпочтительным языком для большей части документации; кроме того, пользователи пакетов будут общаться на английском языке при отправке сообщений об ошибках, и будут ожидать ответов на английском языке.
				</para>
				 <para>
					Другое требование касается мотивации. Пытаться стать разработчиком Debian имеет смысл, только если кандидат знает, что его интерес к Debian не угаснет в течение многих месяцев. Сам процесс принятия может длиться несколько месяцев, и Debian нуждается в разработчиках на долгосрочный период; каждый пакет требует постоянного обслуживания, а не только начальной загрузки.
				</para>

			</section>
			 <section>
				<title>Регистрация</title>
				 <para>
					Первый (реальный) шаг состоит в том, чтобы найти спонсора или защитника; то есть официального разработчика, готового заявить о том, что он считает, что принятие <emphasis>X</emphasis> было бы полезно для Debian. Обычно это предполагает, что кандидат уже проявил активность в рамках сообщества, и что его работа была оценена. Если кандидат является застенчивым и его работа не афишировалась публично, он может попытаться убедить разработчика Debian выступить за него, продемонстрировав свою работу приватно.
				</para>
				 <indexterm>
					<primary>key pair</primary>
				</indexterm>
				 <para>
					At the same time, the candidate must generate a public/private RSA key pair with GnuPG, which should be signed by at least two official Debian developers. The signature authenticates the name on the key. Effectively, during a key signing party, each participant must show an official identification (usually an ID card or passport) together with their key identifiers. This step confirms the link between the human and the keys. This signature thus requires meeting in real life. If you have not yet met any Debian developers in a public free software conference, you can explicitly seek developers living nearby using the list on the following webpage as a starting point. <ulink type="block" url="https://wiki.debian.org/Keysigning" />
				</para>
				 <para>
					После того, как регистрация на <literal>nm.debian.org</literal> была подтверждена защитником, к кандидату приставляется <emphasis>Менеджер заявлений</emphasis>. Он проведёт процесс через многочисленные требующиеся шаги и проверки.
				</para>
				 <para>
					The first verification is an identity check. If you already have a key signed by two Debian developers, this step is easy; otherwise, the application manager will try and guide you in your search for Debian developers close by to organize a meet-up and a key signing.
				</para>

			</section>
			 <section>
				<title>Принятие принципов</title>
				 <para>
					These administrative formalities are followed by philosophical considerations. The point is to make sure that the candidate understands and accepts the social contract and the principles behind Free Software. Joining Debian is only possible if one shares the values that unite the current developers, as expressed in the founding texts (and summarized in <xref linkend="the-debian-project" />).
				</para>
				 <para>
					In addition, each candidate wishing to join the Debian ranks is expected to know the workings of the project, and how to interact appropriately to solve the problems they will doubtless encounter as time passes. All of this information is generally documented in manuals targeting the new maintainers, and in the Debian developer's reference. An attentive reading of this document should be enough to answer the examiner's questions. If the answers are not satisfactory, the candidate will be informed. They will then have to read (again) the relevant documentation before trying again. In the cases where the existing documentation does not contain the appropriate answer for the question, the candidate can usually reach an answer with some practical experience within Debian, or potentially by discussing with other Debian developers. This mechanism ensures that candidates get involved somewhat in Debian before becoming a full part of it. It is a deliberate policy, by which candidates who eventually join the project are integrated as another piece of an infinitely extensible jigsaw puzzle.
				</para>
				 <indexterm>
					<primary><emphasis>Philosophy &amp; Procedures</emphasis></primary>
				</indexterm>
				 <para>
					This step is usually known as the <emphasis>Philosophy &amp; Procedures</emphasis> (P&amp;P for short) in the lingo of the developers involved in the new member process.
				</para>

			</section>
			 <section>
				<title>Проверка навыков</title>
				 <para>
					Каждое заявление на приём в официальные разработчики Debian должно быть обосновано. Чтобы стать участником проекта, нужно показать, что этот статус легитимен, и что он облегчает работу кандидата в оказании помощи Debian. Наиболее распространённое подтверждение легитимности статуса состоит в том, что статус разработчика Debian облегчает сопровождение пакета Debian, но оно не единственное. Некоторые разработчики присоединяются к проекту для того, чтобы внести свой вклад в перенос на определенную архитектуру, другие же хотят улучшить документацию и так далее.
				</para>
				 <para>
					На этом этапе кандидату предоставляется возможность заявить, что он намерен делать в рамках проекта Debian, и показать, что он уже сделал в этом направлении. Debian — прагматичный проект, и недостаточно просто сказать что-то, если слова расходятся с делом. В общем случае, когда желаемая роль в проекте связана с сопровождением пакета, первая версия будущего пакета должна пройти техническую проверку и быть загружена на серверы Debian спонсором из числа существующих разработчиков Debian.
				</para>
				 <sidebar> <title><emphasis>СООБЩЕСТВО</emphasis> Спонсорство</title>
				 <indexterm>
					<primary>sponsoring</primary>
				</indexterm>
				 <para>
					Разработчики Debian могут «спонсировать» пакеты, подготовленные кем-то ещё, то есть опубликовать их в официальных репозиториях Debian после тщательного разбора. Этот механизм позволяет внешним лицам, которые ещё не прошли через процесс принятия нового участника, время от времени вносить вклад в проект. В то же время это гарантирует, что все пакеты, включённые в Debian, были проверены официальным участником.
				</para>
				 </sidebar> <para>
					В заключение эксперт проверяет технические навыки (пакетирования) кандидата с помощью подробного опросного листа. Неправильные ответы не допускаются, однако срок подачи ответов не ограничен. Вся документация доступна, и допускается несколько попыток, если первые ответы были неудовлетворительными. Этот этап направлен не на дискриминацию, а на проверку наличия хотя бы толики знаний, типичных для новых участников.
				</para>
				 <indexterm>
					<primary><emphasis>Tasks &amp; Skills</emphasis></primary>
				</indexterm>
				 <para>
					This step is known as the <emphasis>Tasks &amp; Skills</emphasis> step (T&amp;S for short) in the examiners' jargon.
				</para>

			</section>
			 <section>
				<title>Окончательное утверждение</title>
				 <para>
					На самом последнем этапе весь процесс рассматривается DAM (<emphasis>Debian Account Manager</emphasis> — менеджером учётных записей Debian). DAM рассматривает всю информацию о кандидате, собранную экзаменатором, и принимает решение, создавать ли учётную запись на серверах Debian. В случаях, когда необходима дополнительная информация, создание учётной записи может быть отложено. Отказы весьма редки, если экзаменатор добросовестно соблюдает процесс, но иногда они случаются. Они никогда не бывают постоянными, и кандидат волен попробовать ещё раз позднее.
				</para>
				 <para>
					The DAM's decision is authoritative and (almost) without appeal, which explains why the people in that seat have often been criticized in the past.
				</para>

			</section>

		</section>

	</section>
</chapter>

