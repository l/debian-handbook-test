<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="apt">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-apt.png" scalefit="1" />
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>apt</keyword>
      <keyword>apt-get</keyword>
      <keyword>apt-cache</keyword>
      <keyword>aptitude</keyword>
      <keyword>synaptic</keyword>
      <keyword>sources.list</keyword>
      <keyword>apt-cdrom</keyword>
    </keywordset>
  </chapterinfo>
  <title>維護與更新：APT 工具</title>
  <highlights>
    <para>Debian 之所以受到系統管理員的歡迎，是因為安裝容易且更新也極為簡單。這個優點歸功於 Falcot 公司管理者熱情研究的 <emphasis>APT</emphasis> 程式。</para>
  </highlights>

  <para><indexterm><primary>APT</primary></indexterm> <indexterm><primary>Advanced Package Tool</primary></indexterm> APT 是 Advanced Package Tool 進階套件工具的縮寫。它的 “進階” 之處在於對套件的管理方法。它並不個別簡單地評估每個套件，而是將套件視為整體，根據現有的和相容的套件組合，產生最佳的套件 (根據其相依性)。</para>

  <sidebar>
    <title><emphasis>術語</emphasis> 套件來源與原始套件</title>

    <para>這個英文字 <emphasis>source</emphasis> 在不同的場合有多種譯法。原始套件 — 由原始碼構成的套件 — 不要和套件來源弄混 — 儲存該等套件的儲存庫 (網站、FTP 伺服器、CD-ROM、在地資料來等)。</para>
  </sidebar>

  <para>需給 APT “套件來源清單”：即 <filename>/etc/apt/sources.list</filename>，列出 Debian 套件的典藏所 (或 “來源”)。APT 將匯入各來源節套件清單。下載 <filename>Packages.xz</filename> 或以不同的壓縮方法 (如 <filename>Packages.gz</filename> 或 <filename>.bz2</filename>) 檔案 (使用執行套件時) 與 <filename>Sources.xz</filename> 或其他 (使用原始套件時) 然後分析其內容，就能完成該作用。已安裝舊版時，APT 可下載其差異更新之 (見專欄 <xref linkend="sidebar.apt-pdiff" />)。</para>
  <indexterm><primary><filename>Packages.xz</filename></primary></indexterm>
  <indexterm><primary><filename>Sources.xz</filename></primary></indexterm>

  <sidebar>
    <title><emphasis>基礎</emphasis> <command>gzip</command>、<command>bzip2</command>、<command>LZMA</command> 與 <command>XZ</command> 壓縮</title>
    <indexterm><primary><command>gzip</command></primary></indexterm>
    <indexterm><primary><command>bzip2</command></primary></indexterm>
    <indexterm><primary><command>lzma</command></primary></indexterm>
    <indexterm><primary><command>xz</command></primary></indexterm>

    <para>延伸檔名 <filename>.gz</filename> 表示該檔案以 <command>gzip</command> 工具壓縮而成。<command>gzip</command> 是最快最有效率的傳統型 Unix 壓縮檔案工具。較新的工具壓縮效率較佳，但耗費較多資源 (電腦時間與金錢) 才能壓縮或解壓縮檔案。依字順為 <command>bzip2</command> (延伸檔名為 <filename>.bz2</filename>)、<command>lzma</command> (延伸檔名為 <filename>.lzma</filename>) 與 <command>xz</command> (延伸檔名為 <filename>.xz</filename>)。</para>
  </sidebar>
  <section id="sect.apt-sources.list">
    <title>寫入 <filename>sources.list</filename> 檔案</title>
    <indexterm><primary><filename>sources.list</filename></primary></indexterm>
    <indexterm><primary>來源</primary><secondary>套件的</secondary></indexterm>
    <indexterm><primary>套件</primary><secondary>的來源</secondary></indexterm>
    <indexterm><primary><filename>/etc/apt/sources.list</filename></primary></indexterm>

    <section>
      <title>語法</title>

      <para><filename>/etc/apt/sources.list</filename> 內的每列就是一個來源，包括三個以空格區隔的部份。</para>

      <para>第一個欄位指示來源類型：</para>
      <itemizedlist>
	<listitem>
	  <para>“<literal>deb</literal>” 表示為執行套件，</para>
	</listitem>
	<listitem>
	  <para>“<literal>deb-src</literal>” 表示來源套件。</para>
	</listitem>
      </itemizedlist>

      <para>第二個欄位是來源的 URL (包括在 <filename>Packages.gz</filename> 內的檔名，必須給全名與有效的 URL)：可以是 Debian 鏡射站或第三方的任何套件檔案。URL 可以使用 <literal>file://</literal> 表示從在地的資料夾內讀取，以 <literal>http://</literal> 表示來自網站的來源，或以 <literal>ftp://</literal> 表示取自 FTP 伺服器的來源。雖然很少發生，但URL 也可以使用 <literal>cdrom:</literal> 表示為 CD-ROM/DVD-ROM/Blu-ray 磁碟式安裝，大部份情況下都是網路安裝。</para>

      <para>最後一個欄位的語法取決於典藏所的結構。最簡單的例子，就是指向來源 (通常以 “<filename>./</filename>” 標示無次資料夾 — 套件就在指定的 URL 內) 的次資料夾 (含結尾的斜線)。比較常見的狀況是，像 Debian 鏡射站的典藏所，每個發行版有自己的元件。在這些情況下，選定發行版 (以 “代碼” 指名 — 見專欄 <xref linkend="sidebar.bruce-perens" /> — 或對應的 “組” — <literal>穩定</literal>、<literal>測試</literal>、<literal>不穩定</literal>)，啟用 (選擇 Debian 鏡射的 <literal>main</literal>、<literal>contrib</literal>、與 <literal>non-free</literal>) 組成元件 (或區)。</para>

      <sidebar id="sidebar.sections">
	<title><emphasis>術語</emphasis><literal>主要</literal>、<literal>奉獻</literal> 與 <literal>不自由</literal> 檔案</title>
	<indexterm><primary>區</primary><secondary><literal>主要</literal></secondary></indexterm>
	<indexterm><primary><literal>主要</literal>，區</primary></indexterm>
	<indexterm><primary>區</primary><secondary><literal>奉獻</literal></secondary></indexterm>
	<indexterm><primary><literal>奉獻</literal>，區</primary></indexterm>
	<indexterm><primary>區</primary><secondary><literal>不自由</literal></secondary></indexterm>
	<indexterm><primary><literal>不自由</literal>，區</primary></indexterm>
	<indexterm><primary>元件 (典藏所)</primary></indexterm>

	<para>根據著者選定的授權，Debian 以三個區列出其套件。<literal>主要</literal> 的套件完全符合 Debian 自由軟體指導方針的規定。</para>

	<para><literal>不自由</literal> 檔案的授權不 (完全) 符合前述方針的要求，但可以無限制地散布。雖然不是 Debian 官方認可的，但使用者仍有需要 — Debian 仍建議使用自由軟體。美國自由軟體基金會創始人理查·斯托曼對此耿耿於懷，所以不推薦 Debian。</para>

	<para><literal>奉獻</literal> 是需要不自由元件才能運作的自由軟體。這些元件可能來自 <literal>不自由</literal> 區塊，或遊戲 ROMs、控制台的 BIOS 等的不自由檔案。<literal>奉獻</literal> 也包括編譯時需要專屬元件的自由軟體。此等軟體源自於需用到專屬 Java 環境的 OpenOffice.org 套件。</para>
      </sidebar>

      <sidebar>
	<title><emphasis>秘訣</emphasis> <filename>/etc/apt/sources.list.d/*.list</filename> 檔案</title>

	<para>確認套件來源後，可以把它拆成多個檔案。每個部份都存在 <filename>/etc/apt/sources.list.d/<replaceable>檔名</replaceable>.list</filename> (見專欄 <xref linkend="sidebar.directory.d" />) 內。</para>
      </sidebar>

      <indexterm><primary><command>apt-cdrom</command></primary></indexterm>
      <para><literal>cdrom</literal> 條目表示您有此 CD/DVD-ROMs。相對於其他條目，CD-ROM 並非經常存在，一次祗能塞入一張。基於這個理由，以不同的方式管理此來源，需用到 <command>apt-cdrom</command> 程式，及 <literal>add</literal> 參數。要求將光碟插入光碟機，並找尋 <filename>套件</filename> 檔案。以此等檔案更新可用套件的資料庫 (通常以 <command>apt update</command> 命令完成它)。然後，APT 才能要求插入包括其套件的光碟。</para>

    </section>
    <section>
      <title><emphasis role="distribution">穩定版</emphasis> 使用者的典藏庫</title>
      
      <para>以下是標準的 <filename>sources.list</filename> 供系統執行 <emphasis role="distribution">穩定</emphasis> 版 Debian：</para>

      
      <example id="example.stable-sources-list">
	<title>供 Debian 穩定版使用者的 <filename>/etc/apt/sources.list</filename></title>

	<programlisting># Security updates
deb http://security.debian.org/ jessie/updates main contrib non-free
deb-src http://security.debian.org/ jessie/updates main contrib non-free

## Debian mirror

# Base repository
deb http://ftp.debian.org/debian jessie main contrib non-free
deb-src http://ftp.debian.org/debian jessie main contrib non-free

# Stable updates
deb http://ftp.debian.org/debian jessie-updates main contrib non-free
deb-src http://ftp.debian.org/debian jessie-updates main contrib non-free

# Stable backports
deb http://ftp.debian.org/debian jessie-backports main contrib non-free
deb-src http://ftp.debian.org/debian jessie-backports main contrib non-free</programlisting>
      </example>

      <para>此檔案列出與 <emphasis role="distribution">Jessie</emphasis> 版 Debian (撰寫此文時最新的 <emphasis role="distribution">穩定</emphasis> 版) 有關的套件來源。我們選擇 “jessie” 之名而不是對應的 “穩定“ 別稱 (<literal>穩定</literal>、<literal>穩定更新</literal>、<literal>穩定-反向</literal>)，因為下個穩定版釋出時，不要讓他們不受控制。</para>

      <para>大部份套件來自包括極少更新的所有套件 “基礎典藏庫” (每兩個月有一次的 “釋出點”)。其他的典藏庫不夠完整 (未包括所有的套件)，不過可以透過 APT 更新其主套件 (含新版的套件)。接下來的內容將解釋管理這些典藏庫的目的和規範。</para>

      <para>請注意，指定版本的套件可能同時存在多個典藏庫，將取用列在 <filename>sources.list</filename> 檔案前面的典藏庫。所以，非官方的來源多半放在此檔案的最後面。</para>

      <para>補充說明，本節有關 <emphasis role="distribution">穩定版</emphasis> 的內容同樣適用於 <emphasis role="distribution">舊穩定版</emphasis>，因為後者祗是較舊的 <emphasis role="distribution">穩定版</emphasis>，仍然同步維護中。</para>

      <section id="sect.security-updates">
        <title>安全更新</title>
	<indexterm><primary><literal>security.debian.org</literal></primary></indexterm>
	<indexterm><primary>安全更新</primary></indexterm>
	<indexterm><primary>更新</primary><secondary>安全更新</secondary></indexterm>

	<para>安全更新的內容通常不在 Debian 鏡射站內，而在 <literal>security.debian.org</literal> (在 <link linkend="dsa-team">Debian 系統管理者</link> 維護的小機器內)。包括給 <emphasis role="distribution">穩定版</emphasis> 使用的安全更新檔案 (由 Debian 安全團隊與套件管理者共同準備)。</para>

	<para>此伺服器同時提供給 <emphasis role="distribution">測試版</emphasis> 用的安全更新但不常發生，因為該等給 <emphasis role="distribution">測試版</emphasis> 的更新傾向經由 <emphasis role="distribution">不穩定版</emphasis> 的更新流程處理。</para>
      </section>

      <section id="sect.stable-updates">
        <title>穩定更新</title>
	<indexterm><primary>穩定更新</primary></indexterm>
	<indexterm><primary><literal>穩定更新</literal></primary></indexterm>
	<indexterm><primary>更新</primary><secondary>穩定更新</secondary></indexterm>

	<para>穩定更新與安全無關，但認為在下個穩定釋出點前值得使用者更新它。</para>

	<para>此典藏庫包括已修正的嚴重錯誤檔案，這些嚴重錯誤可能是在釋出前無法修正或在後續更新後才出現的。視其急迫性，也可以納入必須更新的套件… 諸如 <emphasis role="pkg">spamassassin</emphasis> 的垃圾郵件偵測規則、<emphasis role="pkg">clamav</emphasis> 的病毒資料庫、或全球日光節約時間規則 (<emphasis role="pkg">tzdata</emphasis>)。</para>

	<para>實務上，此典藏庫是由穩定版釋出經理挑選的 <literal>建議更新</literal> 典藏庫的子集合。</para>
      </section>

      <section id="sect.proposed-updates">
        <title>建議更新</title>
        <indexterm><primary><literal>建議更新</literal></primary></indexterm>
        <indexterm><primary><literal>穩定版建議更新</literal></primary></indexterm>

	<para>出版之後，<emphasis role="distribution">穩定</emphasis> 發行版是唯一固定 2 個月更新的版本。<literal>建議的更新</literal> 典藏庫是儲放更新資料的地方 (由穩定版釋出經理管轄)。</para>

	<para>此典藏所包括前一節的安全與穩定更新文件，以及其他的文件，因為套件維護者也需修護不需立即釋出的重要錯誤。</para>
	
	<para>正式出版之前，每個人都可使用此典藏庫測試該等更新。以 <literal>jessie-proposed-updates</literal> 取用更明確與一致的資料，因為 <literal>wheezy-proposed-updates</literal> 也擁有相同的容 (供 <emphasis role="distribution">Oldstable</emphasis> 更新使用)：</para>

        <programlisting>deb http://ftp.debian.org/debian jessie-proposed-updates main contrib non-free</programlisting>
      </section>

      <section id="sect.backports">
        <title>穩定回移</title>
        <indexterm><primary><literal>穩定回移</literal></primary></indexterm>
        <indexterm><primary>回移</primary></indexterm>
	<indexterm><primary>更新</primary><secondary>回移</secondary></indexterm>

	<para><literal>穩定回移</literal> 典藏庫儲存 “回移的套件”。係指重新編譯供舊發行版使用的套件，通常係供 <emphasis role="distribution">h穩定版</emphasis> 使用。</para>

	<para>發行版有點過時後，很多軟體計畫就釋出無法與 <emphasis role="distribution">穩定版</emphasis> (祗修訂最嚴重的問題，諸如安全問題) 整合的新版軟體。因為 <emphasis role="distribution">測試版</emphasis> 與 <emphasis role="distribution">不穩定版</emphasis> 太危險了，套件維護者祗好重新編譯新版的軟體供 <emphasis role="distribution">穩定版</emphasis> 使用，把可能的不穩定限制在少數指定的套件。<ulink type="block" url="http://backports.debian.org" /></para>

	
	<para>大部份的 Debian 鏡射站有 <literal>穩定回移</literal> 典藏庫。但 <emphasis role="distribution">Squeeze</emphasis> 的回移仍典藏藏在指定的伺服器 (<literal>backports.debian.org</literal>)，且要求使用 <filename>sources.list</filename> 的條目才能取用：</para>

        <indexterm><primary><literal>backports.debian.org</literal></primary></indexterm>
        <programlisting>deb http://backports.debian.org/debian-backports squeeze-backports main contrib non-free</programlisting>

	<para>來自 <literal>穩定回移</literal> 的回移總是取材自 <emphasis role="distribution">測試版</emphasis> 的套件。才能確保所有安裝的回移可順利地升級至下個 Debian 穩定版。</para>

	<para>即使此典藏庫提供較新版的套件，APT 不會安裝他們，除非管理者明確指示這麼做 (或已經從指定的回移安裝稍早的版本)：</para>

	<screen><computeroutput>$ </computeroutput><userinput>sudo apt-get install <replaceable>套件</replaceable>/jessie-backports
</userinput><computeroutput>$ </computeroutput><userinput>sudo apt-get install -t jessie-backports <replaceable>套件</replaceable>
</userinput></screen>

      </section>
    </section>

    <section>
      <title>供 <emphasis role="distribution">測試版</emphasis>/<emphasis role="distribution">不穩定版</emphasis> 使用者的典藏庫</title>

      <para>這裡是標準的 <filename>sources.list</filename> 供執行 Debian <emphasis role="distribution">測試版</emphasis> 或 <emphasis role="distribution">不穩定版</emphasis> 之用：</para>

      <example id="example.testing-sources-list">
	<title><filename>/etc/apt/sources.list</filename> 檔案供 Debian <emphasis role="distribution">測試版</emphasis>/<emphasis role="distribution">不穩定版</emphasis> 使用者</title>

	<programlisting>
# Unstable
deb http://ftp.debian.org/debian unstable main contrib non-free
deb-src http://ftp.debian.org/debian unstable main contrib non-free

# Testing
deb http://ftp.debian.org/debian testing main contrib non-free
deb-src http://ftp.debian.org/debian testing main contrib non-free

# Stable
deb http://ftp.debian.org/debian stable main contrib non-free
deb-src http://ftp.debian.org/debian stable main contrib non-free

# Security updates
deb http://security.debian.org/ stable/updates main contrib non-free
deb http://security.debian.org/ testing/updates main contrib non-free
deb-src http://security.debian.org/ stable/updates main contrib non-free
deb-src http://security.debian.org/ testing/updates main contrib non-free</programlisting>
      </example>

      <para>APT 利用 <filename>sources.list</filename> 檔案安裝來自 <emphasis role="distribution">不穩定版</emphasis> 的套件。若非必要，則使用 <literal>APT::Default-Release</literal> 設定 (見 <xref linkend="sect.apt-upgrade" />) 指示 APT 從另個版本 (多半使用 <emphasis role="distribution">測試版</emphasis>) 選取套件。</para>

      <para>應該納入這些典藏庫，即使一個也該這麼做。<emphasis role="distribution">測試版</emphasis> 使用者將感謝管理者從 <emphasis role="distribution">不穩定版</emphasis> 中挑選修改過的套件，當 <emphasis role="distribution">測試版</emphasis> 受到錯誤的干擾時。反過來說，被無預期錯誤干擾的 <emphasis role="distribution">不穩定版</emphasis> 使用者，可能降級至他們 (若以此工作) 使用的 <emphasis role="distribution">測試版</emphasis> 套件。</para>

      <para><emphasis role="distribution">穩定版</emphasis> 的內容較有爭議，但可接觸被發展版移除的套件。同時也確保取得尚未被修改的最新套件。</para>

      <section>
        <title><emphasis role="distribution">實驗性</emphasis> 典藏所</title>
        <indexterm><primary><emphasis role="distribution">實驗性</emphasis></primary></indexterm>

	<para><emphasis role="distribution">實驗性</emphasis> 典藏所的套件是所有 Debian 鏡射站的內容，包括因為品質關係尚未被納入 <emphasis role="distribution">不穩定版</emphasis> 的套件 — 通常是發展中的軟體版本或前置版 (alpha、beta、待釋出…)。修改過的套件多少有點問題，可送至此處。在進階使用者的協助下，維護者努力找出該等問題。經過第一階段後，把套件移至 <emphasis role="distribution">不穩定版</emphasis>，更多的使用者以更詳細的方式測試它。</para>

	<para>不在乎系統崩盤並有能力自行修復的使用者，就會取用 <emphasis role="distribution">實驗性</emphasis> 的套件。使用者匯入此等套件並測試其功能、檢查是否滿足其需求。這就是 Debian 的訴求，加入 APT 的 <filename>sources.list</filename> 內，並不表示該套件可順利使用，應加入這一個行：</para>
        <informalexample>
          <programlisting>deb http://ftp.debian.org/debian experimental main contrib non-free</programlisting>
        </informalexample>
      </section>
    </section>

    <section>
      <title>非官方資源：<literal>mentors.debian.net</literal></title>
      <indexterm><primary><literal>mentors.debian.net</literal></primary></indexterm>

      <para>有些進階使用者自行編譯軟體建置非官方的 Debian 套件來源庫 (Ubuntu 以 Personal Package Archive 服務建置)，這些程式設計師把自己的心血公開，有些 Debian 發展者也提供自已的預釋出版。</para>

      <para><literal>mentors.debian.net</literal> 網站很有趣 (雖然它祗提供原始套件)，因為它它的套件係供 Debian 官方發展者檢視或由志願者提供未經整合程序的套件。這些不保證品質的套件，允許並鼓勵使用者在正式使用之前，檢查並測試之。</para>

      <sidebar>
        <title><emphasis>社群</emphasis><literal>debian.net</literal> 網站</title>
        <indexterm><primary><emphasis>debian.net</emphasis></primary></indexterm>

	<para><emphasis>debian.net</emphasis> 網址不是 Debian 計畫的官方資源。每個 Debian 發展者都可使用此網址。這些網站可能包括非官方的服務 (有時是個人網站) 位於不屬於計畫的機器上，且由 Debian 發展者建拉，或將移至 <emphasis>debian.org</emphasis> 的原型。這些原型留在 <emphasis>debian.net</emphasis> 的原因有二：沒有人發願把它轉移成為官方服務 (置於 <emphasis>debian.org</emphasis> 網址，並保證後續的維護)，或太具爭論性。</para>
      </sidebar>

      <para>安裝套件就是把根權限給其創造者，因為他們決定執行該等腳本的內容。Debian 官方的套件由志願者建立，並封閉套件以確保其完整。</para>

      <para>一般來說，對來源不明且不在 Debian 官方服器的套件應小心：評估您對建立者的信任程度，並檢查套件的完整性。<ulink type="block" url="http://mentors.debian.net/" /></para>

      <sidebar id="sidebar.snapshot.debian.org">
        <title><emphasis>進階</emphasis> 舊套件版本：<literal>snapshot.debian.org</literal></title>
        <indexterm><primary><literal>snapshot.debian.org</literal></primary></indexterm>

	<para><literal>snapshot.debian.org</literal> 服務始於 2010 年 4 月，可以 “及時向後” 並找到該套件的舊版。它能做為辨識引入回歸的套件，並且具體地回到前個版本並等待修復回歸。</para>
      </sidebar>
    </section>
    <section>
      <title>Debian 套件快取代理</title>
      <indexterm><primary>代理伺服器快取</primary></indexterm>
      <indexterm><primary>快取，代理伺服器</primary></indexterm>

      <para>當機器的整個網路都組態成使用同個遠端伺服器下載同個更新套件，管理者就知道中介性質的代理做為在地網路的快取，是最有益的。(見專欄 <xref linkend="sidebar.cache" />)。</para>

      <para>可以用 "標準" 代理組態 APT (見 <xref linkend="sect.apt-config" /> 給 APT 使用，把 <xref linkend="sect.http-ftp-proxy" /> 給代理端)，但 Debian 的生態系統以更好的選擇解決此問題。本區列出的專用軟體比純快取更聰明，因為他們使用特定構架的 APT 典藏所 (例如他們知道檔案是否已過時，且在持有時調整其內容)。</para>

      <indexterm><primary><emphasis role="pkg">apt-cacher</emphasis></primary></indexterm>
      <indexterm><primary><emphasis role="pkg">apt-cacher-ng</emphasis></primary></indexterm>
      <para><emphasis role="pkg">apt-cacher</emphasis> 與 <emphasis role="pkg">apt-cacher-ng</emphasis> 就像一般快取伺服器般運作。APT 的 <filename>sources.list</filename> 不變，但 APT 組態成像是快取。</para>
      
      <indexterm><primary><emphasis role="pkg">approx</emphasis></primary></indexterm>
      <para>換句話說，<emphasis role="pkg">approx</emphasis> 就像是 “鏡射” 至高層 URL 的遠端 HTTP 伺服器典藏所。高層典藏所與遠端 URL 典藏所是儲存在 <filename>/etc/approx/approx.conf</filename>：</para>

      <programlisting>
# &lt;name&gt; &lt;repository-base-url&gt;
debian   http://ftp.debian.org/debian
security http://security.debian.org</programlisting>

      <para><emphasis role="pkg">approx</emphasis> 預設經由 inetd (見 <xref linkend="sect.inetd" />) 在埠號 9999 執行，並且要求使用者調整其 <filename>sources.list</filename> 檔案指向 approx 伺服器：</para>

      <programlisting># Sample sources.list pointing to a local approx server
deb http://apt.falcot.com:9999/security jessie/updates main contrib non-free
deb http://apt.falcot.com:9999/debian jessie main contrib non-free
      </programlisting>
    </section>

  </section>
  <section id="sect.apt-get">
    <title><command>aptitude</command>、<command>apt-get</command>、與 <command>apt</command> 命令</title>
    <indexterm><primary><command>apt</command></primary></indexterm>
    <indexterm><primary><command>apt-get</command></primary></indexterm>
    <indexterm><primary><command>aptitude</command></primary></indexterm>

    <para>APT 是個原先有圖形介面的大計畫。以包括核心應用程式的程式庫為基礎，且包括第一個前端 — 命令列指令 —  <command>apt-get</command>。<command>apt</command> 是 APT 的第二個命令列指令包括若干處理錯誤的 <command>apt-get</command>。</para>

    <para>還有很多圖形介面的延伸計襩：<command>synaptic</command>、<command>aptitude</command> (包括文字介面與圖形介面 — 即使尚未完成)、<command>wajig</command>等。最被推薦的介面 <command>apt</command> 是本節的範例。然而要注意 <command>apt-get</command> 與 <command>aptitude</command> 的命令列語法極為類似。<command>apt</command>、<command>apt-get</command> 與 <command>aptitude</command> 還是有區別的，將詳述於下。</para>
    <section>
      <title>初始化</title>

      
      <para>APT 可用的套件清單可經由 <command>apt update</command> 更新。連線速度還不錯的話，祗需要幾秒鐘下載若干<filename>套件</filename>/<filename>來源</filename>/<filename>Translation-<replaceable>語系代碼</replaceable></filename> 檔案，隨著 Debian 的發展愈來愈大 (在 <literal>main</literal> 區塊至少有 10 MB 的資料)。當然，從 CD-ROM 安裝則不需要任何的下載 — 在此情況下，運作速度極快。</para>
      <indexterm><primary><command>apt update</command></primary></indexterm>
      <indexterm><primary><command>apt-get update</command></primary></indexterm>
      <indexterm><primary><command>aptitude update</command></primary></indexterm>
    </section>
    <section>
      <title>安裝與移除</title>
      <indexterm><primary>套件</primary><secondary>安裝</secondary></indexterm>
      <indexterm><primary>套件</primary><secondary>移除</secondary></indexterm>
      <indexterm><primary>安裝</primary><secondary>套件安裝</secondary></indexterm>
      <indexterm><primary>移除套件</primary></indexterm>

      <para>有了 APT，以指令 <command>apt install <replaceable>套件</replaceable></command> 與 <command>apt remove <replaceable>套件</replaceable></command>，就可以從系統新增或移除套件。以前述的指令，APT 將自動安裝必要的相依性或移除不需要的套件。<command>apt purge <replaceable>套件</replaceable></command> 指令可以完全移除套件 — 同時刪除組態檔。</para>
      <indexterm><primary><command>apt install</command></primary></indexterm>
      <indexterm><primary><command>apt remove</command></primary></indexterm>
      <indexterm><primary><command>apt purge</command></primary></indexterm>
      <indexterm><primary><command>apt-get install</command></primary></indexterm>
      <indexterm><primary><command>apt-get remove</command></primary></indexterm>
      <indexterm><primary><command>apt-get purge</command></primary></indexterm>
      <indexterm><primary><command>aptitude install</command></primary></indexterm>
      <indexterm><primary><command>aptitude remove</command></primary></indexterm>
      <indexterm><primary><command>aptitude purge</command></primary></indexterm>

      <sidebar>
        <title><emphasis>秘訣</emphasis> 同個套件安裝多次</title>

	<para>在多部電腦安系統性地安裝相同的套件。此工作還很簡單。</para>

	<para>首先，取得電腦內安裝套件的清單做為複製的 “模板”。</para>

        <screen><computeroutput>$ </computeroutput><userinput>dpkg --get-selections &gt;pkg-list</userinput></screen>

	<para><filename>pkg-list</filename> 檔案內容是已安裝套件的清單。然後，用以下的指令把 <filename>pkg-list</filename> 檔案複製在欲更新的電腦：</para>

        <screen>## 更新 dpkg 已知套件的資料
#<userinput>avail=`mktemp`</userinput>
# <userinput>apt-cache dumpavail &gt; "$avail"</userinput>
# <userinput>dpkg --merge-avail "$avail"</userinput>
# <userinput>rm -f "$avail"</userinput>
## 更新 dpkg 的選擇
# <userinput>dpkg --set-selections &lt; pkg-list</userinput>
## 要求 apt-get 安裝指定的套件
# <userinput>apt-get dselect-upgrade</userinput></screen>

	<para>第一個命令記錄 dpkg 資料庫內可用的套件清單，然後 <command>dpkg --set-selections</command> 指令恢復想要安裝的套件清單，再執行 <command>apt-get</command> 必要的操作！<command>aptitude</command> 沒有這樣的命令。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>秘訣</emphasis> 同時移除與安裝</title>

        <para>在命令 <command>apt</command> (或 <command>apt-get</command>、或 <command>aptitude</command>) 加入後綴就可以同時安裝指定的套件與移除其他套件。在 <command>apt install</command> 命令加入 “<literal>-</literal>” 及希望移除的套件名稱。在 <command>apt remove</command> 命令加入 “<literal>+</literal>” 及希望安裝的套件名稱。</para>

	<para>以下顯示安裝 <replaceable>套件1</replaceable> 與移除 <replaceable>套件2</replaceable> 的例子。</para>

        <screen># <userinput>apt install <replaceable>套件1</replaceable> <replaceable>套件2-</replaceable></userinput>
[...]
# <userinput>apt remove <replaceable>套件1+</replaceable> <replaceable>套件2</replaceable></userinput>
[...]</screen>

	<para>也可刪除預設安裝的套件，例如因為 <literal>Recommends</literal>。一般來說，相依性檢查時將使用建議的資訊尋求其他的解決方案。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>秘訣</emphasis> <command>apt --reinstall</command> 與 <command>aptitude reinstall</command></title>
        <indexterm><primary>重新安裝</primary></indexterm>

	<para>移除或修改套件內的檔案後，此系統可能受損。最簡易的修復方法是重新安裝受損的套件。不幸的是，套件管理系統拒絕安裝已經安裝的套件；可使用 <literal>--reinstall</literal> 選項於 <command>apt</command> 與 <command>apt-get</command> 命令中就能再安裝。即使已有仍可使用以下的指命令 <emphasis role="pkg">postfix</emphasis> 再安裝：</para>

        <screen><computeroutput># </computeroutput><userinput>apt --reinstall install postfix</userinput></screen>

	<para><command>aptitude</command> 命令列有點不同，但其結果與 <command>aptitude reinstall postfix</command> 命令相同。</para>

	<para>在 <command>dpkg</command> 裡沒有這個問題，但管理者很少用它。</para>

	<para>小心！使用 <command>apt --reinstall</command> 修復被攻擊的套件不會恢復系統原來的樣子。<xref linkend="sect.dealing-with-compromised-machine" /> 詳述恢復的必要步驟。</para>
      </sidebar>

      <para>若在 <filename>sources.list</filename> 內論及多個發行版，可以在套件內分給不同的版本。可以用 <command>apt install <replaceable>套件</replaceable>=<replaceable>版本</replaceable></command> 指定套件的版本，但需指出原始的 (<emphasis role="distribution">穩定版</emphasis>、<emphasis role="distribution">測試版</emphasis> 或 <emphasis role="distribution">不穩定版</emphasis>) — 與 <command>apt install <replaceable>套件</replaceable>/<replaceable>發行版</replaceable></command> — 等偏好的部份。在此命令下，祗要舊版本仍列在 <filename>sources.list</filename> 之內，就可以回到套件的舊版本 (若您知道該版本較佳). 否則可以用 <literal>snapshot.debian.org</literal> 拯救它 (見專欄 <xref linkend="sidebar.snapshot.debian.org" />)。</para>

      <example>
        <title>安裝 <emphasis role="distribution">不穩定unstable</emphasis> 版的 <emphasis role="pkg">spamassassin</emphasis></title>

        <screen><computeroutput># </computeroutput><userinput>apt install spamassassin/unstable</userinput></screen>
      </example>

      <sidebar>
        <title><emphasis>下一步</emphasis> 快取 <filename>.deb</filename> 檔</title>

	<para>APT 把每個下載的 <filename>.deb</filename> 檔案在資料夾 <filename>/var/cache/apt/archives/</filename> 內放個複本。經常升級時，每個套件在此資料夾內佔有極多的空間；應經常整理它們。可以使用以下的兩個命令：<command>apt-get clean</command> 清空整個資料夾；<command>apt-get autoclean</command> 祗清除不再下載的套件 (因為已不再存放於 Debian 鏡射站) 以及清除無用的 (組態參數 <literal>APT::Clean-Installed</literal> 可防止移除正在使用的 <filename>.deb</filename> 檔案)。<command>apt</command> 命令不支援前述的命令。</para>
      </sidebar>
    </section>

    <section id="sect.apt-upgrade">
      <title>系統升級</title>
      <indexterm><primary>升級</primary><secondary>系統升級</secondary></indexterm>

      <indexterm><primary><command>apt upgrade</command></primary></indexterm>
      <indexterm><primary><command>apt-get upgrade</command></primary></indexterm>
      <indexterm><primary><command>aptitude safe-upgrade</command></primary></indexterm>
      <para>建議使用正常的升級，因為包括最新的安全升級。升級的指令，有 <command>apt upgrade</command>、<command>apt-get upgrade</command> 或 <command>aptitude safe-upgrade</command> (當然是跟著 <command>apt update</command> 之後)。在不移除任何套件的情況下，此命令搜尋已安裝套件中可以升級的部份。換句話說，其目標是做到侵入性最小的升級。<command>apt-get</command> 比 <command>aptitude</command> 或 <command>apt</command> 有更多的需求，因為拒絕安裝不曾安裝過的套件。</para>

      <sidebar id="sidebar.apt-pdiff">
        <title><emphasis>秘訣</emphasis> 增量式升級</title>

	
	<para>如前所述，<command>apt update</command> 命令係用於下載對應於 <filename>套件</filename> (或 <filename>原始碼</filename>) 檔案之用。然而，即使經過 <command>bzip2</command> 壓縮，這些檔案還是很大 (<filename>Packages.xz</filename> 位於 <foreignphrase>main</foreignphrase> 區內的 <emphasis role="distribution">Jessie</emphasis> 大於 6 MB)。若您希望定期升級，這些下載可要費相當時間。</para>

	<para>為了加快處理速度，APT 可以下載祗有變動內容的 “diff” 檔案，而不是整個檔案。官方的 Debian 鏡射網站發行此等檔案列出 <filename>Packages</filename> 檔案及其後續版本的不同處。每次升級與每週升級分別都有對應的檔案。每個供 <emphasis role="distribution">不穩定版</emphasis> 的 “diff” 檔案祗有幾十 KB 大小，所以每週使用 <command>apt update</command> 命令需要下載的資料不會太大。<emphasis role="distribution">穩定版</emphasis> 與 <emphasis role="distribution">測試版</emphasis> 的分行版，祗有極小的改變。</para>

	<para>然而，有的時候仍需要下載整個 <filename>套件</filename> 檔案，尤其是上回升級是很久以前的事且不適合增量式升級。若網路速度極快但機器的處理器性能不足以應付升級，下載省下的時間還不足以彌補電腦計算新版版的時間 (從舊版開始逐一地升級)。在這種情況下，可以使用組態參數 <literal>Acquire::Pdiffs</literal> 並設定為 <literal>false</literal>。</para>
      </sidebar>

      <para><command>apt</command> 會選擇最新的版本號 (除了來自 <emphasis role="distribution">實驗版</emphasis> 與 <emphasis role="distribution">穩定反向植入版</emphasis>，其預設忽略版本號)。若指定 <emphasis role="distribution">測試版</emphasis> 或 <emphasis role="distribution">不穩定版</emphasis> 於 <filename>sources.list</filename> 內，則 <command>apt upgrade</command> 會把 <emphasis role="distribution">穩定版</emphasis> 系統切換至 <emphasis role="distribution">測試版</emphasis> 或 <emphasis role="distribution">不穩定版</emphasis>，這些都不是您要的。</para>

      <para>搜尋升級的套件時需把特定的發行版告知 <command>apt</command>，採用 <literal>-t</literal> 或 <literal>--target-release</literal> 選項，然後是發行版的名稱 (如：<command>apt -t stable upgrade</command>)。為了避免每次使用 <command>apt</command> 都需指定版本，可以把, you can add <literal>APT::Default-Release "stable";</literal> 加在 <filename>/etc/apt/apt.conf.d/local</filename> 之內。</para>

      <indexterm><primary><command>apt full-upgrade</command></primary></indexterm>
      <indexterm><primary><command>apt dist-upgrade</command></primary></indexterm>
      <indexterm><primary><command>apt-get dist-upgrade</command></primary></indexterm>
      <indexterm><primary><command>aptitude dist-upgrade</command></primary></indexterm>
      <indexterm><primary><command>aptitude full-upgrade</command></primary></indexterm>

      <para>重要的升級，諸如 Debian 的主要版本升級，需使用 <command>apt full-upgrade</command>。在此指令內， 即使刪除若干老舊的套件或安裝新的相依性也會把 <command>apt</command> 完全升級。也是每日於T Debian <emphasis role="distribution">不穩定版</emphasis> 使用的命令以及逐日追蹤其變動。它的運作極簡單不需說明：APT 的名聲來自其功能性。</para>

      <para>不同於 <command>apt</command> 與 <command>aptitude</command>，<command>apt-get</command> 不知道 <command>full-upgrade</command> 命令。反而，您應使用 <command>apt-get dist-upgrade</command> (”升級發行版”)，此古老且知名的命令也被 <command>apt</command> 與 <command>aptitude</command> 接受給讀者相當的便利。</para>
    </section>

    <section id="sect.apt-config">
      <title>組態選項</title>
      <indexterm><primary>APT</primary><secondary>組態</secondary></indexterm>
      <indexterm><primary><filename>apt.conf.d/</filename></primary></indexterm>
      <indexterm><primary><filename>/etc/apt/apt.conf.d/</filename></primary></indexterm>

      <para>除了已提及的組態細目，還可在 <filename>/etc/apt/apt.conf.d/</filename> 資料夾內增加 APT 的其他組態。讓 APT 告知 <command>dpkg</command> 忽略由 <literal>DPkg::options { "--force-overwrite"; }</literal> 引發的錯誤。</para>

      <para>若祗能經由代理伺服器近用網頁，新增像這樣的一列 <literal>Acquire::http::proxy "http://<replaceable>yourproxy</replaceable>:3128"</literal>。對 FTP 代理伺服器，用 <literal>Acquire::ftp::proxy "ftp://<replaceable>yourproxy</replaceable>"</literal>。更多的組態選項，參考 <citerefentry><refentrytitle>apt.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry> 手冊頁以 <command>man apt.conf</command> 命令 (手刪的詳情，見 <xref linkend="sect.manual-pages" />) 查看。</para>

      <sidebar id="sidebar.directory.d">
        <title><emphasis>基本</emphasis> 結尾是 <filename>.d</filename> 的資料夾名稱</title>
        <indexterm><primary><filename>.d</filename></primary></indexterm>

	<para>結尾是 <filename>.d</filename> 資料使用機會愈來愈多。每個資料夾內的組態檔係供多個檔案使用。所以，在 <filename>/etc/apt/apt.conf.d/</filename> 內的檔案都是供 APT 組態之用。APT 以字順方式納入他們，最後一個檔案可以修正在前的組態。</para>

	<para>此結構對機器的管理者與套件維護帶來若干彈性。確實，管理者容易修改軟體的組態，祗需在有問題的資料夾新增檔案而不必變動既有的檔案。需要調整另個軟體的組態，以確保與既有軟體相依，套件維護者以同樣的方法就能達成。Debian 的政策禁止修改其他套件的組態檔 — 祗有被授權者才能修改。套件升級時，使用者應保留選擇組態檔版本的權力。外部修改此檔案時將啟動該選項，管理者就知道是外來的修改。</para>

	<para>沒有 <filename>.d</filename> 資料夾時，外部套件就不能在沒有修改組態檔的前提下修改程式設定。所以，必須邀請使用者選擇修改方式，並列出在檔案 <filename>/usr/share/doc/<replaceable>package</replaceable>/README.Debian</filename> 內的選項。</para>

	<para>視應用程式的需要，可直接使用或由外部腳本管理 <filename>.d</filename> 資料夾，將所有檔案串聯成一個組態檔。更動資料夾內容後，必須再執行腳本，才能納入該等變動。還有一件重要的事，千萬不要直接執行自動生成的組態檔，因為下次執行腳本後將失去所有的東西。受到環境的限制才被迫選擇指定的方法 (直接使用 <filename>.d</filename> 資料夾或由該資料夾產生的檔案)，不論何種方法，組態的彈性收益遠大於其帶來的複雜性。Exim 4 郵件伺服器是產生檔案方法的範例之一：可用多個檔案 (<filename>/etc/exim4/conf.d/*</filename>) 組態串聯成 <filename>/var/lib/exim4/config.autogenerated</filename> 再由 <command>update-exim4.conf</command> 命令執行。</para>
      </sidebar>
    </section>
    <section id="sect.apt.priorities">
      <title>管理套件優先性</title>

      <para>組態 APT 最重要的層面之一是管理每個套件來源的優先性。例如，從 <emphasis role="distribution">測試版</emphasis>、<emphasis role="distribution">不穩定</emphasis> 或 <emphasis role="distribution">實驗版</emphasis> 中選取一個或多個套件。可以指令每個套件的優先性 (視其版本或發行版，同個套件可以有多個優先性)。這些優先性將影響 APT 的行為：每個套件總是選擇最優先的版本 (除非舊於已安裝的版本或優先性小於 1000)。</para>
      <indexterm><primary>APT</primary><secondary><foreignphrase>pinning</foreignphrase></secondary></indexterm>
      <indexterm><primary>pinning, APT pinning</primary></indexterm>
      <indexterm><primary>套件</primary><secondary>優先性</secondary></indexterm>
      <indexterm><primary>優先性</primary><secondary>套件優先性</secondary></indexterm>
      <indexterm><primary>APT</primary><secondary>偏好</secondary></indexterm>
      <indexterm><primary><filename>偏好</filename></primary></indexterm>
      <indexterm><primary><filename>/etc/apt/preferences</filename></primary></indexterm>

      <para>APT 設定若干預設的優先性。已安裝套件版本的優先性是 100。未安裝版本預設優先性為 500，若是另個釋出的目標則可跳至 990 (以 <literal>-t</literal> 命令列選項或 <literal>APT::Default-Release</literal> 組態指令調整)。</para>

      <para>於 <filename>/etc/apt/preferences</filename> 檔案內新增款目的方式，指名受影響套件名稱、版本、出處及其新的優先性。</para>

      <para>APT 永遠不會安裝舊版的套件 (就是套件的版本編號小於已安裝的套件)，除非其優先性高於 1000。APT 總是安裝優先性最高的套件。若兩個套件的優先性相同，APT 安裝最新的 (其版本編號較高)。若同版本的兩個套件優先性相同但內容不同，APT 安裝還沒有安裝的版本 (包括沒有遞增修訂編號的套件，通常是需要的)。</para>

      <para>更具體地說，永遠不會安裝優先性小於 0 的套件。沒有安裝其他版本時，將安裝優先性在 0 與 100 之間的套件。其他發行版沒有更新版本或可用的版本時，安裝優先性在 100 與 500 之間的套件。在目標發行版內沒有更新的版本時，安裝優先性在 501 與 990 之間的套件。已安裝的版本不是更新時，安裝優先性在 990 與 1000 之間的套件。即使使強迫 APT 降級也要安裝優先性高於greater than 1000 的套件。</para>

      <para>APT 檢查 <filename>/etc/apt/preferences</filename> 時，首先考量最精確的款目 (通常是指定的套件)，然後是較通用的 (包括發行版內的所有套件)。存在多個通用款目時，選用第一個。可用的選項包括套件名稱及其原始檔。每個套件來源包括 <filename>釋出</filename> 檔案，由 APT 與 <filename>套件</filename> 檔案同時下載。指定來源 (通常 “Debian” 的官方鏡射站套件，但也可以是個人的或機構的第三方典藏所)。給予發行版名稱 (通常是 Debian 提供標準發行版內的 <emphasis role="distribution">穩定版</emphasis>、<emphasis role="distribution">測試版</emphasis>、<emphasis role="distribution">不穩定版</emphasis> 或 <emphasis role="distribution">實驗版</emphasis>) 及其版本 ( 8 就是 Debian 的 <emphasis role="distribution">Jessie</emphasis>)。接著以實例檢視其語法。</para>

      <sidebar>
        <title><emphasis>特例</emphasis><emphasis role="distribution">實驗性</emphasis>的優先性</title>
        <indexterm><primary><emphasis role="distribution">實驗性</emphasis></primary></indexterm>

	<para>若把 <emphasis role="distribution">Experimental</emphasis> 列在 <filename>sources.list</filename> 檔案內，幾乎不會安裝對應套件因為其 APT 優先性為1。當然這是特例，避免使用者意外安裝 <emphasis role="distribution">Experimental</emphasis> 套件。這些套件祗能以指令 <command>aptitude install <replaceable>套件名稱</replaceable>/experimental</command> 安裝 — 使用者鍵入此指令時自然知道其風險。還是有可能 (雖然 <emphasis>不</emphasis> 建議) 把 <emphasis role="distribution">Experimental</emphasis> 內的套件視為其他發行版而給予優先性 100。在 <filename>/etc/apt/preferences</filename> 檔案內給予特定的款目就行了：</para>
        <informalexample>
          <programlisting>Package: *
Pin: release a=experimental
Pin-Priority: 500</programlisting>
        </informalexample>
      </sidebar>

      <para>暫時假設您祗需用到 Debian 穩定版的套件。除非特別指明，不會安裝其他版本的套件。可以在 <filename>/etc/apt/preferences</filename> 檔案內寫入以上的款目：</para>
      <informalexample>
        <programlisting>Package: *
Pin: release a=stable
Pin-Priority: 900

Package: *
Pin: release o=Debian
Pin-Priority: -10</programlisting>
      </informalexample>

      <para><literal>a=stable</literal> 設定發行版的名稱。<literal>o=Debian</literal> 限制來自 “Debian” 的套件。</para>

      <para>假設若干伺服器內的程式使用 Perl 5.14 且不希望被升級為其他版本。您需用到此款目：</para>
      <informalexample>
        <programlisting>Package: perl
Pin: version 5.14*
Pin-Priority: 1001</programlisting>
      </informalexample>

      <para>此組態檔的參考文件在手冊的 <citerefentry><refentrytitle>apt_preferences</refentrytitle><manvolnum>5</manvolnum></citerefentry>，以 <command>man apt_preferences</command> 命令就可看到。</para>

      <sidebar>
        <title><emphasis>秘訣</emphasis> 在 <filename>/etc/apt/preferences</filename> 內的評論</title>
        <indexterm><primary><literal>解釋</literal></primary></indexterm>
        <indexterm><primary><literal>Pin</literal></primary></indexterm>
        <indexterm><primary><literal>Pin-Priority</literal></primary></indexterm>

	<para><filename>/etc/apt/preferences</filename> 檔案沒有放置評論的官方語法，但可以在每個款目的 “<literal>Explanation</literal>” 欄位置入若干說明：</para>
        <informalexample>
          <programlisting>Explanation: The package xserver-xorg-video-intel provided
Explanation: in experimental can be used safely
Package: xserver-xorg-video-intel
Pin: release a=experimental
Pin-Priority: 500</programlisting>
        </informalexample>
      </sidebar>
    </section>
    <section id="sect.apt-mix-distros">
      <title>在多個發行版工作</title>

      <para><command>apt</command> 是很奇妙的工具，可從其他發行版提取套件。例如，安裝 <emphasis role="distribution">穩定版</emphasis> 系統之後，或許想要在不偏離系統原來狀態下，試試 <emphasis role="distribution">測試版</emphasis> 或 <emphasis role="distribution">不穩定版</emphasis> 的套件。</para>

      <para>混用不同版本套件出問題時，Even if you will occasionally encounter problems while mixing packages from different distributions, <command>apt</command> 可以處理得極為恰當把風險降到最低。最好的方法是把所有的發行版置於 <filename>/etc/apt/sources.list</filename> 檔案內 (某些人總是置入三個發行版，不過還是要記得 <emphasis role="distribution">不穩定版</emphasis> 是有經驗使用者的專屬。) 且在 <literal>APT::Default-Release</literal> 參數中設定偏好的發行版 (見 <xref linkend="sect.apt-upgrade" />) 。</para>

      <para>假設 <emphasis role="distribution">穩定版</emphasis> 是您的參考版本，但是 <emphasis role="distribution">測試版</emphasis> 與 <emphasis role="distribution">不穩定版</emphasis> 也列在 <filename>sources.list</filename> 檔案內。在這個情況下，您可使用 <command>apt install <replaceable>套件名稱</replaceable>/testing</command> 安裝來自 <emphasis role="distribution">測試版</emphasis> 的套件。若因相依性未滿足而安裝失敗，可以在 <emphasis role="distribution">測試版</emphasis> 內加入 <literal>-t testing</literal> 參數。同樣的方式也適用於 <emphasis role="distribution">不穩定版</emphasis>。</para>

      <para>在此情況下，除了已經被其他發行版升級之外，升級 (<command>upgrade</command> 與 <command>full-upgrade</command>) 祗在 <emphasis role="distribution">穩定版</emphasis> 內完成：其他的升級在各自的發行版內處理。稍後以 APT 預設的優先性說明此行為。請使用 <command>apt-cache policy</command> (見專欄 <xref linkend="sidebar.apt-cache-policy" />) 檢視指定的優先性。</para>

      <para>每件事都圍繞在 APT 祗處理高於或等於已安裝版本號套件的前提下 (假設 <filename>/etc/apt/preferences</filename> 還未強迫優先性高於 1000 的某些套件)。</para>

      <sidebar id="sidebar.apt-cache-policy">
        <title><emphasis>秘訣</emphasis> <command>apt-cache policy</command></title>

	<para>執行 <command>apt-cache policy</command> 顯示每個套件來源預設的優先性，就能瞭解優先性的機制。也可使用 <command>apt-cache policy <replaceable>套件名稱</replaceable></command> 命令顯示指定套件所有可用版本的優先性。</para>
      </sidebar>

      <para>假設從Let's assume that you have installed version 1 of a first package from <emphasis role="distribution">穩定版</emphasis> 安裝第一個套件的第一版且從and that version 2 and 3 are available respectively in <emphasis role="distribution">測試版</emphasis> 與 <emphasis role="distribution">不穩定版</emphasis> 安裝同套件的第二版與第三版水。已安裝的版本優先性為 100 但在but the version available in <emphasis role="distribution">穩定版</emphasis> (相同的) 優先性為 990 (因為它是目標釋出版的一部份)。在 <emphasis role="distribution">測試版</emphasis> 與 <emphasis role="distribution">不穩定版</emphasis> 的套件其優先性為 500 (預設不安裝版本的優先性)。獲選者為優先性 990 的版本1。套件 “留在 <emphasis role="distribution">穩定版</emphasis> 內”。</para>

      <para>另個套件的例子，已從 <emphasis role="distribution">測試版</emphasis> 安裝版本 2。版本 1 在 <emphasis role="distribution">穩定版</emphasis> 且版本 3 在 <emphasis role="distribution">不穩定版</emphasis>。因為優先性小於已安裝的版本，所以版本 1 (優先性為 990 — 小於 1000) 已作廢。祗剩下優先性為 500 的版本 2 與版本 3。在此情況下，APT 選擇較新的版本，即使用 <emphasis role="distribution">不穩定版</emphasis>。若不要已安裝自 <emphasis role="distribution">測試版</emphasis> 的套件，可以移殖至 <emphasis role="distribution">不穩定版</emphasis>，必須指定來自於 <emphasis role="distribution">不穩定版</emphasis> 優先性小於 500 (例如 490) 的套件。修改 <filename>/etc/apt/preferences</filename> 檔案即可：</para>

      <programlisting>Package: *
Pin: release a=unstable
Pin-Priority: 490</programlisting>
    </section>
    <section id="sect.automatic-tracking">
      <title>自動追蹤已安裝的套件</title>

      <para><command>apt</command> 的必要功能之一是經由相依性追蹤已安裝的套件。這些套件稱為 “自動”，且通常包括其程式庫。</para>
      
      <para>有了這些資訊後，移除套件時，套件管理者可以計算該等不再需要的自動套件 (因為沒有 “手動安裝” 套件相依於他)。<command>apt-get autoremove</command> 會清除該等套件。<command>aptitude</command> 與 <command>apt</command> 沒有這個命令：辨認之後，前者自動移除它們，而使用者不需手動執行後者命令。所有的情況下，在清除訊息中列出所有影響到的套件。</para>

      <indexterm><primary><command>apt-mark auto</command></primary></indexterm>
      <indexterm><primary><command>apt-mark manual</command></primary></indexterm>
      <indexterm><primary><command>aptitude markauto</command></primary></indexterm>
      <indexterm><primary><command>aptitude unmarkauto</command></primary></indexterm>
      <para>把套件標記為自動是個好習慣，不需要時就被自動移除。<command>apt-mark auto <replaceable>套件名稱</replaceable></command> 會標記該套件為自動而 <command>apt-mark manual <replaceable>套件名稱</replaceable></command> 則不標記。<command>aptitude markauto</command> 與 <command>aptitude unmarkauto</command> 作用相同祗是功能較多 (見 <xref linkend="sect.aptitude" />)。命令互動介面的 <command>aptitude</command> 也可檢視多個套件的 “自動旗標”。</para>

      <indexterm><primary><command>aptitude why</command></primary></indexterm>
      <para>自動安裝套件出現在系統內。係由於從命令列取得該等資訊，可使用 <command>aptitude why <replaceable>套件名稱</replaceable></command> (<command>apt</command> 與 <command>apt-get</command> 沒有類似的功能)：</para>

      <screen><computeroutput>$ </computeroutput><userinput>aptitude why python-debian
</userinput><computeroutput>i   aptitude         Recommends apt-xapian-index         
i A apt-xapian-index Depends    python-debian (&gt;= 0.1.15)
</computeroutput></screen>

      <sidebar>
	<title><emphasis>其他</emphasis> <command>deborphan</command> 與 <command>debfoster</command></title>

	<indexterm><primary><command>deborphan</command></primary></indexterm>
	<indexterm><primary><command>debfoster</command></primary></indexterm>
        <para>早年 <command>apt</command>、<command>apt-get</command> 與 <command>aptitude</command> 還不能追蹤自動套件時，以另外兩個指令產不必要套件清單：<command>deborphan</command> 與 <command>debfoster</command>。</para>

	<para><command>deborphan</command> 是兩者中最基礎的。掃瞄 <literal>libs</literal> 與 <literal>oldlibs</literal> 區塊 (沒有補充命令) 在已安裝套件中，尋找不再相依於其他套件者。其結果做為移除非必要套件的依據。</para>

	<para><command>debfoster</command> 還有其他用法，極類似 APT：維護一個已安裝的套件以及需要互調用的套件清單。系統內出現新的套件且 <command>debfoster</command> 不知道它需要那些套件，則在螢幕顯示其相依的套件清單。此程式提供新的選擇：移除套件 (或許連同相依者)，標記為必要，或暫時忽略它。</para>
      </sidebar>
    </section>
  </section>

  <section id="sect.apt-cache">
    <title>The <command>apt-cache</command> 命令</title>
    <indexterm><primary><command>apt-cache</command></primary></indexterm>
    <indexterm><primary>APT</primary><secondary>套件搜尋</secondary></indexterm>
    <indexterm><primary>APT</primary><secondary>顯示標頭</secondary></indexterm>
    <indexterm><primary>搜尋套件</primary></indexterm>
    <indexterm><primary>套件</primary><secondary>搜尋</secondary></indexterm>

    <para><command>apt-cache</command> 命令可顯示 APT 內部資料庫裡的多種資訊。這些資訊是從 <filename>sources.list</filename> 檔案內聚集不同來源的快取。於執行 <command>apt update</command> 運作時產生的。</para>

    <sidebar id="sidebar.cache">
      <title><emphasis>術語</emphasis> 快取</title>

      <para>快取是一種暫存系統，近用方法昂貴 (講究性能) 時，用於加快常用資料的取用速度。這個概念應用範圍極廣，從微處理器核心至高階儲存系統。</para>

      <para>在 APT 的環境，參照 <filename>套件名稱</filename> 檔案是他們在 Debian 鏡射站的位置。也就是說，近用資料庫套件時，每次都通過網路讀取，極無劾率。所以，APT 在其檔案內儲存一個複本 (在 <filename>/var/lib/apt/lists/</filename>) 每次搜尋在地的檔案即可。同樣的，<filename>/var/cache/apt/archives/</filename> 儲存已經下載的套件避免在移除後又需要時的重複下載行為。</para>
    </sidebar>

    <indexterm><primary><command>apt show</command></primary></indexterm>
    <indexterm><primary><command>apt search</command></primary></indexterm>
    <indexterm><primary><command>apt-cache show</command></primary></indexterm>
    <indexterm><primary><command>apt-cache search</command></primary></indexterm>
    <indexterm><primary><command>aptitude show</command></primary></indexterm>
    <indexterm><primary><command>aptitude search</command></primary></indexterm>
    <para><command>apt-cache</command> 命令可以做鍵詞套件搜尋 <command>apt-cache search <replaceable>鍵詞</replaceable></command>。也能顯示套件標頭的可用版本 <command>apt-cache show <replaceable>套件名稱</replaceable></command>。這個命令提供套件說明、其相依性、維護者名稱等。<command>apt search</command>、<command>apt show</command>、<command>aptitude search</command>、<command>aptitude show</command> 都以同樣方式運作。</para>

    <sidebar>
      <title><emphasis>其他</emphasis> <command>axi-cache</command></title>
      <indexterm><primary><command>axi-cache</command></primary></indexterm>
      <indexterm><primary><emphasis role="pkg">apt-xapian-index</emphasis></primary></indexterm>

      <para><command>apt-cache search</command> 是基礎的工具，應用在 <command>grep</command> 套件描述。輸入過多鍵詞可能送回大量結果或完全無資料。</para>

      <para><command>axi-cache search <replaceable>術語</replaceable></command>，反過來說，提供更好的結果，以相關性排序。使用 <emphasis>Xapian</emphasis> 搜尋引擎且它是 <emphasis role="pkg">apt-xapian-index</emphasis> 套件的一部份索引所有套件的資訊 (更多的是，就像是來自所有 Debian 套件的 <filename>.desktop</filename> 檔)。顯示標籤 (見專欄 <xref linkend="sidebar.debtags" />) 並在毫秒之間送回結果。</para>

      <screen>$ <userinput>axi-cache search package use::searching</userinput>
105 results found.
Results 1-20:
100% packagesearch - GUI for searching packages and viewing package information
98% debtags - Enables support for package tags
94% debian-goodies - Small toolbox-style utilities 
93% dpkg-awk - Gawk script to parse /var/lib/dpkg/{status,available} and Packages
93% goplay - games (and more) package browser using DebTags
[...]
87% apt-xapian-index - maintenance and search tools for a Xapian index of Debian packages
[...]
More terms: search debian searching strigi debtags bsearch libbsearch
More tags: suite::debian works-with::software:package role::program interface::commandline implemented-in::c++ admin::package-management use::analysing
`axi-cache more' will give more results
      </screen>
    </sidebar>

    <indexterm><primary><command>apt-cache policy</command></primary></indexterm>
    <indexterm><primary><command>apt-cache dumpavail</command></primary></indexterm>
    <indexterm><primary><command>apt-cache pkgnames</command></primary></indexterm>
    <para>有些功能極少用到。例如，<command>apt-cache policy</command> 顯示套件來源及個別套件的優先性。另個例子是<command>apt-cache dumpavail</command> 顯示所有套件全部版本的標頭。<command>apt-cache pkgnames</command> 顯示出現在快取至少一次的套件清單。</para>
  </section>

  <section id="sect.apt-frontends">
    <title>前置：<command>aptitude</command>、<command>synaptic</command></title>
    <indexterm><primary><command>aptitude</command></primary></indexterm>
    <indexterm><primary><command>synaptic</command></primary></indexterm>
    <indexterm><primary>APT</primary><secondary>介面</secondary></indexterm>

    <para>APT 是 C++ 寫成程式，甚原始碼在 <command>libapt-pkg</command> 共享程式庫內。以此共享程式庫建立讀者介面 (前置)，因為很容易再利用在程式庫內的原始碼。過去 <command>apt-get</command> 祗當做 <command>libapt-pkg</command> 的測試前置，但此事實也漸趨模糊。</para>
    <section id="sect.aptitude">
      <title><command>aptitude</command></title>

      <para><command>aptitude</command> 是互動程式，可用於終端機的半圖形模式可瀏覽已安裝與可得套件，搜尋所有可用資訊，並選擇安裝或移除的套件。此程式專為管理者而設計，預設的對象比 <command>apt-get</command> 的對象更聰慧，且其介面更容易理解。</para>

      <figure>
        <title>The <command>aptitude</command> 套件管理者</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/aptitude.png" scalefit="1" width="75%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>開始的時候，<command>aptitude</command> 依狀態顯示所有的套件 (已安裝、未安裝、或已安裝在不在鏡射站 — 其他的區塊顯示工作、虛擬套件、與最近才出現在鏡射站的新增套件)。還有其他的檢視方法，提供主題式瀏覽。所有的情況下，<command>aptitude</command> 在螢幕顯示各主題與套件的清單。以樹狀組織主題，可以用 <keycombo><keycap>Enter</keycap></keycombo>、<keycombo><keycap>[</keycap></keycombo> 與 <keycombo><keycap>]</keycap></keycombo> 按鍵展開與收起枝葉。<keycombo><keycap>+</keycap></keycombo> 應用於標示可安裝的套件，<keycombo><keycap>-</keycap></keycombo> 標示可移除的套件與 <keycombo><keycap>_</keycap></keycombo> 標示可清除的套件 (這些按鍵也可用遟主題，對應的行動適用於主題的所有套件)。<keycombo><keycap>u</keycap></keycombo> 用於更新可用套件清單與 <keycombo action="simul"><keycap>Shift</keycap><keycap>u</keycap></keycombo> 準備全系統的更新。<keycombo><keycap>g</keycap></keycombo> 切換摘要檢視要求的改變 (並再次鍵入 <keycombo><keycap>g</keycap></keycombo> 納入此等改變)，與 <keycombo><keycap>q</keycap></keycombo> 離開現在的檢視。若您在初始的檢視，將關閉 <command>aptitude</command>。</para>

      <sidebar>
        <title><emphasis>文件</emphasis> <command>aptitude</command></title>

	<para>此區塊不包括使用 <command>aptitude</command> 的詳情，祗專注於提供急救用的工具包。<command>aptitude</command> 的文件較完整，建議您使用 <emphasis role="pkg">aptitude-doc-en</emphasis> 套件內的完整手冊 (見 <filename>/usr/share/doc/aptitude/html/en/index.html</filename>)。</para>
      </sidebar>

      <para>鍵入 <keycombo><keycap>/</keycap></keycombo> 及搜尋的鍵詞，就能搜尋套件。鍵詞對應至套件的名稱，也可應用於描述內容 (若前置 <literal>~d</literal>、區塊 (前置 <literal>~s</literal>) 或文件內的其他字詞。同樣的鍵詞可以篩選顯示套件的清單：鍵入 <keycombo><keycap>l</keycap></keycombo> 鍵 (如同在 <foreignphrase>limit</foreignphrase> 之內) 與其他鍵詞。</para>

      <para>管理 Debian 套件的 “自動旗標” (見 <xref linkend="sect.automatic-tracking" />)，對 <command>aptitude</command> 而言是小事一椿。可以用 <keycombo action="simul"><keycap>Shift</keycap> <keycap>m</keycap></keycombo> 瀏覽已安裝並標示為自動的套件或以 <keycombo><keycap>m</keycap></keycombo> 鍵移除標示。在套件清單內，“自動套件” 標示為 “A”。此功能也可簡單看到機器內正在使用的套件，不必看那些程式庫與相依性繁瑣的細節。相關的鍵詞可以與 <keycombo><keycap>l</keycap></keycombo> (啟動篩選模式) 一起使用的是 <literal>~i!~M</literal>。它的作用是祗看已安裝的套件 (<literal>~i</literal>) 不是被標示為自動(<literal>!~M</literal>) 的套件。</para> 
      
      <sidebar>
	<title><emphasis>工具</emphasis> 在命令列介面使用 <command>aptitude</command></title>

	<para>經由命令列或互動介面可以近用 <command>aptitude</command> 大部份的功能。命令列看來像是 <command>apt-get</command> 與 <command>apt-cache</command>。</para>

	<para>也能從命令列近用 <command>aptitude</command> 的進階功能。使用互動版相同的套件搜尋模式。例如，清除 “手動安裝” 套件、在地安裝的程式不再需要程式庫或 Perl 模組，就可把對應的套件標示為自動：</para>

	<screen><computeroutput># </computeroutput><userinput>aptitude markauto '~slibs|~sperl'</userinput></screen>

	<para>從這裡您可看到 <command>aptitude</command> 搜尋模式系統的威力，即時選取 <literal>libs</literal> 與 <literal>perl</literal> 區塊的所有套件。</para>

	<para>小心對應，部份套件被標記為自動且其他套件均未相依於它們，該等套件就會被自動移除 (經過確認程式)。</para>
      </sidebar>

      <section>
        <title>管理推薦、建議與工作</title>

	<para><command>aptitude</command> 另個有趣的功能是尊重套件間的建議，但給使用以個案方式選擇不安裝的自由。例如，<emphasis role="pkg">gnome</emphasis> 套件建議 <emphasis role="pkg">gdebi</emphasis> (及其他選擇)。選擇前者安裝時，後者也被選取 (若未安裝在系統內則標記為自動)。鍵入 <keycombo><keycap>g</keycap></keycombo> 將使其更明顯：<emphasis role="pkg">gdebi</emphasis> 顯示在滿足相依性的自動安裝套件清單裡的待決摘要畫面。然而，在確認前可以不選擇，而自行決定不要安裝。</para>

	<para>此推薦追蹤功能不適用於更新。例如，若 <emphasis role="pkg">gnome</emphasis> 新版建議一個不包括稍前版本的套件，就不會安裝它。然而，還是列在螢幕，管理者仍可點選並安裝它。</para>

	<para>同時把套件間的建議列入考量，但調整入特別的情況。例如，自從 <emphasis role="pkg">gnome</emphasis> 建議 <emphasis role="pkg">dia-gnome</emphasis>，後者顯示在螢幕的待決區 (其他套件的建議區)。這樣子，就能看見且管理者可以決定是否把它們列入考量。畢竟祗是建議而不是相依或提議，套件仍不會被列入自動 — 需要讀者的人工介入 (因此，套件不會被標示為自動)。</para>

	<para>在同樣的精神下，記得 <command>aptitude</command> 以智慧的手法使用工作的概念。在螢幕的套件清單中顯示工作，可以安裝或移除選定的完整工作，或瀏覽包括選定較小工作的套件清單。</para>
      </section>
      <section>
        <title>較佳的解決演算法</title>

	<para>總結本段的內容，在解決困難情境時，<command>aptitude</command> 的演算較 <command>apt-get</command> 更為複雜。需要執行一組工作且可能帶領至另個支離的系統，<command>aptitude</command> 評估若干可能的狀況以遞減關聯的方式呈現。然而，這些演算法不是失敗的證明。幸運的是，總有手動選擇執行的可能。現在的選擇帶領至矛盾的地方時，螢幕的上方就指出若干 “破碎” 的套件 (and you can directly navigate to those packages by pressing <keycombo><keycap>b</keycap></keycombo>)。就可能以人工方式建立解決此問題的方案。尤其是，可以按 <keycombo><keycap>Enter</keycap></keycombo> 鍵選取近用多個可用的版本。選定的版本可以解決問題，就勇敢不遲疑地使用其功能。破碎套件漸趨於零後，您可安全地進入待決區的摘要畫面，於使用前再次確認。</para>

        <sidebar>
          <title><emphasis>說明</emphasis> <command>aptitude</command> 的記錄檔</title>

	  <para>如同 <command>dpkg</command>，<command>aptitude</command> 追蹤執行動作存在其記錄檔內 (<filename>/var/log/aptitude</filename>)。然而，兩個命令分別在不同層次工作，各自的記錄檔有不同的資訊。當 <command>dpkg</command> 記錄對各別套件的一步步運作，<command>aptitude</command> 則記錄系統更新之類的高階運作。</para>

	  <para>小心，記錄檔祗包括 <command>aptitude</command> 工作的摘要。若另個前端 (或即使是 <command>dpkg</command> 自身) 祗是偶而用到，則 <command>aptitude</command> 的記錄檔將祗包括工作的部份，所以不能依賴它建立系統的過去。</para>
        </sidebar>
      </section>
    </section>
    <section>
      <title><command>synaptic</command></title>

      <para><command>synaptic</command> 是 Debian 的套件圖形管理器，在 GTK+/GNOME 的基礎上提供清楚有效的圖形介面。它以很多的立即可用篩選器提供快速近用新增的套件、安裝套件、可升級套件、過時套件等。經由這些清單瀏覽，選定對套件的工作 (安裝、升級、移除、清除)；不會立即執行此等工作，但把它們放入工作清單。單鍵按下可執行的工作，接著就可執行。</para>

      <figure>
        <title><command>synaptic</command> 套件管理器</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/synaptic.png" scalefit="1" width="75%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>
  <section id="sect.package-authentication">
    <title>檢查套件真偽</title>
    <indexterm><primary>套件</primary><secondary>真偽檢查</secondary></indexterm>
    <indexterm><primary>套件</primary><secondary>紋章</secondary></indexterm>
    <indexterm><primary>套件</primary><secondary>簽章</secondary></indexterm>
    <indexterm><primary>簽章</primary><secondary>套件簽章</secondary></indexterm>
    <indexterm><primary>真偽</primary><secondary>套件真偽</secondary></indexterm>

    <para>Falcot 公司的管理極重視安全。因此，他們祗安裝 Debian 保證無竄改的套件。電腦怪客可能在合法的套件巾加入若干惡意程式碼。若安裝了這種套件，就會執行怪客要它做的事，包括洩露密碼或隱私資訊。為避過這個風險，Debian 有個機制在安裝時避過此纂改的風險，祗安裝來自官方維護者的套件且未經第三方修改。</para>

    <para>以一連串的密碼學雜湊與簽章構成密封的作品。簽章檔案是由 Debian 鏡射站提供的 <filename>釋出</filename> 檔案。包括 <filename>套件</filename> 檔案清單 (包括壓縮格式的 <filename>套件名稱.gz</filename> 與 <filename>套件名稱.xz</filename>，以及增量版)，與它們的 MD5、SHA1 與 SHA256 雜湊，確保檔案不曾被篡改。這些 <filename>套件</filename> 檔案包括鏡射站提供的 Debian 套件清單，以及其雜湊，足以保證套件內容不曾被篡改。</para>

    <indexterm><primary><command>apt-key</command></primary></indexterm>
    <indexterm><primary><emphasis role="pkg">debian-archive-keyring</emphasis></primary></indexterm>
    <indexterm><primary><filename>/etc/apt/trusted.gpg.d/</filename></primary></indexterm>
    <indexterm><primary><filename>Release.gpg</filename></primary></indexterm>
    <para>可信任的鑰匙由 <command>apt-key</command> 命令管理，置於 <emphasis role="pkg">apt</emphasis> 套件內。此程式維護 GnuPG 公鑰的鑰匙圈，用於確認來自鏡射站 <filename>Release.gpg</filename> 檔案的簽名檔。可用於人工新增鑰匙 (使用非官方的鏡射站時)。然而，祗有官方的 Debian 鑰匙才需要它。經由 <emphasis role="pkg">debian-archive-keyring</emphasis> 套件 (把對應的鑰匙圈置於 <filename>/etc/apt/trusted.gpg.d</filename>) 自動保持這些鑰匙的最新狀態。然而，第一個安裝此套件的人要小心：即使被另個人簽署，此簽署不能被外部確認。謹慎的管理者應在安裝新套件前，檢查匯入鑰匙的指紋，然後才能相信它：</para>

    <screen role="scale"># <userinput>apt-key fingerprint</userinput>
/etc/apt/trusted.gpg.d/debian-archive-jessie-automatic.gpg
----------------------------------------------------------
pub   4096R/2B90D010 2014-11-21 [expires: 2022-11-19]
      Key fingerprint = 126C 0D24 BD8A 2942 CC7D  F8AC 7638 D044 2B90 D010
uid                  Debian Archive Automatic Signing Key (8/jessie) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-jessie-security-automatic.gpg
-------------------------------------------------------------------
pub   4096R/C857C906 2014-11-21 [expires: 2022-11-19]
      Key fingerprint = D211 6914 1CEC D440 F2EB  8DDA 9D6D 8F6B C857 C906
uid                  Debian Security Archive Automatic Signing Key (8/jessie) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-jessie-stable.gpg
-------------------------------------------------------
pub   4096R/518E17E1 2013-08-17 [expires: 2021-08-15]
      Key fingerprint = 75DD C3C4 A499 F1A1 8CB5  F3C8 CBF8 D6FD 518E 17E1
uid                  Jessie Stable Release Key &lt;debian-release@lists.debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-squeeze-automatic.gpg
-----------------------------------------------------------
pub   4096R/473041FA 2010-08-27 [expires: 2018-03-05]
      Key fingerprint = 9FED 2BCB DCD2 9CDF 7626  78CB AED4 B06F 4730 41FA
uid                  Debian Archive Automatic Signing Key (6.0/squeeze) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-squeeze-stable.gpg
--------------------------------------------------------
pub   4096R/B98321F9 2010-08-07 [expires: 2017-08-05]
      Key fingerprint = 0E4E DE2C 7F3E 1FC0 D033  800E 6448 1591 B983 21F9
uid                  Squeeze Stable Release Key &lt;debian-release@lists.debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-wheezy-automatic.gpg
----------------------------------------------------------
pub   4096R/46925553 2012-04-27 [expires: 2020-04-25]
      Key fingerprint = A1BD 8E9D 78F7 FE5C 3E65  D8AF 8B48 AD62 4692 5553
uid                  Debian Archive Automatic Signing Key (7.0/wheezy) &lt;ftpmaster@debian.org&gt;

/etc/apt/trusted.gpg.d/debian-archive-wheezy-stable.gpg
-------------------------------------------------------
pub   4096R/65FFB764 2012-05-08 [expires: 2019-05-07]
      Key fingerprint = ED6D 6527 1AAC F0FF 15D1  2303 6FB2 A1C2 65FF B764
uid                  Wheezy Stable Release Key &lt;debian-release@lists.debian.org&gt;</screen>

    <sidebar>
      <title><emphasis>實務上</emphasis> 新增可信任的鑰匙</title>
      <indexterm><primary>可信任的鑰匙</primary></indexterm>
      <indexterm><primary>鑰匙</primary><secondary>APT 的認可鑰匙</secondary></indexterm>

      <para>將第三方套件來源加入 <filename>sources.list</filename> 檔案後，必須告知 APT 信任對應的 GPG 認證密鑰 (否則將繼續抱怨且無法確認來自該典藏所的套件)。第一步是取得公鑰。多半以一個小小的純文字檔做為公鑰，在下面的例子裡，我們稱它為 <filename>key.asc</filename>。</para>

      <para>管理者可以執行 <command>apt-key add &lt; key.asc</command>，新增認證密鑰。也可以使用 <command>synaptic</command> 圖形介面：它的 “認證” 分頁在 <menuchoice><guimenu>設定</guimenu> <guisubmenu>儲存庫</guisubmenu></menuchoice> 選單內，可以從 <filename>key.asc</filename> 檔案匯入鑰匙。</para>

      <indexterm><primary><emphasis role="pkg">gui-apt-key</emphasis></primary></indexterm>
      <para>想要有專屬且詳細的可信任鑰，可以使用 <command>gui-apt-key</command> (在同名套件內)，以圖形介面管理可信任鑰。</para>
    </sidebar>

    <para>適當的鑰納入鑰匙圈後，APT 將檢查簽章後才會執行任何危險的操作，若要求安裝的套件其認證不明確時，前端將出現警示訊息。</para>
  </section>
  <section id="sect.dist-upgrade">
    <title>升級至下個穩定發行版</title>

    <para>Debian 知名的功能之一是可升級至下個穩定版:<foreignphrase>dist-upgrade</foreignphrase> — 知名的句子 — 相當促進 Debian 的名聲。除了極少的例外，升級電腦系統祗需幾分鐘的時間，或暫十來分鐘，依照從套件儲存庫下載的速度而定.</para>
    <section>
      <title>建議程序</title>

      <para>Debian 各穩定版之間存在相當的差異，升級前應仔細閱讀釋出說明。</para>

      <sidebar>
        <title><emphasis>基本</emphasis> 釋出說明</title>

	<para>作業系統 (更寛廣的說，任何軟體都在內) 的釋出說明是一份描述軟體概況的文件，特別關照指定的版本。相對於完成的軟體文件，這些文件相當簡短，通常列出前版之後新生成的功能。也提供升級的程序、對前版使用者的警示、以及若干錯誤更正。</para>

	
	<para>釋出說明是線上的：當前穩定版的釋出說明使用固定的 URL，舊版的釋出說明可在其代碼名下找到:<ulink type="block" url="http://www.debian.org/releases/stable/releasenotes" /> <ulink type="block" url="http://www.debian.org/releases/wheezy/releasenotes" /></para>
      </sidebar>

      
      <para>本段內容專注於由 <emphasis role="distribution">Wheezy</emphasis> 系統升級至 <emphasis role="distribution">Jessie</emphasis>。這是系統的主要運作；不是 100% 無風險，必須先備份重要的資料才升級。</para>

      <para>減少安裝的套件，祗安裝絕對必要的套件，才能讓升級容易 (且簡短)。相關的工具包括 <command>aptitude</command>、<command>deborphan</command> 與 <command>debfoster</command> (見 <xref linkend="sect.automatic-tracking" />)。例如，您可使用以下命令，再使用 <command>aptitude</command> 的互動模式再檢查並微調該移除的套件：</para>

      <screen># <userinput>deborphan | xargs aptitude --schedule-only remove</userinput></screen>

      <para>接著開始升級了。首先修改 <filename>/etc/apt/sources.list</filename> 檔案的內容，告訴 APT 從 <emphasis role="distribution">Jessie</emphasis> 而不是從 <emphasis role="distribution">Wheezy</emphasis> 提取套件。若檔案內祗有 <emphasis role="distribution">Stable</emphasis> 而不是指名代碼，則不需要修改，因為 <emphasis role="distribution">Stable</emphasis> 總是指向 Debian 最新的釋出版。修改或不修改都一樣，必須重新載入可用套件資料庫 (使用 <command>apt update</command> 命令或 <command>synaptic</command> 圖形介面的重新載入鈕)。</para>

      <para>註冊這些新增的套件來源後，首先執行最低量的升級 <command>apt upgrade</command>。以兩階段升級，減緩套件管理工具的工作並確保使用最新的套件，納入完整發行版升級所需的錯誤更正與改進。</para>

      <para>第一次升級完成後，就該處理升級本身，<command>apt full-upgrade</command>、<command>aptitude</command>、或 <command>synaptic</command>均可。採用之前應小心檢查建議的舉措：應新增建議的套件或移除建議且不再需要的套件。任何情況下，前端都應與 <emphasis role="distribution">Jessie</emphasis> 系統相容且是最新的。所以，必須耐心地等待下載必要的套件，回覆 Debconf 的問題以及在地的組態檔，然後等 APT 完成它的工作。</para>
    </section>
    <section>
      <title>處理升級後的問題</title>

      <para>僅管 Debian 管理者已經儘力做好份內的工作，主系統的升級仍可能卡卡的不如想像中順利。軟體的新版本可能無法與舊的相容 (例如，可能改變預設行為或資料格式)。同時，儘管在 Debian 釋出前做為詳盡的測試，還是有若干漏網的錯誤。</para>

      <para>可以先安裝 <emphasis role="pkg">apt-listchanges</emphasis> package, 套件，在套件升級前先顯示可能問題。由套件維護者編輯的這些資訊且置於 <filename>/usr/share/doc/<replaceable>套件名</replaceable>/NEWS.Debian</filename> 檔案名內，供使用者參考。閱讀該等檔案 (可能經由 <emphasis role="pkg">apt-listchanges</emphasis>) 應有助於歸避不好的意外。</para>

      <para>新版的軟體不見得都能順利運作。不夠普及或未經詳實測試就會出現這種現象；在穩定版裡，最後升級的軟體常常後悔。碰到這種情形，首先應查看錯誤追蹤系統 <literal>https://bugs.debian.org/<replaceable>套件名稱</replaceable></literal>，尋找別人提報的踪跡。若尚未被提報，就應動手提報它 <command>reportbug</command>。若已被提報，錯誤報告與相關的訊息就是處理該錯誤很好的資訊來源：</para>
      <itemizedlist>
        <listitem>
	  <para>有時已有補丁，並且列在錯誤報告內；可以在地重新編譯修補破碎的套件 (見 <xref linkend="sect.rebuilding-package" />)；</para>
        </listitem>
        <listitem>
	  <para>否則，使用者可能找到另個解決問題的方法且在報告內分享；</para>
        </listitem>
        <listitem>
	  <para>再不然，維護者可能已準備並公開修訂套件。</para>
        </listitem>
      </itemizedlist>

      <para>很嚴重的錯誤，將有特別的套件供穩定版使用。在這種情況下，修訂後的套件位於 Debian 鏡射站的 <literal>proposed-updates</literal> 區塊 (見 <xref linkend="sect.proposed-updates" />)。對應的款目暫時加在 <filename>sources.list</filename> 檔案內，可用 <command>apt</command> 或 <command>aptitude</command> 命令安裝升級套件。</para>

      <para>修訂套件尚未被穩定版管理者認可時，就不會出現在此區塊。使用者必須自己動手認可它。雖然列在此的套件尚未可得，但至少已知在審查中。<ulink type="block" url="https://release.debian.org/proposed-updates/stable.html" /></para>
    </section>
  </section>
  <section id="sect.regular-upgrades">
    <title>保持系統在最新狀態</title>

    <para>Debian 發行版永遠處於動態、持續變化中。大部份的變化在 <emphasis role="distribution">測試版</emphasis> 與 <emphasis role="distribution">不穩定版</emphasis> 中，即使是 <emphasis role="distribution">穩定版</emphasis> 也隨時在更新中，主要是安全相關的修訂。不論執行那個版本，都需保持在最新的版本，才能用到最新的狀態及修訂錯誤。</para>

    <para>最好定期執行升級與更新，雖然很瑣碎卻是必要的。幸運的是，這種重複性的工作可以自動執行，有很多工具可以使用。</para>

    <para>第一個工具是 <command>apticron</command>，位於同名套件中。主要作用是每日執行一個腳本 (經由 <command>cron</command>)。這個腳本更新可用套件清單，若已安裝的套件不在此清單內，則發送電子郵件列出該等套件清單，並指出在新版中可用的套件。明顯地，此套件的對象是 Debian <emphasis role="distribution">穩定版</emphasis> 的使用者，對其他版本的使用者而言，此清單太長了。取得可更新清單後，<command>apticron</command> 自動下載它們。不會安裝它們 — 那是管理者的權限與工作 — 但已下載的套件可以在地 (於 APT 快取內) 安裝，速度快多了。</para>

    <para>同時管理多部電腦的管理者一定很感謝被通知有待升級的套件，但升級本身還是很繁瑣的工作，所有有另個 <filename>/etc/cron.daily/apt</filename> 腳本 (在 <emphasis role="pkg">apt</emphasis> 套件內) 可用。此腳本亦是由 <command>cron</command> 每日執行 (且不是互動式)。以 APT 組態變數 (儲存在檔案內的 <filename>/etc/apt/apt.conf.d/</filename>) 控制其運作。主要的變數是：</para>
    <variablelist>
      <varlistentry>
        <term><literal>APT::Periodic::Update-Package-Lists</literal></term>
        <listitem>
	  <para>此選項允許您指定重新載入的頻率。<command>apticron</command> 也可以在無變數的前提下執行，因為 <command>apticron</command> 本來就已在執行中。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>APT::Periodic::Download-Upgradeable-Packages</literal></term>
        <listitem>
	  <para>再次地，此選項指定頻率 (以日計)，此時實際地下載套件。同樣地，使用者不需指定執行 <command>apticron</command>。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>APT::Periodic::AutocleanInterval</literal></term>
        <listitem>
	  <para>此選項包括 <command>apticron</command> 沒有的功能。指定過時套件 (未被任何發行版參照) 移出 APT 快取的時機。如此一來，APT 快取的容量就保持在合理的範圍，不必再擔心其工作負擔。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>APT::Periodic::Unattended-Upgrade</literal></term>
        <listitem>
	  <indexterm><primary><emphasis role="pkg">unattended-upgrades</emphasis></primary></indexterm>
	  <para>啟用此選項後，逐日啟用的腳本將執行 <command>unattended-upgrade</command> (從 <emphasis role="pkg">unattended-upgrades</emphasis> 套件中取用) — 如其名稱所示 — 可自動化升級同套件 (預設祗執行安全性升級，但可在 <filename>/etc/apt/apt.conf.d/50unattended-upgrades</filename> 內客製化它)。執行 <command>dpkg-reconfigure -plow unattended-upgrades</command> 時可以設定此選項。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>其他的選項允許更精細地控制清空快取。未完全列出，但可在 <filename>/etc/cron.daily/apt</filename> 腳本中查看。</para>

    <indexterm><primary><emphasis role="pkg">gnome-packagekit</emphasis></primary></indexterm>
    <para>這些工具在伺服器運作正常，但桌面使用者則習慣於互動式系統。所以，“Debian 桌面環境” 安裝 <emphasis role="pkg">gnome-packagekit</emphasis> (至少適用於使用 GNOME 桌面環境者)。需要升級時在桌面環境的通知區塊有個圖示；按下該圖示則執行 <command>gpk-update-viewer</command> 命令，簡化的升級介面。瀏覽可用的升級，讀取相關套件的說明以及對應的 <filename>changelog</filename> 款目，並選擇升級的部份。</para>

    <figure>
      <title>使用 <command>gpk-update-viewer</command> 升級</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/gnome-packagekit.png" scalefit="1" width="70%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="sect.automatic-upgrades">
    <title>自動升級</title>
    <indexterm><primary>升級</primary><secondary>系統自動升級</secondary></indexterm>
    <indexterm><primary>自動升級</primary></indexterm>

    <para>因為 Falcot Corp 雖有多部電腦但功能陽春，其管理者試圖儘可能地自動升級。必須在無人為介入情況下處理升級事宜。</para>
    <section>
      <title>組態 <command>dpkg</command></title>

      <para>如稍早提過的 (見專欄 <xref linkend="sidebar.questions-conffiles" />)，<command>dpkg</command> 可在不必確認的情況下取代原來的組態檔 (以 <literal>--force-confdef --force-confold</literal> 選項執行該功能)。然而，有三個互動來源：有些來自 APT 自身、有些由 <command>debconf</command> 處理、還有的是由套件組態腳本執行。</para>
    </section>
    <section>
      <title>組態 APT</title>

      <para>APT 的例子很簡單：<literal>-y</literal> 選項 (或 <literal>--assume-yes</literal>) 告訴 APT 面對所有的問題時，答案都是 “yes”。</para>
    </section>
    <section>
      <title>組態 <command>debconf</command></title>

      <para><command>debconf</command> 需要較詳細的說明。此程式原本的設計就是控制給使用者看到的相關性及數量，以及顯示的方法。問題需有最小的優先權；擁有最小優先權以上的問題才顯示。<command>debconf</command> 預設的答案 (由套件維護者設定) 會略過。</para>

      <para>其他的相關組態元素是前端用到的介面。若選擇 <literal>noninteractive</literal>，就停用所有的使用者互動。若套件試圖顯示資訊性說明，則以電子郵件送給管理者。</para>

      <para>組態 <command>debconf</command> 時，用到 <command>dpkg-reconfigure</command> 工具，它是來自 <emphasis role="pkg">debconf</emphasis> 套件；相關的命令是 <command>dpkg-reconfigure debconf</command>。組態值可能是在需要時暫時取代的環境變數 (例如，<varname>DEBIAN_FRONTEND</varname> 控制介面，如同在 <citerefentry><refentrytitle>debconf</refentrytitle><manvolnum>7</manvolnum></citerefentry> 手冊頁面所述)。</para>
    </section>
    <section>
      <title>處理命令列介面</title>

      <para>最後一個互動來源，以及最難擺脫的，是 <command>dpkg</command> 執行的組態腳本。不幸的是，沒有標準的解法且沒有較佳的答案。</para>

      <para>通常的做法是，把標準的輸入由空白內容的 <filename>/dev/null</filename> 檔案轉向給 <command><replaceable>命令</replaceable> &lt;/dev/null</command>，或由新的鍵入字串取代。以上的方法都不是 100 % 可靠，但它們可以轉至預設的答案，因為大部份的腳本已考量到無預設值的答案。</para>
    </section>
    <section>
      <title>神奇的組合</title>

      <para>把前述的元素組合起來，就可能設計出一個可處理自動升級的小而可靠腳本。</para>

      <example id="example.non-interactive-upgrade">
        <title>無互動升級腳本</title>

        <programlisting>export DEBIAN_FRONTEND=noninteractive
yes '' | apt-get -y -o DPkg::options::="--force-confdef" -o DPkg::options::="--force-confold" dist-upgrade</programlisting>
      </example>

      <sidebar>
        <title><emphasis>實務</emphasis> Falcot Corp 個案</title>

	<para>Falcot 公司採用異質系統電腦，執行多種功能。管理者必須為每部電腦挑選最適合的解決方案。</para>

	<para>事實上，安裝 <emphasis role="distribution">Jessie</emphasis> 的伺服器腦採用上述的 “奇特組合”，並且自動更新。祗有最挑剔的伺服器 (如防火牆) 才以 <command>apticron</command> 設定，所以總是在管理員的監控下更新。</para>

	<para>辦公室的桌機也可安裝 <emphasis role="distribution">Jessie</emphasis>，但加裝 <emphasis role="pkg">gnome-packagekit</emphasis>，所以使用者可以自行更新。沒有使用者介入的更新，電腦可能出現無預期的結果，可能讓使用者摸不清頭緒。</para>

	<para>在實驗室裡，有些安裝 <emphasis role="distribution">測試版</emphasis> — 就是使用最新版的軟體 — 的電腦也不會自動更新。管理者必須組態 APT 才能更新它們；決定更新時 (手動)，列出重新載入套件清單並避免下載繁瑣的部件，管理者就能專注在真正有用的部件。</para>
      </sidebar>
    </section>
  </section>
  <section id="sect.searching-packages">
    <title>搜尋套件</title>

    <para>Debian 納入的軟體愈來愈多，出現自相矛盾的現象：Debian 的工具可以處理大部份的工作，但很難在眾多的套件中找到適合的工具。沒有適當的方式搜尋 (或找到) 正確的工具始終是個問題。幸運的是，此問題已經幾乎全部解決了。</para>

    <para>最瑣碎的搜尋可能是找到正確的套件名稱。若 <command>apt show <replaceable>套件名稱</replaceable></command> 送回結果，表示該套件存在。不幸的是，必須知道或猜對套件名稱，卻幾乎是不可能的.</para>

    <sidebar>
      <title><emphasis>秘訣</emphasis> 套件命名慣例</title>

      <para>部份類型的套件遵循慣例命多；祗要知道該慣例就能夠猜到正確的套件名稱。例如，Perl 模組，慣例是稱呼為 <literal>XML::Handler::Composer</literal> 上游的套件名就是 <emphasis role="pkg">libxml-handler-composer-perl</emphasis>。從 Python 啟用 <command>gconf</command> 系統的程式庫就是套件 <emphasis role="pkg">python-gconf</emphasis>。不幸的是即使套件管理者努力選擇上游發展者的慣例，仍無法猜中所有套件的通俗慣例。</para>
    </sidebar>

    <para>搜尋純文字的套件名稱，雖然有限但成功率較高。還可以搜尋套件說明的內容：除了搜尋套件名稱、鍵詞之外，還可搜尋其說明。<command>apt-cache</command> 與 <command>axi-cache</command> 是此等搜尋的工具；例如，<command>apt-cache search video</command> 將找出名稱或說明內有鍵詞 “video” 的套件。</para>

    <para>更複雜的搜尋，需要更有力的工具，如 <command>aptitude</command> 是其中之一。<command>aptitude</command> 可搜尋套件元資料欄位的內容。例如，以下的範例搜尋含有 <literal>kino</literal> 字樣的套件名稱，其說明包括 <literal>video</literal> 與維護者名字為 <literal>paul</literal>：</para>

    <screen>$ <userinput>aptitude search kino~dvideo~mpaul</userinput>
p   kino  - Non-linear editor for Digital Video data
$ <userinput>aptitude show kino</userinput>
Package: kino
State: not installed
Version: 1.3.4-2.1+b1
Priority: extra
Section: video
Maintainer: Paul Brossier &lt;piem@debian.org&gt;
Architecture: amd64
Uncompressed Size: 8,472 k
Depends: libasound2 (&gt;= 1.0.16), libatk1.0-0 (&gt;= 1.12.4), libavc1394-0 (&gt;=
         0.5.3), libavcodec56 (&gt;= 6:11~beta1) | libavcodec-extra-56 (&gt;=
         6:11~beta1), libavformat56 (&gt;= 6:11~beta1), libavutil54 (&gt;=
         6:11~beta1), libc6 (&gt;= 2.14), libcairo2 (&gt;= 1.2.4), libdv4,
         libfontconfig1 (&gt;= 2.11), libfreetype6 (&gt;= 2.2.1), libgcc1 (&gt;=
         1:4.1.1), libgdk-pixbuf2.0-0 (&gt;= 2.22.0), libglade2-0 (&gt;= 1:2.6.4-2~),
         libglib2.0-0 (&gt;= 2.12.0), libgtk2.0-0 (&gt;= 2.24.0), libice6 (&gt;=
         1:1.0.0), libiec61883-0 (&gt;= 1.2.0), libpango-1.0-0 (&gt;= 1.14.0),
         libpangocairo-1.0-0 (&gt;= 1.14.0), libpangoft2-1.0-0 (&gt;= 1.14.0),
         libquicktime2 (&gt;= 2:1.2.2), libraw1394-11, libsamplerate0 (&gt;= 0.1.7),
         libsm6, libstdc++6 (&gt;= 4.9), libswscale3 (&gt;= 6:11~beta1), libx11-6,
         libxext6, libxml2 (&gt;= 2.7.4), libxv1, zlib1g (&gt;= 1:1.1.4)
Recommends: ffmpeg, curl
Suggests: udev | hotplug, vorbis-tools, sox, mjpegtools, lame, ffmpeg2theora
Conflicts: kino-dvtitler, kino-timfx, kinoplus
Replaces: kino-dvtitler, kino-timfx, kinoplus
Provides: kino-dvtitler, kino-timfx, kinoplus
Description: Non-linear editor for Digital Video data
 Kino allows you to record, create, edit, and play movies recorded with DV
 camcorders. This program uses many keyboard commands for fast navigating and
 editing inside the movie. 
 
 The kino-timfx, kino-dvtitler and kinoplus sets of plugins, formerly
 distributed as separate packages, are now provided with Kino.
Homepage: http://www.kinodv.org/

Tags: field::arts, hardware::camera, implemented-in::c, implemented-in::c++,
      interface::x11, role::program, scope::application, suite::gnome,
      uitoolkit::gtk, use::editing, use::learning, works-with::video,
      x11::application</screen>

    <para>此搜尋祗找到一個套件，<emphasis role="pkg">kino</emphasis>，滿足全部三個條件。</para>

    <para>這種多條件的搜尋較為剛性，所以很少人用它。因此發明新的標籤系統，以不同角度處理搜尋。套件的標籤在其他情況之外多了專題性分類，通稱為 “層面性分類”。以前述的 <emphasis role="pkg">kino</emphasis> 為例，套件標籤指出 Kino 是處理影像的 Gnome 級軟體，主要功能為編輯。</para>

    <para>瀏覽此分類系統可協助搜尋對應的已知需求；即使收到一堆 (合理數量) 結果，還可以用人工方式再搜尋。可以使用 <literal>~G</literal> 搜尋模式於 <command>aptitude</command> 內，但可以再簡化瀏覽標籤管理的網站：<ulink type="block" url="http://debtags.alioth.debian.org/cloud/" /></para>

    <indexterm><primary><emphasis role="pkg">debtags</emphasis></primary></indexterm>
    <indexterm><primary>標籤</primary></indexterm>
    <para>以 <literal>works-with::video</literal> 及 <literal>use::editing</literal> 標籤可找出若干套件，包括 <emphasis role="pkg">kino</emphasis> 與 <emphasis role="pkg">pitivi</emphasis> 影像編輯器。愈來愈多人使用這種分類系統，在此基礎上，套件管理者建立更有效的介面。</para>

    <para>總的來說，最好的工具視搜尋複雜度而定：</para>
    <itemizedlist>
      <listitem>
	<para><command>apt-cache</command> 祗能搜尋套件名稱與說明，很適合搜尋符合少許鍵詞的特定套件；</para>
      </listitem>
      <listitem>
	<para>搜尋對象包括維護者名稱在內的套件關係或其他元資料時，<command>synaptic</command> 就派上用場了；</para>
      </listitem>
      <listitem>
	<para><command>packagesearch</command> 是圖形介面的標籤型搜尋工具，可搜尋若干領域的套件 (包括套件內的檔案名稱)。命令列的工具，則使用 <command>axi-cache</command>。</para>
        <indexterm><primary><emphasis role="pkg">packagesearch</emphasis></primary></indexterm>
	<indexterm><primary><command>axi-cache</command></primary></indexterm>
      </listitem>
      <listitem>
	<para>最後，需要邏輯運算元的複雜搜尋時，首選工具為 <command>aptitude</command> 的語法，雖然功能強大但較為難用，它有命令列與互動模式兩種介面。</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
