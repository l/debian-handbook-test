<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="the-debian-project">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-the-debian-project.png" scalefit="1" />
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>目標</keyword>
      <keyword>方法</keyword>
      <keyword>運作</keyword>
      <keyword>志工</keyword>
    </keywordset>
  </chapterinfo>
  <title>Debian 計畫</title>
  <highlights>
    <para>進入科技層面前，先看看 Debian 計畫本身、其目標、方法、以及運作。</para>
  </highlights>
  <section id="sect.what-is-debian">
    <title>Debian 是什麼？</title>
    <indexterm><primary>協會</primary></indexterm>

    <sidebar>
      <title><emphasis>文化</emphasis> Debian 名稱的來源</title>

      <para>近點看：Debian 不是縮寫字。其名稱是，真實的，結合兩個名字：Ian Murdock 與當時的女朋友 Debra。Debra + Ian = Debian。</para>
    </sidebar>

    <para>Debian 是一套 GNU/Linux 散佈版。我們會在 <xref linkend="sect.role-of-distributions" /> 討論散佈版的定義，但不是現在，目前只須知道 Debian 是個完整的作業系統，其中包括安裝與管理所需的軟體與系統，而且全都以 Linux 核心與自由軟體 (特別是來自 GNU 專案的自由軟體) 為基礎。</para>

    <para>1993年，也就是 Debian 誕生之時，在自由軟體基金會的領導下，Ian Murdock 有相當明確的目標任務，並將之列在 <emphasis>Debian 宣言</emphasis> 中。他所追尋的自由作業系統有兩個重要原則。第一，品質：要用心開發 Debian、發揮 Linux 核心的價值。此外，也希望它是個足以和主要商業散佈版競爭的非商業性散佈版。從他的眼裡看來，唯有參照 Linux 與 GNU 專案的模式開啟 Debian 的開發，才能達成這兩個期望。所以，同儕審核將是成品永續改善的源動力。</para>

    <sidebar>
      <title><emphasis>文化</emphasis> GNU，自由軟體基金會的計畫</title>
      <indexterm><primary>GNU</primary></indexterm>
      <indexterm><primary>GNU</primary><secondary>is Not Unix</secondary></indexterm>

      <para>GNU 計畫由自由軟體基金會領導者 Dr. Richard M. Stallman 發起與支援的自由軟體計畫。GNU 是迴文，原意是 ‘GNU is Not Unix’。</para>
    </sidebar>

    <sidebar>
      <title><emphasis>文化</emphasis> Richard Stallman</title>
      <indexterm><primary>Stallman, Richard</primary></indexterm>
      <indexterm><primary>RMS</primary></indexterm>

      <para><acronym>自由軟體基金會</acronym> 的創始者與 GPL 授權的著者，Richard M. Stallman (通常簡稱其縮寫字母RMS) 是自由軟體運動的領導者。因為其不妥協的立場，並不是每個人都喜歡他，不過對自由軟體的非技術性貢獻 (尤其在法律與哲學層面) 受到大家的尊敬。</para>
    </sidebar>
    <section>
      <title>跨平台作業系統</title>
      <indexterm><primary>統發行版</primary></indexterm>

      <sidebar>
        <title><emphasis>社群</emphasis> Ian Murdock 的旅程</title>
        <indexterm><primary>Ian Murdock</primary></indexterm>
        <indexterm><primary>Murdock, Ian</primary></indexterm>
        <indexterm><primary>成果</primary></indexterm>

	<para>Ian Murdock 創立 Debian 計畫，1993年至1996年的第一任領導者。然後交棒給 Bruce Perens，Ian 扮演較不公開的角色。回到自由軟體社群的幕後，創立 Progeny 公司，意圖行銷 Debian 的衍生版。很不幸，此創投失敗、最後放棄了。做為服務供應者，掙扎幾年後，在 2007 年4月宣告破産。祗有 <emphasis>discover</emphasis> 計畫還活著。它是自動偵測硬體的工具。</para>
      </sidebar>

      
      <para>Debian 仍堅持初衷，持續發展至今天的規模。成為以12個架構涵蓋10個硬體的兩個核心 (Linux 與 FreeBSD，雖然 FreeBSD 不是官方支持的架構)。尤有甚者，其 21,000 多個原始套件幾乎適用任何需求，家用或企業用。</para>

      <para>發行版的規模很不方便：需要 84 CD-ROM 才能在標準的 PC 安裝完整的版本 … 所以 Debian 採用 '超發行版' 模式，抽取部份內容形成特別的發行版：Debian-Desktop 供傳統的辦公室使用、 Debian-Edu 供學術環境的教育與教學使用、Debian-Med 供醫學使用、Debian-Junior 供青少年使用等。完整的清單，參見 <xref linkend="sect.sub-projects" />.</para>

      <para>這些 Debian 版本以良好的框架組成，保證 '次發行版' 間沒有扞格。他們採用通用的計畫釋出新的版本。因為基礎相同，可以輕鬆地從 Debian 儲藏庫擴充、完成與客製化。</para>
      <indexterm><primary>次計畫</primary></indexterm>

      <para>所有的 Debian 工具以此方式運作：<command>debian-cd</command> 運作多時由一組 CD-ROMs 納入預選的套件；<command>debian-installer</command> 也是模組化安裝器，容易改裝符合特定需要。<command>APT</command> 從其他來源安裝套件，保證彼此的一致性。</para>

      <sidebar>
        <title><emphasis>工具</emphasis> 燒錄 Debian CD-ROM</title>
        <indexterm><primary><command>debian-cd</command></primary></indexterm>

	<para><command>debian-cd</command> 把 ISO 映像檔燒錄在媒體 (CD、DVD、BluRay等) 立即可用。相關的討論 (英文) 在 <email>debian-cd@lists.debian.org</email> 討論群組。由 Steve McIntyre 領導處理官方的 Debian ISO。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>基礎</emphasis> 對每部電腦、其架構</title>

	<para>'架構' 表示電腦的類型 (常見的是 Mac 或 PC)。依照處理器區分架構，彼此不相容。硬體的不同涉及作業方式，因需要重新編譯軟體才能使用。</para>
        <indexterm><primary>架構</primary></indexterm>
        <indexterm><primary>處理器</primary></indexterm>

	<para>Debian 的軟體多半以可移殖語言撰寫：原始碼可編譯成多種架構使用。實際上，可執行的二進位碼，總是編譯供特定架構使用，不能使用於其他架構。</para>

	<para>每個程式由原始碼寫成；原始碼是由特定程式語言的指令寫成的純文字檔。使用此軟體前，必須先編譯原始碼，即轉換為二進位碼 (可被處理器執行的機器指令)。每個程式語言都有自己的編譯器執行此運作 (如， <command>gcc</command> 供 C 語言使用)。</para>
        <indexterm><primary>原始</primary><secondary>碼</secondary></indexterm>
        <indexterm><primary>二進位碼</primary></indexterm>
        <indexterm><primary>編譯</primary></indexterm>
        <indexterm><primary>編譯器</primary></indexterm>
      </sidebar>

      <sidebar>
        <title><emphasis>工具</emphasis> 安裝器</title>
        <indexterm><primary><command>debian-installer</command></primary></indexterm>

	<para><command>debian-installer</command> 是 Debian 安裝程式的名字。它的模組化設計允許在多種安裝環境下使用。由Cyril Brulebois 主持的 <email>debian-boot@lists.debian.org</email> 郵寄名單協調其發展。</para>
      </sidebar>
    </section>
    <section>
      <title>自由軟體的品質</title>

      <para>Debian 遵守自由軟體的原則，準備妥當才釋出新版本。沒有釋出新版本的固定期限。很多人抱怨 Debian 穩定版的間隔太長，但此現象確保 Debian 的穩定性：長期的測試是 '穩定' 標籤的保證。</para>

      <para>Debian 不向品質妥協：新版之前必須解決嚴重的錯誤，即使被迫延後釋出日期。</para>
    </section>
    <section>
      <title>法律框架：非營利組織</title>

      <para>就法而言，Debian 是美國非營利、志願組織的一個計畫。此計畫由數千名 <emphasis>Debian 發展者</emphasis> 組成，再加上其他貢獻者 (譯者、錯誤報告者、藝術者、插花的發展者等)。</para>

      <para>為了完成其作業，Debian 還有大型的基礎架構，包括由多個贊助者支持的，連結在網際網路的伺服器。</para>

      <sidebar>
        <title><emphasis>社群</emphasis> Debian 背後、SPI 協會、與在地分會</title>
        <indexterm><primary>協會</primary></indexterm>
        <indexterm><primary>SPI</primary></indexterm>
        <indexterm><primary>Debian 法國</primary></indexterm>
        <indexterm><primary>公共利益的軟體</primary></indexterm>

	<para>Debian 未擁有任何以其為名的伺服器，因為它祗是 <emphasis>公共利益的軟體</emphasis> 協會下的一個計畫，公共利益的軟體 SPI 才是管理與經費來源 (捐贈、購買硬體等) 的單位。原先為了 Debian 計畫而成立，此協會目前已主持多個軟體計畫，包括 PostgreSQL 資料庫、Freedesktop.org (標準化當代圖形桌面環境的計畫，包括 GNOME 與 KDE)、與 Libre Office 生產軟體套件。<ulink type="block" url="http://www.spi-inc.org/" /></para>

	<para>在公共利益的軟體協會 SPI 之外，還有很多協會與 Debian 密切合作為其募款，不必把重心全部放在 USA：以 Debian 的話語來說就是 '信任的組織'。此做法避免國際轉帳的成本，也符合此計畫去中央化的本質。</para>

	<para>信任的組織不多，多半是 Debian 相關的協會意在推廣 Debian:<emphasis>Debian France</emphasis>、<emphasis>Debian-ES</emphasis>、<emphasis>debian.ch</emphasis>，及其他遍及世界各地的協會。別客氣加入並支持這些計畫！<ulink type="block" url="http://wiki.debian.org/Teams/Auditor/Organizations" /> <ulink type="block" url="http://france.debian.net/" /> <ulink type="block" url="http://www.debian-es.org/" /> <ulink type="block" url="http://debian.ch/" /></para>
      </sidebar>
    </section>
  </section>
  <section id="sect.foundation-documents">
    <title>基金會文件</title>
    <indexterm><primary>基金會文件</primary></indexterm>

    <para>釋出幾年後，Debian 整理其做為自由軟體計畫應遵守的原則。確保其成員都能夠朝著同個方向前進。成為 Debian 發展者之前，必須確認且證明其對於 Debian 基金會文件的支援與執著。</para>

    <para>發展過程少不了爭論，但基金會文件確實受到支持，且很少變動。Debian 憲法同時保證其穩定：任何修訂必須得到4分之3多數的同意。</para>

    <section id="sect.social-contract">
      <title>使用者的承諾</title>
      <indexterm><primary>社群契約</primary></indexterm>
      <indexterm><primary>契約，社群</primary></indexterm>

      <para>此計畫也稱為 '社群契約'。這份文件怎麼和作業系統的發展扯上關係？很簡單：Debian 為使用者而存在，所以，從大範圍來說，就是為社會。此契約綜合計畫的承諾。詳情如下：</para>

      <orderedlist>
        <listitem>
	  <para>Debian 將始終是 100% 自由的。</para>

	  <para>做為第一個信條 Debian 現在及未來永遠全部且祗由自由軟體構成。而且，由 Debian 計畫發展的軟體，本身，將是自由的。</para>

          <sidebar>
            <title><emphasis>遠景</emphasis> 軟體之外</title>

	    <para>第一版的 Debian 社群契約提及 'Debian 永遠是 100% 的自由 <emphasis>軟體</emphasis>'。後來少了一個字 (2004年4月 1.1 版批次此變動) 表示其目標是自由，不祗是軟體還包括 Debian 希望透過其作業系統提供的其他元素也是自由的。</para>

	    <para>此改變，雖然祗是編輯上的，實際上，卻產生很多影響，特別是移除很多有問題的文件。尤其是，驅動程式的韌體造成的問題：很多是不自由的，卻是相對硬體不可或缺的一部份。</para>
          </sidebar>
        </listitem>
        <listitem>
	  <para>我們將回報自由軟體社羣。</para>

	  <para>Debian 計畫納入發行版的改進必定送回原著者 (稱為 '上游')。也就是說，Debian 與社群合作絕不孤立。</para>

          <sidebar>
            <title><emphasis>社群</emphasis> 上游著者、或 Debian 發展者？</title>
            <indexterm><primary>上游著者</primary></indexterm>
            <indexterm><primary>著者，上游</primary></indexterm>
            <indexterm><primary>上游</primary></indexterm>

	    <para>'上游著者' 係指發展作品的人，撰寫與發展該作品的人。另一種是 'Debian 發展者'，把既有的作品納入 Debian 套件 ('Debian 維護者' 或許是更適合的術語)。</para>

	    <para>實務上，其區別並不明顯。Debian 維護者可能撰寫補丁，讓使用者受益。一般來說，Debian 鼓勵負責包裝套件的人也參與 '上游' 的發展 (然後，他們成為貢獻者，不必自我設限為程式的使用者)。</para>
          </sidebar>
        </listitem>
        <listitem>
	  <para>我們絕不隱瞞問題。</para>

	  <para>Debian 不是完美的，每天都找出新的問題，並修正它。隨時把錯誤報告資料庫完整地呈現在社會大眾面前。線上的報告將被大眾檢視。</para>
        </listitem>
        <listitem>
	  <para>優先考慮我們的使用者及自由軟體。</para>

	  <para>很難定義此承諾。從某個角度來說，Debian 的決定都是有主見的，廢止發展者提出的輕鬆解決方案若有礙使用者，轉而採用複雜難以執行的。也就是說，使用者與自由軟體的利益，放在第一位。</para>
        </listitem>
        <listitem>
	  <para>不符合我們自由軟體規範的作品。</para>

	  <para>Debian 接受並瞭解使用者對非自由軟體的需要。允許在 Debian 的基礎上再發行含非自由軟體的 Debian 套件。</para>

          <sidebar>
            <title><emphasis>社群</emphasis> 贊成或反對非自由的部份？</title>
            <indexterm><primary>非自由</primary></indexterm>
            <indexterm><primary>區</primary><secondary>非自由</secondary></indexterm>

	    <para>Debian 社群經常爭論納入不自由軟體的結構 (即 '不自由' 區塊，見邊欄 <xref linkend="sidebar.sections" />)。</para>

	    <para>批評者認為等同於把人驅離自由軟體，違反祗服務自由軟體的原則。支持者則指出大部份的不自由套件已 '接近自由'，祗多了一兩個惱人的限制 (最常見的是禁止商業使用)。在不自由區塊發行這些作品，我們向著者解釋被納入的作品可擴大其知名度與散布面。然後，客氣地請求變更授權以達成其目標。</para>

	    <para>經過 2004 不成功的嚐試後，移除非自由區塊並沒有達成目標，尤其被移除很多有用的文件。特別是 GNU 計畫內的若干軟體文件 (指的是 Emacs 和 Make)。</para>

	    <para>自由軟體基金會痛恨非自由區塊，成為拒絕正式推薦 Debian 為自由軟體作業系統的主因。</para>
          </sidebar>
        </listitem>
      </orderedlist>
    </section>
    <section id="sect.dfsg">
      <title>Debian 自由軟體指導方針</title>
      <indexterm><primary>自由軟體原則</primary></indexterm>
      <indexterm><primary>DFSG</primary></indexterm>
      <indexterm><primary>Debian 自由軟體指導方針</primary></indexterm>
      <indexterm><primary>自</primary><secondary>軟體</secondary></indexterm>

      <para>此文件定義被 Debian 納入的軟體為 '自由軟體'。合乎此原則的授權被納入主區塊；不合者，祗要允許自由散布，就列入非自由區塊。非自由區塊不是 Debian 正式的內容；祗是對使用者的額外服務。</para>

      <para>在區隔 Debian 納入的軟體類型外，此文件成為權威的自由軟體說明，做為 '自由軟體定義' 的基礎。從時間序來說，此文件為對 '自由軟體' 概念的第一個正式定義。</para>

      <para>GNU 通用公共授權、BSD 授權、Artistic 授權是傳統上符合該9項的自由授權。以下是官網的中文譯本。<ulink type="block" url="https://www.debian.org/social_contract.zh-tw.html" /></para>
      <orderedlist>
        <listitem>
          <formalpara>
            <title>自由的再次散佈。</title>

	    <para>Debian 元件的許可証不得限制任何一方將此軟體作爲含有 若幹不同來源的程式的一套軟體集合中的一個元件用於銷售或者捐贈。該許可證不得向諸如此類銷售行爲的銷售方索取 專利費或者其它費用。</para>
          </formalpara>

          <sidebar>
            <title><emphasis>基本</emphasis> 自由授權</title>
            <indexterm><primary>授權</primary><secondary>BSD</secondary></indexterm>
            <indexterm><primary>BSD 授權</primary></indexterm>
            <indexterm><primary>授權</primary><secondary>GPL</secondary></indexterm>
            <indexterm><primary>GPL</primary></indexterm>
            <indexterm><primary>GNU</primary><secondary>通用公共授權</secondary></indexterm>
            <indexterm><primary>通用公共授權</primary></indexterm>
            <indexterm><primary>授權</primary><secondary>artistic</secondary></indexterm>
            <indexterm><primary>artistic 授權</primary></indexterm>

	    <para>GNU 通用公共授權、BSD 授權、與Artistic 授權都是與 Debian 自由軟體授權指導方針相容的授權，即使他們彼此並不相同。</para>

	    <para>GNU 通用公共授權是美國自由軟體基金會 (Free Software Foundation, FSF) 使用與推動的授權，最為常見。主要特色是適用於任何散布的衍生作品：採用通用公共授權的程式碼祗能以通用公共授權散布。因此，禁止在專屬軟體內再利用該等程式碼。不與通用公共授權相容的自由軟體也很難再利用通用公共授權的程式碼。以其他自由軟體授權的軟體不可能連結以通用公共授權的程式庫。從另個角度來說，通用公共授權是極度美國的：自由軟體基金會的律師參與通用公共授權的草擬，強迫違反者依其意願和解或進入法院的訴訟程序。<ulink type="block" url="http://www.gnu.org/copyleft/gpl.html" /></para>

	    <para>BSD 授權的限制最少：全部都授權，包括在專屬軟體內使用修改過的 BSD 授權程式碼。微軟用它，Windows NT 的 TCP/IP 層次採用 BSD 核心。<ulink type="block" url="http://www.opensource.org/licenses/bsd-license.php" /></para>

	    <para>最後，Artistic 授權屬於折衷派：允許整合程式碼於專屬軟體內，但必須公開修訂的部份。<ulink type="block" url="http://www.opensource.org/licenses/artistic-license-2.0.php" /></para>

	    <para>完整的授權可從 Debian 系統的<filename>/usr/share/common-licenses/</filename> 看到。</para>
          </sidebar>
        </listitem>
        <listitem>
          <formalpara>
            <title>原始碼。</title>

	    <para>程序必須包括原始碼，而且必須允許以原始碼以及預先編譯好的形式散佈。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>衍生作品。</title>

	    <para>授權必須允許對其所屬作品的修改以及衍生，而且必須允許這些作品在原始軟體的授權條款下散佈。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>作者原始碼的完整性。</title>

	    <para>此授權限制散布修改的原始碼 <emphasis>祗限</emphasis> 在編譯時才能納入發行的 '補丁' 做為修改程式之用。此授權必須明示允許在編譯時納入修改的原始碼。此授權可能要求衍生作品使用不同於原始軟體(<emphasis>這是妥協的做法。Debian 鼓勵所有的著者不要限制任何檔案，原始碼或二進位檔案，的修改作為</emphasis>)的名稱或產品編號。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>禁止歧視人或團體。</title>

	    <para>授權不能歧視任何人或團體。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>禁止歧視各領域貢獻者。</title>

	    <para>授權不能歧視把程式應用於的任何領域的人。例如，限制程式不得用於商業，或基因研究。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>許可證的散佈。</title>

	    <para>程式附帶的權利必須適用於程式的再散布無需加上其他的授權。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>許可證不能特定於 Debian。</title>

	    <para>程式的權利不能由是否爲 Debian 的一部分來決定。如果該程式從 Debian 中摘取出來使用或散布於 Debian 之外，再次發行的每個受衆都將擁有與 Debian 系統結合時完全相同的權利。</para>
          </formalpara>
        </listitem>
        <listitem>
          <formalpara>
            <title>授權不得污染其他軟體。</title>

	    <para>不得限制與此軟體一起散布的軟體。例如，不得要求與其在一同散布的軟體必須是自由軟體。</para>
          </formalpara>

          <sidebar>
            <title><emphasis>基礎</emphasis> 著佐權</title>
            <indexterm><primary>著佐權</primary></indexterm>
            <indexterm><primary>著作權</primary></indexterm>

	    <para>著佐權是使用著作權保護自由作品及其衍生作品的原則。其實是對 '著作權' 一詞的雙關語。一個喜歡雙關語的人，告訴理查德·斯托曼：'著佐權：版權回覆'。著佐權強制保留發行原著或衍生著作 (通常是程式) 原來的自由。源自著佐權的程式碼，不能把散布成專屬軟體。</para>

	    <para>知名度最高的著佐權授權是，GNU 通用公共授權及其衍生品、GNU 寬鬆通用公共授權、以及 GNU 自由文檔授權。不幸的是，著佐權授權彼此不相容。所以，最好祗使用其中之一。</para>
          </sidebar>
        </listitem>
      </orderedlist>

      <sidebar id="sidebar.bruce-perens">
        <title><emphasis>社群</emphasis> 布魯斯·佩倫斯，另類的領導者</title>
        <indexterm><primary>布魯斯·佩倫斯</primary></indexterm>
        <indexterm><primary>佩倫斯，布魯斯</primary></indexterm>
        <indexterm><primary>開放原始碼</primary></indexterm>

	<para>布魯斯·佩倫斯是 Debian 的第二位領導者，位居伊恩·默多克之後。動態與專制的行徑給人深刻印象。永遠是 Debian 的重要貢獻者，認為 Debian 有負於 Debian自由軟件指導方針發起人伊恩·休斯勒。所以，布魯斯藉以導出著名的 '開放源碼定義'，移除來自 Debian 的參照。<ulink type="block" url="http://www.opensource.org/" /></para>

	<para>離開 Debian 頗為激動，但布魯斯仍與 Debian 保持連繫，在政治與經濟層面持續推動 Debian。偶而電子郵件清單中提供意見流露對 Debian 初衷的支持。</para>
        <indexterm><primary>代號</primary></indexterm>
        <indexterm><primary>名稱</primary><secondary>代號</secondary></indexterm>
        <indexterm><primary><emphasis role="distribution">抱抱龍</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">巴斯</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">寶貝</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">火腿</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">彈簧狗</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">蛋頭</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">胡迪</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">綠色士兵</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">畫板</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">雷尼</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">三眼仔</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">企鵝吱吱</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">翠絲</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">大章魚</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">臭小子</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="distribution">阿薛</emphasis></primary></indexterm>
        <indexterm><primary>玩具總動員</primary></indexterm>
        <indexterm><primary>皮克斯</primary></indexterm>

	<para>最後的軼事，布魯斯負責為 Debian 的各版本 '代碼' 命名。(1.1 — <emphasis role="distribution">抱抱龍</emphasis>, 1.2 — <emphasis role="distribution">巴斯</emphasis>, 1.3 — <emphasis role="distribution">寶貝</emphasis>, 2.0 — <emphasis role="distribution">小豬撲滿</emphasis>, 2.1 — <emphasis role="distribution">玩具狗</emphasis>, 2.2 — <emphasis role="distribution">蛋頭</emphasis>, 3.0 — <emphasis role="distribution">胡迪</emphasis>, 3.1 — <emphasis role="distribution">綠色隊長</emphasis>, 4.0 — <emphasis role="distribution">玩具黑板</emphasis>, 5.0 — <emphasis role="distribution">望遠鏡</emphasis>, 6.0 — <emphasis role="distribution">三眼仔</emphasis>, 7 — <emphasis role="distribution">吱吱</emphasis>, 8 — <emphasis role="distribution">翠絲</emphasis>, 9(待釋出) — <emphasis role="distribution">紫色章魚</emphasis>, 10 (待釋出) — <emphasis role="distribution">臭小子</emphasis>, <emphasis role="distribution">不穩定版</emphasis> — <emphasis role="distribution">席德</emphasis>)。都取材自玩具總動員電影裡的角色。皮克斯動畫工作室推出完全以電腦動畫構成的這部電影，領導 Debian 的布魯斯當時在此工作室任職。'席德' 此代碼較特別，代表 <emphasis role="distribution">不穩定</emphasis> 版。在電影裡，是隔壁的男孩，總是打破玩具 — 所以不要太靠近 <emphasis role="distribution">不穩定</emphasis> 版。另一方面，其英文名字 <emphasis role="distribution">Sid</emphasis> 也可代表 ‘Still In Development’ 發展中的縮寫。</para>
      </sidebar>
    </section>
  </section>
  <section id="sect.debian-internals">
    <title>Debian 的內部作業</title>
    <indexterm><primary>作業，內部</primary></indexterm>
    <indexterm><primary>組織，內部</primary></indexterm>

    <para>從有經驗的 Debian 發展者、Debian 套件裡的個別或集體作品、以及使用者的回饋，Debian 計畫產出豐富的結果。</para>
    <section>
      <title>Debian 發展者</title>
      <indexterm><primary>發展者</primary><secondary>Debian 發展者</secondary></indexterm>

      <para>Debian 發展者有多項職責，也是計畫的正式成員，對計畫的方向有極大的影響力。Debian 發展者至少負責一個套件，根據其時間及意願，可以自行參與其他團隊，取得更多的責任。<ulink type="block" url="http://www.debian.org/devel/people" /> <ulink type="block" url="http://www.debian.org/intro/organization" /> <ulink type="block" url="http://wiki.debian.org/Teams" /></para>

      <sidebar>
        <title><emphasis>工具</emphasis> 發展者的資料庫</title>
        <indexterm><primary>發展者</primary><secondary>發展者的資料庫</secondary></indexterm>
        <indexterm><primary>資料庫</primary><secondary>發展者的資料庫</secondary></indexterm>

	<para>Debian 的資料庫包括所有登記有案的發展者、及其相關資訊 (地址、電話、經緯度等地理資訊)。部份資料 (姓名、國家、計畫內使用的名稱、IRC 名稱、GnuPG 鑰匙等) 係公開在網頁上。<ulink type="block" url="http://db.debian.org/" /></para>

	<para>地理資訊用於建立發展者在全球的分布地圖。Debian 是真正的國際計畫：雖然主要在 '西方國家'，其發展者確實遍布各大洲。</para>

        
        <figure>
          <title>Debian 發展者遍布全球</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/developers-map.png" scalefit="1" width="70%" />
            </imageobject>
          </mediaobject>
          <indexterm><primary>遍布全球</primary></indexterm>
        </figure>
      </sidebar>

      <para>套件維護是相當團隊性的活動、極需要記錄與規範。實際上，必須與 <emphasis>Debian 政策</emphasis> 的標準相符。幸運的，很多工具可以協助維護者的工作。因此，發展者可以集中心力在其套件及其他複雜的工作，諸如除錯。<ulink type="block" url="http://www.debian.org/doc/debian-policy/" /></para>

      <sidebar>
        <title><emphasis>基礎</emphasis> 維護套件，發展者的工作</title>
        <indexterm><primary>維護</primary><secondary>套件維護</secondary></indexterm>
        <indexterm><primary>套件</primary><secondary>維護</secondary></indexterm>

	<para>維護套件，表示 '包裝' 程式。特別是，定義安裝的方法，以便在安裝之後，此程式可以依照 Debian 計畫設定的規則運作並相容於 Debian 計畫。其結果是儲存在一個 <filename>.deb</filename> 檔案內。有效果的程式安裝不需要解壓縮檔案也不需要預安裝或再安裝其中的腳本。</para>

	<para>過了初始階段後，才真正開始維護流程：依照最新版的 Debian 政策準備更新，修正讀者報告的錯誤，並包括新的程式 '上游' 版本以備繼續同步發展。例如，初次包裝後，版本命名為 1.2.3。幾個月之後，原著者釋出新的穩定版，編號為 1.4.0。此時，Debian 維護者應更新套件，使用者才能取得最新的穩定版。</para>
      </sidebar>
      <indexterm><primary>Debian 政策</primary></indexterm>
      <indexterm><primary>Debian 政策</primary></indexterm>
      <indexterm><primary>政策</primary></indexterm>

      <para>政策本身，是 Debian 計畫重要的一環，確保套件的品質與發行版的互通性。感謝此套件，愈來愈龐大的 Debian 依然保持一致。政策不是銘刻在石不能改變，而是透過 <email>debian-policy@lists.debian.org</email> 郵寄名單的建議不斷演化。各方接受後才被一小群沒有編輯責任的維護者應用 (他們祗接納前述郵寄名單內 Debian 發展者的修訂內容)。錯誤追蹤系統內的修訂建議在此：<ulink type="block" url="http://bugs.debian.org/debian-policy" /></para>

      <sidebar>
        <title><emphasis>社群</emphasis> 政策編輯程序</title>

	<para>任何人都可以從 <emphasis role="pkg">debian-政策</emphasis> 頁面的 '希望清單' 提出錯誤報告請求修改 Debian 政策。在 <filename>/usr/share/doc/debian-policy/Process.html</filename> 內啟動：若被認可則必須由新增 Debian 政稱解決它，先從 <email>debian-policy@lists.debian.org</email> 郵寄名單討論有了共識後才提出建議。先草擬建議送出待批核 (以補丁方式呈現)。兩位其他的發展者認可後 (他們 '附議')，就由 <emphasis role="pkg">debian-policy</emphasis> 的套件維護者把該建議納入正式的文件。若未完成其中任何步驟，維護者關閉此錯誤，將該建議列為拒絕。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>DEBIAN 政策</emphasis> 文件</title>
        <indexterm><primary>文件</primary><secondary>位置</secondary></indexterm>
        <indexterm><primary>文件的位置</primary></indexterm>
        <indexterm><primary><filename>/usr/share/doc/</filename></primary></indexterm>
        <indexterm><primary><filename>README.Debian</filename></primary></indexterm>
        <indexterm><primary><filename>NEWS.Debian.gz</filename></primary></indexterm>

	<para>套件的文件儲存在 <filename>/usr/share/doc/<replaceable>package</replaceable>/</filename>。此資料夾通常包括描述套件維護者特別為 Debian調整的 <filename>README.Debian</filename> 檔案。也就是說，組態之前，先閱讀該檔案，獲取前人的經驗。同時還有 <filename>changelog.Debian.gz</filename> 檔案描述 Debian 維護者對於該套件的變更。不要與 <filename>changelog.gz</filename> 檔案 (或相當的檔案) 弄混，後者描述上游發展者做的改變。 <filename>copyright</filename> 檔案包括著作說明與軟體的授權。最後，還有<filename>NEWS.Debian.gz</filename> 檔案，讓 Debian 發展者列出與昇級有關的資訊；若已安裝 <emphasis>apt-listchanges</emphasis>，則自動顯示該等資訊。其他的檔案則針對軟體的問題。特別指出 <filename>examples</filename> 次資料夾，通常包括組態檔案的範例。</para>
      </sidebar>

      <para>政策含包裝的技術細節。計畫的大小也引發組織的問題；由 Debian 憲法處理，即建立決策的結構與方法。換句話說，就是正式的治理系統。</para>
      <indexterm><primary>憲法</primary></indexterm>
      <indexterm><primary>Debian 計畫領導人</primary></indexterm>
      <indexterm><primary>DPL</primary></indexterm>
      <indexterm><primary>領導人</primary><secondary>角色</secondary></indexterm>
      <indexterm><primary>領導人</primary><secondary>選舉</secondary></indexterm>

      <para>憲法設定若干角色與位置，以及其責任與權威。Debian 發展者擁有選舉賦予的絕對決定權威，重大議題需要投票者的四分之三 (75%) 多數支持 (例如那些影響基金會文件的決定)。然而，發展者每年選舉 '領導人' 代表參與會議，確保各團隊間的協調。此選舉多伴隨密集的討論。領導人的角色不是任何文件能夠設定：候選人提出自己對此職位的看法。實務上，領導人的角色包括擔任媒體的發言人、協調 '內部' 的團隊、以及帶領整個計畫，發展者可以：要求領導人依多數決批准計畫成員的參與。</para>

      <para>嚴格說來，領導人有絕對的權威；投票解決投票的問題；還沒有人負責的事都由領導人決定且可授權給他人。</para>
      <indexterm><primary>Murdock, Ian</primary></indexterm>
      <indexterm><primary>佩倫斯，布魯斯</primary></indexterm>
      <indexterm><primary>Jackson, Ian</primary></indexterm>
      <indexterm><primary>Akkerman, Wichert</primary></indexterm>
      <indexterm><primary>Collins, Ben</primary></indexterm>
      <indexterm><primary>Garbee, Bdale</primary></indexterm>
      <indexterm><primary>Michlmayr, Martin</primary></indexterm>
      <indexterm><primary>Robinson, Branden</primary></indexterm>
      <indexterm><primary>Towns, Anthony</primary></indexterm>
      <indexterm><primary>Hocevar, Sam</primary></indexterm>
      <indexterm><primary>McIntyre, Steve</primary></indexterm>
      <indexterm><primary>Zacchiroli, Stefano</primary></indexterm>
      <indexterm><primary>Nussbaum, Lucas</primary></indexterm>

      <para>成立以來，Debian 計畫已有多位領導人伊恩·默多克、布魯斯·佩倫斯、Ian Jackson、Wichert Akkerman、Ben Collins、Bdale Garbee、Martin Michlmayr、Branden Robinson、Anthony Towns、Sam Hocevar、Steve McIntyre、Stefano Zacchiroli 與 Lucas Nussbaum。</para>
      <indexterm><primary>技術委員會</primary></indexterm>

      <para>憲法也設立 '技術委員會'。發展者自身無法達成共識時由此委員會決策技術事宜。此外，當發展者無法解決自身職責所有的問題時，委員會就扮演顧問角色。祗有被爭議一方邀請後，才能涉入。</para>
      <indexterm><primary>計畫秘書</primary></indexterm>

      <para>最後，憲法設立 '計畫秘書' 職位，負責各種選舉與爭議的投票事宜。</para>

      <para>'爭議' 程序在憲法中詳列，從最初的討論階段至最後的計票。詳情見：<ulink type="block" url="http://www.debian.org/devel/constitution.en.html" /></para>
      <indexterm><primary>爭議</primary></indexterm>
      <indexterm><primary>投票</primary></indexterm>

      <sidebar>
        <title><emphasis>文化</emphasis> 發火，討論引起的</title>
        <indexterm><primary>發火</primary></indexterm>
        <indexterm><primary>激辯</primary></indexterm>

	<para>'發火' 是極度不理性的爭辯，雙方都窮盡理論的辯論後轉向人身攻擊。部份議題較為論戰式 (選擇文字編輯器，'喜歡 <command>vi</command> 或 <command>emacs</command>？'，永遠沒有結論)。由於單方面 (每個人) 快速地交換電子郵件形成優勢且極度地個人化此等議題。</para>

	<para>這種討論沒什麼特別；通常要遠離這種爭論，或者快速地略過其內容，因為閱讀它們太費時了。</para>
      </sidebar>

      <para>即使憲法建立了表面的民主，每日的運作卻大不相同：Debian 遵守自由軟體的蠢蛋進化論：做事的人決定怎麼做事。爭論解決問題的方法祗是浪費時間；選擇有用且滿意的方案才是王道…有能力的人就是這麼做。</para>

      <para>這就是升級的唯一方法：做有用的事且顯示把事情做好。Debian '管理' 團體以增選方式管理，採用已有效奉獻且證明其能力的志願者。新的奉獻者看到這些團隊做了具有公共利益性質的工作就會主動加入協助。這就是 Debian 常被稱為 '任人唯賢'。</para>

      <sidebar>
        <title><emphasis>文化</emphasis> 任人唯賢，統治知識</title>
        <indexterm><primary>任人唯賢</primary></indexterm>

	<para>任人唯賢是治理的型式之一由有能力的人當家。在 Debian 裡，長才由勝任衡量，也就是由過去的其他計畫的行為評鑑現在 (前任領導人 Stefano Zacchiroli 提出 '蠢蛋進化論'，意指 '授權能把事性做好的人')。</para>
      </sidebar>

      <para>這種有效的管理方法保證在 Debian '關鍵' 團隊奉獻者的品質。不見得是完美的且偶而凸搥。選擇被團隊接受的發展者是隨興的，甚至不公平的。而且，不是每個人對這些團隊服務的期望是一樣的。有些人受不了等8天才能收錄新的 Debian 套件，也有人耐心等待3週毫無怨言。所以，有些團隊對 '服務品質' 經常不滿。</para>

      <sidebar>
        <title><emphasis>社群</emphasis> 新進維護者的積分</title>
        <indexterm><primary>維護者</primary><secondary>新進維護者</secondary></indexterm>

	<para>負責核准新進發展者的團隊受到最多的批評。經過這麼多年，必須承認，Debian 計畫發展者粥多僧少。有些人看到不正平之處，我們必須坦白社群成長到 1,000 人以後開始的小挑戰變成大麻煩，確保品質與整合愈來愈難。</para>
        <indexterm><primary>DAM</primary></indexterm>
        <indexterm><primary>Debian 客戶經理</primary></indexterm>

	<para>此外，由 Debian 客戶經理這樣一小群團隊審核接受的程序 。特別容易被批評，因為在 Debian 發展者社群裡說接受或拒絕的就是他們。實務上，必須多花點時間瞭解才能接受。當然，我們可以在被接受為正式的發展者前，先支持既有的發展者，做出實質的奉獻。</para>
      </sidebar>
    </section>
    <section>
      <title>使用者的積極角色</title>

      <para>或許奇怪，需要在討論 Debian 計畫內工作者時加入使用者，答案是必須的：使用者扮演關鍵的角色。不祗是 '被動'  的角色，有些使用者執行發展版並定期報告指定問題的錯誤。其他的人更深一層提出改進的意見，以 '願望清單' 或送出稱為 '補丁' 的修正後原始碼 (見專欄 <xref linkend="sidebar.patch" />)。</para>

      <sidebar id="sidebar.bts">
        <title><emphasis>工具</emphasis> 錯誤追蹤系統</title>
        <indexterm><primary>系統</primary><secondary>錯誤追蹤系統</secondary></indexterm>
        <indexterm><primary>BTS</primary></indexterm>
        <indexterm><primary>錯誤追蹤系統</primary></indexterm>
        <indexterm><primary><literal>bugs.debian.org</literal></primary></indexterm>

	<para>Debian 錯誤追蹤系統 (Debian BTS) 是計畫內的一大部份。公開的部份 (網頁介面) 允許所有人檢視所有的錯誤報告，還可以根據：受影響的套件、嚴重程度、狀態、報告者地址、負責維護者的地址、標籤等檢視錯誤。也可以瀏覽每個錯誤的完整討論記錄。</para>

	<para>表層下的 Debian BTS，以電子郵件為基礎：儲存參與者寄發的電子郵件做為資訊。發送給<email>12345@bugs.debian.org</email> 的電子郵件，將被指定為編號 12345 的錯誤。有權限的人可以敘明理由寄發另個電子郵件 <email>12345-done@bugs.debian.org</email> '關閉' (表示該錯誤已解決或無關緊要) 該錯誤。新的錯誤應以指定的格式辨識有問題的套件再發送電子郵件給 <email>submit@bugs.debian.org</email>。這個信箱 <email>control@bugs.debian.org</email> 用於編輯與該錯誤有關的所有  '元資訊'。</para>

	<para>Debian BTS 還有其他功能，諸如以標籤來標記錯誤。詳情見 <ulink type="block" url="http://www.debian.org/Bugs/" /></para>
      </sidebar>

      <sidebar>
        <title><emphasis>術語</emphasis> 錯誤的嚴重性</title>
        <indexterm><primary>嚴重性</primary></indexterm>
        <indexterm><primary>錯誤</primary><secondary>嚴重性</secondary></indexterm>

	<para>報告問題時指定該錯誤的嚴重性。不是每個錯誤都具有相同的重要性；例如，手冊內容的打字錯誤不能與伺服器軟體的安全漏洞相提並論。</para>

	<para>Debian 以相當廣泛的尺度描述錯誤的嚴重性。每級都有精準的定義以協助後續的解決選擇。<ulink type="block" url="http://www.debian.org/Bugs/Developer#severities" /></para>
      </sidebar>

      <para>此外，很多對 Debian 滿意的使用者願意奉獻給這個計畫。每個人撰寫程式的能力不盡相同，有些人參與翻譯與審核文件。語文導向的郵寄名單在此。<ulink type="block" url="https://lists.debian.org/i18n.html" /> <ulink type="block" url="http://www.debian.org/international/" /></para>

      <sidebar>
        <title><emphasis>基礎</emphasis> 什麼是 i18n 與 l10n？</title>
        <indexterm><primary>國際化</primary></indexterm>
        <indexterm><primary>在地化</primary></indexterm>
        <indexterm><primary>i18n</primary></indexterm>
        <indexterm><primary>l10n</primary></indexterm>

	<para>'i18n' 與 'l10n' 是國際化英文字 'internationalization' 與在地化英文字 'localization' 的縮寫，保留第一個與最後一個字母，再加入省略字母的字數。</para>

	<para>'國際化' 一個程式包括修改至可以翻譯 (在地化) 的程度。涉及重寫程式的語文以便公開給所有的語系使用。</para>

	<para>'在地化' 一個程式包括翻譯原語文 (通常是英文) 為另一個語文。因此，必須先國際化。</para>

	<para>總之，國際化係把軟體整備至可翻譯的程度，然後再執行在地化。</para>
      </sidebar>

      <sidebar id="sidebar.patch">
        <title><emphasis>基礎</emphasis> 補丁，送出修訂</title>
        <indexterm><primary><command>補丁</command></primary></indexterm>
        <indexterm><primary>補丁</primary></indexterm>
        <indexterm><primary><command>diff</command></primary></indexterm>

	<para>補丁是描述檔案修改的檔案。準確來說，包括移除或新增的程式碼清單，以及 (有時) 從參考文件取得的內容，用以取代修改的內文 (可以辨識取代的內容)。</para>

	<para>修改該等檔案的工具名稱就是 <command>patch</command>。新增為 <command>diff</command>，用法如下：</para>

        <screen><computeroutput>$ </computeroutput><userinput>diff -u file.old file.new &gt;file.patch</userinput></screen>

	<para><filename>file.patch</filename> 檔案包括變更 <filename>file.old</filename> 為 <filename>file.new</filename> 的指令。可以發送給其他人，用於從兩個檔案新增 <filename>file.new</filename>，如：</para>

        <screen><computeroutput>$ </computeroutput><userinput>patch -p0 file.old &lt;file.patch</userinput></screen>

	<para>現在，此檔案 <filename>file.old</filename> 內容等同於 <filename>file.new</filename>。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>工具</emphasis> 以 <command>reportbug</command> 報告錯誤</title>
        <indexterm><primary><command>reportbug</command></primary></indexterm>
        <indexterm><primary>bug</primary><secondary>報告錯誤</secondary></indexterm>
        <indexterm><primary>報告錯誤</primary></indexterm>

	<para><command>reportbug</command> 是送出 Debian 套件錯誤報告的工具。用於確認有問題的錯誤尚未被報告，避免重複報告。提醒使用者指明該錯誤的嚴重性，讓該報告儘量精準 (必要時，發展者可以調整嚴重性參數)。撰寫並允許他人編輯它，使用者就不必以精準的語法撰寫完整的錯誤報告。再經由電子郵件伺服器送出此報告 (預設為在地，但 <command>reportbug</command> 也能使用遠端伺服器)。</para>

	<para>此工具原先係供發展版使用，做為修正錯誤之用。後來發現，Debian 的穩定版也需要它，安全更新或重要更新 (或完全無效的套件)。因此，Debian 套件的次要錯誤的修訂，在下個穩定版才納入。</para>
      </sidebar>

      <para>靠著使用者的參與這些奉獻愈來愈有效。不斷地交換訊息，使用者不是孤立的個人而是一個真正的社群。從郵寄名單裡，<email>debian-user@lists.debian.org</email> (<xref linkend="solving-problems" /> 可看出詳情)。</para>

      <para>使用者不僅自助 (也助人) 於直接影響他們的技術面，也討論奉獻 Debian 計畫的最佳途徑與協助其向前行 — 經常出現改進的建議。</para>

      <para>Debian 不僅持續自我推廣，其使用者在擴散方面也居功甚偉，口耳相傳其名聲。</para>

      <para>這些方法運作的不錯，在自由軟體的各個層面都有 Debian 粉絲：從在地 'Linux 使用者社群' LUGs 組織的安裝會 (協助新手安裝系統的工作坊)，到 Linux 相關的技術會議等。</para>

      <para>志工製作海報、小冊、貼紙及其他的推廣文宣，供社會大眾取用，部份內容在 Debian 網站可自由取用：<ulink type="block" url="http://www.debian.org/events/material" /></para>
    </section>
    <section>
      <title>團隊與子計畫</title>

      <para>Debian 從開始就以原始碼的概念組織起來，每個套件都有維護者。隨時出現新的工作團隊，於子計畫內形成新的團隊，確保基礎建設的管理，以及流程運作不會被特定的套件綁住 (品質保證、Debian 政策、安裝器等)。</para>
      <section id="sect.sub-projects">
        <title>Debian 現有的子計畫</title>

	<para>每個 Debian！子計畫是一群志工修改 Debian 供特定需求之用。選擇部份程式供特定領域 (教育、醫學、多媒體製作等) 使用之外，子計畫的目標還包括改進現有的套件、包裝漏失的軟體、調整安裝器、新增特定的文件，等等。</para>

        <sidebar>
          <title><emphasis>術語</emphasis> 子計畫與衍生發行版</title>
          <indexterm><primary>次計畫</primary></indexterm>
          <indexterm><primary>衍生發行版</primary></indexterm>

	  <para>衍生發行版從修改特定版本的 Debian 開始。其基礎建設完全來自於 Debian 計畫之外。不必是奉獻改進。衍生發行版可能 '偏離' 原版，並定期與原版同步化以更取得上游的改進成果。</para>

	  <para>另一方面，子計畫也可以不偏離，因為所有的作品直接取自改進的 Debian 以滿足及自身需要。</para>

	  <para>Debian 的衍生發行版甚多，無庸置疑，其中最知名的 Debian 衍生發行版，就是 Ubuntu。見 <xref linkend="derivative-distributions" /> 瞭解其參與者及與其他 Debian 的關係。</para>
        </sidebar>

        
	<para>目前較流行的子計畫：</para>
        <itemizedlist>
          <listitem>
	    <para>Debian-Junior，由 Ben Armstrong 製作，給兒童使用；</para>
          </listitem>
          <listitem>
	    <para>Debian-Edu，由 Petter Reinholdtsen 製作，針對學術圈的專門發行版；</para>
          </listitem>
          <listitem>
	    <para>Debian Med，由 Andreas Tille 製作，專供醫護領域使用；</para>
          </listitem>
          <listitem>
            <para>Debian Multimedia 針對音效與多媒體的工作；</para>
          </listitem>
          <listitem>
            <para>Debian-Desktop 針對桌面與藝術作品的預設主題；</para>
          </listitem>
          <listitem>
            <para>Debian GIS 照顧地理資訊系统應用程式與使用者；</para>
          </listitem>
          <listitem>
            <para>Debian Accessibility，最後但也最重要，改良 Debian 滿足身心障礙者的需求。</para>
          </listitem>
        </itemizedlist>

	<para>隨著 Debian 子計畫的成長此清單將愈來愈長。由 Debian 基礎建設完全支撑，可以全然關注在加值部份，不需擔心與 Debian 同步的問題，因為他們在 Debian 計畫內發展。</para>
      </section>
      <section>
        <title>管理團隊</title>

	<para>大部份的管理團體以相對封閉的增選方式招募成員。最好的加入方法是協助現有成員工作，表示您瞭解該團體的目標與運作方式。</para>

	<para>檔案頭兒負責管理 Debian 套件的官方文件。簽收發展者傳來的套件，經過檢查後儲存在參照伺服器 (<literal>ftp-master.debian.org</literal>)。</para>

	<para>他們也檢查新增套件的授權條款，確保在納入它們之前，Debian 有權散布它們。被要求移除的套件，由發展者經由錯誤追蹤系統與 <emphasis>ftp.debian.org</emphasis> '虛擬套件' 向團隊提出。</para>
        <indexterm><primary>檔案頭兒</primary></indexterm>

        <sidebar>
          <title><emphasis>術語</emphasis> 虛擬套件，監測工具</title>
          <indexterm><primary>虛擬套件</primary></indexterm>

	  <para>錯誤追蹤系統，原先係處理 Debian 套件錯誤而設計，後來發現在其他事物上也很實用：列出 Debian 套件內外的待處理問題或待管理工作。'虛擬套件' 允許，指定團隊在未連結實際套件的環境下使用錯誤追蹤系統。每個人都可以報告錯誤。例如，BTS 有個 <emphasis>ftp.debian.org</emphasis> 條目用於報告與追蹤官方套件的錯誤或要求移除套件。同樣的，<emphasis>www.debian.org</emphasis> 虛擬套件則指向 Debian 網頁的錯誤，且 <emphasis>lists.debian.org</emphasis> 匯集與郵寄名單有關的問題。</para>
        </sidebar>

        <sidebar id="sidebar.fusionforge">
          <title><emphasis>工具</emphasis> FusionForge，合作發展的瑞士小軍刀</title>
          <indexterm><primary><literal>alioth</literal></primary></indexterm>
          <indexterm><primary>FusionForge</primary></indexterm>

	  <para>FusionForge 程式有點像 <literal>www.sourceforge.net</literal>、<literal>alioth.debian.org</literal>、或<literal>savannah.gnu.org</literal>。典藏計畫並提供其他服務促進合作發展。每個計畫都有獨立的虛擬空間，包括網站、幾個可追蹤 — 最常見的是 — 的錯誤與補丁 '開票' 系統、調查工具、檔案儲存空間、論壇、版本控制系統儲存所、郵寄清單及其他相關的服務。</para>

	  <para><literal>alioth.debian.org</literal> 是 Debian 的 FusionForge 伺服器，由 Tollef Fog Heen、Stephen Gran、與 Roland Mas 管理。Debian 發展者參與的計畫都可以放在此㲃。<ulink type="block" url="http://alioth.debian.org/" /></para>

	  <para>服務的範圍頗廣，看起來內部有點複雜，不過感謝 Christian Bayle 做的 Debian <emphasis role="pkg">fusionforge</emphasis> 套件，FusionForge 還是很容易安裝的。</para>
        </sidebar>

	<para id="dsa-team">如眾所期待，<emphasis>Debian 系統管理者</emphasis> (DSA) 團隊 (<email>debian-admin@lists.debian.org</email>) 對計畫內的多個伺服器負責。確保所有的服務 (DNS、Web、e-mail、shell 等)、Debian 發展者要求安裝的軟體、以及安全相關事宜。<ulink type="block" url="https://dsa.debian.org" /></para>
        <indexterm><primary><emphasis>debian-admin</emphasis></primary></indexterm>
	<indexterm><primary>DSA (Debian 系統管理者)</primary></indexterm>

        <sidebar>
          <title><emphasis>工具</emphasis> Debian 套件追蹤器</title>
          <indexterm><primary>套件追蹤系統</primary></indexterm>
          <indexterm><primary>系統</primary><secondary>套件追蹤系統</secondary></indexterm>
          <indexterm><primary>Debian 套件追蹤器</primary></indexterm>
          <indexterm><primary>追蹤器</primary><secondary>Debian 套件追蹤器</secondary></indexterm>
          <indexterm><primary>套件</primary><secondary>Debian 套件追蹤器</secondary></indexterm>
          <indexterm><primary>PTS</primary></indexterm>
          <indexterm><primary>DDPO</primary></indexterm>
          <indexterm><primary>Debian 發展者的套件檢視</primary></indexterm>

	  <para>這是 Raphaël 的發想。基本的概念是，在指定的套件裡，儘可能集中資訊於一個頁面。因此，可以快速地檢查程式的狀態、辦識待處理的事項、以及別人可以協助的工作。所在這頁裡匯集所有的錯誤統計、每個發行版可用的版本、在 <emphasis role="distribution">測試</emphasis> 發行版內各套件的進度、翻譯狀態與 Debian 發展者會議模板、上游版本的新增狀態、Debian 政策最新版的未相容說明、維護者的資訊、以及維護者期望納入的其他資訊。<ulink type="block" url="https://tracker.debian.org/" /></para>

	  <para>電子郵件訂閱服務也在此網頁介面。自動送出選定的資訊給此清單：錯誤與相關的討論、Debian 伺服器內的新版本、待校對的新翻譯等。</para>

	  <para>因此，進階的使用者可以緊密地跟蹤此等資訊，或取得足夠的理解後，奉獻其工作給計畫。</para>

	  <para>另個網頁介面，<emphasis>檢視 Debian 發展者套件</emphasis> (DDPO)，提供發展者其主管套件的狀態摘要。<ulink type="block" url="https://qa.debian.org/developer.php" /></para>

	  <para>這兩個網站由 Debian 的品質保證成員 (通稱為 Debian QA) 發展與管理的工具。</para>
          <indexterm><primary>保證</primary><secondary>品質保證</secondary></indexterm>
          <indexterm><primary>品質</primary><secondary>保證</secondary></indexterm>
        </sidebar>

	<para>此 <emphasis>名單大師</emphasis> 管理郵寄名單的電子郵件伺服器。職責包括新增名單、處理送回 (無法送出的育知)、以及垃圾郵件過濾器 (未授權的批次郵件)。</para>
        <indexterm><primary>名單大師</primary></indexterm>

        <sidebar>
          <title><emphasis>文化</emphasis> 郵寄名單的流量：某些數據</title>
          <indexterm><primary>名單</primary><secondary>郵寄名單</secondary></indexterm>
	  <indexterm><primary>郵件列表</primary></indexterm>

          
	  <para>無疑地，郵寄名單追磫人所有的事，是計畫的最佳活動證詞。某些統計數字 (2015年以來) 為該郵寄名單自己說話：Debian 主持 240 多個郵寄名單、共有 212,000 個訂閱者。每個月送出 27,000 個訊息每天產生 476,000 封電子郵件。</para>
        </sidebar>

	<para>每個服務都有自己的管理團隊，通常是設立該服務的志工 (同時也撰寫通訊工具給自己用)。錯誤追蹤系統 (BTS)、錯誤追蹤器、<literal>alioth.debian.org</literal> (FusionForge 伺服器，見專欄 <xref linkend="sidebar.fusionforge" />)、在 <literal>qa.debian.org</literal>、<literal>lintian.debian.org</literal>、<literal>buildd.debian.org</literal>、<literal>cdimage.debian.org</literal> 等伺服器的服務。</para>
      </section>
      <section>
        <title>發展團隊、轉換團隊</title>

	<para>不同於管理團隊，發展團隊較為開放，甚至可以說是置身於奉獻者之外。Debian 自身不新增軟體，計畫仍需要外部軟體滿足其需要。當然，仍是在自由軟體授權下發展，這些工具使用被自由軟體世界驗證的方法。</para>

        <sidebar id="cadre-cvs">
          <title><emphasis>文化</emphasis> Git</title>
          <indexterm><primary>Git</primary></indexterm>
          <indexterm><primary>組態管理</primary></indexterm>

	  <para>Git 是在多個檔案合作運作的工具，維護修訂的記錄。有問題的檔案多半是純文字檔，程式的原始碼。由多人共同處理一個檔案時，<command>git</command> 可以把不同部份的檔案合而為一。否則，其中的 '衝突' 必須以人工處理。</para>

          <para>Git 是個分散系統，每個人都有完整記錄的儲存庫。集中的儲存庫用於下載計畫 (<command>git clone</command>) 並與他人共享成果 (<command>git 送出</command>)。儲存庫內可有多個版本但同一時間祗能使用其中之：稱為工作版本 (以指令 <command>git checkout</command> 可以變更指向其他版本)。Git 可以顯示工作版本的變動 (<command>git diff</command>)、可以在版本記錄裡儲存新的條目 (<command>git commit</command>)、可更新其他使用者同時修改的工作版本內容 (<command>git pull</command>)、以及記錄特定的組態供日後提取 (<command>git tag</command>)。</para>

	  <para>Git 可處理發展中的多個版本而不互相干擾。這些版本稱為 <emphasis>branches</emphasis>。以樹木的分枝形容相當精確，因為程式本來就是從一個主幹開始。有了成果 (諸如 1.0) 後，就有兩個分枝：發展枝為下個釋做準備、維護枝管理 1.0 的更新與修訂。</para>

          <indexterm><primary>版本控制系統 (VCS)</primary></indexterm>
          <para>今天，Git 是最流行的版本控制系統，但不是唯一的。CVS (Concurrent Versions System) 是第一個廣為流行的工具，但其先天的限制讓位給現代的自由軟體。包括<command>subversion</command> (<command>svn</command>)、<command>git</command>、<command>bazaar</command>(<command>bzr</command>)、以及 <command>mercurial</command> (<command>hg</command>)。<ulink type="block" url="http://www.nongnu.org/cvs/" /> <ulink type="block" url="http://subversion.apache.org/" /> <ulink type="block" url="http://git-scm.com/" /> <ulink type="block" url="http://bazaar.canonical.com/" /> <ulink type="block" url="http://mercurial.selenic.com/" /></para>
          <indexterm><primary><command>subversion</command></primary></indexterm>
          <indexterm><primary><command>svn</command></primary></indexterm>
          <indexterm><primary><command>git</command></primary></indexterm>
          <indexterm><primary><command>bzr</command></primary></indexterm>
          <indexterm><primary><command>hg</command></primary></indexterm>
          <indexterm><primary><command>mercurial</command></primary></indexterm>
          <indexterm><primary><command>cvs</command></primary></indexterm>
        </sidebar>

	<para>Debian 發展自己的小軟體，但卻是重要的軟體，其名聲遠超越 Debian 計畫本身。<command>dpkg</command> 是個例子，它是 Debian 套件管理程式 (事實上，它是 Debian PacKaGe 的縮寫，讀成 'dee-package')，另一個是 <command>apt</command>，自動安裝 Debian 套件的工具，檢查其相依性，保證安裝後與系統一致 (其名稱為 Advanced Package Tool 的縮寫)。然而，它們都是由小團隊撰寫的，祗需要高階程式技巧就能瞭解該等程式的運作方式。</para>

	<para>最重要的團隊可能是 Debian 安裝計畫，<command>debian-installer</command>，2001年問世以來就是重要的部份。以一個程式安裝十多種架構下的 Debian 不是件簡單的事，需要很多奉獻者才能完成它。每個架構需有自己的啟動程式與載入程式。透過 <email>debian-boot@lists.debian.org</email> 郵寄名單，在 Cyril Brulebois 領導下，完成這些工作。<ulink type="block" url="http://www.debian.org/devel/debian-installer/" /> <ulink type="block" url="http://joeyh.name/blog/entry/d-i_retrospective/" /></para>

	<para>這個 (極小的) <command>debian-cd</command> 程式團隊的目標更謙虛。由很多 '小小' 的奉獻者負責其架構，因為主要的發展者無法知道全部的細微之處，也不知道從CD-ROM 安裝的正確方式。</para>

	<para>需要多個團隊彼此合作才能夠將程式包裝起來：以<email>debian-qa@lists.debian.org</email> 為例，企圖保證 Debian 計畫的每個層面都達到既定的品質。<email>debian-policy@lists.debian.org</email> 根據各地的建議列出 Debian 政策。負責每個架構的團隊 (<email>debian-<replaceable>architecture</replaceable>@lists.debian.org</email>) 編繹所有的套件，若有需要，再改編供特定架構使用。</para>

	<para>其他的團隊管理最重要的套件以免重擔放在單一團隊的肩上；在 C 程式庫與 <email>debian-glibc@lists.debian.org</email>，C 編繹器 <email>debian-gcc@lists.debian.org</email> 郵寄名單，或 Xorg 在 <email>debian-x@lists.debian.org</email> (此社群以 X Strike Force 聞名)。</para>
      </section>
    </section>
  </section>

  <section id="sect.follow-debian-news">
    <title>跟著 Debian 最新消息</title>

    <para>如前所述，Debian 計畫以極為分散、有機的方式進行。結果是，必須痛苦地讀取無止盡的訊息才能保持與計畫連繫。</para>

    <para>訂閱 <email>debian-announce@lists.debian.org</email> 郵寄名單是獲知 Debian 重要訊息的方法。此郵寄名單的流量極低 (每年祗有十來個訊息)，祗提供最重要的通知，諸如新版釋出消息、選舉新的計畫領導人、或 Debian 年度會議。<ulink type="block" url="https://lists.debian.org/debian-announce/" /></para>

    <indexterm><primary>Debian 計畫消息</primary></indexterm>
    <para>有關 Debian 的一般 (與定期) 消息經由 <email>debian-news@lists.debian.org</email> 郵寄名單發送。其流量尚可 (通常每月數則)，包括半定期的 'Debian 計畫消息'，匯編計畫內發生的小事。Debian 發展者在這裡發布有必要讓大眾知悉的事，算是內幕消息。<ulink type="block" url="https://lists.debian.org/debian-news/" /></para>

    <sidebar>
      <title><emphasis>社群</emphasis> 公關與媒體團隊</title>
      <para>Debian 的官方溝通管道由公關團隊與媒體團隊的志工擔任。媒體團隊是 Debian 計畫領導人的代表釋出官方的消息。公關團隊較不正式且歡迎大家參與，提供稿件給 'Debian 計畫消息' 或供稿給<emphasis>@debian</emphasis> Identi.ca 微部落客。<ulink type="block" url="http://wiki.debian.org/Teams/Press" /> <ulink type="block" url="http://wiki.debian.org/Teams/Publicity" /></para>
    </sidebar>

    <para>Debian 的演化與各團隊的運作，參見 <email>debian-devel-announce@lists.debian.org</email> 郵寄名單。如其名稱所示，其內容較適合發展者的口味，也適合關心穩定版以外版本發展的人。<email>debian-announce@lists.debian.org</email> 提供使用者可見的結果，<email>debian-devel-announce@lists.debian.org</email> 則告知該等結果的產生方式。如專欄所示，'d-d-a' (如其名所示) 是 Debian 發展者必須訂閱的郵寄名單。<ulink type="block" url="https://lists.debian.org/debian-devel-announce/" /></para>

    <indexterm><primary>Debian 星球</primary></indexterm>
    <para>詳盡的非正式資訊在 Debian 星球，匯集 Debian 奉獻者在自身部落格的文章。其內容不以 Debian 發展為限，還包括社群的活動與會員的動態。<ulink type="block" url="http://planet.debian.org/" /></para>

    <indexterm><primary>微部落格</primary></indexterm>
    <indexterm><primary>Identi.ca</primary></indexterm>
    <indexterm><primary>Twitter</primary></indexterm>
    <indexterm><primary>Facebook</primary></indexterm>
    <indexterm><primary>Google+</primary></indexterm>
    <indexterm><primary>社群網路</primary></indexterm>
    <indexterm><primary>網路</primary><secondary>社群網路</secondary></indexterm>
    <para>計畫本身也是一種社群網路。Debian 本身祗有以自由軟體建構的官方平台 (如 Identi.ca 微部落格平台，由 <emphasis>pump.io</emphasis>) 架構，Debian 的奉獻者多半另有自己的推特帳號、臉書頁面、Google+ 頁面等。<ulink type="block" url="https://identi.ca/debian" /> <ulink type="block" url="https://twitter.com/debian" /> <ulink type="block" url="https://www.facebook.com/debian" /> <ulink type="block" url="https://plus.google.com/111711190057359692089" /></para>
  </section>

  <section id="sect.role-of-distributions">
    <title>發行版的角色</title>
    <indexterm><primary>Linux 發行版</primary><secondary>角色</secondary></indexterm>

    <para>GNU/Linux 發行版的兩個主要目標：在電腦安裝自由的作業系統 (單獨存在或雙重開機)，以及提供滿足使用者需求的軟體。</para>
    <section>
      <title>安裝器：<command>debian-installer</command></title>

      <para><command>debian-installer</command>，以極度模組化設計以便儘量通用，針對前述的第一個目標。含蓋極為廣泛的安裝環境，能夠支援特殊個案的安裝器。</para>

      <para>模組化，讓情況很複雜，發展者極難發掘此工具；但在圖書或文字模式下，使用者的經驗仍然差不多。花了極大的力氣減少安裝所需的問題，特別感謝自動偵測硬體的軟體。</para>

      <para>值得注意的是 Debian 的衍生發行版，以及對安裝器的限制 (通常祗限 i386 或 amd64 架構)，但對外行者應更為友善。從另個角度來說，不應離套件內容太遠以便儘量靠近軟體才不致發生相容性的問題。</para>
    </section>
    <section>
      <title>軟體程式庫</title>

      
      <para>以數量論，無疑地 Debian 居於領導地位，超過 21,000 隻原始套件。以質量論，Debian 的政策及釋出前的冗長測試期帶來穩定與一致。從近用的觀點論，所有的版本都可以經由全球多個鏡射站線上取得，每6小時就更新一次。</para>

      <para>很多零售商以極低的價格 (通常是成本) 銷售 CD-ROM，雖然其 '映像檔' 可以自由下載。祗有一個缺點：穩定版的週期過長 (發展期常常超過2年)，以致延遲納入新軟體。</para>

      <para>大部份新軟體自有辦法找到門路在安裝時自動納入。若因相依性的問題而需要太多的更新，可以為 Debian 的穩定版重新編譯 (此議題的詳情參見 <xref linkend="debian-packaging" />)。</para>
    </section>
  </section>
  <section id="sect.release-lifecycle">
    <title>釋出週期</title>
    <indexterm><primary>週期</primary></indexterm>
    <indexterm><primary><emphasis role="distribution">不穩定</emphasis></primary></indexterm>
    <indexterm><primary><emphasis role="distribution">測試</emphasis></primary></indexterm>
    <indexterm><primary><emphasis role="distribution">穩定</emphasis></primary></indexterm>
    <indexterm><primary><emphasis role="distribution">實驗性</emphasis></primary></indexterm>
    <indexterm><primary><emphasis role="distribution">過期穩定</emphasis></primary></indexterm>
    <indexterm><primary><emphasis role="distribution">極舊穩定</emphasis></primary></indexterm>

    <para>Debian 計畫的每個程式同時有 6 個不同版本，<emphasis role="distribution">實驗</emphasis>、<emphasis role="distribution">不穩定</emphasis>、<emphasis role="distribution">測試</emphasis>、<emphasis role="distribution">穩定</emphasis>、<emphasis role="distribution">舊穩定</emphasis>、與 <emphasis role="distribution">極舊穩定</emphasis>。每個版本都有自己的發展流程。為了瞭解起見，先看看程式的發展過程，由最初的包裝至納入 Debian 的穩定版。</para>

    <sidebar>
      <title><emphasis>術語</emphasis> 釋出</title>
      <indexterm><primary>釋出</primary></indexterm>

      <para>'釋出'，在 Debian 計畫裡，係指發行版的特定版本 (如，'不穩定釋出' 意指 '不穩定版')。也用於公開發行的新版 (穩定)。</para>
    </sidebar>
    <section>
      <title><emphasis role="distribution">實驗</emphasis>狀態</title>

      <para>首先看看 <emphasis role="distribution">實驗</emphasis> 發行的特例：對應於還在發展中軟體的 Debian 套件，不必已做完，其名稱已說明一切。還沒有全部通過此階段；部份發展者加入套件為了得到有經驗 (或勇敢) 使用者的回饋。</para>

      <para>否則，此發行版通常納入對基礎套件的重大修改，若直接納入 <emphasis role="distribution">不穩定</emphasis> 可能有重大的錯誤造成嚴重的後果。因此，以完全獨立的發行版釋出，不把套件納入其他版本 (除非維護者或 ftp 主管直接要求)。也不能自我納入：祗能以現有套件的次集合方式納入 <emphasis role="distribution">實驗</emphasis>，通常不含基礎系統。此發行版通常納入其他、自我納入、發行的版本，如 <emphasis role="distribution">不穩定</emphasis>。</para>
    </section>
    <section>
      <title><emphasis role="distribution">不穩定</emphasis>狀態</title>

      <para>回到典型的套件。維護者新增最初的套件，編繹給<emphasis role="distribution">不穩定</emphasis>版使用並置於<literal>ftp-master.debian.org</literal>伺服器。經過ftp主管檢查與確認納入後才置於<emphasis role="distribution">不穩定Unstable</emphasis>發行版。對於那些不在意錯誤祗關心最新套件的人而言，這是 '搶鮮' 發行版。使用最新的程式並測試它。</para>

      <para>碰到錯誤後，向套件維護者報告。維護者會定期準備修正版，然後再上傳至伺服器。</para>

      <para>更新的套件在六個小時內更新至全球的鏡射站。使用者測試修正後的套件並搜尋其他程式的可能錯誤。部份更新的套件動作更快。在這段時間內，啟用自動建立機器人。最常見的情況是，維護者祗有一部傳統的PC在amd64(或i386)架構下編譯其套件；然後由自動建立機器人接手處理其他架構。有些編譯可能失敗；維護者收到錯誤報告，然後在下個版本修正它。由專家發現的錯誤，，其錯誤報告可能與補丁同時出現。</para>
      <indexterm><primary>自動建立者</primary></indexterm>

      <figure>
        <title>由自動建立者編譯的套件</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/autobuilder.png" scalefit="1" width="75%" />
          </imageobject>
        </mediaobject>
      </figure>

      <sidebar>
        <title><emphasis>快速查看</emphasis> <command>buildd</command>，Debian 套件再編譯者</title>
        <indexterm><primary><command>buildd</command></primary></indexterm>
        <indexterm><primary>build daemon</primary></indexterm>

	<para><emphasis>buildd</emphasis>是 “build daemon” 的縮寫，意思是魔鬼建立器。在指定的架構自動編譯Debian套件的程式(儘量避免跨平台)。</para>

	<para>因此，<literal>arm64</literal>機器專門為<literal>arm64</literal>架構建立二元檔案。<emphasis>buildd</emphasis>程式從Debian發展者的原始套件裡持續產生<literal>arm64</literal>架構的二元套件。</para>

	<para>Debian所有的電腦都能使用此自動建立器。擴大而言，<emphasis>buildd</emphasis>一辭常用於這些機器，僅供此目的使用。</para>
      </sidebar>
    </section>
    <section>
      <title>移殖至<emphasis role="distribution">測試</emphasis></title>

      <para>稍後，套件略為成熟後；編譯全部的架構，不再發生新的修訂。才能成為<emphasis role="distribution">測試</emphasis>版的候選 — 基於某些標準供<emphasis role="distribution">不穩定</emphasis>套件使用。根據以下的品管保證細目，每天都有程式被自動選入<emphasis role="distribution">測試</emphasis>版：</para>
      <orderedlist>
        <listitem>
	  <para>沒有嚴重錯誤，或，少於當前<emphasis role="distribution">測試版</emphasis>；</para>
        </listitem>
        <listitem>
	  <para>至少置於<emphasis role="distribution">不穩定</emphasis>10天，這段時間足夠發現與報告任何嚴重的問題；</para>
        </listitem>
        <listitem>
	  <para>在所有官方支援的架構裡編繹成功；</para>
        </listitem>
        <listitem>
	  <para>滿足<emphasis role="distribution">測試版</emphasis>對相依性的要求，或至少能夠與其他有問題的套件放在一起。</para>
        </listitem>
      </orderedlist>

      <para>此系統不是萬無一失；在<emphasis role="distribution">測試版</emphasis>經常發現套件的嚴重錯誤。不過，還是很有效果的，而且<emphasis role="distribution">測試版</emphasis>的問題遠遠少於<emphasis role="distribution">
不穩定版</emphasis>，對很多人來說，是穩定與新鮮之間的折衷選擇。</para>

      <sidebar>
        <title><emphasis>說明</emphasis>被限制的<emphasis role="distribution">測試版</emphasis></title>

	<para>很有趣的原則，<emphasis role="distribution">測試版</emphasis>應沒有實際的問題：套件的跨平台相依性很難獨立完成。套件彼此相依，必須同時殖入大量的套件，事實上很難同時殖入定期更新的套件。另一方面，很難製作用於辨認相關套件家族的腳本(這是NP完備的問題，還好我們知道若干路徑)。以手動方式與腳本互動並指引若干可能的套件，或納入指定套件於群組內，即使此方法打破若干相依性。這些功能由釋出經理及其團隊負責。</para>

	<para>NP完備的召出率是複雜的指數演算法，與資料量、程式碼長度(圖表的量)與涉入的元素有關。唯一的解決方案是時時檢視所有可能的組態，可能需要很多方法。啟發式是一種接近，但滿意的，解決方案。</para>
      </sidebar>

      <sidebar>
        <title><emphasis>社群</emphasis> 釋出經理</title>
        <indexterm><primary>釋出經理</primary></indexterm>
        <indexterm><primary>穩定版釋出經理</primary></indexterm>

	<para>釋出經理是個重要的職位，責任很重。擔任此職的人，必須管理 Debian 新的、穩定版，並設定發展<emphasis role="distribution">測試版</emphasis>的程序，直到進入<emphasis role="distribution">穩定版</emphasis>的品質。同時設定暫行進度 (不見得遵守它)。</para>

	<para>我們還有穩定版釋出經理，簡稱為SRM，管理與選擇納入 Debian 當前穩定版的更新套件。以逐案方式，討論由 Debian 發展者建議納入的安全補丁與管理可能納入的建議。</para>
      </sidebar>
    </section>
    <section>
      <title>從<emphasis role="distribution">測試版</emphasis>至<emphasis role="distribution">穩定版</emphasis></title>

      <para>假設我們的套件已經納入<emphasis role="distribution">測試版</emphasis>。祗要還有改進的空間，其維護者必然奮力改進之並從<emphasis role="distribution">不穩定版</emphasis> (以後納入<emphasis role="distribution">測試版</emphasis>就快多了：除非發生極大的變化，其相依性早已存在)重新來過。達到完美境界，維護者宣告結束其工作。下個步驟是納入<emphasis role="distribution">穩定版</emphasis>發行，被釋出經理選取時，就是簡化的<emphasis role="distribution">測試版</emphasis>。理想的情況是在安裝器完成後才做此決擇，並且在<emphasis role="distribution">測試版</emphasis>找不到嚴重的錯誤。</para>

      <para>實際上，還沒有真的進入穩定版，Debian 必須妥協：移除維護者無法更正錯誤的套件、或容許在數千個程式中還有幾個錯誤。釋出經理曾宣告凍結期間，想被納入<emphasis role="distribution">測試版</emphasis>更新必須通過認可的程序。其目標是避免新版本(及其新錯誤)，與祗有被認可的錯誤修訂。</para>

      <figure>
        <title>套件通過多個 Debian 版本的途徑</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/release-cycle.png" width="60%" />
          </imageobject>
        </mediaobject>
      </figure>

      <sidebar>
        <title><emphasis>術語</emphasis> 凍結：最後一哩路</title>
        <indexterm><primary>凍結</primary></indexterm>

	<para>在冷凍期，停止<emphasis role="distribution">測試版</emphasis>的發展；不允許自動更新。祗有釋出經理授權的套件，才能依照指示更新。其目的是避免新版本帶新的錯誤；更正過的錯誤通過審查過的更新才能納入。</para>
      </sidebar>

      <para>釋出新的穩定版本後，穩定版經理繼續管理後續的發展(稱為 “修訂”，如：第7版的修訂為 7.1、7.2、7.3)。這些更新有系統地納入安全補丁。也包括重要的更正(套件的結護者必須證明問題的嚴重性才可能被納入)。</para>

      <para>最後，預設的套件已經納入穩定發行版。此過程的複雜性，說明需要很長的時間，才能發行新的 Debian 穩定版。畢竟，品質才是其名聲的基礎。而且，其三個版本都有各自的使用者。在乎伺服器穩定性的系統管理者，不需要最新與最好的 GNOME；可以選擇 Debian <emphasis role="distribution">穩定版</emphasis>，一定滿意。在意最新版 GNOME 或 KDE 的使用者，會喜歡 Debian <emphasis role="distribution">測試版</emphasis>，既沒有嚴重的問題也使用相對較新的軟體。最後，富有冒險精神的發展者與有經驗的使用者，願意在 Debian <emphasis role="distribution">不穩定版</emphasis> 中徜徉，享受最新版軟體裡頭痛的錯誤。每個版本都是 Debian！</para>

      <sidebar>
        <title><emphasis>文化</emphasis> GNOME 與 KDE，圖形桌面環境</title>

	<para>GNOME (GNU Network Object Model Environment 的簡稱) 與 KDE (K Desktop Environment 的簡稱) 是自由軟體界最流行的兩種圖形桌面環境。桌面環境係指以圖形介面方式集合容易管理常用的軟體。通常包括檔案管理、辦公室套件、瀏覽器、電子郵件收發、多媒體播放等。主要差別在於圖形程式庫的選擇：GNOME 選用 GTK+ (以 LGPL 授權的自由軟體)，而 KDE 採用 Qt (以 GPL 與商業授權的公司包裝計畫)。<ulink type="block" url="http://www.gnome.org/" /> <ulink type="block" url="http://www.kde.org/" /></para>
      </sidebar>

      <figure>
        <title>Debian 包裝程式的圖徑</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/package-lifecycle.png" scalefit="1" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
    
    <section>
      <title><emphasis role="distribution">舊穩定版</emphasis>與<emphasis role="distribution">更舊穩定版</emphasis>狀態</title>
      <indexterm><primary>長期支援版 (Long Term Support, LTS)</primary></indexterm>
      <indexterm><primary>支援</primary><secondary>長期支援版(LTS)</secondary></indexterm>
      <para>每個<emphasis role="distribution">穩定版</emphasis>預計有五年壽命每二年發行新的穩定版，同一時間最多可有三個支援的穩定版在流通。新的穩定版釋出時，前個版本就變成<emphasis role="distribution">舊穩定版</emphasis>而更早的就成為<emphasis role="distribution">更舊穩定版</emphasis>。</para>
      <para>Debian 的長期支援版 (This Long Term Support, LTS) 是新的成員：由獨立的奉獻者及公司聯合的 Debian LTS 團隊完成。Debian 安全團體不在維護舊的版本。</para>
      <para>Debian 安全團隊處理當前<emphasis role="distribution">穩定版</emphasis>以及<emphasis role="distribution">舊穩定版</emphasis>的安全事宜 (但僅與穩定版重複一年)。每個釋出大約祗維護三年。支援Debian 長期支援版兩年的安全維護事宜，所以每個釋出至少有五年的支援，以及其版本數加兩年的安全維護，即N+2。<ulink type="block" url="https://wiki.debian.org/LTS" /></para>
      <sidebar>
        <title><emphasis>社群</emphasis>支援 LTS 的公司</title>
        <para>Debian 的長期支援承諾頗為困難因為志願者意圖規避無趣的工作。舊軟體的五年安全維護是 — 對大部份奉獻者而言 — 很無趣的工作，還不如發展上游軟體的新功能。</para>
        <para>長期支援版的問世，有賴於參與公司願意分享安全維護的成本。</para>
        <para>此計畫始於2014年六月：部份公司同意雇員以兼職方式奉獻 Debian 的長期支援版，其他的贊助者願意付錢，所以 Debian 的奉獻者就有報酬而不是做免錢的。Debian 大部份的奉獻者願意接受長期支援版的報酬，取得 Freexian (Raphaël Hertzog 的公司)的贊助：<ulink type="block" url="http://www.freexian.com/services/debian-lts.html" /></para>
        <para>Debian 長期支援版團隊還無力支援 Debian 所有的套件，因此志願者的工作是對有興趣的套件，取得報酬的奉獻者以贊助者的套件優先。</para>
        <para>此計畫還需要新的贊助者：本書讀者服務的公司有興趣嗎？願意讓雇員兼職為長期支援版工作嗎？可以贊助安全維護的經費嗎？<ulink type="block" url="https://wiki.debian.org/LTS/Funding" /></para>
      </sidebar>
    </section>
  </section>
</chapter>
