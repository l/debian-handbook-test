<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="network-infrastructure" lang="zh-TW">
	<chapterinfo>
		 <keywordset>
			<keyword>網路</keyword>
			 <keyword>閘道器</keyword>
			 <keyword>TCP/IP</keyword>
			 <keyword>IPv6</keyword>
			 <keyword>DNS</keyword>
			 <keyword>Bind</keyword>
			 <keyword>DHCP</keyword>
			 <keyword>QoS</keyword>

		</keywordset>

	</chapterinfo>
	 <title id="infrastructure.title">網路架構</title>
	 <highlights> <para>
		Linux 繼承整個 Unix 的網路功能，Debian 提供整套建立與管理網路的工具。本章介紹這些工具。
	</para>
	 </highlights> <section id="sect.gateway">
		<title>閘道器</title>
		 <para>
			閘道器是連結多個網路的系統。此名詞通常用於本地網路通往外部 IP 位址的 “出口”。閘道器把每個網路連結在一起，且做為路由器在不同介面間傳送 IP 封包。
		</para>
		 <indexterm>
			<primary>閘道器</primary>
		</indexterm>
		 <indexterm>
			<primary>網路</primary>
			<secondary>閘道器</secondary>
		</indexterm>
		 <indexterm>
			<primary>路由器</primary>
		</indexterm>
		 <sidebar> <title><emphasis>基本</emphasis> IP 封包</title>
		 <indexterm>
			<primary>封包</primary>
			<secondary>IP</secondary>
		</indexterm>
		 <para>
			今天，大部份的網路使用 IP 通信協定 (<emphasis>Internet Protocol</emphasis>)。這種協定把傳輸資料切割成小小的封包。除了實際傳輸的資料外，每個封包還包括必備的路由資訊。
		</para>
		 </sidebar> <sidebar id="sidebar.tcp-udp"> <title><emphasis>基本</emphasis> TCP/UDP</title>
		 <indexterm>
			<primary>埠</primary>
			<secondary>TCP</secondary>
		</indexterm>
		 <indexterm>
			<primary>埠</primary>
			<secondary>UDP</secondary>
		</indexterm>
		 <indexterm>
			<primary>TCP，埠</primary>
		</indexterm>
		 <indexterm>
			<primary>UDP，埠</primary>
		</indexterm>
		 <para>
			即使在 IP 上傳輸資料，大部份程式都不處理個別的封包問題；他們通常使用 TCP (<emphasis>Transmission Control Protocol</emphasis>)。TCP 是 IP 的上層，為專屬的資料流建立兩點間的連結。程式祗看到資料進來的款目，並保證同樣的資料無誤 (且以同樣順序) 流到另端連結的出口。在較低層可能發生多種錯誤，都可以被 TCP 補償：重送失去的封包、重組到達的封包 (例如，經由不同路徑送到) 的順序。
		</para>
		 <para>
			另個在 IP 上的協定是 UDP (<emphasis>User Datagram Protocol</emphasis>)。與 TCP 不同，它是封包導向的。它的目標不同：UDP 的目的是在應用程式間傳輸封包。此協定不補償封包的遺漏，也不在意封包依序到達。此協定的主要優點是，大幅改善延遲的問題，遺漏的封包不影響接收後續封包，並且持續重送該遺漏的封包。
		</para>
		 <para>
			TCP 和 UDP 都涉及封包，也就是以 "分機號碼" 模式在機器內的程式建立連結。此做法允許在同個通訊中建立多個平行的管道，因為它們以不同的埠號區分之。
		</para>
		 <para>
			部份埠號 — 由 IANA (<emphasis>Internet Assigned Numbers Authority</emphasis>) 規範 — 以與網路服務相關而 “知名”。例如，TCP 埠號 25 係供電子郵件伺服器使用。<ulink type="block" url="http://www.iana.org/assignments/port-numbers" />
		</para>
		 </sidebar> <para>
			區域網路接在私人網址範圍內 (不在網路網路的路由上)，閘道器就需要 <emphasis>位址掩蔽</emphasis> 讓其經由網路與外界溝通。掩蔽作業是網路層次的代理工作：內部機器，都被閘道器取代 (因為閘道器有外部的路由位址)，藉由掩蔽連結，資料送出出去，進來的資料經由掩蔽連結至內部機器。閘道器以指定的 TCP 埠執行此工作，通常是較高的號碼 (超過 60000)。對外部而言，經由內部機器的連結，就是來自此等保留埠號。
		</para>
		 <indexterm>
			<primary>掩蔽</primary>
		</indexterm>
		 <sidebar> <title><emphasis>文化</emphasis> 私有位址範圍</title>
		 <indexterm>
			<primary>IP 位址</primary>
			<secondary>私有</secondary>
		</indexterm>
		 <indexterm>
			<primary>私有 IP 位址</primary>
		</indexterm>
		 <para>
			RFC 1918 把三組 IPv4 位址設為區域網路專用，不能路由至網際網路。第一組是，<literal>10.0.0.0/8</literal> (見專欄 <xref linkend="sidebar.networking-basics" />)，是一個A級範圍 (是 2<superscript>24</superscript> IP 位址)。第二組是，<literal>172.16.0.0/12</literal>，16個B級範圍 (<literal>172.16.0.0/16</literal> 至 <literal>172.31.0.0/16</literal>)，每個有 2<superscript>16</superscript> IP 位址。最後，<literal>192.168.0.0/16</literal> 是一個B級範圍 (包括 256 個C級範圍，<literal>192.168.0.0/24</literal> 至 <literal>192.168.255.0/24</literal>，各有 256 個 IP 位址)。<ulink type="block" url="http://www.faqs.org/rfcs/rfc1918.html" />
		</para>
		 </sidebar> <para>
			閘道器有兩種 <emphasis>網路位址轉換</emphasis> (英文縮寫 NAT) 的功能。第一種是 <emphasis>目的 NAT</emphasis> (DNAT)，改變封包目的 IP 位址 (與 TCP 或 UDP 埠)。連結追蹤機制同時改變後續封包的連結。第二種 NAT 是 <emphasis>來源 NAT</emphasis> (SNAT)，其中的 <emphasis>偽裝</emphasis> 是特例之一；SNAT 改變出去連結的來源 IP 位址 (與 TCP 或 UDP 埠)。如同 DNAT，所有的封包由連結追蹤機制處理。NAT 祗用於 IPv4 及其限制的位址空間；在 IPv6 內，其寬廣的位址技術允許直接在網際網路路由 (並不表示可以近用內部機器，因為防火牆可以過濾流量) 減少 NAT 的用途。
		</para>
		 <indexterm>
			<primary>NAT</primary>
		</indexterm>
		 <indexterm>
			<primary>Network</primary>
			<secondary>Address Translation</secondary>
		</indexterm>
		 <indexterm>
			<primary>SNAT</primary>
		</indexterm>
		 <indexterm>
			<primary>DNAT</primary>
		</indexterm>
		 <indexterm>
			<primary>Destination NAT</primary>
		</indexterm>
		 <indexterm>
			<primary>Source NAT</primary>
		</indexterm>
		 <sidebar> <title><emphasis>基本</emphasis> 埠轉發</title>
		 <indexterm>
			<primary>埠映射</primary>
		</indexterm>
		 <para>
			DNAT 的具體應用之一是 <emphasis>埠轉發</emphasis>。進來連結至機器的指定埠號轉發至另部機器的埠號。雖然還有其他的方案達成同樣的效果，諸如應用層面的 <command>ssh</command> (見 <xref linkend="sect.ssh-port-forwarding" />) 或 <command>redir</command>。
		</para>
		 </sidebar> <para>
			理論講多了，看看實務怎麼做。system into a gateway is a simple matter of enabling the appropriate option in the Linux kernel, 經由 <filename>/proc/</filename> 虛擬檔案系統，從 Linux 核心進入 Debian 系統的閘道器：
		</para>
		 
<screen>
<computeroutput># </computeroutput><userinput>echo 1 &gt; /proc/sys/net/ipv4/conf/default/forwarding</userinput></screen>
		 <para>
			若 <filename>/etc/sysctl.conf</filename> 設定 <literal>net.ipv4.conf.default.forwarding</literal> 選項為 <literal>1</literal>，就能以此方式在開機時自動啟用。
		</para>
		 <example id="example.sysctl.conf">
			<title><filename>/etc/sysctl.conf</filename> 檔案</title>
			 
<programlisting>
net.ipv4.conf.default.forwarding = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.tcp_syncookies = 1</programlisting>

		</example>
		 <para>
			在 IPv6 也能取得同樣的效果，把手冊中的 <literal>ipv4</literal> 換為 <literal>ipv6</literal>，並使用 <literal>net.ipv6.conf.all.forwarding</literal> 於 <filename>/etc/sysctl.conf</filename> 檔案內。
		</para>
		 <para>
			啟用 IPv4 偽裝就有點複雜，涉及組態 <emphasis>netfilter</emphasis> 防火牆。
		</para>
		 <para>
			需組態 <emphasis>netfilter</emphasis>，才能使用 NAT (IPv4)。因為此種組件的主要目的是套件篩選，詳情列在 <xref linkend="security" xrefstyle="select: label quotedtitle nopage" /> (見 <xref linkend="sect.firewall-packet-filtering" />)。
		</para>

	</section>
	 <section id="sect.virtual-private-network">
		<title>虛擬專用網路</title>
		 <para>
			<emphasis>虛擬專用網路</emphasis> (VPN) 是以通道方式，經由網際網路連結兩個區域網路的方式；通常以加密方式在通道內傳送資訊。VPN 通常用於整合公司內部遠端機器。
		</para>
		 <indexterm>
			<primary>網路</primary>
			<secondary>虛擬專用</secondary>
		</indexterm>
		 <indexterm>
			<primary>VPN</primary>
		</indexterm>
		 <indexterm>
			<primary>虛擬專用網路</primary>
		</indexterm>
		 <para>
			好幾個工具提供這種服務。OpenVPN 是個有效率解決方案，基於 SSL/TLS，容易佈署與維護。以 IPsec 加密兩部機器的 IP 流量；這是透明的編碼，在該等主機執行應用程式時不需修改 VPN。SSH 在傳統的功能外，也能提供 VPN。最後，可以用微軟的 PPTP 協定建立 VPN。其他的解決方案，就留給讀者自行探索。
		</para>
		 <section id="sect.openvpn">
			<title>OpenVPN</title>
			 <indexterm>
				<primary>OpenVPN</primary>
			</indexterm>
			 <para>
				OpenVPN 用於建立虛擬專用網路的一個軟體。在 VPN 伺服器及客戶端建立虛擬專用網路；支援 <literal>tun</literal> (IP 層面的通道) 和 <literal>tap</literal> (Ethernet 層面的通道) 介面。實務上，常用的是 <literal>tun</literal> 介面，除非 VPN 客戶端難以經由 Ethernet 橋接器整合入伺服器的區域網路。
			</para>
			 <para>
				OpenVPN 所有的 SSL/TLS 加密與其他功能 (機密性、認證、完整性、不可否認性)，均有賴於 OpenSSL。可以用公鑰基礎設施的共享私鑰或使用 X.509 認證的方式組態它。建議使用後者的方式組態，以漫遊方式近用 VPN 的使用者可享有更多的彈性。
			</para>
			 <sidebar> <title><emphasis>文化</emphasis> SSL 和 TLS</title>
			 <indexterm>
				<primary>SSL</primary>
			</indexterm>
			 <indexterm>
				<primary>TLS</primary>
			</indexterm>
			 <para>
				Netscape 研發的 SSL 協定 (<emphasis>Secure Socket Layer</emphasis>) 為安全連線至網站伺服器的工具。後來被 IETF 標準化為 TLS (<emphasis>Transport Layer Security</emphasis>)。後來，在 SSL 裡發現多個設計的缺失，棄置後，改使用 TLS。
			</para>
			 </sidebar> <section id="sect.easy-rsa">
				<title>公鑰基礎設施：<emphasis>easy-rsa</emphasis></title>
				 <indexterm>
					<primary>PKI (Public Key Infrastructure)</primary>
				</indexterm>
				 <indexterm>
					<primary>公鑰基礎設施</primary>
				</indexterm>
				 <indexterm>
					<primary>X.509，認證</primary>
				</indexterm>
				 <indexterm>
					<primary>認證</primary>
					<secondary>X.509</secondary>
				</indexterm>
				 <indexterm>
					<primary><emphasis>easy-rsa</emphasis></primary>
				</indexterm>
				 <indexterm>
					<primary>RSA (演算法)</primary>
				</indexterm>
				 <indexterm>
					<primary>密鑰配對</primary>
				</indexterm>
				 <para>
					RSA 演算法是使用廣泛的公鑰加密法。以 “密鑰配對” 法比對私鑰與公鑰。兩鑰密切連在一起，以公鑰演算加密的訊息，祗能被知道私鑰的人解開，以保障其安全。反之亦然，以私鑰加密的訊息，祗能被公鑰解開，也就是讓擁有私鑰的人，可以向指定的社群發出訊息。以數位雜湊 (MD5、SHA1、或其他) 方式演算，適用於任何簽名機制的訊息。
				</para>
				 <para>
					任何人都可以新增密鑰配對。採用 <emphasis>授權認證</emphasis> (CA)，即 X.509 標準。此術語指的是擁有信任密鑰配對做為 <emphasis>root 認證</emphasis>。此認證祗用於簽署另個認證 (密鑰配對)，經過適當的程序，檢查儲存在密鑰配對的內容。使用 X.509 可以檢查其中的認證。
				</para>
				 <para>
					OpenVPN 遵守此法則。因為公共 CA 放出的認證係用於交換 (巨大) 的費用，可以在公司內部生成專用的認證機制。<emphasis role="pkg">easy-rsa</emphasis> 套件可做為 X.509 認證基礎建設，應用於 <command>openssl</command> 命令的腳本內。
				</para>
				 <sidebar> <title><emphasis>說明</emphasis> <emphasis>easy-rsa</emphasis> 早於 <emphasis role="distribution">Jessie</emphasis> 之前</title>
				 <para>
					在 Debian <emphasis role="distribution">Wheezy</emphasis> 之前的版本，<emphasis>easy-rsa</emphasis> 做為 <emphasis role="pkg">openvpn</emphasis> 套件的一部份，其腳本在 <filename>/usr/share/doc/openvpn/examples/easy-rsa/2.0/</filename> 之內。複製該資料夾就能設定成 CA，不必使用 <command>make-cadir</command> 命令。
				</para>
				 </sidebar> <para>
					Falcot 公司的管理者以此工具新增必要的伺服器與客戶端認證。可以把所有的客戶端組態成類似的狀態，因為他們祗需信件 Falcot 在地 CA 的認證。此 CA 是率先認證的；為此工作，管理者在適當的地方建立新的資料夾，供 CA 的檔案使用，最好放在離線的地方，杜絕私鑰被竊的危險。
				</para>
				 
<screen>
<computeroutput>$ </computeroutput><userinput>make-cadir pki-falcot
</userinput><computeroutput>$ </computeroutput><userinput>cd pki-falcot</userinput></screen>
				 <para>
					把必要的參數儲存在 <filename>vars</filename> 檔案內，特別是以 <literal>KEY_</literal> 開頭的部份；這些變數整合入環境：
				</para>
				 
<screen>
<computeroutput>$ </computeroutput><userinput>vim vars
</userinput><computeroutput>$ </computeroutput><userinput>grep KEY_ vars
</userinput><computeroutput>export KEY_CONFIG=`$EASY_RSA/whichopensslcnf $EASY_RSA`
export KEY_DIR="$EASY_RSA/keys"
echo NOTE: If you run ./clean-all, I will be doing a rm -rf on $KEY_DIR
export KEY_SIZE=2048
export KEY_EXPIRE=3650
export KEY_COUNTRY="FR"
export KEY_PROVINCE="Loire"
export KEY_CITY="Saint-Étienne"
export KEY_ORG="Falcot Corp"
export KEY_EMAIL="admin@falcot.com"
export KEY_OU="Certificate authority"
export KEY_NAME="Certificate authority for Falcot Corp"
# If you'd like to sign all keys with the same Common Name, uncomment the KEY_CN export below
# export KEY_CN="CommonName"
$ </computeroutput><userinput>. ./vars
</userinput><computeroutput>NOTE: If you run ./clean-all, I will be doing a rm -rf on /home/roland/pki-falcot/keys
$ </computeroutput><userinput>./clean-all
</userinput></screen>
				 <para>
					接著新增 CA 密鑰配對本身 (在此階段把兩組鑰匙儲存在 <filename>keys/ca.crt</filename> 和 <filename>keys/ca.key</filename>)：
				</para>
				 
<screen>
<computeroutput>$ </computeroutput><userinput>./build-ca</userinput>
<computeroutput>Generating a 2048 bit RSA private key
...................................................................+++
...+++
writing new private key to 'ca.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [FR]:
State or Province Name (full name) [Loire]:
Locality Name (eg, city) [Saint-Étienne]:
Organization Name (eg, company) [Falcot Corp]:
Organizational Unit Name (eg, section) [Certificate authority]:
Common Name (eg, your name or your server's hostname) [Falcot Corp CA]:
Name [Certificate authority for Falcot Corp]:
Email Address [admin@falcot.com]:
</computeroutput></screen>
				 <para>
					現在 VPN 伺服器的認證完成，Diffie-Hellman 參數供伺服器的 SSL/TLS 連結亦完成。VPN 伺服器以其 DNS 名稱 <literal>vpn.falcot.com</literal> 識別；此名稱再次使用於新增鑰匙檔案 (<filename>keys/vpn.falcot.com.crt</filename> 供公鑰，<filename>keys/vpn.falcot.com.key</filename> 供私鑰)：
				</para>
				 
<screen>
<computeroutput>$ </computeroutput><userinput>./build-key-server vpn.falcot.com
</userinput><computeroutput>Generating a 2048 bit RSA private key
.....................................................................................................................+++
...........+++
writing new private key to 'vpn.falcot.com.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [FR]:
State or Province Name (full name) [Loire]:
Locality Name (eg, city) [Saint-Étienne]:
Organization Name (eg, company) [Falcot Corp]:
Organizational Unit Name (eg, section) [Certificate authority]:
Common Name (eg, your name or your server's hostname) [vpn.falcot.com]:
Name [Certificate authority for Falcot Corp]:
Email Address [admin@falcot.com]:

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
Using configuration from /home/roland/pki-falcot/openssl-1.0.0.cnf
Check that the request matches the signature
Signature ok
The Subject's Distinguished Name is as follows
countryName           :PRINTABLE:'FR'
stateOrProvinceName   :PRINTABLE:'Loire'
localityName          :T61STRING:'Saint-\0xFFFFFFC3\0xFFFFFF89tienne'
organizationName      :PRINTABLE:'Falcot Corp'
organizationalUnitName:PRINTABLE:'Certificate authority'
commonName            :PRINTABLE:'vpn.falcot.com'
name                  :PRINTABLE:'Certificate authority for Falcot Corp'
emailAddress          :IA5STRING:'admin@falcot.com'
Certificate is to be certified until Mar  6 14:54:56 2025 GMT (3650 days)
Sign the certificate? [y/n]:</computeroutput><userinput>y
</userinput><computeroutput>

1 out of 1 certificate requests certified, commit? [y/n]</computeroutput><userinput>y
</userinput><computeroutput>Write out database with 1 new entries
Data Base Updated
$ </computeroutput><userinput>./build-dh
</userinput><computeroutput>Generating DH parameters, 2048 bit long safe prime, generator 2
This is going to take a long time
[…]
</computeroutput></screen>
				 <para>
					以上的步驟新增 VPN 客戶；每個使用 VPN 的電腦或使用者都需有個認證：
				</para>
				 
<screen>
<computeroutput>$ </computeroutput><userinput>./build-key JoeSmith
</userinput><computeroutput>Generating a 2048 bit RSA private key
................................+++
..............................................+++
writing new private key to 'JoeSmith.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [FR]:
State or Province Name (full name) [Loire]:
Locality Name (eg, city) [Saint-Étienne]:
Organization Name (eg, company) [Falcot Corp]:
Organizational Unit Name (eg, section) [Certificate authority]:</computeroutput><userinput>Development unit
</userinput><computeroutput>Common Name (eg, your name or your server's hostname) [JoeSmith]:</computeroutput><userinput>Joe Smith
</userinput><computeroutput>[…]</computeroutput></screen>
				 <para>
					新的認證建好後，需複製至適當的地方：超級使用者公鑰 (<filename>keys/ca.crt</filename>) 儲存在所有機器 (伺服器與客戶端) 的 <filename>/etc/ssl/certs/Falcot_CA.crt</filename>。伺服器的認證僅安裝在伺服器 (<filename>keys/vpn.falcot.com.crt</filename> 的 <filename>/etc/ssl/vpn.falcot.com.crt</filename>，以及 <filename>keys/vpn.falcot.com.key</filename> 在 <filename>/etc/ssl/private/vpn.falcot.com.key</filename> 限制其權限為管理者才能讀取)，對應至 Diffie-Hellman 參數 (<filename>keys/dh2048.pem</filename>) 安裝在 <filename>/etc/openvpn/dh2048.pem</filename>。客戶端認證則類似的方式，安裝在對應的 VPN 各戶端。
				</para>

			</section>
			 <section>
				<title>組態 OpenVPN 伺服器</title>
				 <para>
					預設，OpenVPN 初始化的腳本在 <filename>/etc/openvpn/*.conf</filename> 啟動所有虛擬專用網路。設定 VPN 伺服器就是在此資料夾儲存對應的組態檔。<filename>/usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz</filename> 是個好的起點，建立相當標準伺服器。當然，還有若干參數需要調整：<literal>ca</literal>、<literal>cert</literal>、<literal>key</literal> 和 <literal>dh</literal> 需指定其地點 (分別是 <literal>/etc/ssl/certs/Falcot_CA.crt</literal>、<literal>/etc/ssl/vpn.falcot.com.crt</literal>、<literal>/etc/ssl/private/vpn.falcot.com.key</literal> 和 <literal>/etc/openvpn/dh2048.pem</literal>)。<literal>server 10.8.0.0 255.255.255.0</literal> 設定 VPN 的次網路；此伺服器使用此範圍內的第一個 IP 位址 (<literal>10.8.0.1</literal>) 然後把其他的位址保留給客戶端。
				</para>
				 <para>
					在這種組態下，通常以 <literal>tun0</literal> 之名，新增 OpenVPN 的虛擬網路介面。然而，有時在啟動 OpenVPN 前，把防火牆組態成真實的網路介面。最好固定新增的虛擬網路介面，OpenVPN 使用預存的介面。進一步選擇介面的名稱。到了這個階段，<command>openvpn --mktun --dev vpn --dev-type tun</command> 新增一個虛擬網路介面名稱為 <literal>vpn</literal> 型態為 <literal>tun</literal>；這個命令可以整合入防火牆組態腳本，或 <literal>up</literal> 指向 <filename>/etc/network/interfaces</filename> 檔案。OpenVPN 組態檔必須跟著更新，直接使用 <literal>dev vpn</literal> 和 <literal>dev-type tun</literal>。
				</para>
				 <para>
					禁止進一步的行動，VPN 客戶端祗能經由 <literal>10.8.0.1</literal> 位址近用 VPN 伺服器。為了授權客戶近用在地網路 (192.168.0.0/24)，需在 OpenVPN 組態中加入 <literal>推送路徑 192.168.0.0 255.255.255.0</literal>，讓 VPN 客戶端自動取得網路路由，使其明瞭經由 VPN 可以進入該網路。此外，在地網路的機器也需被告知，經由 VPN 伺服器 (在閘道安裝 VPN 伺服器即自動啟用) 進入VPN。另外，VPN 伺服器可以組態後執行偽裝 IP 的工作，讓來自 VPN 客戶端的訊息顯示成來自 VPN 伺服器 (見 <xref linkend="sect.gateway" />)。
				</para>

			</section>
			 <section>
				<title>組態 OpenVPN 客戶端</title>
				 <para>
					需組態 <filename>/etc/openvpn/</filename> 內的檔案才能設定 OpenVPN 客戶端。標準的組態方法可從使用 <filename>/usr/share/doc/openvpn/examples/sample-config-files/client.conf</filename> 這個檔案開始。<literal>remote vpn.falcot.com 1194</literal> 介紹 OpenVPN 伺服器的位址及埠號；描述密鑰文件位址時，需參考 <literal>ca</literal>、<literal>cert</literal> 和 <literal>key</literal>。
				</para>
				 <para>
					若開機時無法自動進入 VPN，則需設定 <literal>AUTOSTART</literal> 為 <literal>none</literal> 於 <filename>/etc/default/openvpn</filename> 檔案內。以命令 <command>service openvpn@<replaceable>name</replaceable> start</command> 和 <command>service openvpn@<replaceable>name</replaceable> stop</command> (其中的 <replaceable>name</replaceable> 就是在 <filename>/etc/openvpn/<replaceable>name</replaceable>.conf</filename> 中設定的名稱) 就能啟用或停用指定的 VPN 連結。
				</para>
				 <para>
					此 <emphasis role="pkg">network-manager-openvpn-gnome</emphasis> 套件包括允許管理 OpenVPN 虛擬專屬網路的延伸網路管理者 (見 <xref linkend="sect.roaming-network-config" />)。允許每個使用者以圖形介面組態 OpenVPN 且從網路管理圖示控制它們。 <indexterm><primary><emphasis role="pkg">network-manager-openvpn-gnome</emphasis></primary></indexterm>
				</para>

			</section>

		</section>
		 <section id="sect.ssh-vpn">
			<title>SSH 下的虛擬專屬網路</title>
			 <indexterm>
				<primary>SSH</primary>
			</indexterm>
			 <indexterm>
				<primary>PPP</primary>
			</indexterm>
			 <para>
				實際上有兩種方法以 SSH 新增虛擬專屬網路。較舊的是以 SSH 建立 PPP 層連結。此方法在 HOWTO 文件詳細說明：<ulink type="block" url="http://www.tldp.org/HOWTO/ppp-ssh/" />
			</para>
			 <para>
				第二個方法較新，適用於 OpenSSH 4.3；可以在 OpenSSH 之下建立虛擬網路介面 (<literal>tun*</literal>) 於 SSH 連結的兩端，且可以精準地組態這些虛擬介面，就像在實體介面環境下。必須先設定 <literal>PermitTunnel</literal> 為 “yes” 於 SSH 伺服器組態檔 (<filename>/etc/ssh/sshd_config</filename>)，才能啟用此隧道系統。啟用 SSH 連結後，新增的隧道必須以 <literal>-w any:any</literal> 選項 (<literal>any</literal> 可以用期望的 <literal>tun</literal> 設備名稱取代) 請求連結。兩端的使用者需有管理者權限，才能新增網路設備 (換句話說，必須以超級使用者的身份才能建立連結)。
			</para>
			 <para>
				Both methods for creating a virtual private network over SSH are quite straightforward. However, the VPN they provide is not the most efficient available; in particular, it does not handle high levels of traffic very well.
			</para>
			 <para>
				The explanation is that when a TCP/IP stack is encapsulated within a TCP/IP connection (for SSH), the TCP protocol is used twice, once for the SSH connection and once within the tunnel. This leads to problems, especially due to the way TCP adapts to network conditions by altering timeout delays. The following site describes the problem in more detail: <ulink type="block" url="http://sites.inka.de/sites/bigred/devel/tcp-tcp.html" /> VPNs over SSH should therefore be restricted to one-off tunnels with no performance constraints.
			</para>

		</section>
		 <section id="sect.ipsec">
			<title>IPsec</title>
			 <indexterm>
				<primary>IPsec</primary>
			</indexterm>
			 <indexterm>
				<primary><command>strongswan</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>racoon</command></primary>
			</indexterm>
			 <para>
				IPsec, despite being the standard in IP VPNs, is rather more involved in its implementation. The IPsec engine itself is integrated in the Linux kernel; the required user-space parts, the control and configuration tools, are provided by the <emphasis role="pkg">ipsec-tools</emphasis> package. In concrete terms, each host's <filename>/etc/ipsec-tools.conf</filename> contains the parameters for <emphasis>IPsec tunnels</emphasis> (or <emphasis>Security Associations</emphasis>, in the IPsec terminology) that the host is concerned with; the <command>/etc/init.d/setkey</command> script provides a way to start and stop a tunnel (each tunnel is a secure link to another host connected to the virtual private network). This file can be built by hand from the documentation provided by the <citerefentry><refentrytitle>setkey</refentrytitle>
				 <manvolnum>8</manvolnum></citerefentry> manual page. However, explicitly writing the parameters for all hosts in a non-trivial set of machines quickly becomes an arduous task, since the number of tunnels grows fast. Installing an IKE daemon (for <emphasis>IPsec Key Exchange</emphasis>) such as <emphasis role="pkg">racoon</emphasis> or <emphasis role="pkg">strongswan</emphasis> makes the process much simpler by bringing administration together at a central point, and more secure by rotating the keys periodically.
			</para>
			 <indexterm>
				<primary>IKE</primary>
			</indexterm>
			 <indexterm>
				<primary>IPsec</primary>
				<secondary>IPsec Key Exchange</secondary>
			</indexterm>
			 <indexterm>
				<primary>密鑰配對</primary>
			</indexterm>
			 <indexterm>
				<primary><command>setkey</command></primary>
			</indexterm>
			 <para>
				In spite of its status as the reference, the complexity of setting up IPsec restricts its usage in practice. OpenVPN-based solutions will generally be preferred when the required tunnels are neither too many nor too dynamic.
			</para>
			 <sidebar> <title><emphasis>CAUTION</emphasis> IPsec and NAT</title>
			 <para>
				NATing firewalls and IPsec do not work well together: since IPsec signs the packets, any change on these packets that the firewall might perform will void the signature, and the packets will be rejected at their destination. Various IPsec implementations now include the <emphasis>NAT-T</emphasis> technique (for <emphasis>NAT Traversal</emphasis>), which basically encapsulates the IPsec packet within a standard UDP packet.
			</para>
			 <indexterm>
				<primary>NAT-T</primary>
			</indexterm>
			 <indexterm>
				<primary>NAT Traversal</primary>
			</indexterm>
			 </sidebar> <sidebar> <title><emphasis>SECURITY</emphasis> IPsec and firewalls</title>
			 <para>
				The standard mode of operation of IPsec involves data exchanges on UDP port 500 for key exchanges (also on UDP port 4500 in the case that NAT-T is in use). Moreover, IPsec packets use two dedicated IP protocols that the firewall must let through; reception of these packets is based on their protocol numbers, 50 (ESP) and 51 (AH).
			</para>
			 <indexterm>
				<primary>ESP, protocol</primary>
			</indexterm>
			 <indexterm>
				<primary>AH, protocol</primary>
			</indexterm>
			 <indexterm>
				<primary>protocol</primary>
				<secondary>AH</secondary>
			</indexterm>
			 <indexterm>
				<primary>protocol</primary>
				<secondary>ESP</secondary>
			</indexterm>
			 </sidebar>
		</section>
		 <section id="sect.pptp">
			<title>PPTP</title>
			 <para>
				PPTP (for <emphasis>Point-to-Point Tunneling Protocol</emphasis>) uses two communication channels, one for control data and one for payload data; the latter uses the GRE protocol (<emphasis>Generic Routing Encapsulation</emphasis>). A standard PPP link is then set up over the data exchange channel.
			</para>
			 <indexterm>
				<primary>PPTP</primary>
			</indexterm>
			 <indexterm>
				<primary>Point-to-Point Tunneling Protocol</primary>
			</indexterm>
			 <indexterm>
				<primary>GRE, protocol</primary>
			</indexterm>
			 <indexterm>
				<primary>protocol</primary>
				<secondary>GRE</secondary>
			</indexterm>
			 <section id="sect.pptp-config-client">
				<title>Configuring the Client</title>
				 <para>
					The <emphasis role="pkg">pptp-linux</emphasis> package contains an easily-configured PPTP client for Linux. The following instructions take their inspiration from the official documentation: <ulink type="block" url="http://pptpclient.sourceforge.net/howto-debian.phtml" />
				</para>
				 <indexterm>
					<primary><emphasis role="pkg">pptp-linux</emphasis></primary>
				</indexterm>
				 <para>
					The Falcot administrators created several files: <filename>/etc/ppp/options.pptp</filename>, <filename>/etc/ppp/peers/falcot</filename>, <filename>/etc/ppp/ip-up.d/falcot</filename>, and <filename>/etc/ppp/ip-down.d/falcot</filename>.
				</para>
				 <example id="example.ppp-options.pptp">
					<title>The <filename>/etc/ppp/options.pptp</filename> file</title>
					 
<programlisting>
# PPP options used for a PPTP connection
lock
noauth
nobsdcomp
nodeflate
</programlisting>

				</example>
				 <example id="example.ppp-peers-falcot">
					<title>The <filename>/etc/ppp/peers/falcot</filename> file</title>
					 
<programlisting>
# vpn.falcot.com is the PPTP server
pty "pptp vpn.falcot.com --nolaunchpppd"
# the connection will identify as the "vpn" user
user vpn
remotename pptp
# encryption is needed
require-mppe-128
file /etc/ppp/options.pptp
ipparam falcot
</programlisting>

				</example>
				 <example id="example.ppp-ip-up.d-falcot">
					<title>The <filename>/etc/ppp/ip-up.d/falcot</filename> file</title>
					 
<programlisting>
# Create the route to the Falcot network
if [ "$6" = "falcot" ]; then
  # 192.168.0.0/24 is the (remote) Falcot network
  route add -net 192.168.0.0 netmask 255.255.255.0 dev $1
fi
</programlisting>

				</example>
				 <example id="example.ppp-ip-down.d-falcot">
					<title>The <filename>/etc/ppp/ip-down.d/falcot</filename> file</title>
					 
<programlisting>
# Delete the route to the Falcot network
if [ "$6" = "falcot" ]; then
  # 192.168.0.0/24 is the (remote) Falcot network
  route del -net 192.168.0.0 netmask 255.255.255.0 dev $1
fi
</programlisting>

				</example>
				 <sidebar> <title><emphasis>SECURITY</emphasis> MPPE</title>
				 <para>
					Securing PPTP involves using the MPPE feature (<emphasis>Microsoft Point-to-Point Encryption</emphasis>), which is available in official Debian kernels as a module.
				</para>
				 <indexterm>
					<primary>MPPE</primary>
				</indexterm>
				 <indexterm>
					<primary>Microsoft</primary>
					<secondary>Point-to-Point Encryption</secondary>
				</indexterm>
				 </sidebar>
			</section>
			 <section id="sect.pptp-config-serveur">
				<title>Configuring the Server</title>
				 <sidebar> <title><emphasis>CAUTION</emphasis> PPTP and firewalls</title>
				 <para>
					Intermediate firewalls need to be configured to let through IP packets using protocol 47 (GRE). Moreover, the PPTP server's port 1723 needs to be open so that the communication channel can happen.
				</para>
				 </sidebar> <para>
					<command>pptpd</command> is the PPTP server for Linux. Its main configuration file, <filename>/etc/pptpd.conf</filename>, requires very few changes: <emphasis>localip</emphasis> (local IP address) and <emphasis>remoteip</emphasis> (remote IP address). In the example below, the PPTP server always uses the <literal>192.168.0.199</literal> address, and PPTP clients receive IP addresses from <literal>192.168.0.200</literal> to <literal>192.168.0.250</literal>.
				</para>
				 <example id="example.pptpd.conf">
					<title>The <filename>/etc/pptpd.conf</filename> file</title>
					 
<programlisting>
# TAG: speed
#
#       Specifies the speed for the PPP daemon to talk at.
#
speed 115200

# TAG: option
#
#       Specifies the location of the PPP options file.
#       By default PPP looks in '/etc/ppp/options'
#
option /etc/ppp/pptpd-options

# TAG: debug
#
#       Turns on (more) debugging to syslog
#
# debug

# TAG: localip
# TAG: remoteip
#
#       Specifies the local and remote IP address ranges.
#
#       You can specify single IP addresses separated by commas or you can
#       specify ranges, or both. For example:
#
#               192.168.0.234,192.168.0.245-249,192.168.0.254
#
#       IMPORTANT RESTRICTIONS:
#
#       1. No spaces are permitted between commas or within addresses.
#
#       2. If you give more IP addresses than MAX_CONNECTIONS, it will
#          start at the beginning of the list and go until it gets
#          MAX_CONNECTIONS IPs. Others will be ignored.
#
#       3. No shortcuts in ranges! ie. 234-8 does not mean 234 to 238,
#          you must type 234-238 if you mean this.
#
#       4. If you give a single localIP, that's ok - all local IPs will
#          be set to the given one. You MUST still give at least one remote
#          IP for each simultaneous client.
#
#localip 192.168.0.234-238,192.168.0.245
#remoteip 192.168.1.234-238,192.168.1.245
#localip 10.0.1.1
#remoteip 10.0.1.2-100
localip 192.168.0.199
remoteip 192.168.0.200-250
</programlisting>

				</example>
				 <para>
					The PPP configuration used by the PPTP server also requires a few changes in <filename>/etc/ppp/pptpd-options</filename>. The important parameters are the server name (<literal>pptp</literal>), the domain name (<literal>falcot.com</literal>), and the IP addresses for DNS and WINS servers.
				</para>
				 <example id="example.ppp-pptpd-options">
					<title>The <filename>/etc/ppp/pptpd-options</filename> file</title>
					 
<programlisting>
## turn pppd syslog debugging on
#debug

## change 'servername' to whatever you specify as your server name in chap-secrets
name pptp
## change the domainname to your local domain
domain falcot.com

## these are reasonable defaults for WinXXXX clients
## for the security related settings
# The Debian pppd package now supports both MSCHAP and MPPE, so enable them
# here. Please note that the kernel support for MPPE must also be present!
auth
require-chap
require-mschap
require-mschap-v2
require-mppe-128

## Fill in your addresses
ms-dns 192.168.0.1
ms-wins 192.168.0.1

## Fill in your netmask
netmask 255.255.255.0

## some defaults
nodefaultroute
proxyarp
lock
</programlisting>

				</example>
				 <para>
					The last step involves registering the <literal>vpn</literal> user (and the associated password) in the <filename>/etc/ppp/chap-secrets</filename> file. Contrary to other instances where an asterisk (<literal>*</literal>) would work, the server name must be filled explicitly here. Furthermore, Windows PPTP clients identify themselves under the <literal><replaceable>DOMAIN</replaceable>\\<replaceable>USER</replaceable></literal> form, instead of only providing a user name. This explains why the file also mentions the <literal>FALCOT\\vpn</literal> user. It is also possible to specify individual IP addresses for users; an asterisk in this field specifies that dynamic addressing should be used.
				</para>
				 <example id="example.ppp-chap-secrets">
					<title>The <filename>/etc/ppp/chap-secrets</filename> file</title>
					 
<programlisting>
# Secrets for authentication using CHAP
# client        server  secret      IP addresses
vpn             pptp    f@Lc3au     *
FALCOT\\vpn     pptp    f@Lc3au     *
</programlisting>

				</example>
				 <sidebar> <title><emphasis>SECURITY</emphasis> PPTP vulnerabilities</title>
				 <para>
					Microsoft's first PPTP implementation drew severe criticism because it had many security vulnerabilities; most have since then been fixed in more recent versions. The configuration documented in this section uses the latest version of the protocol. Be aware though that removing some options (such as <literal>require-mppe-128</literal> and <literal>require-mschap-v2</literal>) would make the service vulnerable again.
				</para>
				 </sidebar>
			</section>

		</section>

	</section>
	 <section id="sect.quality-of-service">
		<title>Quality of Service</title>
		 <section id="sect.qos-principe">
			<title>原則與機制</title>
			 <para>
				<emphasis>Quality of Service</emphasis> (or <emphasis>QoS</emphasis> for short) refers to a set of techniques that guarantee or improve the quality of the service provided to applications. The most popular such technique involves classifying the network traffic into categories, and differentiating the handling of traffic according to which category it belongs to. The main application of this differentiated services concept is <emphasis>traffic shaping</emphasis>, which limits the data transmission rates for connections related to some services and/or hosts so as not to saturate the available bandwidth and starve important other services. Traffic shaping is a particularly good fit for TCP traffic, since this protocol automatically adapts to available bandwidth.
			</para>
			 <indexterm>
				<primary>QoS</primary>
			</indexterm>
			 <indexterm>
				<primary>quality of service</primary>
			</indexterm>
			 <indexterm>
				<primary>quality</primary>
				<secondary>of service</secondary>
			</indexterm>
			 <indexterm>
				<primary>service</primary>
				<secondary>quality</secondary>
			</indexterm>
			 <para>
				It is also possible to alter the priorities on traffic, which allows prioritizing packets related to interactive services (such as <command>ssh</command> and <command>telnet</command>) or to services that only deal with small blocks of data.
			</para>
			 <para>
				The Debian kernels include the features required for QoS along with their associated modules. These modules are many, and each of them provides a different service, most notably by way of special schedulers for the queues of IP packets; the wide range of available scheduler behaviors spans the whole range of possible requirements.
			</para>
			 <sidebar> <title><emphasis>CULTURE</emphasis> LARTC — <emphasis>Linux Advanced Routing &amp; Traffic Control</emphasis></title>
			 <para>
				The <emphasis>Linux Advanced Routing &amp; Traffic Control</emphasis> HOWTO is the reference document covering everything there is to know about network quality of service. <ulink type="block" url="http://www.lartc.org/howto/" />
			</para>
			 <indexterm>
				<primary>routing</primary>
				<secondary>advanced</secondary>
			</indexterm>
			 <indexterm>
				<primary>traffic</primary>
				<secondary>control</secondary>
			</indexterm>
			 <indexterm>
				<primary>control of traffic</primary>
			</indexterm>
			 </sidebar>
		</section>
		 <section id="sect.qos-config">
			<title>Configuring and Implementing</title>
			 <para>
				QoS parameters are set through the <command>tc</command> command (provided by the <emphasis role="pkg">iproute</emphasis> package). Since its interface is quite complex, using higher-level tools is recommended.
			</para>
			 <indexterm>
				<primary><emphasis>iproute</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><command>tc</command></primary>
			</indexterm>
			 <section id="sect.qos-wondershaper">
				<title>Reducing Latencies: <command>wondershaper</command></title>
				 <para>
					The main purpose of <command>wondershaper</command> (in the similarly-named package) is to minimize latencies independent of network load. This is achieved by limiting total traffic to a value that falls just short of the link saturation value.
				</para>
				 <indexterm>
					<primary><command>wondershaper</command></primary>
				</indexterm>
				 <indexterm>
					<primary>limitation of traffic</primary>
				</indexterm>
				 <indexterm>
					<primary>traffic</primary>
					<secondary>limitation</secondary>
				</indexterm>
				 <para>
					Once a network interface is configured, setting up this traffic limitation is achieved by running <command>wondershaper <replaceable>interface</replaceable> <replaceable>download_rate</replaceable> <replaceable>upload_rate</replaceable></command>. The interface can be <literal>eth0</literal> or <literal>ppp0</literal> for example, and both rates are expressed in kilobits per second. The <command>wondershaper remove <replaceable>interface</replaceable></command> command disables traffic control on the specified interface.
				</para>
				 <para>
					For an Ethernet connection, this script is best called right after the interface is configured. This is done by adding <literal>up</literal> and <literal>down</literal> directives to the <filename>/etc/network/interfaces</filename> file allowing declared commands to be run, respectively, after the interface is configured and before it is deconfigured. For example:
				</para>
				 <example id="example.network-interfaces">
					<title>Changes in the <filename>/etc/network/interfaces</filename> file</title>
					 
<programlisting>
iface eth0 inet dhcp
    up /sbin/wondershaper eth0 500 100
    down /sbin/wondershaper remove eth0
</programlisting>

				</example>
				 <para>
					In the PPP case, creating a script that calls <command>wondershaper</command> in <filename>/etc/ppp/ip-up.d/</filename> will enable traffic control as soon as the connection is up.
				</para>
				 <sidebar> <title><emphasis>GOING FURTHER</emphasis> Optimal configuration</title>
				 <para>
					The <filename>/usr/share/doc/wondershaper/README.Debian.gz</filename> file describes, in some detail, the configuration method recommended by the package maintainer. In particular, it advises measuring the download and upload speeds so as to best evaluate real limits.
				</para>
				 </sidebar>
			</section>
			 <section id="sect.qos-config-standard">
				<title>Standard Configuration</title>
				 <para>
					Barring a specific QoS configuration, the Linux kernel uses the <literal>pfifo_fast</literal> queue scheduler, which provides a few interesting features by itself. The priority of each processed IP packet is based on the ToS field (<emphasis>Type of Service</emphasis>) of this packet; modifying this field is enough to take advantage of the scheduling features. There are five possible values:
				</para>
				 <itemizedlist>
					<listitem>
						<para>
							Normal-Service (0);
						</para>

					</listitem>
					 <listitem>
						<para>
							Minimize-Cost (2);
						</para>

					</listitem>
					 <listitem>
						<para>
							Maximize-Reliability (4);
						</para>

					</listitem>
					 <listitem>
						<para>
							Maximize-Throughput (8);
						</para>

					</listitem>
					 <listitem>
						<para>
							Minimize-Delay (16).
						</para>

					</listitem>

				</itemizedlist>
				 <indexterm>
					<primary>ToS</primary>
				</indexterm>
				 <indexterm>
					<primary>Type of Service</primary>
				</indexterm>
				 <para>
					The ToS field can be set by applications that generate IP packets, or modified on the fly by <emphasis>netfilter</emphasis>. The following rules are sufficient to increase responsiveness for a server's SSH service:
				</para>
				 
<programlisting role="scale">
iptables -t mangle -A PREROUTING -p tcp --sport ssh -j TOS --set-tos Minimize-Delay
iptables -t mangle -A PREROUTING -p tcp --dport ssh -j TOS --set-tos Minimize-Delay
</programlisting>

			</section>

		</section>

	</section>
	 <section id="sect.dynamic-routing">
		<title>Dynamic Routing</title>
		 <indexterm>
			<primary>routing</primary>
			<secondary>dynamic</secondary>
		</indexterm>
		 <indexterm>
			<primary><command>quagga</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>zebra</command></primary>
		</indexterm>
		 <para>
			The reference tool for dynamic routing is currently <command>quagga</command>, from the similarly-named package; it used to be <command>zebra</command> until development of the latter stopped. However, <command>quagga</command> kept the names of the programs for compatibility reasons which explains the <command>zebra</command> commands below.
		</para>
		 <sidebar> <title><emphasis>BACK TO BASICS</emphasis> Dynamic routing</title>
		 <para>
			Dynamic routing allows routers to adjust, in real time, the paths used for transmitting IP packets. Each protocol involves its own method of defining routes (shortest path, use routes advertised by peers, and so on).
		</para>
		 <para>
			In the Linux kernel, a route links a network device to a set of machines that can be reached through this device. The <command>route</command> command defines new routes and displays existing ones.
		</para>
		 <indexterm>
			<primary><command>route</command></primary>
		</indexterm>
		 </sidebar> <para>
			Quagga is a set of daemons cooperating to define the routing tables to be used by the Linux kernel; each routing protocol (most notably BGP, OSPF and RIP) provides its own daemon. The <command>zebra</command> daemon collects information from other daemons and handles static routing tables accordingly. The other daemons are known as <command>bgpd</command>, <command>ospfd</command>, <command>ospf6d</command>, <command>ripd</command>, <command>ripngd</command>, <command>isisd</command>, and <command>babeld</command>.
		</para>
		 <indexterm>
			<primary>OSPF</primary>
		</indexterm>
		 <indexterm>
			<primary>BGP</primary>
		</indexterm>
		 <indexterm>
			<primary>RIP</primary>
		</indexterm>
		 <indexterm>
			<primary>IS-IS</primary>
		</indexterm>
		 <indexterm>
			<primary>BABEL wireless mesh routing</primary>
		</indexterm>
		 <indexterm>
			<primary><command>bgpd</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>ospfd</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>ospf6d</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>ripd</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>ripngd</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>isisd</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>babeld</command></primary>
		</indexterm>
		 <para>
			Daemons are enabled by editing the <filename>/etc/quagga/daemons</filename> file and creating the appropriate configuration file in <filename>/etc/quagga/</filename>; this configuration file must be named after the daemon, with a <filename>.conf</filename> extension, and belong to the <literal>quagga</literal> user and the <literal>quaggavty</literal> group, in order for the <filename>/etc/init.d/quagga</filename> script to invoke the daemon.
		</para>
		 <para>
			The configuration of each of these daemons requires knowledge of the routing protocol in question. These protocols cannot be described in detail here, but the <emphasis role="pkg">quagga-doc</emphasis> provides ample explanation in the form of an <command>info</command> file. The same contents may be more easily browsed as HTML on the Quagga website: <ulink type="block" url="http://www.nongnu.org/quagga/docs/docs-info.html" />
		</para>
		 <para>
			In addition, the syntax is very close to a standard router's configuration interface, and network administrators will adapt quickly to <command>quagga</command>.
		</para>
		 <sidebar> <title><emphasis>IN PRACTICE</emphasis> OSPF, BGP or RIP?</title>
		 <para>
			OSPF is generally the best protocol to use for dynamic routing on private networks, but BGP is more common for Internet-wide routing. RIP is rather ancient, and hardly used anymore.
		</para>
		 </sidebar>
	</section>
	 <section id="sect.ipv6">
		<title>IPv6</title>
		 <para>
			IPv6, successor to IPv4, is a new version of the IP protocol designed to fix its flaws, most notably the scarcity of available IP addresses. This protocol handles the network layer; its purpose is to provide a way to address machines, to convey data to their intended destination, and to handle data fragmentation if needed (in other words, to split packets into chunks with a size that depends on the network links to be used on the path and to reassemble the chunks in their proper order on arrival).
		</para>
		 <para>
			Debian kernels include IPv6 handling in the core kernel (with the exception of some architectures that have it compiled as a module named <literal>ipv6</literal>). Basic tools such as <command>ping</command> and <command>traceroute</command> have their IPv6 equivalents in <command>ping6</command> and <command>traceroute6</command>, available respectively in the <emphasis role="pkg">iputils-ping</emphasis> and <emphasis role="pkg">iputils-tracepath</emphasis> packages.
		</para>
		 <indexterm>
			<primary>IPv6</primary>
		</indexterm>
		 <indexterm>
			<primary><emphasis role="pkg">iputils-ping</emphasis></primary>
		</indexterm>
		 <indexterm>
			<primary><emphasis role="pkg">iputils-tracepath</emphasis></primary>
		</indexterm>
		 <para>
			The IPv6 network is configured similarly to IPv4, in <filename>/etc/network/interfaces</filename>. But if you want that network to be globally available, you must ensure that you have an IPv6-capable router relaying traffic to the global IPv6 network.
		</para>
		 <example id="example.network-interfaces-ipv6">
			<title>Example of IPv6 configuration</title>
			 
<programlisting>
iface eth0 inet6 static
    address 2001:db8:1234:5::1:1
    netmask 64
    # Disabling auto-configuration
    # autoconf 0
    # The router is auto-configured and has no fixed address
    # (accept_ra 1). If it had:
    # gateway 2001:db8:1234:5::1
</programlisting>

		</example>
		 <para>
			IPv6 subnets usually have a netmask of 64 bits. This means that 2<superscript>64</superscript> distinct addresses exist within the subnet. This allows Stateless Address Autoconfiguration (<acronym>SLAAC</acronym>) to pick an address based on the network interface's MAC address. By default, if <acronym>SLAAC</acronym> is activated in your network and IPv6 on your computer, the kernel will automatically find IPv6 routers and configure the network interfaces.
		</para>
		 <para>
			This behavior may have privacy implications. If you switch networks frequently, e.g. with a laptop, you might not want your <acronym>MAC</acronym> address being a part of your public IPv6 address. This makes it easy to identify the same device across networks. A solution to this are IPv6 privacy extensions (which Debian enables by default if IPv6 connectivity is detected during initial installation), which will assign an additional randomly generated address to the interface, periodically change them and prefer them for outgoing connections. Incoming connections can still use the address generated by SLAAC. The following example, for use in <filename>/etc/network/interfaces</filename>, activates these privacy extensions.
		</para>
		 <example id="example.network-interface-ipv6-privext">
			<title>IPv6 privacy extensions</title>
			 
<programlisting>
iface eth0 inet6 auto
    # Prefer the randomly assigned addresses for outgoing connections.
    privext 2
</programlisting>

		</example>
		 <sidebar> <title><emphasis>TIP</emphasis> Programs built with IPv6</title>
		 <para>
			Many pieces of software need to be adapted to handle IPv6. Most of the packages in Debian have been adapted already, but not all. If your favorite package does not work with IPv6 yet, you can ask for help on the <emphasis>debian-ipv6</emphasis> mailing-list. They might know about an IPv6-aware replacement and could file a bug to get the issue properly tracked. <ulink type="block" url="http://lists.debian.org/debian-ipv6/" />
		</para>
		 </sidebar> <indexterm>
			<primary>IPv6 firewall</primary>
		</indexterm>
		 <indexterm>
			<primary>firewall</primary>
			<secondary>IPv6</secondary>
		</indexterm>
		 <indexterm>
			<primary><command>ip6tables</command></primary>
		</indexterm>
		 <para>
			IPv6 connections can be restricted, in the same fashion as for IPv4: the standard Debian kernels include an adaptation of <emphasis>netfilter</emphasis> for IPv6. This IPv6-enabled <emphasis>netfilter</emphasis> is configured in a similar fashion to its IPv4 counterpart, except the program to use is <command>ip6tables</command> instead of <command>iptables</command>.
		</para>
		 <section id="sect.ipv6-tunneling">
			<title>Tunneling</title>
			 <sidebar> <title><emphasis>CAUTION</emphasis> IPv6 tunneling and firewalls</title>
			 <para>
				IPv6 tunneling over IPv4 (as opposed to native IPv6) requires the firewall to accept the traffic, which uses IPv4 protocol number 41.
			</para>
			 </sidebar> <para>
				If a native IPv6 connection is not available, the fallback method is to use a tunnel over IPv4. Gogo6 is one (free) provider of such tunnels: <ulink type="block" url="http://www.gogo6.com/freenet6/tunnelbroker" />
			</para>
			 <indexterm>
				<primary>Freenet6</primary>
			</indexterm>
			 <indexterm>
				<primary>Gogo6</primary>
			</indexterm>
			 <para>
				To use a Freenet6 tunnel, you need to register for a Freenet6 Pro account on the website, then install the <emphasis role="pkg">gogoc</emphasis> package and configure the tunnel. This requires editing the <filename>/etc/gogoc/gogoc.conf</filename> file: <literal>userid</literal> and <literal>password</literal> lines received by e-mail should be added, and <literal>server</literal> should be replaced with <literal>authenticated.freenet6.net</literal>.
			</para>
			 <para>
				IPv6 connectivity is proposed to all machines on a local network by adding the three following directives to the <filename>/etc/gogoc/gogoc.conf</filename> file (assuming the local network is connected to the eth0 interface):
			</para>
			 
<programlisting>
host_type=router
prefixlen=56
if_prefix=eth0
</programlisting>
			 <para>
				The machine then becomes the access router for a subnet with a 56-bit prefix. Once the tunnel is aware of this change, the local network must be told about it; this implies installing the <command>radvd</command> daemon (from the similarly-named package). This IPv6 configuration daemon has a role similar to <command>dhcpd</command> in the IPv4 world.
			</para>
			 <para>
				The <filename>/etc/radvd.conf</filename> configuration file must then be created (see <filename>/usr/share/doc/radvd/examples/simple-radvd.conf</filename> as a starting point). In our case, the only required change is the prefix, which needs to be replaced with the one provided by Freenet6; it can be found in the output of the <command>ifconfig</command> command, in the block concerning the <literal>tun</literal> interface.
			</para>
			 <indexterm>
				<primary><command>radvd</command></primary>
			</indexterm>
			 <para>
				Then run <command>service gogoc restart</command> and <command>service radvd start</command>, and the IPv6 network should work.
			</para>

		</section>

	</section>
	 <section id="sect.domain-name-servers">
		<title>Domain Name Servers (DNS)</title>
		 <section id="sect.dns-principe">
			<title>原則與機制</title>
			 <indexterm>
				<primary>DNS</primary>
			</indexterm>
			 <indexterm>
				<primary>server</primary>
				<secondary>name</secondary>
			</indexterm>
			 <para>
				The <emphasis>Domain Name Service</emphasis> (DNS) is a fundamental component of the Internet: it maps host names to IP addresses (and vice-versa), which allows the use of <literal>www.debian.org</literal> instead of <literal>5.153.231.4</literal> or <literal>2001:41c8:1000:21::21:4</literal>.
			</para>
			 <para>
				DNS records are organized in zones; each zone matches either a domain (or a subdomain) or an IP address range (since IP addresses are generally allocated in consecutive ranges). A primary server is authoritative on the contents of a zone; secondary servers, usually hosted on separate machines, provide regularly refreshed copies of the primary zone.
			</para>
			 <indexterm>
				<primary>zone</primary>
				<secondary>DNS</secondary>
			</indexterm>
			 <indexterm>
				<primary>DNS</primary>
				<secondary>zone</secondary>
			</indexterm>
			 <para>
				Each zone can contain records of various kinds (<emphasis>Resource Records</emphasis>):
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						<literal>A</literal>: IPv4 address. <indexterm><primary>A, DNS record</primary></indexterm>
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>CNAME</literal>: alias (<emphasis>canonical name</emphasis>). <indexterm><primary>CNAME, DNS record</primary></indexterm>
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>MX</literal>: <emphasis>mail exchange</emphasis>, an email server. This information is used by other email servers to find where to send email addressed to a given address. Each MX record has a priority. The highest-priority server (with the lowest number) is tried first (see sidebar <xref linkend="sidebar.smtp" />); other servers are contacted in order of decreasing priority if the first one does not reply. <indexterm><primary>MX</primary><secondary>DNS record</secondary></indexterm>
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>PTR</literal>: mapping of an IP address to a name. Such a record is stored in a “reverse DNS” zone named after the IP address range. For example, <literal>1.168.192.in-addr.arpa</literal> is the zone containing the reverse mapping for all addresses in the <literal>192.168.1.0/24</literal> range. <indexterm><primary>PTR, DNS record</primary></indexterm>
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>AAAA</literal>: IPv6 address. <indexterm><primary>AAAA, DNS record</primary></indexterm>
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>NS</literal>: maps a name to a name server. Each domain must have at least one NS record. These records point at a DNS server that can answer queries concerning this domain; they usually point at the primary and secondary servers for the domain. These records also allow DNS delegation; for instance, the <literal>falcot.com</literal> zone can include an NS record for <literal>internal.falcot.com</literal>, which means that the <literal>internal.falcot.com</literal> zone is handled by another server. Of course, this server must declare an <literal>internal.falcot.com</literal> zone. <indexterm><primary>NS, DNS record</primary></indexterm>
					</para>

				</listitem>

			</itemizedlist>
			 <indexterm>
				<primary>record</primary>
				<secondary>DNS</secondary>
			</indexterm>
			 <indexterm>
				<primary>DNS record</primary>
			</indexterm>
			 <para>
				The reference name server, Bind, was developed and is maintained by ISC (<emphasis>Internet Software Consortium</emphasis>). It is provided in Debian by the <emphasis role="pkg">bind9</emphasis> package. Version 9 brings two major changes compared to previous versions. First, the DNS server can now run under an unprivileged user, so that a security vulnerability in the server does not grant root privileges to the attacker (as was seen repeatedly with versions 8.x).
			</para>
			 <para>
				Furthermore, Bind supports the DNSSEC standard for signing (and therefore authenticating) DNS records, which allows blocking any spoofing of this data during man-in-the-middle attacks.
			</para>
			 <indexterm>
				<primary><emphasis role="pkg">bind9</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary>ISC</primary>
			</indexterm>
			 <indexterm>
				<primary>Internet Software Consortium</primary>
			</indexterm>
			 <sidebar> <title><emphasis>CULTURE</emphasis> DNSSEC</title>
			 <indexterm>
				<primary>DNSSEC</primary>
			</indexterm>
			 <para>
				The DNSSEC norm is quite complex; this partly explains why it is not in widespread usage yet (even if it perfectly coexists with DNS servers unaware of DNSSEC). To understand all the ins and outs, you should check the following article. <ulink type="block" url="http://en.wikipedia.org/wiki/Domain_Name_System_Security_Extensions" />
			</para>
			 </sidebar>
		</section>
		 <section id="sect.dns-config">
			<title>配置</title>
			 <para>
				Configuration files for <command>bind</command>, irrespective of version, have the same structure.
			</para>
			 <para>
				The Falcot administrators created a primary <literal>falcot.com</literal> zone to store information related to this domain, and a <literal>168.192.in-addr.arpa</literal> zone for reverse mapping of IP addresses in the local networks.
			</para>
			 <sidebar> <title><emphasis>CAUTION</emphasis> Names of reverse zones</title>
			 <indexterm>
				<primary>zone</primary>
				<secondary>reverse</secondary>
			</indexterm>
			 <indexterm>
				<primary>reverse zone</primary>
			</indexterm>
			 <indexterm>
				<primary><literal>in-addr.arpa</literal></primary>
			</indexterm>
			 <indexterm>
				<primary><literal>ip6.arpa</literal></primary>
			</indexterm>
			 <indexterm>
				<primary>nibble format</primary>
			</indexterm>
			 <para>
				Reverse zones have a particular name. The zone covering the <literal>192.168.0.0/16</literal> network needs to be named <literal>168.192.in-addr.arpa</literal>: the IP address components are reversed, and followed by the <literal>in-addr.arpa</literal> suffix.
			</para>
			 <para>
				For IPv6 networks, the suffix is <literal>ip6.arpa</literal> and the IP address components which are reversed are each character in the full hexadecimal representation of the IP address. As such, the <literal>2001:0bc8:31a0::/48</literal> network would use a zone named <literal>0.a.1.3.8.c.b.0.1.0.0.2.ip6.arpa</literal>.
			</para>
			 </sidebar> <sidebar> <title><emphasis>TIP</emphasis> Testing the DNS server</title>
			 <para>
				The <command>host</command> command (in the <emphasis role="pkg">bind9-host</emphasis> package) queries a DNS server, and can be used to test the server configuration. For example, <command>host machine.falcot.com localhost</command> checks the local server's reply for the <literal>machine.falcot.com</literal> query. <command>host <replaceable>ipaddress</replaceable> localhost</command> tests the reverse resolution.
			</para>
			 <indexterm>
				<primary><command>host</command></primary>
			</indexterm>
			 </sidebar> <para>
				The following configuration excerpts, taken from the Falcot files, can serve as starting points to configure a DNS server:
			</para>
			 <indexterm>
				<primary><filename>named.conf</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>/etc/bind/named.conf</filename></primary>
			</indexterm>
			 <example id="example.bind-named.conf.local">
				<title>Excerpt of <filename>/etc/bind/named.conf.local</filename></title>
				 
<programlisting>
zone "falcot.com" {
        type master;
        file "/etc/bind/db.falcot.com";
        allow-query { any; };
        allow-transfer {
                195.20.105.149/32 ; // ns0.xname.org
                193.23.158.13/32 ; // ns1.xname.org
        };
};

zone "internal.falcot.com" {
        type master;
        file "/etc/bind/db.internal.falcot.com";
        allow-query { 192.168.0.0/16; };
};

zone "168.192.in-addr.arpa" {
        type master;
        file "/etc/bind/db.192.168";
        allow-query { 192.168.0.0/16; };
};
</programlisting>

			</example>
			 <example id="example.bind-db.falcot.com">
				<title>Excerpt of <filename>/etc/bind/db.falcot.com</filename></title>
				 
<programlisting>; falcot.com Zone 
; admin.falcot.com. =&gt; zone contact: admin@falcot.com
$TTL    604800
@       IN      SOA     falcot.com. admin.falcot.com. (
                        20040121        ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                         604800 )       ; Negative Cache TTL
;
; The @ refers to the zone name ("falcot.com" here)
; or to $ORIGIN if that directive has been used
;
@       IN      NS      ns
@       IN      NS      ns0.xname.org.

internal IN      NS      192.168.0.2

@       IN      A       212.94.201.10
@       IN      MX      5 mail
@       IN      MX      10 mail2

ns      IN      A       212.94.201.10
mail    IN      A       212.94.201.10
mail2   IN      A       212.94.201.11
www     IN      A       212.94.201.11

dns     IN      CNAME   ns
</programlisting>

			</example>
			 <sidebar> <title><emphasis>CAUTION</emphasis> Syntax of a name</title>
			 <para>
				The syntax of machine names follows strict rules. For instance, <literal>machine</literal> implies <literal>machine.<replaceable>domain</replaceable></literal>. If the domain name should not be appended to a name, said name must be written as <literal>machine.</literal> (with a dot as suffix). Indicating a DNS name outside the current domain therefore requires a syntax such as <literal>machine.otherdomain.com.</literal> (with the final dot).
			</para>
			 </sidebar> <example id="example.bind-db.192.168">
				<title>Excerpt of <filename>/etc/bind/db.192.168</filename></title>
				 
<programlisting>; Reverse zone for 192.168.0.0/16
; admin.falcot.com. =&gt; zone contact: admin@falcot.com
$TTL    604800
@       IN      SOA     ns.internal.falcot.com. admin.falcot.com. (
                        20040121        ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                         604800 )       ; Negative Cache TTL

        IN      NS      ns.internal.falcot.com.

; 192.168.0.1 -&gt; arrakis
1.0     IN      PTR     arrakis.internal.falcot.com.
; 192.168.0.2 -&gt; neptune
2.0     IN      PTR     neptune.internal.falcot.com.

; 192.168.3.1 -&gt; pau
1.3     IN      PTR     pau.internal.falcot.com.
</programlisting>

			</example>

		</section>

	</section>
	 <section id="sect.dhcp">
		<title>DHCP</title>
		 <para>
			DHCP (for <emphasis>Dynamic Host Configuration Protocol</emphasis>) is a protocol by which a machine can automatically get its network configuration when it boots. This allows centralizing the management of network configurations, and ensuring that all desktop machines get similar settings.
		</para>
		 <indexterm>
			<primary>DHCP</primary>
		</indexterm>
		 <indexterm>
			<primary>Dynamic Host Configuration Protocol</primary>
		</indexterm>
		 <indexterm>
			<primary>network</primary>
			<secondary>DHCP configuration</secondary>
		</indexterm>
		 <para>
			A DHCP server provides many network-related parameters. The most common of these is an IP address and the network where the machine belongs, but it can also provide other information, such as DNS servers, WINS servers, NTP servers, and so on.
		</para>
		 <para>
			The Internet Software Consortium (also involved in developing <command>bind</command>) is the main author of the DHCP server. The matching Debian package is <emphasis role="pkg">isc-dhcp-server</emphasis>.
		</para>
		 <section id="sect.dhcp-config">
			<title>配置</title>
			 <para>
				The first elements that need to be edited in the DHCP server configuration file (<filename>/etc/dhcp/dhcpd.conf</filename>) are the domain name and the DNS servers. If this server is alone on the local network (as defined by the broadcast propagation), the <literal>authoritative</literal> directive must also be enabled (or uncommented). One also needs to create a <literal>subnet</literal> section describing the local network and the configuration information to be provided. The following example fits a <literal>192.168.0.0/24</literal> local network with a router at <literal>192.168.0.1</literal> serving as the gateway. Available IP addresses are in the range <literal>192.168.0.128</literal> to <literal>192.168.0.254</literal>.
			</para>
			 <example id="example.dhcp-dhcpd.conf">
				<title>Excerpt of <filename>/etc/dhcp/dhcpd.conf</filename></title>
				 
<programlisting>
#
# Sample configuration file for ISC dhcpd for Debian
#

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style interim;

# option definitions common to all supported networks...
option domain-name "internal.falcot.com";
option domain-name-servers ns.internal.falcot.com;

default-lease-time 600;
max-lease-time 7200;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

# My subnet
subnet 192.168.0.0 netmask 255.255.255.0 {
    option routers 192.168.0.1;
    option broadcast-address 192.168.0.255;
    range 192.168.0.128 192.168.0.254;
    ddns-domainname "internal.falcot.com";
}
</programlisting>

			</example>

		</section>
		 <section id="sect.dhcp-dns">
			<title>DHCP and DNS</title>
			 <indexterm>
				<primary>DNS</primary>
				<secondary>automated updates</secondary>
			</indexterm>
			 <para>
				A nice feature is the automated registering of DHCP clients in the DNS zone, so that each machine gets a significant name (rather than something impersonal such as <literal>machine-192-168-0-131.internal.falcot.com</literal>). Using this feature requires configuring the DNS server to accept updates to the <literal>internal.falcot.com</literal> DNS zone from the DHCP server, and configuring the latter to submit updates for each registration.
			</para>
			 <para>
				In the <command>bind</command> case, the <literal>allow-update</literal> directive needs to be added to each of the zones that the DHCP server is to edit (the one for the <literal>internal.falcot.com</literal> domain, and the reverse zone). This directive lists the IP addresses allowed to perform these updates; it should therefore contain the possible addresses of the DHCP server (both the local address and the public address, if appropriate).
			</para>
			 
<programlisting>
allow-update { 127.0.0.1 192.168.0.1 212.94.201.10 !any };
</programlisting>
			 <para>
				Beware! A zone that can be modified <emphasis>will</emphasis> be changed by <command>bind</command>, and the latter will overwrite its configuration files at regular intervals. Since this automated procedure produces files that are less human-readable than manually-written ones, the Falcot administrators handle the <literal>internal.falcot.com</literal> domain with a delegated DNS server; this means the <literal>falcot.com</literal> zone file stays firmly under their manual control.
			</para>
			 <para>
				The DHCP server configuration excerpt above already includes the directives required for DNS zone updates: they are the <literal>ddns-update-style interim;</literal> and <literal>ddns-domain-name "internal.falcot.com";</literal> lines in the block describing the subnet.
			</para>

		</section>

	</section>
	 <section id="sect.network-diagnosis-tools">
		<title>Network Diagnosis Tools</title>
		 <para>
			When a network application does not run as expected, it is important to be able to look under the hood. Even when everything seems to run smoothly, running a network diagnosis can help ensure everything is working as it should. Several diagnosis tools exists for this purpose; each one operates on a different level.
		</para>
		 <section id="sect.netstat">
			<title>Local Diagnosis: <command>netstat</command></title>
			 <indexterm>
				<primary><command>netstat</command></primary>
			</indexterm>
			 <para>
				Let's first mention the <command>netstat</command> command (in the <emphasis role="pkg">net-tools</emphasis> package); it displays an instant summary of a machine's network activity. When invoked with no argument, this command lists all open connections; this list can be very verbose since it includes many Unix-domain sockets (widely used by daemons) which do not involve the network at all (for example, <literal>dbus</literal> communication, <literal>X11</literal> traffic, and communications between virtual filesystems and the desktop).
			</para>
			 <para>
				Common invocations therefore use options that alter <command>netstat</command>'s behavior. The most frequently used options include:
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						<literal>-t</literal>, which filters the results to only include TCP connections;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>-u</literal>, which works similarly for UDP connections; these options are not mutually exclusive, and one of them is enough to stop displaying Unix-domain connections;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>-a</literal>, to also list listening sockets (waiting for incoming connections);
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>-n</literal>, to display the results numerically: IP addresses (no DNS resolution), port numbers (no aliases as defined in <filename>/etc/services</filename>) and user ids (no login names);
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>-p</literal>, to list the processes involved; this option is only useful when <command>netstat</command> is run as root, since normal users will only see their own processes;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>-c</literal>, to continuously refresh the list of connections.
					</para>

				</listitem>

			</itemizedlist>
			 <para>
				Other options, documented in the <citerefentry><refentrytitle>netstat</refentrytitle>
				 <manvolnum>8</manvolnum></citerefentry> manual page, provide an even finer control over the displayed results. In practice, the first five options are so often used together that systems and network administrators practically acquired <command>netstat -tupan</command> as a reflex. Typical results, on a lightly loaded machine, may look like the following:
			</para>
			 
<screen role="scale">
<computeroutput># </computeroutput><userinput>netstat -tupan</userinput>
<computeroutput>Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      397/rpcbind     
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      431/sshd        
tcp        0      0 0.0.0.0:36568           0.0.0.0:*               LISTEN      407/rpc.statd   
tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      762/exim4       
tcp        0    272 192.168.1.242:22        192.168.1.129:44452     ESTABLISHED 1172/sshd: roland [
tcp6       0      0 :::111                  :::*                    LISTEN      397/rpcbind     
tcp6       0      0 :::22                   :::*                    LISTEN      431/sshd        
tcp6       0      0 ::1:25                  :::*                    LISTEN      762/exim4       
tcp6       0      0 :::35210                :::*                    LISTEN      407/rpc.statd   
udp        0      0 0.0.0.0:39376           0.0.0.0:*                           916/dhclient    
udp        0      0 0.0.0.0:996             0.0.0.0:*                           397/rpcbind     
udp        0      0 127.0.0.1:1007          0.0.0.0:*                           407/rpc.statd   
udp        0      0 0.0.0.0:68              0.0.0.0:*                           916/dhclient    
udp        0      0 0.0.0.0:48720           0.0.0.0:*                           451/avahi-daemon: r
udp        0      0 0.0.0.0:111             0.0.0.0:*                           397/rpcbind     
udp        0      0 192.168.1.242:123       0.0.0.0:*                           539/ntpd        
udp        0      0 127.0.0.1:123           0.0.0.0:*                           539/ntpd        
udp        0      0 0.0.0.0:123             0.0.0.0:*                           539/ntpd        
udp        0      0 0.0.0.0:5353            0.0.0.0:*                           451/avahi-daemon: r
udp        0      0 0.0.0.0:39172           0.0.0.0:*                           407/rpc.statd   
udp6       0      0 :::996                  :::*                                397/rpcbind     
udp6       0      0 :::34277                :::*                                407/rpc.statd   
udp6       0      0 :::54852                :::*                                916/dhclient    
udp6       0      0 :::111                  :::*                                397/rpcbind     
udp6       0      0 :::38007                :::*                                451/avahi-daemon: r
udp6       0      0 fe80::5054:ff:fe99::123 :::*                                539/ntpd        
udp6       0      0 2001:bc8:3a7e:210:a:123 :::*                                539/ntpd        
udp6       0      0 2001:bc8:3a7e:210:5:123 :::*                                539/ntpd        
udp6       0      0 ::1:123                 :::*                                539/ntpd        
udp6       0      0 :::123                  :::*                                539/ntpd        
udp6       0      0 :::5353                 :::*                                451/avahi-daemon: r
</computeroutput></screen>
			 <para>
				As expected, this lists established connections, two SSH connections in this case, and applications waiting for incoming connections (listed as <literal>LISTEN</literal>), notably the Exim4 email server listening on port 25.
			</para>

		</section>
		 <section id="sect.nmap">
			<title>Remote Diagnosis: <command>nmap</command></title>
			 <indexterm>
				<primary><command>nmap</command></primary>
			</indexterm>
			 <para>
				<command>nmap</command> (in the similarly-named package) is, in a way, the remote equivalent for <command>netstat</command>. It can scan a set of “well-known” ports for one or several remote servers, and list the ports where an application is found to answer to incoming connections. Furthermore, <command>nmap</command> is able to identify some of these applications, sometimes even their version number. The counterpart of this tool is that, since it runs remotely, it cannot provide information on processes or users; however, it can operate on several targets at once.
			</para>
			 <para>
				A typical <command>nmap</command> invocation only uses the <literal>-A</literal> option (so that <command>nmap</command> attempts to identify the versions of the server software it finds) followed by one or more IP addresses or DNS names of machines to scan. Again, many more options exist to finely control the behavior of <command>nmap</command>; please refer to the documentation in the <citerefentry> <refentrytitle>nmap</refentrytitle>
				 <manvolnum>1</manvolnum> </citerefentry> manual page.
			</para>
			 
<screen role="scale" width="80">
<computeroutput># </computeroutput><userinput>nmap mirtuel</userinput>
<computeroutput>
Starting Nmap 6.47 ( http://nmap.org ) at 2015-03-09 16:46 CET
Nmap scan report for mirtuel (192.168.1.242)
Host is up (0.000013s latency).
rDNS record for 192.168.1.242: mirtuel.internal.placard.fr.eu.org
Not shown: 998 closed ports
PORT    STATE SERVICE
22/tcp  open  ssh
111/tcp open  rpcbind

Nmap done: 1 IP address (1 host up) scanned in 2.41 seconds
# </computeroutput><userinput>nmap -A localhost</userinput>
<computeroutput>
Starting Nmap 6.47 ( http://nmap.org ) at 2015-03-09 16:46 CET
Nmap scan report for localhost (127.0.0.1)
Host is up (0.000013s latency).
Other addresses for localhost (not scanned): 127.0.0.1
Not shown: 997 closed ports
PORT    STATE SERVICE VERSION
22/tcp  open  ssh     OpenSSH 6.7p1 Debian 3 (protocol 2.0)
|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)
25/tcp  open  smtp    Exim smtpd 4.84
| smtp-commands: mirtuel Hello localhost [127.0.0.1], SIZE 52428800, 8BITMIME, PIPELINING, HELP, 
|_ Commands supported: AUTH HELO EHLO MAIL RCPT DATA NOOP QUIT RSET HELP 
111/tcp open  rpcbind 2-4 (RPC #100000)
| rpcinfo: 
|   program version   port/proto  service
|   100000  2,3,4        111/tcp  rpcbind
|   100000  2,3,4        111/udp  rpcbind
|   100024  1          36568/tcp  status
|_  100024  1          39172/udp  status
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.7 - 3.15
Network Distance: 0 hops
Service Info: Host: mirtuel; OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 11.54 seconds
</computeroutput></screen>
			 <para>
				As expected, the SSH and Exim4 applications are listed. Note that not all applications listen on all IP addresses; since Exim4 is only accessible on the <literal>lo</literal> loopback interface, it only appears during an analysis of <literal>localhost</literal> and not when scanning <literal>mirtuel</literal> (which maps to the <literal>eth0</literal> interface on the same machine).
			</para>

		</section>
		 <section id="sect.sniffers">
			<title>Sniffers: <command>tcpdump</command> and <command>wireshark</command></title>
			 <para>
				Sometimes, one needs to look at what actually goes on the wire, packet by packet. These cases call for a “frame analyzer”, more widely known as a <emphasis>sniffer</emphasis>. Such a tool observes all the packets that reach a given network interface, and displays them in a user-friendly way.
			</para>
			 <indexterm>
				<primary><command>tcpdump</command></primary>
			</indexterm>
			 <para>
				The venerable tool in this domain is <command>tcpdump</command>, available as a standard tool on a wide range of platforms. It allows many kinds of network traffic capture, but the representation of this traffic stays rather obscure. We will therefore not describe it in further detail.
			</para>
			 <indexterm>
				<primary><command>wireshark</command></primary>
			</indexterm>
			 <para>
				A more recent (and more modern) tool, <command>wireshark</command> (in the <emphasis role="pkg">wireshark</emphasis> package), has become the new reference in network traffic analysis due to its many decoding modules that allow for a simplified analysis of the captured packets. The packets are displayed graphically with an organization based on the protocol layers. This allows a user to visualize all protocols involved in a packet. For example, given a packet containing an HTTP request, <command>wireshark</command> displays, separately, the information concerning the physical layer, the Ethernet layer, the IP packet information, the TCP connection parameters, and finally the HTTP request itself.
			</para>
			 <figure id="figure.wireshark">
				<title>The <command>wireshark</command> network traffic analyzer</title>
				 <mediaobject>
					<imageobject>
						<imagedata fileref="images/wireshark.png" format="PNG" scalefit="1" width="75%" />
					</imageobject>

				</mediaobject>

			</figure>
			 <para>
				In our example, the packets traveling over SSH are filtered out (with the <literal>!tcp.port == 22</literal> filter). The packet currently displayed was developed at the HTTP layer.
			</para>
			 <sidebar> <title><emphasis>TIP</emphasis> <command>wireshark</command> with no graphical interface: <command>tshark</command></title>
			 <indexterm>
				<primary><command>tshark</command></primary>
			</indexterm>
			 <para>
				When one cannot run a graphical interface, or does not wish to do so for whatever reason, a text-only version of <command>wireshark</command> also exists under the name <command>tshark</command> (in a separate <emphasis role="pkg">tshark</emphasis> package). Most of the capture and decoding features are still available, but the lack of a graphical interface necessarily limits the interactions with the program (filtering packets after they've been captured, tracking of a given TCP connection, and so on). It can still be used as a first approach. If further manipulations are intended and require the graphical interface, the packets can be saved to a file and this file can be loaded into a graphical <command>wireshark</command> running on another machine.
			</para>
			 </sidebar>
		</section>

	</section>
</chapter>

