<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="unix-services" lang="zh-TW">
	<chapterinfo>
		 <keywordset>
			<keyword>系統啟動</keyword>
			 <keyword>初始化腳本</keyword>
			 <keyword>SSH</keyword>
			 <keyword>Telnet</keyword>
			 <keyword>權力</keyword>
			 <keyword>權限</keyword>
			 <keyword>監督</keyword>
			 <keyword>Inetd</keyword>
			 <keyword>Cron</keyword>
			 <keyword>備份</keyword>
			 <keyword>熱插拔</keyword>
			 <keyword>PCMCIA</keyword>
			 <keyword>APM</keyword>
			 <keyword>ACPI</keyword>

		</keywordset>

	</chapterinfo>
	 <title>Unix 服務</title>
	 <highlights> <para>
		此章包括若干 Unix 系统共通的服務。管理員應熟悉他們。
	</para>
	 </highlights> <section id="sect.system-boot">
		<title>系統啟動</title>
		 <indexterm>
			<primary>啟動</primary>
			<secondary>系統</secondary>
		</indexterm>
		 <para>
			啟動電腦時，螢幕捲動的訊息表示正在自動處理起始化和組態的工作。需要改變此階段的作業時，就必須好好的理解他們。這正是本章的目的所在。
		</para>
		 <para>
			首先，BIOS 控制電腦，偵測磁碟機，載入 <emphasis>Master Boot Record</emphasis>，再執行啟動程式。然後，找到磁碟內的核心程式，載入並執行它。先初始化該核心，搜尋並載入包括根檔案系統的分割區，並執行第一個程式 — <command>init</command>。通常，此 “根分割區” 以及 <command>init</command> 命令祗在在 RAM 的虛擬檔案系統內 (所以被稱為，“initramfs”，舊稱 “initrd” 就是 “初始化 RAM 磁碟” 的意思)。通常經由硬式磁碟機或網路，讓啟動程式把此檔案系統載入記憶體。它包括核心所需的最少量 “真正” 的根檔案系統：足以驅動系統無法啟動的硬式磁碟機或其他裝置、或者初始化腳本與模組以建構 RAID 陣列，開啟加密分割區、啟動 LVM 等。一但掛上根分割區， initramfs 就把控制權交給真正的啟動程式，機器回到標準的啟動程序。
		</para>
		 <figure id="figure.boot-process-systemd">
			<title>執行 systemd 的 Linux 機器的啟動程序</title>
			 <mediaobject>
				<imageobject>
					<imagedata fileref="images/startup-systemd.png" format="PNG" scalefit="1" width="80%" />
				</imageobject>

			</mediaobject>

		</figure>
		 <section id="sect.systemd">
			<title>systemd 啟動系統</title>
			 <para>
				此 “真正啟動” 是由 <emphasis role="pkg">systemd</emphasis> 提供的，在本節說明該啟動系統。
			</para>
			 <sidebar> <title><emphasis>文化</emphasis> 首先 <command>systemd</command></title>
			 <para>
				<command>systemd</command> 是相當新的 “啟動系統”，雖然在 <emphasis role="distribution">Wheezy</emphasis> 裡已經可以使用到某個程度，直到 Debian <emphasis role="distribution">Jessie</emphasis> 才納入預設值。稍最的版本，預設是 “System V init” (在 <emphasis role="pkg">sysv-rc</emphasis> 套件內)，算是傳統的系統。以下描述的是 System V init。
			</para>
			 </sidebar> <sidebar> <title><emphasis>選擇</emphasis> 其他啟動系統</title>
			 <para>
				本書描述的是 Debian <emphasis role="distribution">Jessie</emphasis> (如 <emphasis role="pkg">systemd</emphasis> 套件所應用的) 預設的啟動系統，以及更早的預設值，<emphasis role="pkg">sysvinit</emphasis>，源自於 <emphasis>System V</emphasis> Unix 系統；還有若干其他的。
			</para>
			 <para>
				<emphasis role="pkg">file-rc</emphasis> 是程序簡單的啟動系統。祗使用執行層次的原則，但以組態檔取代資料夾與符號連結，做為指示 <command>init</command> 命令處理啟動與後續的順序。
			</para>
			 <para>
				此 <command>upstart</command> 系統在 Debian 上仍未完整測試。它以事件為基礎：不再依序執行 init 腳本，但以回應另個依附的腳本。由 Ubuntu 開始的這個系統，列在 Debian <emphasis role="distribution">Jessie</emphasis> 內，但還不是預設；事實上，做為 <emphasis role="pkg">sysvinit</emphasis> 的替代品，由 <command>upstart</command> 啟動的工作，係用來啟動為傳統系統而設的，特別是來自 <emphasis role="pkg">sysv-rc</emphasis> 套件的腳本。
			</para>
			 <para>
				作業模式還有其他的系統，例如 <command>runit</command> 或 <command>minit</command>，但都很專門且不普及。
			</para>
			 </sidebar> <sidebar> <title><emphasis>特例</emphasis> 網路啟動</title>
			 <para>
				有些組態可以讓 BIOS 不執行 MBR，而從網路尋找等同的裝置，在無硬碟的情況下建立電腦、或完全重新安裝每個啟動。並不是所有硬體都支援此選項，需要 BIOS 與網卡適當地搭配。
			</para>
			 <para>
				可以從網路啟動 <command>debian-installer</command> 或 FAI (見 <xref linkend="sect.installation-methods" />)。
			</para>
			 </sidebar> <sidebar> <title><emphasis>回到基礎</emphasis> 程序，一個程式實例</title>
			 <indexterm>
				<primary>程序</primary>
			</indexterm>
			 <para>
				程序是在記憶體執行程式的代表。包括適當執行軟體的必要資訊 (程式碼本身、記憶體內的資料、開啟的檔案清單、已建立的網路連結等)。單一程式可能安裝成多個程序，不必在不同的使用者帳號下執行。
			</para>
			 </sidebar> <sidebar> <title><emphasis>安全</emphasis> 以 shell 做為 <command>init</command> 取得 root 權限</title>
			 <para>
				慣例上，第一個啟動的程序是 <command>init</command> 程式(預設為符號連結至 <filename>/lib/systemd/systemd</filename>)。然而，也可能繞過 <literal>init</literal> 選項直接進入核心使用其他程式。
			</para>
			 <indexterm>
				<primary><command>init</command></primary>
			</indexterm>
			 <para>
				實際接觸電腦人都可以按下 <keycap>Reset</keycap> 鈕，重新開機。然後，在啟動程式的提示符號下，可能繞過 <literal>init=/bin/sh</literal> 選項不需管理者密碼，就能進入核心取得 root 權限。
			</para>
			 <para>
				為了防止此類事件發生，可以加設密碼保護啟動程式。也可以保護進入 BIOS (總是可以找到密碼保護的機制)，可以防止入侵者插入含 Linux 系統的移動媒體，近用電腦硬碟內的資料。
			</para>
			 <para>
				最後的叮嚀，大部份的 BIOS 有通用密碼。原來係供忘記密碼的人使用，目前已經在網際網路上公開了 (以 “generic BIOS passwords” 在搜尋引擎查找)。所有的保護都可以阻絕未授權的近用但還不能完全避免。目前沒有任何方法可以保護電腦不受實質接觸電腦者的入侵；入侵者可以卸載電腦的硬碟再納入其控制之下、或者偷者整部機器、或者抹除 BIOS 記憶體重設密碼…
			</para>
			 </sidebar> <para>
				Systemd 執行多個程序，設定系統：鍵盤、驅動程式、檔案系統、網路、服務等。同時全面檢視系統，以及必要的配件。每個配件都視為一個 “單元檔案” (有時為多個)；通用的語法源自於常用的 “*.ini files“ 語法，包括配對的 <literal><replaceable>key</replaceable> = <replaceable>value</replaceable></literal> 列在 <literal>[<replaceable>section</replaceable>]</literal> 標頭內。單元檔案儲存在 <filename>/lib/systemd/system/</filename> 與 <filename>/etc/systemd/system/</filename> 內；以多種風貌呈現，目前專注在 “服務” 與 “目標”。
			</para>
			 <para>
				systemd “服務檔案” 描述被 systemd 管理的程序。包括與舊型的 init-scripts 相同的資料，但以宣告 (同時較為簡潔) 的方式表述。Systemd 處理大量重複的工作 (啟動與終止程序、檢查其狀態、日註記錄、去除特權等)，以及祗供特定程序使用的服務檔案。例如，以下是 SSH 用到的服務檔：
			</para>
			 
<programlisting>[Unit]
Description=OpenBSD Secure Shell server
After=network.target auditd.service
ConditionPathExists=!/etc/ssh/sshd_not_to_be_run

[Service]
EnvironmentFile=-/etc/default/ssh
ExecStart=/usr/sbin/sshd -D $SSHD_OPTS
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure

[Install]
WantedBy=multi-user.target
Alias=sshd.service</programlisting>
			 <para>
				如上文所示，程式碼極少，祗有宣告。Systemd 管理顯示進度報表、追蹤程序、以及必要的重啟。
			</para>
			 <para>
				systemd 的 “目標檔案” 描述系統的現狀，包括可操作的服務。不妨視為相當於舊型的執行階段作業。其中一個目標是 <literal>local-fs.target</literal>；進入之後，系統的其他部份假設所有的在地檔案系統均己掛載並可近用。其他的目標包括 <literal>network-online.target</literal> 與 <literal>sound.target</literal>。目標的相依性可以列在目標檔案內 (於 <literal>Requires=</literal> 列) 或使用符號連結至在 <literal>/lib/systemd/system/<replaceable>targetname</replaceable>.target.wants/</literal> 資料夾內的服務檔案。例如，<filename>/etc/systemd/system/printer.target.wants/</filename> 包括一個連結至 <filename>/lib/systemd/system/cups.service</filename>；systemd 將確保 CUPS 已執行至 <literal>printer.target</literal>。
			</para>
			 <para>
				單元檔案是宣告性的而不是腳本或程式，不能直接執行，祗能被 systemd 解譯；因些有些工具允許管理者與 systemd 互動且控制系統的狀態與其元件。
			</para>
			 <para>
				第一種這類工具是 <command>systemctl</command>。未使用參數執行時，它列出 systemd 已知的所有單元檔 (除了已經停用的)，及其現況。<command>systemctl status</command> 則以更佳的角度檢視服務，以及相關的程序。若提供服務的名稱 (如 <command>systemctl status ntp.service</command>)，則送回更多詳細的資料，以及與該服務有關的最後幾個日誌檔 (還有更多的)。
			</para>
			 <para>
				執行 <command>systemctl start <replaceable>servicename</replaceable>.service</command> 就能以人工方式啟動服務。同樣的，執行 <command>systemctl stop <replaceable>servicename</replaceable>.service</command> 就能停止已完成的服務；其他的次命令包括 <command>reload</command> 與 <command>restart</command>。
			</para>
			 <para>
				以 <command>systemctl enable <replaceable>servicename</replaceable>.service</command> (或 <command>disable</command>) 控制啟動服務 (即開機後自動啟動)。<command>is-enabled</command> 可以檢查服務的狀態。
			</para>
			 <para>
				systemd 重要的功能之一是包括登入的組件 <command>journald</command>。做為補充 <command>syslogd</command> 之類傳統登入系統的組件，但加入額外的功能包括在服務與其產生訊息間的正式連結，以及補捉由初始過程產生的錯誤訊息。在 <command>journalctl</command> 命令的協助下，稍後可顯示該等訊息。不需任何參數，它溢出系統啟動後發生的所有日誌訊息；不過很少用到它。多數時間，把它做為服務的辨識器：
			</para>
			 
<screen><computeroutput># </computeroutput><userinput>journalctl -u ssh.service
</userinput><computeroutput>-- Logs begin at Tue 2015-03-31 10:08:49 CEST, end at Tue 2015-03-31 17:06:02 CEST. --
Mar 31 10:08:55 mirtuel sshd[430]: Server listening on 0.0.0.0 port 22.
Mar 31 10:08:55 mirtuel sshd[430]: Server listening on :: port 22.
Mar 31 10:09:00 mirtuel sshd[430]: Received SIGHUP; restarting.
Mar 31 10:09:00 mirtuel sshd[430]: Server listening on 0.0.0.0 port 22.
Mar 31 10:09:00 mirtuel sshd[430]: Server listening on :: port 22.
Mar 31 10:09:32 mirtuel sshd[1151]: Accepted password for roland from 192.168.1.129 port 53394 ssh2
Mar 31 10:09:32 mirtuel sshd[1151]: pam_unix(sshd:session): session opened for user roland by (uid=0)
</computeroutput></screen>
			 <para>
				另個有用的命令列旗標是 <command>-f</command>，用於指示 <command>journalctl</command> 繼續顯示溢出的新增訊息 (大部份是在 <command>tail -f <replaceable>file</replaceable></command> 之內)。
			</para>
			 <para>
				若服務狀況不如預共，第一個步驟是以 <command>systemctl status</command> 檢查該服務是否真的已啟動；若沒有，則第一個命令給的訊息就不足以診斷問題之所在，檢查 journald 產生的日誌檔。例如，假設 SSH 伺服器未啟動時：
			</para>
			 
<screen><computeroutput># </computeroutput><userinput>systemctl status ssh.service
</userinput><computeroutput>● ssh.service - OpenBSD Secure Shell server
   Loaded: loaded (/lib/systemd/system/ssh.service; enabled)
   Active: failed (Result: start-limit) since Tue 2015-03-31 17:30:36 CEST; 1s ago
  Process: 1023 ExecReload=/bin/kill -HUP $MAINPID (code=exited, status=0/SUCCESS)
  Process: 1188 ExecStart=/usr/sbin/sshd -D $SSHD_OPTS (code=exited, status=255)
 Main PID: 1188 (code=exited, status=255)

Mar 31 17:30:36 mirtuel systemd[1]: ssh.service: main process exited, code=exited, status=255/n/a
Mar 31 17:30:36 mirtuel systemd[1]: Unit ssh.service entered failed state.
Mar 31 17:30:36 mirtuel systemd[1]: ssh.service start request repeated too quickly, refusing to start.
Mar 31 17:30:36 mirtuel systemd[1]: Failed to start OpenBSD Secure Shell server.
Mar 31 17:30:36 mirtuel systemd[1]: Unit ssh.service entered failed state.
# </computeroutput><userinput>journalctl -u ssh.service
</userinput><computeroutput>-- Logs begin at Tue 2015-03-31 17:29:27 CEST, end at Tue 2015-03-31 17:30:36 CEST. --
Mar 31 17:29:27 mirtuel sshd[424]: Server listening on 0.0.0.0 port 22.
Mar 31 17:29:27 mirtuel sshd[424]: Server listening on :: port 22.
Mar 31 17:29:29 mirtuel sshd[424]: Received SIGHUP; restarting.
Mar 31 17:29:29 mirtuel sshd[424]: Server listening on 0.0.0.0 port 22.
Mar 31 17:29:29 mirtuel sshd[424]: Server listening on :: port 22.
Mar 31 17:30:10 mirtuel sshd[1147]: Accepted password for roland from 192.168.1.129 port 38742 ssh2
Mar 31 17:30:10 mirtuel sshd[1147]: pam_unix(sshd:session): session opened for user roland by (uid=0)
Mar 31 17:30:35 mirtuel sshd[1180]: /etc/ssh/sshd_config line 28: unsupported option "yess".
Mar 31 17:30:35 mirtuel systemd[1]: ssh.service: main process exited, code=exited, status=255/n/a
Mar 31 17:30:35 mirtuel systemd[1]: Unit ssh.service entered failed state.
Mar 31 17:30:35 mirtuel sshd[1182]: /etc/ssh/sshd_config line 28: unsupported option "yess".
Mar 31 17:30:35 mirtuel systemd[1]: ssh.service: main process exited, code=exited, status=255/n/a
Mar 31 17:30:35 mirtuel systemd[1]: Unit ssh.service entered failed state.
Mar 31 17:30:35 mirtuel sshd[1184]: /etc/ssh/sshd_config line 28: unsupported option "yess".
Mar 31 17:30:35 mirtuel systemd[1]: ssh.service: main process exited, code=exited, status=255/n/a
Mar 31 17:30:35 mirtuel systemd[1]: Unit ssh.service entered failed state.
Mar 31 17:30:36 mirtuel sshd[1186]: /etc/ssh/sshd_config line 28: unsupported option "yess".
Mar 31 17:30:36 mirtuel systemd[1]: ssh.service: main process exited, code=exited, status=255/n/a
Mar 31 17:30:36 mirtuel systemd[1]: Unit ssh.service entered failed state.
Mar 31 17:30:36 mirtuel sshd[1188]: /etc/ssh/sshd_config line 28: unsupported option "yess".
Mar 31 17:30:36 mirtuel systemd[1]: ssh.service: main process exited, code=exited, status=255/n/a
Mar 31 17:30:36 mirtuel systemd[1]: Unit ssh.service entered failed state.
Mar 31 17:30:36 mirtuel systemd[1]: ssh.service start request repeated too quickly, refusing to start.
Mar 31 17:30:36 mirtuel systemd[1]: Failed to start OpenBSD Secure Shell server.
Mar 31 17:30:36 mirtuel systemd[1]: Unit ssh.service entered failed state.
# </computeroutput><userinput>vi /etc/ssh/sshd_config
</userinput><computeroutput># </computeroutput><userinput>systemctl start ssh.service
</userinput><computeroutput># </computeroutput><userinput>systemctl status ssh.service
</userinput><computeroutput>● ssh.service - OpenBSD Secure Shell server
   Loaded: loaded (/lib/systemd/system/ssh.service; enabled)
   Active: active (running) since Tue 2015-03-31 17:31:09 CEST; 2s ago
  Process: 1023 ExecReload=/bin/kill -HUP $MAINPID (code=exited, status=0/SUCCESS)
 Main PID: 1222 (sshd)
   CGroup: /system.slice/ssh.service
           └─1222 /usr/sbin/sshd -D
# </computeroutput></screen>
			 <para>
				檢查服務的狀態 (失敗) 後，再檢查日誌檔；它們會指出組態的錯誤。編輯組態檔並修正錯誤後，重啟服務，確認執行中。
			</para>
			 <sidebar><title><emphasis>下一步</emphasis> 其他類型的單元檔</title>
			 <para>
				本區祗描述 systemd 最基本的功能。其他的功能祗能在此列出若干：
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						啟用插口：“插口” 單元檔案可用於描述 systemd 管理的網路或 Unix 插口；也就是由 systemd 建立的插口，可以在需要的時候再啟動實際的服務。通常重製 <command>inetd</command> 的功能。見 <citerefentry><refentrytitle>systemd.socket</refentrytitle>
						<manvolnum>5</manvolnum></citerefentry>。
					</para>
				</listitem>
				 <listitem>
					<para>
						定時器：“定時器” 單元檔案描述定時或在指定時間發生的事件；與定時器連結的服務，其對映的工作將在定時器的要求下才執行。 允許重製 <command>cron</command> 的部份功能。見 <citerefentry><refentrytitle>systemd.timer</refentrytitle>
						<manvolnum>5</manvolnum></citerefentry>。
					</para>
				</listitem>
				 <listitem>
					<para>
						網路：“網路“ 單元檔案描述網路介面，允許組態該等介面以及表述在特定介面的服務。
					</para>
				</listitem>

			</itemizedlist>
			</sidebar>
		</section>
		 <section id="sect.sysvinit">
			<title>System V 初始系統</title>
			 <para>
				System V 初始系統 (簡稱初始) 執行若干程序，根據 <filename>/etc/inittab</filename> 檔案的指令做事。第一個執行的程式 (對映於 <emphasis>sysinit</emphasis> 步驟) 是 <command>/etc/init.d/rcS</command>，一個執行在 <filename>/etc/rcS.d/</filename> 資料夾內所有程式的腳本。<indexterm><primary><filename>/etc/init.d/rcS</filename></primary></indexterm> <indexterm><primary><filename>rcS</filename></primary></indexterm> <indexterm><primary><filename>/etc/init.d/rcS.d/</filename></primary></indexterm> <indexterm><primary><filename>rcS.d</filename></primary></indexterm>
			</para>
			 <para>
				在這些裡面，可找到負責的程式：
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						組態終端機的鍵盤；
					</para>

				</listitem>
				 <listitem>
					<para>
						載入驅動程式：大部份的核心模組在偵測到硬體後由核心本身載入；其他的驅動程式在對應模組列在 <filename>/etc/modules</filename> 時，才自動載入；
					</para>

				</listitem>
				 <listitem>
					<para>
						檢查檔案系織的完整性；
					</para>

				</listitem>
				 <listitem>
					<para>
						掛載在地分區；
					</para>

				</listitem>
				 <listitem>
					<para>
						組態網路；
					</para>

				</listitem>
				 <listitem>
					<para>
						掛載網路檔案系統 (NFS)。
					</para>

				</listitem>

			</itemizedlist>
			 <sidebar> <title><emphasis>基本</emphasis> 核心模組與選項</title>
			 <indexterm>
				<primary>模組</primary>
				<secondary>核心模組</secondary>
			</indexterm>
			 <para>
				核心模組也有選項可供置入檔案在 <filename>/etc/modprobe.d/</filename> 內做為組態之用。這些選項設定於：<literal>options <replaceable>module-name</replaceable> <replaceable>option-name</replaceable>=<replaceable>option-value</replaceable></literal>。必要時，部份選項可以指定給單一用途。
			</para>
			 <para>
				這些組態檔係供 <command>modprobe</command> 使用 — 這個程式載入核心模組及其相依者 (才能直正的呼叫其他模組)。這個程式由 <emphasis role="pkg">kmod</emphasis> 套件提供。
			</para>
			 <indexterm>
				<primary><command>modprobe</command></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="pkg">kmod</emphasis></primary>
			</indexterm>
			 </sidebar> <para>
				到了這個地步，<command>init</command> 接手並啟動執行階段預設的程式 (通常是執行階段 2)。它執行 <command>/etc/init.d/rc 2</command>，一個啟動列在 <filename>/etc/rc2.d/</filename> 之內的所有服務並命名為 “S” 字母開頭。接著的兩位數，曾經做為服務啟動的順序，不過現在的預設啟動系統使用 <command>insserv</command>，根據腳本的相依性自動決定其先後順序。每個啟動腳本宣告的情況必須符合啟動或停止服務 (例如，必須在另個服務之前或之後啟動)；<command>init</command> 再依此情況啟動它們。不再考慮靜態的腳本編號 (但仍需按相依性使用 “S” 及兩個數字與實際的腳本名稱)。通常，基本的服務 (諸如以 <command>rsyslog</command> 登入，或以 <command>portmap</command> 指定埠口) 先列出來，然後才是標準服務與圖形介面 (<command>gdm3</command>)。
			</para>
			 <para>
				這種以相依性為基礎的啟動系統可以自動重新編號，避免人工作業的繁瑣，且限縮可能的人為錯誤，因為其排序係依照參數而訂。另個優點是可以同時啟動多個互相獨立的服務，藉以加速啟動程序。
			</para>
			 <indexterm>
				<primary>執行階層</primary>
			</indexterm>
			 <indexterm>
				<primary>階層，執行階層</primary>
			</indexterm>
			 <para>
				<command>init</command> 區隔多個執行階層，所以可以用 <command>telinit <replaceable>new-level</replaceable></command> 命令切換。立即，<command>init</command> 在新的執行階層再次執行 <command>/etc/init.d/rc</command>。這個腳本可執行缺失的服務並停止不再用到的服務。為了做到這個程度，它參照 <filename>/etc/rc<replaceable>X</replaceable>.d</filename> 的內容 (<replaceable>X</replaceable> 代表新的執行階層)。以 “S” (表示開始 “Start”) 開始的腳本是將啟動的服務；以 “K” (表示砍掉 “Kill”) 開始的腳本是將停止的服務。腳本不會啟動已經在前個執行階層執行的服務。
			</para>
			 <para>
				預設，Debian 的 System V init 使用四個不同的執行階層：
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						0 層，祗是暫時的，電腦進入關機程序。所以，祗包括若干 “K” 腳本。
					</para>

				</listitem>
				 <listitem>
					<para>
						1 層，也稱為單一使用者模式，對應於系統的降級模式；祗包括基本服務，並試圖維護與一般使用者非必要的運作。
					</para>

				</listitem>
				 <listitem>
					<para>
						2 層是標準運作，包括網路服務、圖形介面、使用者登入等。
					</para>

				</listitem>
				 <listitem>
					<para>
						6 層類似 0 層，除了在重開機之前先執行關機。
					</para>

				</listitem>

			</itemizedlist>
			 <para>
				其他的階層，尤其是 3 至 5 階。它們預設的組態等同於階層 2，但是管理者可以修改它們 (在對應的 <filename>/etc/rc<replaceable>X</replaceable>.d</filename> 資料夾新增或刪除腳本) 以適應特定的需求。
			</para>
			 <figure id="figure.boot-process-sysvinit">
				<title>以 System V init 執行 Linux 的啟動程序</title>
				 <mediaobject>
					<imageobject>
						<imagedata fileref="images/startup-sysvinit.png" format="PNG" scalefit="1" width="80%" />
					</imageobject>

				</mediaobject>

			</figure>
			 <indexterm>
				<primary>啟始腳本</primary>
			</indexterm>
			 <para>
				在 <filename>/etc/rc<replaceable>X</replaceable>.d</filename> 資料夾內的腳本祗是符號連結 — 安裝套件時由 <command>update-rc.d</command> 程式產生 — 指向儲存在 <filename>/etc/init.d/</filename> l裡的實際腳本。管理者可以使用調整後的參數重新執行 <command>update-rc.d</command> 以微調運行層級的服務。The <citerefentry><refentrytitle>update-rc.d</refentrytitle>
				<manvolnum>1</manvolnum></citerefentry> 手冊詳細地描述其語法。請注意移除所有的符號連結 (使用 <literal>remove</literal> 參數) 不是停用該服務的好方法。應該是，在特定的執行層級組態其為不啟動 (在前個執行層級已有的服務應保留對應的呼叫停止它)。因為 <command>update-rc.d</command> 介面有點麻煩，建議使用較為友善的 <command>rcconf</command> (從 <emphasis role="pkg">rcconf</emphasis> 套件取用) 介面。
			</para>
			 <indexterm>
				<primary><command>update-rc.d</command></primary>
			</indexterm>
			 <sidebar> <title><emphasis>DEBIAN 政策</emphasis> 重啟服務</title>
			 <indexterm>
				<primary><command>invoke-rc.d</command></primary>
			</indexterm>
			 <indexterm>
				<primary>服務</primary>
				<secondary>重啟</secondary>
			</indexterm>
			 <indexterm>
				<primary>重啟服務</primary>
			</indexterm>
			 <para>
				Debian 套件的維護者腳本將不時重新啟動特定服務以確保其有效性或取得特定的選項。控制服務的命令 — <command>service <replaceable>service</replaceable> <replaceable>operation</replaceable></command> — 未考量執行階層，假設 (錯誤地) 該服務仍在使用中，且可能啟動錯誤的作業 (啟動應該停止的服務，或停止已經停止的服務等)。因此，Debian 有個 <command>invoke-rc.d</command> 程式：必須由維護者的腳本啟動，執行服務的初啟腳本且祗執行必要的命令。注意，不同於常見的用法，在程式名之前使用 <filename>.d</filename> 前置，且不能在資料夾內。
			</para>
			 </sidebar> <para>
				最後，<command>init</command> 啟動虛擬終端機 (<command>getty</command>) 的控制程式。顯示提示符號，等待使用者名稱，然後執行 <command>login <replaceable>user</replaceable></command> 啟始一個程序。
			</para>
			 <indexterm>
				<primary><command>getty</command></primary>
			</indexterm>
			 <sidebar> <title><emphasis>字彙</emphasis> 控制臺與終端機</title>
			 <para>
				第一組電腦通常由多個非常大的部份組成：儲存裝置與中央處理單元，以及由作業員控制的獨立週邊裝置。這些部份置於獨立的櫃中，“控制臺”。這個術語使用多年，但代表的義意已經改變。離 “終端機”，即鍵盤與螢幕，愈來愈遠。
			</para>
			 <para>
				在電腦的發展過程中，作業系統建拉多個虛擬控制臺，同時處理多個獨立的程序，即使祗有一個鍵盤與螢幕也可以。大部份的 GNU/Linux 系統提供 6 個虛擬控制臺 (文字模式)，按下組合鍵 <keycombo action="simul"> <keycap>Control</keycap> <keycap>Alt</keycap> <keycap>F1</keycap> </keycombo> 至 <keycombo action="simul"> <keycap>Control</keycap> <keycap>Alt</keycap> <keycap>F6</keycap> </keycombo> 就能在此 6 個控制臺間切換。
			</para>
			 <para>
				廣義來說，“控制臺” 與 “終端機” 也可表示圖形 X11 作業 (如 <command>xterm</command>、<command>gnome-terminal</command> 或 <command>konsole</command>) 的模擬終端機。
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.remote-login">
		<title>遠端登入</title>
		 <para>
			管理者需要遠端連結電腦。伺服器，放在固定的空間內，擁有自己的鍵盤與螢幕 — 但可以經由網路連結進來。
		</para>
		 <sidebar> <title><emphasis>回到基礎</emphasis> 客戶、伺服器</title>
		 <indexterm>
			<primary>客戶</primary>
			<secondary>主從架構</secondary>
		</indexterm>
		 <indexterm>
			<primary>伺服器</primary>
			<secondary>主從架構</secondary>
		</indexterm>
		 <para>
			多個程序彼此溝通的系統通常描述成 “客戶/伺服器” 隱喻。伺服器是接受來自客戶的請求並執行它。客戶控制作業，伺服器沒有辦法發起任何作業。
		</para>
		 </sidebar> <indexterm>
			<primary>登入</primary>
			<secondary>遠程登入</secondary>
		</indexterm>
		 <indexterm>
			<primary>遠程登入</primary>
		</indexterm>
		 <section id="sect.ssh">
			<title>安全遠程登入：SSH</title>
			 <indexterm>
				<primary>SSH</primary>
			</indexterm>
			 <indexterm>
				<primary>Secure Shell</primary>
			</indexterm>
			 <para>
				<emphasis>SSH</emphasis> (Secure SHell) 通信協定係以安全與可靠考量。以 SSH 連線是安全的：夥伴需認證且資料交換經過加密。
			</para>
			 <sidebar> <title><emphasis>文化</emphasis> Telnet 與 RSH 已過時</title>
			 <indexterm>
				<primary><command>telnet</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>rsh</command></primary>
			</indexterm>
			 <para>
				SSH 問世前，<emphasis>Telnet</emphasis> 與 <emphasis>RSH</emphasis> 是遠端登入的主要工具。目前已過時，即使 Debian 仍提供此等命令，但已沒有人使用它們。
			</para>
			 </sidebar> <sidebar> <title><emphasis>術語</emphasis> 認證、加密</title>
			 <para>
				授權客戶使用伺服器，安全是最重要的。必須先辨認客戶；即認證。通常以密碼辨認。以加密方式傳送資料，兩個系統在公共通道傳送秘密的資訊，加密之後就能保障不必第三者知悉其內容。
			</para>
			 <para>
				認認與加密經常相提併論，兩者多半合併使用，它們採用類似皂數學概念。
			</para>
			 </sidebar> <para>
				SSH 有兩個檔案傳輸服務。<command>scp</command> 是命令列工具，用起來像是 <command>cp</command>，除了對方機器的路徑加上機器的前置名稱，以及冒號。
			</para>
			 
<screen><computeroutput>$ </computeroutput><userinput>scp file machine:/tmp/</userinput></screen>
			 <para>
				<command>sftp</command> 是互動式命令，類似 <command>ftp</command>。在單一程序中，<command>sftp</command> 可以同時傳輸多個檔案，且可以操作遠端的檔案 (刪除、重新命令、改變授權等)。
			</para>
			 <indexterm>
				<primary><command>scp</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>sftp</command></primary>
			</indexterm>
			 <para>
				Debian 使用 OpenSSH，由 <command>OpenBSD</command> 計畫 (以 BSD 核心為基礎的自由作業系統，以安全性著稱) 維護的自由版本 SSH 且是芬蘭and fork of the original SSH software developed by the SSH Communications Security Corp 公司發展的 SSH 原版的分歧版本。該公司以自由軟體精神發展 SSH，但後來改變為專屬授權。OpenBSD 計畫另起爐灶發展 OpenSSH 維持 SSH 的自由軟體版本。
			</para>
			 <indexterm>
				<primary>OpenSSH</primary>
			</indexterm>
			 <sidebar> <title><emphasis>基本</emphasis> <foreignphrase>分歧</foreignphrase></title>
			 <indexterm>
				<primary>分歧</primary>
			</indexterm>
			 <para>
				“分歧”，在軟體領域裡，表示從既有計畫中複製出新的計畫，並與舊計畫競爭。所以，兩個軟體各自發展。分歧多半源自於對發展團隊觀念的不同。
			</para>
			 <para>
				對計畫的分歧是自由軟體本質的直接反應；分歧是健康的事件，可以延續原計畫的自由精神 (例如授權方式的改變)。由於技術層面或個人的不同意而有分歧，是人力資源的浪費；其他的結果則是正面的。將分歧的計畫合併則未曾聽說。
			</para>
			 </sidebar> <para>
				OpenSSH 分裂為兩個套件：客戶端是 <emphasis role="pkg">openssh-client</emphasis> 套件，伺服器端是 <emphasis role="pkg">openssh-server</emphasis> 套件。<emphasis role="pkg">ssh</emphasis> 超套件依賴這兩個部份且需安裝它們 (<command>apt install ssh</command>)。
			</para>
			 <section id="sect.ssh-key-based-auth">
				<title>金鑰認證</title>
				 <para>
					以 SSH 登入時，遠端伺服器要求密碼認證使用者。在此條件下不能自動連結，也不能經常登入 SSH。所以 SSH 提供金鑰認證系統。
				</para>
				 <para>
					使用者以 <command>ssh-keygen -t rsa</command> 命令產生與客戶端機器搭配的金鑰；公鑰儲存在 <filename>~/.ssh/id_rsa.pub</filename>，對應的私鑰則儲存在 <filename>~/.ssh/id_rsa</filename>。使用者以 <command>ssh-copy-id <replaceable>server</replaceable></command> 命令將其公鑰加入伺服器的 <filename>~/.ssh/authorized_keys</filename> 檔案內。若在產生時，以 “passphrase” 保護私鑰，後續登入伺服器則不需要密碼。否則必須每次鍵入 passphrase 解碼才能使用私鑰。幸運的是，<command>ssh-agent</command> 允許把私鑰儲存在記憶體內，所以不必重複鍵入密碼。在此情況下，以 <command>ssh-add</command> (於每個程序做一次) 命令將該程序與 <command>ssh-agent</command> 命令連結。Debian 預設在圖形介面啟用它，但可以改變 <filename>/etc/X11/Xsession.options</filename> 檔案內的選項而停用。在控制臺程序裡，可以 <command>eval $(ssh-agent)</command> 手動啟動它。
				</para>
				 <sidebar> <title><emphasis>安全</emphasis> 以私鑰保護</title>
				 <para>
					擁有私鑰的人就可以登入並組態電腦。所以私鑰必須以 “passphrase” 保護。取得私鑰檔案的人 (如，<filename>~/.ssh/id_rsa</filename>) 仍需知道此句子才能使用私鑰。不過，多一層保護並不保證固若金湯牢不可破，若認為該檔案已被破解，最好停用該安裝該私鑰 (從 <filename>authorized_keys</filename> 檔案中移除) 並重新產生新的金鑰。
				</para>
				 </sidebar> <sidebar> <title><emphasis>文化</emphasis> OpenSSL 缺陷在 Debian <emphasis role="distribution">Etch</emphasis></title>
				 <para>
					OpenSSL 程式庫，首先由 Debian <emphasis role="distribution">Etch</emphasis> 提供，在其隨機數值產生器 (random number generator, RNG) 裡有重大缺陷。所以，Debian 維護者修改它，使用 <command>valgrind</command> 之類的記憶體測試工具時，不再產生警示訊息。不幸的是，此種改變讓 RNG 套用一個熵值對應 32,000 個可能的處理編號 (PID)，不足以稱為亂數。<ulink type="block" url="http://www.debian.org/security/2008/dsa-1571" />
				</para>
				 <para>
					尤其是，OpenSSL 產生金鑰時，總是從已知的數萬個金鑰中 (32,000 乘以金鑰長度) 選取一個。進而影響 SSH 金鑰、SSL 金鑰與 X.509 認證用到應用程式，如 OpenVPN。駭客祗需測試有限的金鑰就能取得授權。為了減少此問題的影響層面， SSH 後台進程略為修改以拒絕使用列在 <emphasis role="pkg">openssh-blacklist</emphasis> 與 <emphasis role="pkg">openssh-blacklist-extra</emphasis> 套件內的有問題的金鑰。而且 <command>ssh-vulnkey</command> 命令允許辨認糸統內可能的認證漏洞。
				</para>
				 <para>
					進一步分析這個事件，發現影響多個 (小) 問題，包括 OpenSSL 計畫內與 Debian 套件維護者。像 OpenSSL 這種被廣泛使用程式庫，被 <command>valgrind</command> 測試時，應該 — 未經修改 — 不能產生警示。尤有甚者，其程式碼 (尤其是像 RNG 這麼敏感的部份) 應該有更好的說明以避免這種錯誤。從 Debian 的角度來看，維護者要向 OpenSSL 開發者認證其修改的部份，但單純的解說修改而未提供對應的補丁供檢視，以致 Debian 發生前述的錯誤。最後，維護者的選擇是次要的選項：原始碼的修改沒有清楚的文件；所有的修改都儲存在典藏所的次版本內，但是把所有的修改總結在一個補丁內納入原始套件中。
				</para>
				 <para>
					在這種情況下，很難找出正確的方法以避免再發生此類事件。從此得到的教訓，讓每個發散的 Debian 必須儘可能的大量公開，經過調整過、文件充足後，才能上傳軟體。經過此事後，發展出新的原始套件格式 (“3.0 (quilt)”) 與 Debian 原始網頁服務。<ulink type="block" url="http://sources.debian.net" />
				</para>
				 </sidebar>
			</section>
			 <section id="sect.ssh-x11">
				<title>使用遠端 X11 應用程式</title>
				 <para>
					SSH 通信協定可以使用圖形資料 (“X11” 程序，取材自 Unix 常用的圖形系統之名)；伺服器開啟專用通道給該等資料。特別的是，遠端執行圖形的問題可以顯示在本地螢幕的 X.org 伺服器，整個程序 (輸入與顯示) 是安全的。因為此功能允許遠端應用程式與在地系統互動，預設是不行的。指明 <literal>X11Forwarding yes</literal> 於伺服器的組態檔 (<filename>/etc/ssh/sshd_config</filename>) 內。最後，使用者必須加入 <literal>-X</literal> 選項於 <command>ssh</command> 命令列。
				</para>

			</section>
			 <section id="sect.ssh-port-forwarding">
				<title>新增埠映射的加密通道</title>
				 <indexterm>
					<primary>埠映射</primary>
				</indexterm>
				 <para>
					它的 <literal>-R</literal> 和 <literal>-L</literal> 選項允許 <command>ssh</command> 在兩個機器間新增 “加密通道”，把在地 TCP 埠 (見專欄 <xref linkend="sidebar.tcp-udp" />) 映射至遠端機器或反之。
				</para>
				 <sidebar> <title><emphasis>術語</emphasis> 通道</title>
				 <indexterm>
					<primary>通道 (SSH)</primary>
					<seealso>VPN</seealso>
				</indexterm>
				 <indexterm>
					<primary>SSH 通道</primary>
					<seealso>VPN</seealso>
				</indexterm>
				 <para>
					大部份地區網路 (LAN) 連結的網際網路，以封包模式運作而不是連結模式，封包經由多個中途路由器才到達其終點站。仍可以模擬連結運作讓流量包裝在正常的 IP 封包內。這些封包經由正常途徑，但是在終點站無誤地重組還原流量。我們稱此為 “通道”，就像道路的通道，車流經由入口至出口，沒有任何路口，不像平面道路涉及路口及變換方向。
				</para>
				 <para>
					在通道內加密：外界無從辨識其中的流量，祗有到了通道出口經由解密才恢復原來的樣子。
				</para>
				 </sidebar> <para>
					<command>ssh -L 8000:server:25 intermediary</command> 以 <replaceable>中介</replaceable> 主機建立 SSH 程序並聽在地埠 8000 (見 <xref linkend="figure.ssh-L" />)。建立在這個埠的任何連結，<command>ssh</command> 將從 <replaceable>中介</replaceable> 電腦建立連結至 <replaceable>伺服器</replaceable> 的埠號 25，而且把兩個連結綁在一起。
				</para>
				 <para>
					<command>ssh -R 8000:server:25 intermediary</command> 也建立一個 SSH 程序至 <replaceable>中介</replaceable> 電腦，但在該機器以 <command>ssh</command> 聆聽埠號 8000 (見 <xref linkend="figure.ssh-R" />)。建立在該埠的連結將啟動 <command>ssh</command> 開啟本地機器埠號 25 的 <replaceable>伺服器</replaceable>，而且把兩個連結綁在一起。
				</para>
				 <para>
					這兩個案例裡，都連結至 <replaceable>伺服器</replaceable> 主機的埠號 25，以 SSH 通道連結在地機器與 <replaceable>中介</replaceable> 機器。在第一個案例裡，在 “公共” 網路裡，入口是在地埠 8000，資料移向 <replaceable>中介</replaceable> 機器後再流向 <replaceable>伺服器</replaceable>。在第二個案例裡，入口與出口的通道相反；入口是 <replaceable>中介</replaceable> 機器的埠號 8000，出口是在地主機，且資料直接流向 <replaceable>伺服器</replaceable>。實務上，伺服器是在地機器或中介機器。SSH 保證兩者的安全連結。
				</para>
				 <figure id="figure.ssh-L">
					<title>以 SSH 轉送在地埠</title>
					 <mediaobject>
						<imageobject>
							<imagedata fileref="images/ssh-L.png" format="PNG" width="35%" />
						</imageobject>

					</mediaobject>

				</figure>
				 <figure id="figure.ssh-R">
					<title>以 SSH 轉送遠端埠</title>
					 <mediaobject>
						<imageobject>
							<imagedata fileref="images/ssh-R.png" format="PNG" width="35%" />
						</imageobject>

					</mediaobject>

				</figure>

			</section>

		</section>
		 <section id="sect.remote-desktops">
			<title>使用遠端圖形桌面</title>
			 <para>
				虛擬網路計算 (Virtual Network Computing, VNC) 可以近用遠端圖形桌面。
			</para>
			 <indexterm>
				<primary>VNC</primary>
			</indexterm>
			 <indexterm>
				<primary>虛擬網路算</primary>
			</indexterm>
			 <indexterm>
				<primary>圖形桌面</primary>
				<secondary>遠端</secondary>
			</indexterm>
			 <indexterm>
				<primary>遠端圖形桌面</primary>
			</indexterm>
			 <indexterm>
				<primary>桌面，遠端圖形桌面</primary>
			</indexterm>
			 <para>
				此工具常使用在技術支援；管理者可以看到使用者面對的錯誤，不必到現場就能告知正確的運作。
			</para>
			 <indexterm>
				<primary><emphasis role="pkg">vino</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="pkg">krfb</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="pkg">x11vnc</emphasis></primary>
			</indexterm>
			 <para>
				首先，使用者必須授權共享其程序。在 <emphasis role="distribution">Jessie</emphasis> 組態面版 (不同於稍早的 Debian 版本，使用者必須安裝並執行 <command>vino</command>) 的GNOME 圖形桌面環境已有此選項。KDE 桌面環境仍需使用 <command>krfb</command> 才能經由 VNC 共享既有的程序。其他皂圖形桌面環境，<command>x11vnc</command> 命令 (在同名的 Debian 套件內) 也能達到同樣的結果；以明確的圖示標明。
			</para>
			 <indexterm>
				<primary><emphasis role="pkg">vinagre</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="pkg">tsclient</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="pkg">krdc</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="pkg">xvnc4viewer</emphasis></primary>
			</indexterm>
			 <para>
				從 VNC 取得圖形程序時，管理者必須連結至 VNC 客戶端。GNOME 有 <command>vinagre</command> 和 <command>remmina</command> 命令連結，而 KDE 使用 <command>krdc</command> (在 <menuchoice> <guimenu>K</guimenu> <guisubmenu>Internet</guisubmenu> <guimenuitem>Remote Desktop Client</guimenuitem></menuchoice> 選單內)。還有使用命令列的其他 VNC 客戶端，諸如 <command>xvnc4viewer</command> 在 Debian 的同名套件內。連結後，管理者可以看到遠端的桌面、操控遠端桌面、並讓遠端使用者知道運作的方式。
			</para>
			 <sidebar> <title><emphasis>安全</emphasis> SSH 的 VNC</title>
			 <indexterm>
				<primary>SSH 通道</primary>
				<secondary>VNC</secondary>
			</indexterm>
			 <para>
				想要經由 VNC 連結，但不想在網路傳輸純文字資料，可以把資料打包在 SSH 通道內 (見 <xref linkend="sect.ssh-port-forwarding" />)。祗需知道 VNC 預設在第一個螢幕使用埠號 5900 (稱為 “localhost:0”)，埠號 5901 用在第二個埠號 (稱為 “localhost:1”)，等等。
			</para>
			 <para>
				<command>ssh -L localhost:5901:localhost:5900 -N -T <replaceable>machine</replaceable></command> 命令新增在地埠號 5901 於在地介面和埠號 5900 的 <replaceable>machine</replaceable> 主機。第一個 “localhost” 限制 SSH 聆聽僅限在地機器的介面。第二個 “localhost” 指出接收網路流量 “localhost:5901” 的遠端機器介面。因此 <command>vncviewer localhost:1</command> 將連結 VNC 客戶至遠端螢幕，即使指向在地機器的名稱。
			</para>
			 <para>
				關閉 VNC 程序後，記得再關閉對應的 SSH 程序通道。
			</para>
			 </sidebar> <sidebar> <title><emphasis>基本</emphasis> 顯示管理Display manager</title>
			 <indexterm>
				<primary><command>gdm3</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>kdm</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>xdm</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>lightdm</command></primary>
			</indexterm>
			 <indexterm>
				<primary>管理者</primary>
				<secondary>顯示管理</secondary>
			</indexterm>
			 <indexterm>
				<primary>顯示管理</primary>
			</indexterm>
			 <para>
				<command>gdm3</command>、<command>kdm</command>、<command>lightdm</command>、和 <command>xdm</command> 都是顯示管理者。他們在啟動後不久就控制圖形介面担供登入畫面。使用者登入後，再執行啟動圖形工作程序所需的程式。
			</para>
			 </sidebar> <para>
				VNC 也可供移動使用者、或公司執行者使用，這些人偶而需要從家中的電腦遠端登入辦公室的桌面電腦。這種組態稍為複雜些：首先安裝 <emphasis role="pkg">vnc4server</emphasis> 套件，改變顯示管理者的組態，以便接受 <literal>XDMCP Query</literal> 請求 (給 <command>gdm3</command>，新增 <literal>Enable=true</literal> 於 <filename>/etc/gdm3/daemon.conf</filename> 的 “xdmcp” 區塊)，然後以 <command>inetd</command> 啟動 VNC 伺服器，接著在使用者試圖登入時，自動開啟程序。例如，可以在 <filename>/etc/inetd.conf</filename> 內加入這一列：
			</para>
			 
<programlisting>5950  stream  tcp  nowait  nobody.tty  /usr/bin/Xvnc Xvnc -inetd -query localhost -once -geometry 1024x768 -depth 16 securitytypes=none</programlisting>
			 <para>
				重新定向輸入連結至顯示管理者，解決認證的問題，因為祗有在地帳號的使用者才能通過 <command>gdm3</command> 登入畫面 (或同級的 <command>kdm</command>、<command>xdm</command>等)。當此作業允許同時登入多個使用者 (伺服器夠力是前提)，就能夠提供完整的桌面給遠端使用者 (或稍為不夠力的桌面系統，則需要組態為精簡客戶)。使用祗需以 <command>vncviewer <replaceable>server</replaceable>:50</command> 登入伺服器畫面，因為用到的埠號是 5950。
			</para>
			 <indexterm>
				<primary><emphasis role="pkg">vnc4server</emphasis></primary>
			</indexterm>

		</section>

	</section>
	 <section id="sect.rights-management">
		<title>管理權限</title>
		 <para>
			Linux 是多使用者系統，必須以授權系統控制對檔案與資料夾的合法操作，包括所有的系統資源與設備 (在 Unix 系統裡，任何設備都以檔案或資料夾表示)。此原則適用於所有的 Unix 系統，不過多提醒一次總是好的，尤其碰到有趣相關的不明使用情況。
		</para>
		 <indexterm>
			<primary>權限</primary>
		</indexterm>
		 <indexterm>
			<primary>許可</primary>
		</indexterm>
		 <indexterm>
			<primary>使用者</primary>
			<secondary>擁有者</secondary>
		</indexterm>
		 <indexterm>
			<primary>群組</primary>
			<secondary>擁有者</secondary>
		</indexterm>
		 <indexterm>
			<primary>擁有者</primary>
			<secondary>使用者</secondary>
		</indexterm>
		 <indexterm>
			<primary>擁有者</primary>
			<secondary>群組</secondary>
		</indexterm>
		 <para>
			每個檔案與資料夾都有三組不同權限的使用者：
		</para>
		 <itemizedlist>
			<listitem>
				<para>
					擁有者 (符號為 <literal>u</literal> 取自使用者的英文字 “user”)；
				</para>

			</listitem>
			 <listitem>
				<para>
					群組擁有者 (符號為 <literal>g</literal> 取自群組的英文字 “group”)，代表群組內所有的使用者；
				</para>

			</listitem>
			 <listitem>
				<para>
					其他 (符號為 <literal>o</literal> 取自其他的英文字 “other”)。
				</para>

			</listitem>

		</itemizedlist>
		 <para>
			三種權利可以組合成：
		</para>
		 <itemizedlist>
			<listitem>
				<para>
					讀取 (符號為 <literal>r</literal> 取自讀取的英文字 “read”)；
				</para>

			</listitem>
			 <listitem>
				<para>
					寫入 (或修改，符號為 <literal>w</literal> 取自寫入的英文字 “write”)；
				</para>

			</listitem>
			 <listitem>
				<para>
					執行 (符號為 <literal>x</literal> 取自執行的英文字 “eXecute”)。
				</para>

			</listitem>

		</itemizedlist>
		 <indexterm>
			<primary>讀、權限</primary>
		</indexterm>
		 <indexterm>
			<primary>寫、權限</primary>
		</indexterm>
		 <indexterm>
			<primary>修、權限</primary>
		</indexterm>
		 <indexterm>
			<primary>執行、權限</primary>
		</indexterm>
		 <para>
			以檔案來說，其權利較容易理解：讀取就是允許讀取其內容 (包括複製)、寫入就是允許改變它、而執行就是跑它 (檔案本身必須是程式)。
		</para>
		 <sidebar> <title><emphasis>安全</emphasis> <literal>setuid</literal> 與 <literal>setgid</literal> 可執行</title>
		 <para>
			有兩個權利與可執行檔有關：<literal>setuid</literal> 和 <literal>setgid</literal> (符號都是字母 “s”)。我們通常都稱 “位元”，因為布林邏輯可以用 0 或 1 代表。這兩個權利允許使用者以擁有者或群組的權限分別執行該程式。此機制把近用權給予需要較高權限的階層。
		</para>
		 <indexterm>
			<primary><literal>setuid</literal>，權限</primary>
		</indexterm>
		 <indexterm>
			<primary><literal>setgid</literal>，權限</primary>
		</indexterm>
		 <para>
			因為 <literal>setuid</literal> 根程式係在超級使用者的認證下執行，必須確保它的安全與可靠。的確，使用者可能呼叫一個程式，監禁根使用者，並擁有系統的全部權限，並藉此癱瘓整個系統。
		</para>
		 </sidebar> <para>
			資料夾的處理方式略有不同。讀取其款目 (檔案及資料夾)、寫入包括新增與刪除檔案、而執行則是進入它 (尤其是使用 <command>cd</command> 命令)。進入資料夾而不必有讀取權限，執行已知的檔名，若不知其正確的名稱，則無法執行。
		</para>
		 <sidebar id="sidebar.setgid-dir"> <title><emphasis>安全</emphasis> <literal>setgid</literal> 資料夾和 <emphasis>sticky bit</emphasis></title>
		 <indexterm>
			<primary><literal>setgid</literal> 資料夾</primary>
		</indexterm>
		 <para>
			<literal>setgid</literal> 位元也適用於資料夾。在該資料夾新增的項目自動賦予上層資料夾的群組擁有者權限，而不是繼承新增者的主要群組權限。與同組其他使用者共享檔案樹時，這種設定避免使用者改變其主要群組 (以 <command>newgrp</command> 命令)。
		</para>
		 <indexterm>
			<primary>sticky bit</primary>
		</indexterm>
		 <para>
			“sticky” bit (符號為字母 “t”) 是一種祗適用於資料夾的授權。特別用在大家都能寫入的暫時性的資料夾 (如 <filename>/tmp/</filename>)：但祗限檔案的擁有者 (或上層資料夾的) 才能刪除其檔案。少了這層授權，每個人都能刪除其他人在 <filename>/tmp/</filename> 裡的檔案。
		</para>
		 </sidebar> <para>
			三個命令控制檔案的授權：
		</para>
		 <itemizedlist>
			<listitem>
				<para>
					<command>chown <replaceable>user</replaceable> <replaceable>file</replaceable></command> 改變檔案的擁有者；
				</para>

			</listitem>
			 <listitem>
				<para>
					<command>chgrp <replaceable>group</replaceable> <replaceable>file</replaceable></command> 改變群組的擁有者；
				</para>

			</listitem>
			 <listitem>
				<para>
					<command>chmod <replaceable>rights</replaceable> <replaceable>file</replaceable></command> 改變檔案的權限。
				</para>

			</listitem>

		</itemizedlist>
		 <para>
			有兩種方法表示權限。其中，符號表示最容易理解和記憶。它使用前述的符號。可以經由 (<literal>u</literal>/<literal>g</literal>/<literal>o</literal>)，經過等於 ( <literal>=</literal>)、加 (<literal>+</literal>)、或減 (<literal>-</literal>) 設定每種使用者的權限類型。因此，<literal>u=rwx,g+rw,o-r</literal> 格式賦予擁有者讀、寫與執行的權限，對群組的擁有者給予讀寫的權限，以及移除其他使用者讀取的權限。命令中未新增或減少的權限不變。字母 <literal>a</literal> 指所有的英文字 “all”，涵蓋三種類型的使用者，所以 <literal>a=rx</literal> 給予三種使用者相同的權限 (讀與執行，但沒有寫)。
		</para>
		 <indexterm>
			<primary><command>chmod</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>chown</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>chgrp</command></primary>
		</indexterm>
		 <indexterm>
			<primary>權限的八進位表示法</primary>
		</indexterm>
		 <indexterm>
			<primary>權限</primary>
			<secondary>八進位表示法</secondary>
		</indexterm>
		 <para>
			每個權限都可對應一個數值 (8 進位)：4 讀、2 寫、1 執行。這些數值可以加起來表示其權限的組合。每個值依序置於不同使用者的類型之後 (擁有者、群組、其他)。
		</para>
		 <para>
			例如，<command>chmod 754 <replaceable>file</replaceable></command> 命令將設定以下的權限：擁有者的讀、寫與執行 (因為 7 = 4 + 2 + 1) 權限；群組的讀與執行 (因為 5 = 4 + 1) 權限；其他的讀權限。<literal>0</literal> 就是沒有權限；因此 <command>chmod 600 <replaceable>file</replaceable></command> 命令讓擁有者的讀/寫權限，其他的使用者沒有任何權限。最常用的權限組合是 <literal>755</literal> 供可執行檔案與資料夾，以及 <literal>644</literal> 供資料檔案。
		</para>
		 <para>
			還可以設定特別的權限，以同權的原則在原數值之前加入第四個數值，<literal>setuid</literal>、<literal>setgid</literal> 和 <literal>sticky</literal> 的位元數分別是 4、2 和 1。<command>chmod 4754</command> 設置 <literal>setuid</literal> 前述的位元權限。
		</para>
		 <para>
			八進位標記祗適用於對檔案的一次性設定所有權限；不能以它加入新的權限，如群組擁有者的讀取，因為必須把現在的權限與計算新的數值。
		</para>
		 <sidebar> <title><emphasis>秘訣</emphasis> 遞迴運算</title>
		 <para>
			有時需要改變整個檔案樹的權限。前述的命令可加入 <literal>-R</literal> 選項，在次資料夾內做遞迴運算。
		</para>
		 <para>
			資料夾與檔案的不同，有時造成遞迴運算的問題。所以，在符號式權限裡加入 “X” 字母。它代表祗對資料夾 (不是檔案) 的執行權。因此，<command>chmod -R a+X <replaceable>directory</replaceable></command> 對至少一個範疇使用者 (即使祗有一個擁有者) 已經有執行權的所有次資料夾與檔案，祗對所有範疇使用者加入執行權 (<literal>a</literal>)。
		</para>
		 </sidebar> <sidebar> <title><emphasis>秘訣</emphasis> 改變使用者和群組</title>
		 <para>
			通常在改變擁有者的時候，也要改變檔案的群組。<command>chown</command> 命令有個特別的語法，用在這個時機：<command>chown <replaceable>user</replaceable>:<replaceable>group</replaceable> <replaceable>file</replaceable></command>
		</para>
		 </sidebar> <sidebar> <title><emphasis>下一步</emphasis> <command>umask</command></title>
		 <para>
			新增檔案時，給予指示性權限，系統使用 <command>umask</command> 指令調整該檔案的權限。在 shell 鍵入 <command>umask</command> 指令；就可見到 <computeroutput>0022</computeroutput> 之類的回應。以八進位碼表示的權限，可以系統地移除 (在本例中，給予群組與其他使用者寫入的權限)。
		</para>
		 <indexterm>
			<primary>卸載</primary>
		</indexterm>
		 <indexterm>
			<primary>權限</primary>
			<secondary>mask</secondary>
		</indexterm>
		 <indexterm>
			<primary>mask</primary>
			<secondary>權限 mask</secondary>
		</indexterm>
		 <para>
			若指定新的八進位值，<command>umask</command> 命令修改 mask。在 shell 初始檔 (如，<filename>~/.bash_profile</filename>)，它改變預設工作階段的 mask。
		</para>
		 </sidebar>
	</section>
	 <section id="sect.administration-interfaces">
		<title>管理介面</title>
		 <indexterm>
			<primary>介面</primary>
			<secondary>管理介面</secondary>
		</indexterm>
		 <indexterm>
			<primary>管理，介面</primary>
		</indexterm>
		 <para>
			在多種情況下，使用圖形的管理介面極為有趣。管理者不需要知道所有服務的組態細節，也沒有時間搜尋該等事物的文件。管理圖形介面可以加速布署新的服務。簡單設定難以組態的服務。
		</para>
		 <para>
			這種介面祗是一種輔助，不能解決問題。任何情況下，管理員必須控制它，才能夠瞭解並解決潛在的問題。
		</para>
		 <para>
			介面不會完美的，總有其他的解決方案。不過，應儘量避免使用多種解決方案，因為不同的工具彼此間不見得相容。即使宣稱極有彈性且以單一模式使用組態檔，不見得能夠整合所有的外部改變。
		</para>
		 <section id="sect.webmin">
			<title>管理網頁介面：<command>webmin</command></title>
			 <indexterm>
				<primary><emphasis>webmin</emphasis></primary>
			</indexterm>
			 <para>
				別懷疑，這就是最成功的管理介面。這是經由瀏覽器的模組化管理系統，包括多種區域與工具。而且，已經國際化包括中文在內的介面。
			</para>
			 <para>
				不幸的是，<command>webmin</command> 不是 Debian 的一部份。Debian 維護者 — Jaldhar H. Vyas — 移除他自建的套件，因為他沒有時間把該程式維護至相當水準。沒有人正式接手，所以 <emphasis role="distribution">Jessie</emphasis> 沒有 <command>webmin</command> 套件。
			</para>
			 <para>
				然而，非官方的套件可在 <literal>webmin.com</literal> 網站找到。不同於原自於 Debian 的套件，此套件有點古老；即使沒有安裝對應的服務，仍預設安裝與啟用其組態模組。
			</para>
			 <sidebar> <title><emphasis>安全</emphasis> 改變 root 密碼</title>
			 <para>
				第一次登入時，先辨識 root 的使用者名稱與密碼。建議立即以 <command>webmin</command> 變更密碼，則不會用到伺服器預設的 root 密碼，不再使用該機器預設的密碼。
			</para>
			 <para>
				小心！因為 <command>webmin</command> 功能極多，別有用的使用者近用之後，可能對整個系統產生安全的遺慮。一般而言，這種介面不建議使用於安全要求嚴格的系統 (防火牆、敏感伺服器等)。
			</para>
			 </sidebar> <para>
				經由網頁介面使用 Webmin，但不需要安裝 Apache。事實上，此軟體有自己的迷您網頁伺服器。該伺服器預設的埠號是 10000 並接受安全的 HTTP 連結。
			</para>
			 <para>
				其模組含多種服務，如：
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						所有的基本服務：新增使用者與群組、管理 <filename>crontab</filename> 檔案、初始腳本、檢視日誌檔等。
					</para>

				</listitem>
				 <listitem>
					<para>
						bind：DNS 伺服器組態 (名稱服務)；
					</para>

				</listitem>
				 <listitem>
					<para>
						postfix：SMTP 伺服器組態 (電子郵件)；
					</para>

				</listitem>
				 <listitem>
					<para>
						inetd：組態 <command>inetd</command> 超級伺服器；
					</para>

				</listitem>
				 <listitem>
					<para>
						quota：使用者額度管理；
					</para>

				</listitem>
				 <listitem>
					<para>
						dhcpd：DHCP 伺服器組態；
					</para>

				</listitem>
				 <listitem>
					<para>
						proftpd：FTP 伺服器組態；
					</para>

				</listitem>
				 <listitem>
					<para>
						samba：Samba 檔案伺服器組態；
					</para>

				</listitem>
				 <listitem>
					<para>
						軟體：安裝或移除 Debian 套件與系統更新。
					</para>

				</listitem>

			</itemizedlist>
			 <para>
				從瀏覽器的網址列鍵入 <literal>https://localhost:10000</literal> 就能進入管理介面。小心！並不能直接使用所有的模組。有時必須設定對應的組態檔與執行檔 (程式) 進入特定的位置。通常，系統會有禮貌地提示該等需求。
			</para>
			 <sidebar> <title><emphasis>其他</emphasis> GNOME 控制中心</title>
			 <indexterm>
				<primary><emphasis role="pkg">gnome-control-center</emphasis></primary>
			</indexterm>
			 <para>
				GNOME 計畫也提供經由右上角使用者選單 “設定” 的多管理介面。<command>gnome-control-center</command> 是主計畫，還有其他套件提供的組態工具 (<emphasis role="pkg">accountsservice</emphasis>、<emphasis role="pkg">system-config-printer</emphasis>等)。雖然使用簡易，不過祗包括有限的基本服務：使用者管理、時間組態、網路組態、印表機組態等。
			</para>
			 </sidebar>
		</section>
		 <section id="sect.debconf">
			<title>組態套件：<command>debconf</command></title>
			 <indexterm>
				<primary><command>debconf</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>dpkg-reconfigure</command></primary>
			</indexterm>
			 <para>
				很多套件在安裝過程裡，經由 Debconf 工具，詢問幾個問題後，就自動組態。可以執行 <command>dpkg-reconfigure <replaceable>package</replaceable></command> 命令重新組態。
			</para>
			 <para>
				大部份情況下，這些設定很簡單；祗需更改組態檔內幾個重要的變數。這些變數集中在兩個 “demarcation” 列內，所以套件的再組態祗影響封閉的區域。在其他的情況，再組態不會改變任何事，除非腳本偵測到人工修改組態檔，而保留這些人工的調整 (因為腳本不確定其組態是否干涉了現有的設定)。
			</para>
			 <sidebar> <title><emphasis>DEBIAN 政策</emphasis> 保留改變</title>
			 <para>
				Debian 政策規定需保留人工變動的組態檔案，腳本編輯組態檔時更為小心。這個大原則很簡單：祗在知道組態檔現況的前提下才能改變它，檢查檔案的校驗碼就知道了。若是相同的，系統授權腳本修改該組態檔。否則，表示該檔案已經修改過，續問腳本想做什麼 (安裝新檔案、儲存舊檔案、或整合新舊)。Debian 使用這個預警原則多時，其他的 Linux 發行版才正要開始採用它。
			</para>
			 <para>
				此 <command>ucf</command> 程式 (來自同名的 Debian 套件) 可用於啟動該行為。
			</para>
			 <indexterm>
				<primary><command>ucf</command></primary>
			</indexterm>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.syslog">
		<title><command>syslog</command> 系統事件</title>
		 <indexterm>
			<primary><command>rsyslogd</command></primary>
		</indexterm>
		 <indexterm>
			<primary>檔案</primary>
			<secondary>日誌檔案</secondary>
		</indexterm>
		 <indexterm>
			<primary>日誌檔</primary>
			<secondary>差遣</secondary>
		</indexterm>
		 <section id="sect.syslog-principe">
			<title>原則與機制</title>
			 <para>
				此 <command>rsyslogd</command> 後台進程負責搜集來自應用程式與核心的服務訊息，然後送至日誌檔內 (通常儲存在 <filename>/var/log/</filename> 資料夾內)。遵守 <filename>/etc/rsyslog.conf</filename> 組態檔案的要求。
			</para>
			 <para>
				每個日誌檔內的訊息都與應用程式次系統有關 (文件中稱為 “設施”)：
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						<literal>auth</literal> 和 <literal>authpriv</literal>：供認證之用；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>cron</literal>：來自工作排程服務，<command>cron</command> 和 <command>atd</command>；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>daemon</literal>：未受任何特別分類影響的後台進程 (DNS、NTP 等)；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>ftp</literal>：關心 FTP 伺服器；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>kern</literal>：來自核心的訊息；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>lpr</literal>：來自列印次系統的；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>mail</literal>：來自電子郵件次系統；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>news</literal>：Usenet 次系統的訊息 (尤其是來自管理新聞群組的 NNTP — Network News Transfer Protocol — 伺服器)；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>syslog</literal>：來自 <command>syslogd</command> 伺服器本身的訊息；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>user</literal>：使用者訊息 (一般)；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>uucp</literal>：來自 UUCP 伺服器 (Unix to Unix Copy Program，用於散布電子郵件訊息的通訊協定) 的訊息；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>local0</literal> 至 <literal>local7</literal>：保留給在地使用。
					</para>

				</listitem>

			</itemizedlist>
			 <para>
				每個訊息有其自身的優先層級。以下的遞減的清單：
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						<literal>emerg</literal>：“救命！” 緊急狀態，系統可能已掛了。
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>alert</literal>：趕快，任何延誤可能造成危險，必須立即採取行動；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>crit</literal>：情況嚴重；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>err</literal>：錯誤；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>warn</literal>：警示 (可能的錯誤)；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>notice</literal>：情況正常，但訊息極重要；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>info</literal>：資訊性訊息；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>debug</literal>：需要除錯的訊息。
					</para>

				</listitem>

			</itemizedlist>

		</section>
		 <section id="sect.syslog-config">
			<title>組態檔案</title>
			 <para>
				<filename>/etc/rsyslog.conf</filename> 檔案的語法詳述於 <citerefentry><refentrytitle>rsyslog.conf</refentrytitle>
				<manvolnum>5</manvolnum></citerefentry> 手冊內，還有 HTML 文件於 <emphasis role="pkg">rsyslog-doc</emphasis> package (<filename>/usr/share/doc/rsyslog-doc/html/index.html</filename>) 內。總體原則是撰寫 “選擇器” 與 “作為” 的配對。選擇器設定所有相關的訊息，作為描述對應的工作。
			</para>
			 <section id="sect.syslog-selector-syntax">
				<title>選擇器的語法</title>
				 <para>
					選擇器是分號區隔 <literal><replaceable>次系統</replaceable>.<replaceable>優先層級</replaceable></literal> 配對 (如：<literal>auth.notice;mail.info</literal>) 清單。星號代表所有次系統或優先層級 (如：<literal>*.alert</literal> 或 <literal>mail.*</literal>)。可以用逗點群聚多個次系統，(如：<literal>auth,mail.info</literal>)。優先層級也包括等於或高於的優先訊息；因此 <literal>auth.alert</literal> 表示 <literal>auth</literal> 次系統的 <literal>alert</literal> 或 <literal>emerg</literal> 優先層級。前置驚嘆號 (!) 表示相反的意思，換句話說，就是限於較低的優先層級；<literal>auth.!notice</literal> 表示來自 <literal>auth</literal> 次系統的 <literal>info</literal> 或 <literal>debug</literal> 優先層級。前置等號 (=) 表示祗限該優先層級 (<literal>auth.=notice</literal> 祗限於來自 <literal>auth</literal> 訊息的 <literal>notice</literal> 優先層級)。
				</para>
				 <para>
					選擇器清單內的元素，後者權限均高於前者。據以限制或排除特定的元素。例如，<literal>kern.info;kern.!err</literal> 表示來自核心的訊息，其優先權介於 <literal>info</literal> 和 <literal>warn</literal> 之間。<literal>none</literal> 優先權表示空白的集合 (無優先權)，且可做為從訊息集中排除指定的次系統。因此，<literal>*.crit;kern.none</literal> 表示所有來自核心以外的訊息，其優先權均等同於高於 <literal>crit</literal>。
				</para>

			</section>
			 <section id="sect.syslog-action-syntax">
				<title>行動語法</title>
				 <sidebar> <title><emphasis>基礎</emphasis> 已命名的管線，持續管線</title>
				 <indexterm>
					<primary>已命名管線</primary>
				</indexterm>
				 <indexterm>
					<primary>管線，已命名管線</primary>
				</indexterm>
				 <para>
					已命名管線是特定類型的檔案，就像是傳統的管線 (在命名列以 “|” 符號表示資料在管線中流動)，祗是經由檔案流動。此機制的優點是能夠關連兩個無關的程序。寫入已命名管線的資料，在另個程序讀取其內容前，禁止其他程序寫入。先讀取已寫入的資料，以執行它。
				</para>
				 <para>
					以 <command>mkfifo</command> 命令新增該等檔案。
				</para>
				 </sidebar> <para>
					可能的行動為：
				</para>
				 <itemizedlist>
					<listitem>
						<para>
							新增訊息至檔案 (如：<filename>/var/log/messages</filename>)；
						</para>

					</listitem>
					 <listitem>
						<para>
							新增訊息至遠端 <command>syslog</command> 伺服器 (如：<literal>@log.falcot.com</literal>)；
						</para>

					</listitem>
					 <listitem>
						<para>
							送訊息至已命名的管端 (如：<literal>|/dev/xconsole</literal>)；
						</para>

					</listitem>
					 <listitem>
						<para>
							送訊息給一位或多位已登入的使用者 (如：<literal>root,rhertzog</literal>)；
						</para>

					</listitem>
					 <listitem>
						<para>
							送訊息給所有已登入的使用者 (如：<literal>*</literal>)；
						</para>

					</listitem>
					 <listitem>
						<para>
							在文字終端機撰寫訊息 (如：<literal>/dev/tty8</literal>)。
						</para>

					</listitem>

				</itemizedlist>
				 <sidebar> <title><emphasis>安全</emphasis> 轉送日誌檔</title>
				 <indexterm>
					<primary>日誌檔</primary>
					<secondary>轉送</secondary>
				</indexterm>
				 <para>
					把重要的日誌檔置於另個機器 (或許專供此用途的機器) 是個好主意，這種方式足以防止入侵者抺除其㾗跡 (當然，除非同時入侵日誌檔機器)。尤有甚者，發生問題時 (如核心損壞)，在另部機器還有日誌檔可用，增加檢視發生損壞的機會。
				</para>
				 <para>
					為了把日誌檔訊息置於另部機器，必須組態 <emphasis>rsyslog</emphasis>：實務上，祗需啟用 <filename>/etc/rsyslog.conf</filename> (<literal>$ModLoad imudp</literal> 與 <literal>$UDPServerRun 514</literal>) 內現有的項目就夠了。
				</para>
				 </sidebar>
			</section>

		</section>

	</section>
	 <section id="sect.inetd">
		<title>The <command>inetd</command> 超級伺服器</title>
		 <para>
			Inetd (又稱為 “Internet 超級伺服器”) 是伺服器中的伺服器。依需要啟用甚少用到的伺服器，因此不需持續地執行它。
		</para>
		 <indexterm>
			<primary><command>inetd</command></primary>
		</indexterm>
		 <indexterm>
			<primary>超級伺服器</primary>
		</indexterm>
		 <para>
			<filename>/etc/inetd.conf</filename> 檔案列出伺服器及其通用的埠號。<command>inetd</command> 命令偵測它們；若發現任何埠號已被連結，則執行對應的程式。
		</para>
		 <sidebar> <title><emphasis>DEBIAN 政策</emphasis> 在 <filename>inetd.conf</filename> 登錄伺服器</title>
		 <para>
			套件經常需要在 <filename>/etc/inetd.conf</filename> 檔案登錄新的伺服器，但 Debian 政策禁止任何套件不屬於自身的組態檔。所以有 <command>update-inetd</command> 腳本 (在同名套件內)：管理組態檔案以及其他套件，使其在超級伺服器的組態中登錄新的伺服器。
		</para>
		 </sidebar> <para>
			<filename>/etc/inetd.conf</filename> 檔案中的每列款目以 7 個欄位 (以空格區分) 描述伺服器：
		</para>
		 <itemizedlist>
			<listitem>
				<para>
					TCP 或 UDP 埠號，或服務名稱 (以 <filename>/etc/services</filename> 檔案內的資訊對應至標準埠號)。
				</para>

			</listitem>
			 <listitem>
				<para>
					接口類型：<literal>stream</literal> 供 TCP 連結之用，<literal>dgram</literal> 供 UDP 資料包連結之用。
				</para>

			</listitem>
			 <listitem>
				<para>
					通信協定：<literal>tcp</literal> 或 <literal>udp</literal>.
				</para>

			</listitem>
			 <listitem>
				<para>
					選項：兩個可能值：<literal>wait</literal> 或 <literal>nowait</literal>，告訴 <command>inetd</command> 在接受另個連結時，是否該等待或終止已啟用的程序。對 TCP 連結而言，可使用 <literal>nowait</literal>，進入多工。對回應 UDP 的程式而言，祗在伺服器可平行管理多個連結時，才使用 <literal>nowait</literal>。可在這個欄位前加上圓點，以及每分鐘可以開啟的最大連結量 (預設為 256)。
				</para>

			</listitem>
			 <listitem>
				<para>
					將執行被伺服器認證的使用者名稱。
				</para>

			</listitem>
			 <listitem>
				<para>
					執行伺服器程式的完整路徑。
				</para>

			</listitem>
			 <listitem>
				<para>
					參數：程式參數的完整清單，包括自身的名稱 (在 C 語言裡是 <literal>argv[0]</literal>)。
				</para>

			</listitem>

		</itemizedlist>
		 <para>
			以下的範例說明最常用的例子：
		</para>
		 <example id="example.inetd-conf">
			<title>取自 <filename>/etc/inetd.conf</filename></title>
			 
<programlisting>talk   dgram  udp wait    nobody.tty /usr/sbin/in.talkd in.talkd
finger stream tcp nowait  nobody     /usr/sbin/tcpd     in.fingerd
ident  stream tcp nowait  nobody     /usr/sbin/identd   identd -i</programlisting>

		</example>
		 <indexterm>
			<primary><command>tcpd</command></primary>
		</indexterm>
		 <para>
			<command>tcpd</command> 程式常用於 <filename>/etc/inetd.conf</filename> 檔案中。以近用控制規則的方式限制送來的連結數，相關文件在 <citerefentry><refentrytitle>hosts_access</refentrytitle>
			<manvolnum>5</manvolnum></citerefentry> 手冊頁面，並在 <filename>/etc/hosts.allow</filename> 與 <filename>/etc/hosts.deny</filename> 檔案中組態。授權連結後，<command>tcpd</command> 執行真實的伺服器 (在此例中是 <command>in.fingerd</command>)。值得注意的是 <command>tcpd</command> 依靠啟用的名稱 (即第一個參數，<literal>argv[0]</literal>) 辨識真實執行的程式。所以不該啟用 <literal>tcpd</literal> 內的參數清單，應先與程式包裝在一起。
		</para>
		 <sidebar> <title><emphasis>社群</emphasis> Wietse Venema</title>
		 <indexterm>
			<primary>Wietse Venema</primary>
		</indexterm>
		 <indexterm>
			<primary>Venema, Wietse</primary>
		</indexterm>
		 <para>
			Wietse Venema 在安全的專長使其成為知名的程式設計師，他是 <command>tcpd</command> 程式的著者。也是 Postfix 的主要著者，模組化的電子郵件伺服器 (SMTP, Simple Mail Transfer Protocol) 比易受攻擊的 <command>sendmail</command> 更安全更可靠。
		</para>
		 </sidebar> <sidebar> <title><emphasis>其他</emphasis> 異於 <command>inetd</command> 的命令</title>
		 <para>
			當 Debian 預設安裝 <emphasis role="pkg">openbsd-inetd</emphasis> 後，就有很多選項：可用 <emphasis role="pkg">inetutils-inetd</emphasis>、<emphasis role="pkg">micro-inetd</emphasis>、<emphasis role="pkg">rlinetd</emphasis> 和 <emphasis role="pkg">xinetd</emphasis>。
		</para>
		 <para>
			超級伺服器的最後一個化身提供很多有趣的可能。最知名的是，它的組態可分為若干檔案 (儲存在 <filename>/etc/xinetd.d/</filename> 資料夾內)，讓管理者的活動更自在。
		</para>
		 <para>
			最後但不是最不重要，甚至可以模擬 <command>inetd</command> 的行為，以 <command>systemd</command> 的插座啟用模式運作 (見 <xref linkend="sect.systemd" />)。
		</para>
		 </sidebar>
	</section>
	 <section id="sect.task-scheduling-cron-atd">
		<title>以 <command>cron</command> 和 <command>atd</command> 使用排定的工作</title>
		 <indexterm>
			<primary><command>cron</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>atd</command></primary>
		</indexterm>
		 <indexterm>
			<primary>排定的命令</primary>
		</indexterm>
		 <indexterm>
			<primary>命令排程</primary>
		</indexterm>
		 <para>
			<command>cron</command> 是後台進程，負責執行排定且重複的命令 (每天、每週等)；<command>atd</command> 則執行單一的命令，但在未來的某個特定時間點。
		</para>
		 <para>
			在 Unix 系統裡，很多工作都需定期規律地執行：
		</para>
		 <itemizedlist>
			<listitem>
				<para>
					迴轉日誌檔；
				</para>

			</listitem>
			 <listitem>
				<para>
					更新資料庫供 <command>locate</command> 程式使用；
				</para>

			</listitem>
			 <listitem>
				<para>
					備份；
				</para>

			</listitem>
			 <listitem>
				<para>
					維護腳本 (諸如清除暫存檔)。
				</para>

			</listitem>

		</itemizedlist>
		 <para>
			預設所有的使用者都可定期執行工作。每個使用者有自己的 <emphasis>crontab</emphasis> 記錄定期執行的命令。可以使用 <command>crontab -e</command> (其內容儲存在 <filename>/var/spool/cron/crontabs/<replaceable>user</replaceable></filename> 檔案內) 命令編輯它。
		</para>
		 <sidebar> <title><emphasis>安全</emphasis> 限制 <command>cron</command> 或 <command>atd</command></title>
		 <para>
			限制近用 <command>cron</command> 的方法是，新增正面檔案 (白名單) 於 <filename>/etc/cron.allow</filename> 內，祗有經過授權的使用者才能夠定期執行命令。其他的使用者則無此授權。同樣的，可以把使用者的帳號寫入禁止檔案 (黑名單) <filename>/etc/cron.deny</filename>，禁止該等搗蛋鬼來亂。<command>atd</command> 也有此等功能，列在 <filename>/etc/at.allow</filename> 和 <filename>/etc/at.deny</filename> 檔案內。
		</para>
		 </sidebar> <para>
			根使用者有自己的 <emphasis>crontab</emphasis>，不過也使用 <filename>/etc/crontab</filename> 檔案，或寫入額外的 <emphasis>crontab</emphasis> 檔案於 <filename>/etc/cron.d</filename> 資料夾內。最後兩個解決方案有其優勢，在執行命令時辦識使用者。
		</para>
		 <para>
			<emphasis>cron</emphasis> 套件包括預設定期執行的命令：
		</para>
		 <itemizedlist>
			<listitem>
				<para>
					每小時執行在 <filename>/etc/cron.hourly/</filename> 資料夾內的程式；
				</para>

			</listitem>
			 <listitem>
				<para>
					每天執行在 <filename>/etc/cron.daily/</filename> 資料夾內的程式；
				</para>

			</listitem>
			 <listitem>
				<para>
					每週執行在 <filename>/etc/cron.weekly/</filename> 資料夾內的程式；
				</para>

			</listitem>
			 <listitem>
				<para>
					每月執行在 <filename>/etc/cron.monthly/</filename> 資料夾內的程式。
				</para>

			</listitem>

		</itemizedlist>
		 <para>
			很多 Debian 套件依賴此服務：把維護腳本置於此資料夾，確保其服務的最佳運作。
		</para>
		 <section id="sect.format-crontab">
			<title><filename>crontab</filename> 檔案的格式</title>
			 <indexterm>
				<primary><filename>crontab</filename></primary>
			</indexterm>
			 <sidebar> <title><emphasis>秘訣</emphasis> <command>cron</command> 的捷徑</title>
			 <para>
				<command>cron</command> 辨認若干縮寫用以取代 <filename>crontab</filename> 款目內的前五個欄位。它們對應最經典的排程選項：
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						<literal>@yearly</literal>：每年一次 (1月1日的 00:00)；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>@monthly</literal>：每月一次 (每月第一天的 00:00)；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>@weekly</literal>：每週一次 (星期日的 00:00)；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>@daily</literal>：每天一次 (在 00:00)；
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>@hourly</literal>：每小時一次 (在每小時的開始)。
					</para>

				</listitem>

			</itemizedlist>
			 </sidebar> <sidebar> <title><emphasis>特例</emphasis> <command>cron</command> 和日光節約時間</title>
			 <para>
				在 Debian 裡，<command>cron</command> 以最大的能力管理時間 (日光節約時間、或其他在地時間的要求)。因此，需要按小時執行不曾發生的命令 (如，在 2:30 執行指令，配合法國春季時間，2:00 am 向前撥一小時成為 3:00)，在事情發生後立刻執行 (因此在 3:00 am DST)。到了秋季，該命令執行多次 (2:30 am DST 向後撥一小時， 3:00 am DST 成為 2:00 am)。
			</para>
			 <para>
				然而，還是要小心，外在環境可能突然改變，就該以 <command>cron</command> 命令的行為手動檢查其相容性；必要時，準備特別的時程供每年的這兩個麻煩夜晚。
			</para>
			 </sidebar> <para>
				<emphasis>crontab</emphasis> 每列以六個 (或七個) 欄位描述排定的命令：
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						分鐘的值 (從 0 到 59)；
					</para>

				</listitem>
				 <listitem>
					<para>
						小時值 (從 0 到 23)；
					</para>

				</listitem>
				 <listitem>
					<para>
						每月的日數值 (從 1 到 31)；
					</para>

				</listitem>
				 <listitem>
					<para>
						月的值 (從 1 到 12)；
					</para>

				</listitem>
				 <listitem>
					<para>
						每週的日數值 (從 0 到 7，1 表示星期一，星期天可以是 0 或 7；也可用星期的前三個英文字母表示，如 <literal>Sun</literal>、<literal>Mon</literal>等)；
					</para>

				</listitem>
				 <listitem>
					<para>
						必須以使用者名稱執行 (在 <filename>/etc/crontab</filename> 檔案與其位在 <filename>/etc/cron.d/</filename> 內，但不在使用者自己的 crontab 檔案內)；
					</para>

				</listitem>
				 <listitem>
					<para>
						執行的命令 (滿足前五個欄位的條件時)。
					</para>

				</listitem>

			</itemizedlist>
			 <para>
				這些內容的詳情記錄在 <citerefentry><refentrytitle>crontab</refentrytitle>
				 <manvolnum>5</manvolnum></citerefentry> 手冊內。
			</para>
			 <para>
				每個值都可以表格的清單方式顯示 (以逗點區隔)。<literal>a-b</literal> 表示在 <literal>a</literal> 和 <literal>b</literal> 之間的值。<literal>a-b/c</literal> 表示以固定增量 <literal>c</literal> 的間隔 (如：<literal>0-10/2</literal> 表示實際狀況是 <literal>0,2,4,6,8,10</literal>)。星號 <literal>*</literal> 為萬用字元，表示所有的可能值。
			</para>
			 <example id="example.crontab">
				<title><filename>crontab</filename> 檔案的範例</title>
				 
<programlisting>#Format
#min hour day mon dow  command

# Download data every night at 7:25 pm
 25  19   *   *   *    $HOME/bin/get.pl

# 8:00 am, on weekdays (Monday through Friday)
 00  08   *   *   1-5  $HOME/bin/dosomething

# Restart the IRC proxy after each reboot
@reboot /usr/bin/dircproxy</programlisting>

			</example>
			 <sidebar> <title><emphasis>秘訣</emphasis> 在根執行命令</title>
			 <para>
				啟動電腦後，固定執行一次的命令，可以使用 <literal>@reboot</literal> 巨集 (重新啟動 <command>cron</command> 而不必以 <literal>@reboot</literal> 觸動命令排程)。此巨集取代在 <emphasis>crontab</emphasis> 款目的前五個欄位。
			</para>
			 </sidebar> <sidebar> <title><emphasis>其他</emphasis> 模擬 <command>cron</command> 用 <command>systemd</command></title>
			 <para>
				部份 <command>cron</command> 的行為，可以用 <command>systemd</command> 的時間機制模擬 (見 <xref linkend="sect.systemd" />)。
			</para>
			 </sidebar>
		</section>
		 <section id="sect.at-command">
			<title>使用 <command>at</command> 命令</title>
			 <indexterm>
				<primary><command>at</command></primary>
			</indexterm>
			 <para>
				<command>at</command> 在未來的特定時間執行某個命令。以命令列參數的模式在指定的時間與日期執行，並把結果以標準方式鍵入。鍵入當前的 shell 就可以執行該命令。<command>at</command> 甚至保留當前的環境，以便重現執行該命令的情境。以慣例顯示時間：<literal>16:12</literal> 或 <literal>4:12pm</literal> 代表下午 4 點 12 分。日期可以使用歐洲或西方的格式，包括 <literal>DD.MM.YY</literal> (<literal>27.07.15</literal> 表示27日7月2015年)，<literal>YYYY-MM-DD</literal> (等同於 <literal>2015-07-27</literal>)，<literal>MM/DD/[CC]YY</literal> (就是，<literal>12/25/15</literal> 或 <literal>12/25/2015</literal> 指的是12月25日，2015)，或 <literal>MMDD[CC]YY</literal> (即 <literal>122515</literal> 或 <literal>12252015</literal> 代表12月25日，2015)。少了它，則在時間到就執行 (同一天、或若時間已過則是隔天)。也可寫成 “today” 或 “tomorrow”，就是今天或明天。
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>at 09:00 27.07.15 &lt;&lt;END</userinput>
<computeroutput>&gt; </computeroutput><userinput>echo "Don't forget to wish a Happy Birthday to Raphaël!" \</userinput>
<computeroutput>&gt; </computeroutput><userinput>  | mail lolando@debian.org</userinput>
<computeroutput>&gt; </computeroutput><userinput>END</userinput>
<computeroutput>warning: commands will be executed using /bin/sh
job 31 at Mon Jul 27 09:00:00 2015</computeroutput></screen>
			 <para>
				還有另個方法可以延後執行命令的時間點：<command>at now + <replaceable>數字</replaceable> <replaceable>間隔</replaceable></command>。<replaceable>間隔</replaceable> 可以是 <literal>分</literal>、<literal>小時</literal>、<literal>日</literal>、或 <literal>週</literal>。<replaceable>數字</replaceable> 指明執行命令前的時間。
			</para>
			 <para>
				取消 <command>cron</command> 排定的工作，祗需執行 <command>crontab -e</command> 並刪除在 <emphasis>crontab</emphasis> 檔案中對應的列。對於使用 <command>at</command> 的工作，同樣簡單：執行 <command>atrm <replaceable>工作編號</replaceable></command> 就可以了。排定時由 <command>at</command> 命令指定工作編號，可以用 <command>atq</command> 命令列出當前工作的清單，籨而找到該工作編號。
			</para>
			 <indexterm>
				<primary><command>atrm</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>atq</command></primary>
			</indexterm>

		</section>

	</section>
	 <section id="sect.asynchronous-task-scheduling-anacron">
		<title>排定非同步工作：<command>anacron</command></title>
		 <para>
			<command>anacron</command> 適用於無法全天候開機的電腦，用以取代 <command>cron</command> 後台進程。通常半夜執行由於常規的工作，若已關機就無法執行它。<command>anacron</command> 的目的就是考量這種情況，讓該做的工作仍然能執行。
		</para>
		 <indexterm>
			<primary><command>anacron</command></primary>
		</indexterm>
		 <para>
			機器啟動幾分鐘後，請注意 <command>anacron</command> 將頻頻執行此類活動，可能導致電腦反應遲緩。這也正是 <filename>/etc/anacrontab</filename> 檔案中的工作以 <command>nice</command> 命令開頭的原因，用以減少其執行優先序，進而限制對系統的影響。注意，此檔案的格式與 <filename>/etc/crontab</filename> 不完全相同；若對 <command>anacron</command> 有特殊的需求，參見 <citerefentry><refentrytitle>anacrontab</refentrytitle>
			 <manvolnum>5</manvolnum></citerefentry> 手冊頁面。
		</para>
		 <sidebar> <title><emphasis>回到基礎</emphasis> 優先序與 <command>nice</command></title>
		 <para>
			Unix 系統 (含 Linux) 是多工多人系統。事實上，可以同時由不同使用者執行多個程序：核心可以隔離並管理不同程序所需的資源。做為工作的一部份，產生優先序的概念，必要時，允許優先處理特定程序。知道某些程序可以在低度優先序執行，就可執行 <command>nice <replaceable>程式</replaceable></command>。指定的程式就分配到較少量的 CPU，對其他執行中的程序影響也較小。當然，若沒有其他程序需執行，此程式就不會被人為地停止。
		</para>
		 <para>
			<command>nice</command> 添加 “niceness” 優先序：正數層級 (1 至 19) 逐漸減少優先序，負數層級 (-1 至 -20) 則逐漸增加 — 但祗有超級用戶才能使用負數層級。除非特別指明 (見 <citerefentry><refentrytitle>nice</refentrytitle>
			 <manvolnum>1</manvolnum></citerefentry> 手冊頁面)，<command>nice</command> 把現在的執行層級增加 10。 nice 会给优先级添加“niceness”：正值优先级（从１到１９）逐渐降低优先级，而负值（从－１到－２０）增加优先级－但是仅有超级用户可以使用负值优先级。除非特别指明（参看 nice(1) 手册）， nice 将当前优先级加１０。
		</para>
		 <para>
			若發現已執行的工作應以 <command>nice</command> 啟動，修正它並不算太遲；<command>renice</command> 命令可改變執行中程序的優先序，增加或減少均可 (但減少 “niceness” 是超級使用者的權限)。
		</para>
		 </sidebar> <para>
			安裝 <emphasis role="pkg">anacron</emphasis> 套件可停用 <command>cron</command> 在 <filename>/etc/cron.hourly/</filename>、<filename>/etc/cron.daily/</filename>、<filename>/etc/cron.weekly/</filename>、與 <filename>/etc/cron.monthly/</filename> 資料夾中的腳本。可避免 <command>anacron</command> 與 <command>cron</command>重複執行這些腳本。<command>cron</command> 命令仍可處理其他計畫中的任務 (尤其是其他使用者安排的任務)。
		</para>

	</section>
	 <section id="sect.quotas">
		<title>配額</title>
		 <indexterm>
			<primary>額度</primary>
		</indexterm>
		 <para>
			配額系統可以限制對使用者與群組可用的磁碟空間。設定時，必須有核心支援它 (以 <varname>CONFIG_QUOTA</varname> 選項編譯) — 使用 Debian 核心時。配額管理軟體在 <emphasis role="pkg">quota</emphasis> Debian 套件內。
		</para>
		 <para>
			在檔案系統內啟用配額時，必須指明e <literal>usrquota</literal> 與 <literal>grpquota</literal> 選項於 <filename>/etc/fstab</filename> 中，分別供使用者與群組使用。重新啟動電腦後，就能在未使用的磁碟空間中更新配額 (必須如此，才能重新計算已使用的磁碟空間)。
		</para>
		 <para>
			<command>edquota <replaceable>user</replaceable></command> (或 <command>edquota -g <replaceable>group</replaceable></command>) 命令允許在仍有磁碟空間的前提下，改變配額。
		</para>
		 <indexterm>
			<primary><command>edquota</command></primary>
		</indexterm>
		 <sidebar> <title><emphasis>進階</emphasis> 以腳本設定配額</title>
		 <indexterm>
			<primary><command>setquota</command></primary>
		</indexterm>
		 <para>
			可以在腳本中，使用 <command>setquota</command> 程式自動改變多個配額。在 <citerefentry><refentrytitle>setquota</refentrytitle>
			 <manvolnum>8</manvolnum></citerefentry> 手冊頁面列出詳細的語法。
		</para>
		 </sidebar> <para>
			配額系統允許您設定四個限制：
		</para>
		 <itemizedlist>
			<listitem>
				<para>
					兩種限制 (稱為 “軟的” 和 “硬的”) 係指消耗的區塊數。若檔案系統的區塊大小為 1 K，即每個區塊為 1,024 位元組。不飽和的區塊浪費了磁碟空間。配額為 100 區塊，理論上可以儲存 102,400 位元組，可能被 100 個每個祗有 500 位元組的檔案填滿，實際上祗儲存了 50,000 位元組。
				</para>

			</listitem>
			 <listitem>
				<para>
					兩個限制 (軟的和硬的) 可用的節點數。每個檔案至少使用一個節點儲存其資訊 (權限、擁有者、最新近用的時間點等)。實際上限制使用者的檔案數。
				</para>

			</listitem>

		</itemizedlist>
		 <para>
			“軟的” 限制可以被暫時超越；超過 <command>warnquota</command> 命令指定的配額時，由 <command>cron</command> 命令提出警告。“硬的” 限制必須遵守：系統拒絕任何超出硬配額的操作。
		</para>
		 <sidebar> <title><emphasis>術語</emphasis> 區塊和節點</title>
		 <indexterm>
			<primary>區塊 (磁碟)</primary>
		</indexterm>
		 <indexterm>
			<primary>節點</primary>
		</indexterm>
		 <para>
			檔案系統把硬式磁碟機切割成若干區塊 — 小塊的連續區域。新增檔案系統時決定這些區塊的大小，通常是 1 至 8 K位元組之間。
		</para>
		 <para>
			區塊可以儲存真實資料的檔案，或者檔案系統的元資料。在元資料中，就會找到節點。一個節點使用硬式磁碟機裡的一個區塊 (但此區塊未納入區塊配額中，祗算是節點的配額)，包含節點對應的檔案 (名稱、擁有者、權限等) 以及指向實際使用資料區塊的指針。對於佔用多個區塊的極大檔案，已超出一個指針的索引範圍，就使用間接區塊系統；節點參考至未含資料的區塊清單，而是另個區塊清單。
		</para>
		 </sidebar> <indexterm>
			<primary><command>warnquota</command></primary>
		</indexterm>
		 <para>
			使用 <command>edquota -t</command> 命令，可以設定超過軟限制的 “寬限期”。寬限期後，軟限制將視為硬限制。使用者將減少其磁碟空間的使用量至配額之內。
		</para>
		 <sidebar> <title><emphasis>進階</emphasis> 設定新使用者的預設配額</title>
		 <para>
			為了自動設定新使用者的配額，必須組態使用者模板 (使用 <command>edquota</command> 或 <command>setquota</command> 命令) 並在 <filename>/etc/adduser.conf</filename> 檔案的 <varname>QUOTAUSER</varname> 變數中指定讓使用者名稱。該配額組態將自動應用於 <command>adduser</command> 命令新增的使用者。
		</para>
		 </sidebar>
	</section>
	 <section id="sect.backup">
		<title>備份</title>
		 <para>
			備份是管理員的主要責任之一，它是個複雜的主題，涉及難以掌握的強大工具。
		</para>
		 <indexterm>
			<primary>備份</primary>
		</indexterm>
		 <indexterm>
			<primary>復原</primary>
		</indexterm>
		 <para>
			很多程式係供備份之用，如 <command>amanda</command>、<command>bacula</command>、<command>BackupPC</command>。主從架構程式有很多選項，其組態相當困難。部份有親和力強的網頁介面減輕其負擔。但 Debian 還有十多種備份軟體可用，以 <command>apt-cache search backup</command> 命令可搜尋它們。
		</para>
		 <indexterm>
			<primary><command>amanda</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>bacula</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>BackupPC</command></primary>
		</indexterm>
		 <para>
			與其逐一介紹它們，本章將經由 Falcot 公司管理者的角度，設定備份的策略。
		</para>
		 <para>
			Falcot 公司的備份有兩個目標：無誤地復原被刪除的檔案，以及快速地復原硬碟毀損的電腦 (伺服器或桌面)。
		</para>
		 <section>
			<title>使用 <command>rsync</command> 備份</title>
			 <para>
				以磁帶備份太慢且太貴，現在採用備份在專屬伺服器的硬碟策略，以 RAID (見 <xref linkend="sect.raid-soft" />) 軟體保護資料在硬碟毀損時不致遺失。桌面電腦沒有個別備份的策略，使用者應在部份的檔案伺服器備份其資料。<command>rsync</command> 命令 (取自同名的套件) 用於逐日備份這些伺服器。
			</para>
			 <indexterm>
				<primary><command>rsync</command></primary>
			</indexterm>
			 <sidebar> <title><emphasis>回到基礎</emphasis> 硬連結，檔案的第二個名稱</title>
			 <indexterm>
				<primary>連結</primary>
				<secondary>硬連結</secondary>
			</indexterm>
			 <indexterm>
				<primary>硬連結</primary>
			</indexterm>
			 <para>
				相對於符號連結，硬連結不能自外於被連結檔案。新增的硬連結等於給檔案另個名稱。刪除硬連結等於刪除該檔案的另個名稱。祗要還有另個名稱指定給檔案，則資料仍在檔案系統內。不同於複製，硬連結並未在硬碟裡複製另個空間。
			</para>
			 <para>
				以 <command>ln <replaceable>target</replaceable> <replaceable>link</replaceable></command> 命令新增硬連結。<replaceable>link</replaceable> 檔案是 <replaceable>target</replaceable> 檔案的新名稱。硬連結祗能應用於同個檔案系統，符號連結則不受此限。
			</para>
			 </sidebar> <para>
				受限於可用的硬碟空間，無法執行完整的逐日備份。所以，<command>rsync</command> 命令優先於以硬連結複製內容，避免使用太多的硬碟空間。<command>rsync</command> 祗處理上次備份後，再被修改的檔案。以這個機制可使用較小的空間備份。因為所有的備份已經立即可得與可用 (例如，在同個網路的不同資料夾共享)，可快速地比對兩個指定日期。
			</para>
			 <indexterm>
				<primary>複本，備份複本</primary>
			</indexterm>
			 <indexterm>
				<primary>備份</primary>
				<secondary>複本</secondary>
			</indexterm>
			 <indexterm>
				<primary><emphasis role="pkg">dirvish</emphasis></primary>
			</indexterm>
			 <para>
				這種備份機制可以輕易地經由 <command>dirvish</command> 程式執行。使用備份的儲存空間 (“空” 的)，放置含時間戳記的備份檔案 (在 dirvish 文件中，這些檔案被稱為 “vaults”)。
			</para>
			 <para>
				主要的組態在 <filename>/etc/dirvish/master.conf</filename> 檔案內。設定備份儲存空間的位置，管理 “vaults” 清單，以及備份到期的預設值。其他的組態位在 <filename><replaceable>bank</replaceable>/<replaceable>vault</replaceable>/dirvish/default.conf</filename> 檔案內，包括對應檔案集的特殊組態。
			</para>
			 <example id="example.dirvish-master">
				<title><filename>/etc/dirvish/master.conf</filename> 檔案</title>
				 
<programlisting>bank:
    /backup
exclude:
    lost+found/
    core
    *~
Runall:
    root    22:00
expire-default: +15 days
expire-rule:
#   MIN HR    DOM MON       DOW  STRFTIME_FMT
    *   *     *   *         1    +3 months
    *   *     1-7 *         1    +1 year
    *   *     1-7 1,4,7,10  1</programlisting>

			</example>
			 <para>
				<literal>bank</literal> 設定儲存備份的資料夾。<literal>exclude</literal> 設定不列入備份的檔案 (或檔案類型)。<literal>Runall</literal> 是做為備份時間戳記的檔案清單，若未在指定的時間備份時，還可以其指定的時間複製檔案。可以指定在實際執行時間前 (也就是，預設在 10:04 pm，根據 <filename>/etc/cron.d/dirvish</filename>)。最後，<literal>expire-default</literal> 和 <literal>expire-rule</literal> 設定備份失效政策。以上的範例永遠在每季的第一個星期日執行備份，並在一年後的每月第一個星期日刪除它，以及在三個月後的另個星期日刪除它。其他的逐日備份則保留 15 天。執行的順序有關係，Dirvish 使用最後符合的規則，或 <literal>expire-default</literal> 若無其他的 <literal>expire-rule</literal> 符合。
			</para>
			 <sidebar> <title><emphasis>實踐</emphasis> 定期失效</title>
			 <para>
				失效規則未被 <command>dirvish-expire</command> 使用。實際上，在新增備份副本時，設定該複本失效的日期。<command>dirvish-expire</command> 細讀儲存的複本並刪除也達失效日期的檔案。
			</para>
			 </sidebar> <example id="example.dirvish-vault">
				<title><filename>/backup/root/dirvish/default.conf</filename> 檔案</title>
				 
<programlisting>client: rivendell.falcot.com
tree: /
xdev: 1
index: gzip
image-default: %Y%m%d
exclude:
    /var/cache/apt/archives/*.deb
    /var/cache/man/**
    /tmp/**
    /var/tmp/**
    *.bak</programlisting>

			</example>
			 <para>
				以上的例子指定需備份的檔案：在機器 <emphasis>rivendell.falcot.com</emphasis> (在地備份時，祗由 <command>hostname</command> 命令指定在地機器的名稱) 內的檔案，尤其是在根目錄之下的檔案 (<literal>tree: /</literal>)，除了列在 <literal>exclude</literal> 內的檔案。備份將限制在一個檔案系統的內容 (<literal>xdev: 1</literal>)。將不包括來自掛載點的檔案。將生成一個儲存檔案索引 (<literal>index: gzip</literal>)，以及根據現在日期生成的映像檔 (<literal>image-default: %Y%m%d</literal>)。
			</para>
			 <para>
				還有很多其他的選項，所有的文件都在 <citerefentry><refentrytitle>dirvish.conf</refentrytitle>
				<manvolnum>5</manvolnum></citerefentry> 手冊頁面。設定這些組態檔案後，可以用 <command>dirvish --vault <replaceable>vault</replaceable> --init</command> 初始化每個檔案設定。每日調用的 <command>dirvish-runall</command> 將在刪除失效檔案後，自動新增備份複本。
			</para>
			 <sidebar> <title><emphasis>實踐</emphasis> 以 SSH 遠端備份</title>
			 <para>
				把資料儲存在遠端機器時，需用 <command>ssh</command> 命令連結它，並啟用 <command>rsync</command> 做為伺服器。需以超級使者的權限才能自動連結。以 SSH 認證碼精確連結 (見 <xref linkend="sect.ssh-key-based-auth" />)。
			</para>
			 </sidebar>
		</section>
		 <section>
			<title>供備份恢復系統</title>
			 <para>
				桌面電腦不需要備份，以 <emphasis>Simple-CDD</emphasis> (見 <xref linkend="sect.simple-cdd" />) 燒錄的 DVD-ROM 就能簡單地重新安裝。回到原始的狀態，舊有的設定全部消失。通常連結至中央的 LDAP 資料夾，大部份桌面的設定存在 dconf (見 <xref linkend="sect.gnome-desktop" /> 的詳細資料)。
			</para>
			 <para>
				Falcot Corp 的管理者知道該公司備份政策的限制。未以防火牆保護備份伺服器，而是把它放在另個房間，以免在災難來臨時與主伺服器同歸一燼。而且，每週以 DVD-ROM 做增量備份 — 祗備份修改過的檔案。
			</para>
			 <sidebar> <title><emphasis>進階</emphasis> 備份 SQL 和 LDAP 服務</title>
			 <para>
				很多服務 (諸如 SQL 或 LDAP 資料庫) 不能以複製檔案的方式備份其系統 (unless they are properly interrupted during creation of the backups, which is frequently problematic, since they are intended to be available at all times)。因此，必須以 “匯出” 機制生成 “倒出資料” 才能安全地備份。量很大，妥善地壓縮。為了減少儲存空間，每週祗儲存完成的文字檔，以及每天的 <command>diff</command>，以 <command>diff <replaceable>file_from_yesterday</replaceable> <replaceable>file_from_today</replaceable></command> 命令建立。<command>xdelta</command> 程式從二進位倒出增量的不同資料。
			</para>
			 <indexterm>
				<primary><command>xdelta</command></primary>
			</indexterm>
			 <indexterm>
				<primary><command>diff</command></primary>
			</indexterm>
			 <indexterm>
				<primary>倒出</primary>
			</indexterm>
			 </sidebar> <sidebar> <title><emphasis>文化</emphasis> <emphasis>TAR</emphasis>，磁帶備份標準</title>
			 <indexterm>
				<primary>備份</primary>
				<secondary>在磁帶</secondary>
			</indexterm>
			 <indexterm>
				<primary>磁帶，備份</primary>
			</indexterm>
			 <indexterm>
				<primary>TAR</primary>
			</indexterm>
			 <para>
				從歷史上看，最簡單的 Unix 備份是儲存在 <emphasis>TAR</emphasis> 檔案的磁帶。<command>tar</command> 命令的意思是 “Tape ARchive”。
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.hotplug">
		<title>熱插拔：<emphasis>hotplug</emphasis></title>
		 <section>
			<title>介绍</title>
			 <para>
				<emphasis>hotplug</emphasis> 次系統核心，以動態方式載入適當的驅動程且 (在 <command>udevd</command> 的協助下)新增對應的設備檔案，處理加入與移除設備的作業。當代的硬體與虛擬化，幾乎每個物件都是熱插拔：從常見的 USB/PCMCIA/IEEE 1394 週邊到 SATA 硬碟，以及 CPU 與記憶體。
			</para>
			 <para>
				核心內的資料庫有每個設備的 ID 及其驅動程式。在啟動階段載入此資料庫，偵測各接口的週邊設備，並在運行中偵測熱插入的設備。接收到插入的設備後，送出訊息給 <command>udevd</command>，讓其新增對應的條目於 <filename>/dev/</filename> 內。
			</para>
			 <indexterm>
				<primary><emphasis>熱插拔</emphasis></primary>
			</indexterm>
			 <indexterm>
				<primary>熱插拔</primary>
			</indexterm>
			 <indexterm>
				<primary>USB</primary>
			</indexterm>
			 <indexterm>
				<primary>IEEE 1394</primary>
			</indexterm>
			 <indexterm>
				<primary>PCMCIA</primary>
			</indexterm>
			 <indexterm>
				<primary>SATA</primary>
			</indexterm>

		</section>
		 <section>
			<title>命名問題</title>
			 <para>
				熱插拔技術出現前，很容易為設備指定名稱。根據設備所在的位置命名即可。就是設備所在的接口。但每個接口都能連結設備後，這件事就有點麻煩。以數位相機與 USB 碟為例，對電腦而言，它們都是磁碟機。數位相機可能是 <filename>/dev/sdb</filename> 而 USB 碟可能是 <filename>/dev/sdc</filename> (<filename>/dev/sda</filename> 代表電腦本身的硬式磁碟)。設備名稱不固定；依其連結的順序而命名。
			</para>
			 <para>
				此外，愈來愈多的驅動程式，以動態值指定設備的主要/次要編號，不可能再把固定款目指定給固定的設備，因為重新開機後，一切都變了。
			</para>
			 <para>
				<emphasis>udev</emphasis> 用以解決此問題。
			</para>
			 <sidebar> <title><emphasis>實踐</emphasis> 網路卡管理</title>
			 <para>
				當代的電腦有多張網路卡 (兩張網路卡加一個 wifi 介面)，以及在多個接口支援 <emphasis>熱插拔</emphasis>，Linux 核心不保證給這些網路介面固定的名稱。不過，使用者卻需要在組態 <filename>/etc/network/interfaces</filename> 時，需用到固定的名稱！
			</para>
			 <para>
				很難要求每個使用者建立自己的 <emphasis>udev</emphasis> 規則處理此問題。所以讓 <emphasis>udev</emphasis> 以古怪的態度組態以面對它；第一次啟動時 (以及，出現新的網卡時)，以網路介面的名稱及 MAC 位址新增一個規則，在後續啟動時再指定同樣的名稱。此規則儲存在 <filename>/etc/udev/rules.d/70-persistent-net.rules</filename>。
			</para>
			 <para>
				此機制有個副作用值得注意。祗有一個 PCI 網卡的電腦。自然把網路介面命名為 <literal>eth0</literal>。然後，網卡壞了，換個新的；新網卡的 MAC 位址當然不同。舊網卡已有名稱，<literal>eth0</literal>，新網卡被命名為 <literal>eth1</literal>，實際上，<literal>eth0</literal> 網卡已經不會再回來了 (且網路不會運作如常，因為 <filename>/etc/network/interfaces</filename> 組態一個 <literal>eth0</literal> 介面)。在此情況下，重新開機前先刪除 <filename>/etc/udev/rules.d/70-persistent-net.rules</filename> 檔案。新的網卡就會取得 <literal>eth0</literal> 名稱。
			</para>
			 </sidebar>
		</section>
		 <section>
			<title><emphasis>udev</emphasis> 的運作</title>
			 <para>
				當 <emphasis>udev</emphasis> 被核心告知有個新的設備，它參考 <filename>/sys/</filename> 裡對應的款目，搜集該設備的資訊，尤其是那些足辨別的獨特資訊 (網卡的 MAC 位址、某些 USB 設備的序號)。
			</para>
			 <para>
				Armed with all of this information, <emphasis>udev</emphasis> then consults all of the rules contained in <filename>/etc/udev/rules.d/</filename> and <filename>/lib/udev/rules.d/</filename>. In this process it decides how to name the device, what symbolic links to create (to give it alternative names), and what commands to execute. All of these files are consulted, and the rules are all evaluated sequentially (except when a file uses “GOTO” directives). Thus, there may be several rules that correspond to a given event.
			</para>
			 <para>
				The syntax of rules files is quite simple: each row contains selection criteria and variable assignments. The former are used to select events for which there is a need to react, and the latter defines the action to take. They are all simply separated with commas, and the operator implicitly differentiates between a selection criterion (with comparison operators, such as <literal>==</literal> or <literal>!=</literal>) or an assignment directive (with operators such as <literal>=</literal>, <literal>+=</literal> or <literal>:=</literal>).
			</para>
			 <para>
				Comparison operators are used on the following variables:
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						<literal>KERNEL</literal>: the name that the kernel assigns to the device;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>ACTION</literal>: the action corresponding to the event (“add” when a device has been added, “remove” when it has been removed);
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>DEVPATH</literal>: the path of the device's <filename>/sys/</filename> entry;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>SUBSYSTEM</literal>: the kernel subsystem which generated the request (there are many, but a few examples are “usb”, “ide”, “net”, “firmware”, etc.);
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>ATTR{<replaceable>attribute</replaceable>}</literal>: file contents of the <replaceable>attribute</replaceable> file in the <filename>/sys/<replaceable>$devpath</replaceable>/</filename> directory of the device. This is where you find the MAC address and other bus specific identifiers;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>KERNELS</literal>, <literal>SUBSYSTEMS</literal> and <literal>ATTRS{<replaceable>attributes</replaceable>}</literal> are variations that will try to match the different options on one of the parent devices of the current device;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>PROGRAM</literal>: delegates the test to the indicated program (true if it returns 0, false if not). The content of the program's standard output is stored so that it can be reused by the <literal>RESULT</literal> test;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>RESULT</literal>: execute tests on the standard output stored during the last call to <literal>PROGRAM</literal>.
					</para>

				</listitem>

			</itemizedlist>
			 <para>
				The right operands can use pattern expressions to match several values at the same time. For instance, <literal>*</literal> matches any string (even an empty one); <literal>?</literal> matches any character, and <literal>[]</literal> matches the set of characters listed between the square brackets (or the opposite thereof if the first character is an exclamation point, and contiguous ranges of characters are indicated like <literal>a-z</literal>).
			</para>
			 <para>
				Regarding the assignment operators, <literal>=</literal> assigns a value (and replaces the current value); in the case of a list, it is emptied and contains only the value assigned. <literal>:=</literal> does the same, but prevents later changes to the same variable. As for <literal>+=</literal>, it adds an item to a list. The following variables can be changed:
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						<literal>NAME</literal>: the device filename to be created in <filename>/dev/</filename>. Only the first assignment counts; the others are ignored;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>SYMLINK</literal>: the list of symbolic links that will point to the same device;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>OWNER</literal>, <literal>GROUP</literal> and <literal>MODE</literal> define the user and group that owns the device, as well as the associated permission;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>RUN</literal>: the list of programs to execute in response to this event.
					</para>

				</listitem>

			</itemizedlist>
			 <para>
				The values assigned to these variables may use a number of substitutions:
			</para>
			 <itemizedlist>
				<listitem>
					<para>
						<literal>$kernel</literal> or <literal>%k</literal>: equivalent to <literal>KERNEL</literal>;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>$number</literal> or <literal>%n</literal>: the order number of the device, for example, for <literal>sda3</literal>, it would be “3”;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>$devpath</literal> or <literal>%p</literal>: equivalent to <literal>DEVPATH</literal>;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>$attr{<replaceable>attribute</replaceable>}</literal> or <literal>%s{<replaceable>attribute</replaceable>}</literal>: equivalent to <literal>ATTRS{<replaceable>attribute</replaceable>}</literal>;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>$major</literal> or <literal>%M</literal>: the kernel major number of the device;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>$minor</literal> or <literal>%m</literal>: the kernel minor number of the device;
					</para>

				</listitem>
				 <listitem>
					<para>
						<literal>$result</literal> or <literal>%c</literal>: the string output by the last program invoked by <literal>PROGRAM</literal>;
					</para>

				</listitem>
				 <listitem>
					<para>
						and, finally, <literal>%%</literal> and <literal>$$</literal> for the percent and dollar sign, respectively.
					</para>

				</listitem>

			</itemizedlist>
			 <para>
				The above lists are not complete (they include only the most important parameters), but the <citerefentry><refentrytitle>udev</refentrytitle>
				<manvolnum>7</manvolnum></citerefentry> manual page should be exhaustive.
			</para>

		</section>
		 <section>
			<title>A concrete example</title>
			 <para>
				Let us consider the case of a simple USB key and try to assign it a fixed name. First, you must find the elements that will identify it in a unique manner. For this, plug it in and run <command>udevadm info -a -n /dev/sdc</command> (replacing <replaceable>/dev/sdc</replaceable> with the actual name assigned to the key).
			</para>
			 
<screen><computeroutput># </computeroutput><userinput>udevadm info -a -n /dev/sdc</userinput>
<computeroutput>[...]
  looking at device '/devices/pci0000:00/0000:00:10.3/usb1/1-2/1-2.2/1-2.2:1.0/host9/target9:0:0/9:0:0:0/block/sdc':
    KERNEL=="sdc"
    SUBSYSTEM=="block"
    DRIVER==""
    ATTR{range}=="16"
    ATTR{ext_range}=="256"
    ATTR{removable}=="1"
    ATTR{ro}=="0"
    ATTR{size}=="126976"
    ATTR{alignment_offset}=="0"
    ATTR{capability}=="53"
    ATTR{stat}=="      51      100     1208      256        0        0        0        0        0      192      25        6"
    ATTR{inflight}=="       0        0"
[...]
  looking at parent device '/devices/pci0000:00/0000:00:10.3/usb1/1-2/1-2.2/1-2.2:1.0/host9/target9:0:0/9:0:0:0':
    KERNELS=="9:0:0:0"
    SUBSYSTEMS=="scsi"
    DRIVERS=="sd"
    ATTRS{device_blocked}=="0"
    ATTRS{type}=="0"
    ATTRS{scsi_level}=="3"
    ATTRS{vendor}=="I0MEGA  "
    ATTRS{model}=="UMni64MB*IOM2C4 "
    ATTRS{rev}=="    "
    ATTRS{state}=="running"
[...]
    ATTRS{max_sectors}=="240"
[...]
  looking at parent device '/devices/pci0000:00/0000:00:10.3/usb1/1-2/1-2.2':
    KERNELS=="9:0:0:0"
    SUBSYSTEMS=="usb"
    DRIVERS=="usb"
    ATTRS{configuration}=="iCfg"
    ATTRS{bNumInterfaces}==" 1"
    ATTRS{bConfigurationValue}=="1"
    ATTRS{bmAttributes}=="80"
    ATTRS{bMaxPower}=="100mA"
    ATTRS{urbnum}=="398"
    ATTRS{idVendor}=="4146"
    ATTRS{idProduct}=="4146"
    ATTRS{bcdDevice}=="0100"
[...]
    ATTRS{manufacturer}=="USB Disk"
    ATTRS{product}=="USB Mass Storage Device"
    ATTRS{serial}=="M004021000001"
[...]
</computeroutput></screen>
			 <para>
				To create a new rule, you can use tests on the device's variables, as well as those of one of the parent devices. The above case allows us to create two rules like these:
			</para>
			 
<programlisting>KERNEL=="sd?", SUBSYSTEM=="block", ATTRS{serial}=="M004021000001", SYMLINK+="usb_key/disk"
KERNEL=="sd?[0-9]", SUBSYSTEM=="block", ATTRS{serial}=="M004021000001", SYMLINK+="usb_key/part%n"
</programlisting>
			 <para>
				Once these rules are set in a file, named for example <filename>/etc/udev/rules.d/010_local.rules</filename>, you can simply remove and reconnect the USB key. You can then see that <filename>/dev/usb_key/disk</filename> represents the disk associated with the USB key, and <filename>/dev/usb_key/part1</filename> is its first partition.
			</para>
			 <sidebar> <title><emphasis>GOING FURTHER</emphasis> Debugging <emphasis>udev</emphasis>'s configuration</title>
			 <para>
				Like many daemons, <command>udevd</command> stores logs in <filename>/var/log/daemon.log</filename>. But it is not very verbose by default, and it is usually not enough to understand what is happening. The <command>udevadm control --log-priority=info</command> command increases the verbosity level and solves this problem. <command>udevadm control --log-priority=err</command> returns to the default verbosity level.
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.power-management">
		<title>Power Management: Advanced Configuration and Power Interface (ACPI)</title>
		 <indexterm>
			<primary>power management</primary>
		</indexterm>
		 <indexterm>
			<primary>management, power management</primary>
		</indexterm>
		 <para>
			The topic of power management is often problematic. Indeed, properly suspending the computer requires that all the computer's device drivers know how to put them to standby, and that they properly reconfigure the devices upon waking. Unfortunately, there are still a few devices unable to sleep well under Linux, because their manufacturers have not provided the required specifications.
		</para>
		 <para>
			Linux supports ACPI (Advanced Configuration and Power Interface) — the most recent standard in power management. The <emphasis role="pkg">acpid</emphasis> package provides a daemon that looks for power management related events (switching between AC and battery power on a laptop, etc.) and that can execute various commands in response.
		</para>
		 <indexterm>
			<primary>ACPI</primary>
		</indexterm>
		 <indexterm>
			<primary>Advanced Configuration and Power Interface</primary>
		</indexterm>
		 <indexterm>
			<primary><command>acpid</command></primary>
		</indexterm>
		 <sidebar> <title><emphasis>BEWARE</emphasis> Graphics card and standby</title>
		 <para>
			The graphics card driver is often the culprit when standby doesn't work properly. In that case, it is a good idea to test the latest version of the X.org graphics server.
		</para>
		 </sidebar> <para>
			After this overview of basic services common to many Unix systems, we will focus on the environment of the administered machines: the network. Many services are required for the network to work properly. They will be discussed in the next chapter.
		</para>

	</section>
</chapter>

