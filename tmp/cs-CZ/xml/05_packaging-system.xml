<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="packaging-system" lang="cs-CZ">
	<chapterinfo>
		 <keywordset>
			<keyword>Binární balíček</keyword>
			 <keyword>Zdrojový balíček</keyword>
			 <keyword>dpdg</keyword>
			 <keyword>závislosti</keyword>
			 <keyword>konflikt</keyword>

		</keywordset>

	</chapterinfo>
	 <title>Balíčkový systém: Nástroje a základní principy</title>
	 <highlights> <para>
		Jako administrátor systému Debian budete běžně pracovat s balíčky <filename>.deb</filename>, protože obsahují stálé funkční jednotky (aplikace, dokumentaci, apod.), jejichž instalaci a údržbu zjednodušují. Proto je dobrý nápad vědět, co jsou a jak je používat.
	</para>
	 </highlights> <para>
		Tato kapitola popisuje strukturu a obsah “binárních” a “zdrojových” balíčků. Ty první jmenované jsou <filename>.deb</filename> soubory, přímo použitelné příkazem <command>dpkg</command>, zatímco ty druhé obsahují zdrojový kód, stejně jako instrukce pro sestavení binárních balíčků.
	</para>
	 <section id="sect.binary-package-structure">
		<title>Struktura binárních balíčků</title>
		 <indexterm>
			<primary>balíček</primary>
			<secondary>binární balíček</secondary>
		</indexterm>
		 <indexterm>
			<primary><command>ar</command></primary>
		</indexterm>
		 <para>
			The Debian package format is designed so that its content may be extracted on any Unix system that has the classic commands <command>ar</command>, <command>tar</command>, and <command>xz</command> (sometimes <command>gzip</command> or <command>bzip2</command>). This seemingly trivial property is important for portability and disaster recovery.
		</para>
		 <para>
			Imagine, for example, that you mistakenly deleted the <command>dpkg</command> program, and that you could thus no longer install Debian packages. <command>dpkg</command> being a Debian package itself, it would seem your system would be done for... Fortunately, you know the format of a package and can therefore download the <filename>.deb</filename> file of the <emphasis role="pkg">dpkg</emphasis> package and install it manually (see sidebar <xref linkend="sidebar.dpkg-apt-ar" />). If by some misfortune one or more of the programs <command>ar</command>, <command>tar</command> or <command>gzip</command>/<command>xz</command>/<command>bzip2</command> have disappeared, you will only need to copy the missing program from another system (since each of these operates in a completely autonomous manner, without dependencies, a simple copy will suffice). If your system suffered some even more outrageous fortune, and even these don't work (maybe the deepest system libraries are missing?), you should try the static version of <command>busybox</command> (provided in the <emphasis role="pkg">busybox-static</emphasis> package), which is even more self-contained, and provides subcommands such as <command>busybox ar</command>, <command>busybox tar</command> and <command>busybox xz</command>.
		</para>
		 <sidebar id="sidebar.dpkg-apt-ar"> <title><emphasis>NÁSTROJE</emphasis> <command>dpkg</command>, <command>APT</command> a <command>ar</command></title>
		 <indexterm>
			<primary><command>dpkg</command></primary>
		</indexterm>
		 <indexterm>
			<primary><command>ar</command></primary>
		</indexterm>
		 <indexterm>
			<primary>APT</primary>
		</indexterm>
		 <para>
			<command>dpkg</command> je program, který manipuluje se soubory <filename>.deb</filename>, zejména je extrahuje, analyzuje a rozbaluje.
		</para>
		 <para>
			<command>APT</command> je skupina programů, která umožňuje provádění vysokoúrovňových modifikací na systému: instalování nebo odstraňování balíčku (za zachování závislostí), aktualizování systému, poskytování seznamů balíčků, apod.
		</para>
		 <indexterm>
			<primary><command>ar</command></primary>
		</indexterm>
		 <para>
			As for the <command>ar</command> program, it allows handling files of the same name: <command>ar t <replaceable>archive</replaceable></command> displays the list of files contained in such an archive, <command>ar x <replaceable>archive</replaceable></command> extracts the files from the archive into the current working directory, <command>ar d <replaceable>archive</replaceable> <replaceable>file</replaceable></command> deletes a file from the archive, etc. Its man page (<citerefentry><refentrytitle>ar</refentrytitle>
			<manvolnum>1</manvolnum></citerefentry>) documents all its other features. <command>ar</command> is a very rudimentary tool that a Unix administrator would only use on rare occasions, but admins routinely use <command>tar</command>, a more evolved archive and file management program. This is why it is easy to restore <command>dpkg</command> in the event of an erroneous deletion. You would only have to download the Debian package and extract the content from the <filename>data.tar.xz</filename> archive in the system's root (<filename>/</filename>):
		</para>
		 
<screen>
<computeroutput># </computeroutput><userinput>ar x dpkg_1.18.24_amd64.deb</userinput>
<computeroutput># </computeroutput><userinput>tar -C / -p -xJf data.tar.xz</userinput></screen>
		 </sidebar> <sidebar> <title><emphasis>ZPĚT K ZÁKLADŮM</emphasis> Zápis manuálové stránky</title>
		 <para>
			Pro začátečníky může být matoucí hledat odkazy na “<citerefentry><refentrytitle>ar</refentrytitle>
			<manvolnum>1</manvolnum></citerefentry>” v literatuře. Všeobecně pohodlným prostředek je nahlédnutí do manuálové stránky pojmenované <literal>ar</literal> v sekci 1.
		</para>
		 <para>
			Někdy se tento zápis také používá k odstranění nejasností, například k rozlišení mezi příkazem <command>printf</command>, který může být také označován <citerefentry><refentrytitle>printf</refentrytitle>
			<manvolnum>1</manvolnum></citerefentry> a funkcí <function>printf</function> programovacího jazyka C, který může být také zavolán jako <citerefentry><refentrytitle>printf</refentrytitle>
			<manvolnum>3</manvolnum></citerefentry>.
		</para>
		 <para>
			<xref linkend="solving-problems" /> manuálovým stránkám se detailněji věnuje (viz. <xref linkend="sect.manual-pages" />).
		</para>
		 </sidebar> <para>
			Podívejme se na obsah souboru <filename>.deb</filename>:
		</para>
		 
<screen><computeroutput>$ </computeroutput><userinput>ar t dpkg_1.18.24_amd64.deb</userinput>
<computeroutput>debian-binary
control.tar.gz
data.tar.xz
$ </computeroutput><userinput>ar x dpkg_1.18.24_amd64.deb</userinput>
<computeroutput>$ </computeroutput><userinput>ls</userinput>
<computeroutput>control.tar.gz  data.tar.xz  debian-binary  dpkg_1.18.24_amd64.deb
$ </computeroutput><userinput>tar tJf data.tar.xz | head -n 15</userinput>
<computeroutput>./
./etc/
./etc/alternatives/
./etc/alternatives/README
./etc/cron.daily/
./etc/cron.daily/dpkg
./etc/dpkg/
./etc/dpkg/dpkg.cfg
./etc/dpkg/dpkg.cfg.d/
./etc/logrotate.d/
./etc/logrotate.d/dpkg
./sbin/
./sbin/start-stop-daemon
./usr/
./usr/bin/
$ </computeroutput><userinput>tar tzf control.tar.gz</userinput>
<computeroutput>./
./conffiles
./postinst
./md5sums
./prerm
./control
./postrm
$ </computeroutput><userinput>cat debian-binary</userinput>
<computeroutput>2.0</computeroutput></screen>
		 <para>
			Jak můžete vidět, archiv <command>ar</command> balíčku Debianu se skládá ze tří souborů:
		</para>
		 <itemizedlist>
			<listitem>
				<para>
					<filename>debian-binary</filename>. This is a text file which simply indicates the version of the <filename>.deb</filename> file used (in 2017: version 2.0).
				</para>

			</listitem>
			 <listitem>
				<para>
					<filename>control.tar.gz</filename>. Tento archivovaný soubor obsahuje všechny dostupné meta-informace, jako jméno a verzi balíčku. Některé z těchto meta-informací umožňují nástrojůmpro správu balíčků určit, zda je jej možno instalovat nebo odinstalovat, například na základě seznamu balíčků již přítomných na zařízení.
				</para>

			</listitem>
			 <listitem>
				<para>
					<filename>data.tar.xz</filename>. This archive contains all of the files to be extracted from the package; this is where the executable files, documentation, etc., are all stored. Some packages may use other compression formats, in which case the file will be named differently (<filename>data.tar.bz2</filename> for bzip2, <filename>data.tar.gz</filename> for gzip).
				</para>

			</listitem>

		</itemizedlist>

	</section>
	 <section id="sect.package-meta-information">
		<title>Meta-informace balíčku</title>
		 <indexterm>
			<primary>meta-information balíčku</primary>
		</indexterm>
		 <indexterm>
			<primary>balíček</primary>
			<secondary>meta-informace</secondary>
		</indexterm>
		 <para>
			Balíček Debianu není jen archiv souborů zamýšlených k instalaci. Je to součást většího celku a popisuje své vztahy s ostatními balíčky Debianu (závislosti, konflikty, návrhy). Obsahuje také skripty, které umožňují spuštění příkazů v různých stádiích životního cyklu balíčku (instalace, odebrání, upgrade). Tato data jsou použita nástroji pro správu balíčků, ale nejsou součástí zabaleného softwaru; jsou to, čemu se v rámci balíčku říká “meta-informace” (informace o dalších informacích).
		</para>
		 <section id="sect.control">
			<title>Popis: <filename>kontrolní</filename> soubor</title>
			 <indexterm>
				<primary>meta-information balíčku</primary>
			</indexterm>
			 <indexterm>
				<primary>balíček</primary>
				<secondary>meta-informace</secondary>
			</indexterm>
			 <indexterm>
				<primary><filename>kontrola</filename></primary>
			</indexterm>
			 <para>
				Tento soubor používá podobnou strukturu jako emailové hlavičky (jak definuje RFC 2822). Kupříkladu, u <emphasis role="pkg">apt</emphasis> <filename>kontrolní</filename> soubor vypadá takto:
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>apt-cache show apt</userinput>
<computeroutput>Package: apt
Version: 1.4.8
Installed-Size: 3539
Maintainer: APT Development Team &lt;deity@lists.debian.org&gt;
Architecture: amd64
Replaces: apt-utils (&lt;&lt; 1.3~exp2~)
Depends: adduser, gpgv | gpgv2 | gpgv1, debian-archive-keyring, init-system-helpers (&gt;= 1.18~), libapt-pkg5.0 (&gt;= 1.3~rc2), libc6 (&gt;= 2.15), libgcc1 (&gt;= 1:3.0), libstdc++6 (&gt;= 5.2)
Recommends: gnupg | gnupg2 | gnupg1
Suggests: apt-doc, aptitude | synaptic | wajig, dpkg-dev (&gt;= 1.17.2), powermgmt-base, python-apt
Breaks: apt-utils (&lt;&lt; 1.3~exp2~)
Description-en: commandline package manager
 This package provides commandline tools for searching and
 managing as well as querying information about packages
 as a low-level access to all features of the libapt-pkg library.
 .
 These include:
  * apt-get for retrieval of packages and information about them
    from authenticated sources and for installation, upgrade and
    removal of packages together with their dependencies
  * apt-cache for querying available information about installed
    as well as installable packages
  * apt-cdrom to use removable media as a source for packages
  * apt-config as an interface to the configuration settings
  * apt-key as an interface to manage authentication keys
Description-md5: 9fb97a88cb7383934ef963352b53b4a7
Tag: admin::package-management, devel::lang:ruby, hardware::storage,
 hardware::storage:cd, implemented-in::c++, implemented-in::perl,
 implemented-in::ruby, interface::commandline, network::client,
 protocol::ftp, protocol::http, protocol::ipv6, role::program,
 scope::application, scope::utility, sound::player, suite::debian,
 use::downloading, use::organizing, use::searching, works-with::audio,
 works-with::software:package, works-with::text
Section: admin
Priority: important
Filename: pool/main/a/apt/apt_1.4.8_amd64.deb
Size: 1231676
MD5sum: 4963240f23156b2dda3affc9c0d416a3
SHA256: bc319a3abaf98d76e7e13ac97ab0ee7c238a48e2d4ab85524be8b10cfd23d50d</computeroutput></screen>
			 <sidebar> <title><emphasis>ZPĚT K ZÁKLADŮM</emphasis> RFC — Internetové standardy</title>
			 <indexterm>
				<primary>RFC</primary>
			</indexterm>
			 <indexterm>
				<primary>Žádost o komentáře</primary>
			</indexterm>
			 <para>
				RFC je zkratka pro “žádost o komentáře”. RFC je obecně technický dokument, který popisuje, co se stane standardem internetu. Než se standardy stanou standardizovanými a neměnnými, jsou podrobeny veřejnému přezkoumání (odtud jejich jméno).
			</para>
			 <para>
				RFC 2026 definuje proces pro standardizaci internetových protokolů. <ulink type="block" url="http://www.faqs.org/rfcs/rfc2026.html" />
			</para>
			 </sidebar> <section>
				<title>Závislosti: pole <literal>Depends</literal></title>
				 <indexterm>
					<primary>závislost</primary>
				</indexterm>
				 <indexterm>
					<primary><literal>Depends</literal>, hlavičkový soubor</primary>
				</indexterm>
				 <indexterm>
					<primary>balíček</primary>
					<secondary>závislost</secondary>
				</indexterm>
				 <para>
					Závislosti jsou definovány v poli <literal>Depends</literal> balíčkové hlacičky. Toto je seznam podmínek, které mají být splněny, aby balíček správně pracoval — tyto informace používají nástroje jako <command>apt</command> k instalaci požadovaných knihoven ve správných verzích a splnil tak závislosti balíčku k instalaci. Pro každou závislost je možné omezit rozsah verzí, které vyhovují této podmínce. Jinými slovy, je možné vyjádřit fakt, že potřebujeme balíček <emphasis role="pkg">libc6</emphasis> ve stejné nebo vyšší verzi než “2.15” (psáno “<command>libc6 (&gt;= 2.15)</command>”). Srovnávací operátory pro verze jsou tyto:
				</para>
				 <itemizedlist>
					<listitem>
						<para>
							<command>&lt;&lt;</command>: menší než;
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>&lt;=</command>: menší než nebo rovno;
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>=</command>: rovno (všimněte si, že “<literal>2.6.1</literal>” se nerovná “<literal>2.6.1-1</literal>”);
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>&gt;=</command>: větší nebo rovno;
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>&gt;&gt;</command>: větší než.
						</para>

					</listitem>

				</itemizedlist>
				 <para>
					In a list of conditions to be met, the comma serves as a separator. It must be interpreted as a logical “and”. In conditions, the vertical bar (“|”) expresses a logical “or” (it is an inclusive “or”, not an exclusive “either/or”). Carrying greater priority than “and”, it can be used as many times as necessary. Thus, the dependency “(A or B) and C” is written <command>A | B, C</command>. In contrast, the expression “A or (B and C)” should be written as “(A or B) and (A or C)”, since the <literal>Depends</literal> field does not tolerate parentheses that change the order of priorities between the logical operators “or” and “and”. It would thus be written <command>A | B, A | C</command>. <ulink type="block" url="https://www.debian.org/doc/debian-policy/#document-ch-relationships" />
				</para>
				 <indexterm>
					<primary>meta-balíček</primary>
				</indexterm>
				 <para>
					Systém závislostí je dobrý mechanismus pro zaručení chodu programu, ale má další využití v rámci “meta-balíčků”. Existují prázdné balíčky, které pouze popisují závislosti. Usnadňují instalaci konzistentí skupiny programů předvybraných údržbářem balíčku; takže <command>apt install <replaceable>meta-package</replaceable></command> automaticky nainstaluje všechny tyto programy za užití závislostí meta-balíčku. Balíčky <emphasis role="pkg">gnome</emphasis>, <emphasis role="pkg">kde-full</emphasis> a <emphasis role="pkg">linux-image-amd64</emphasis> jsou příklady meta-balíčků.
				</para>
				 <sidebar> <title><emphasis>POLITIKA DEBIANU</emphasis> <literal>Pre-Depends</literal>, náročnější <literal>Depends</literal></title>
				 <indexterm>
					<primary><literal>Pre-Depends</literal>, hlavičkové pole</primary>
				</indexterm>
				 <indexterm>
					<primary>před-závislost</primary>
				</indexterm>
				 <para>
					“Před-závislosti”, které jsou vyjmenovány v poli “<literal>Pre-Depends</literal>” balíčkové hlavičky, doplňují normální závislosti; jejich syntax je identický. Normální závislost značí, že daný balíček musí být rozbalen a nastaven před nastavením balíčku, který deklaruje tuto závislost. Před-závislost říká, že daný balíček musí být rozbalen a nastaven před spuštěním předinstalačního skriptu balíčku deklarujícího tuto před-závislost, což je před jeho instalací.
				</para>
				 <para>
					Před-závislost je velmi náročná pro <command>apt</command>, protože přidává přísné omezení na seřazení balíčků k instalaci. Z toho důvodu se od před-závislosti odrazuje, pokud nejsou nezbytně nutné. Spíše se doporučuje poradit se s ostaními vývojáři na <email>debian-devel@lists.debian.org</email> před tím, než před-závislost přidáte. Obyčejně je možné nalézt jiné řešení a problém obejít.
				</para>
				 </sidebar> <sidebar> <title><emphasis>POLITIKA DEBIANU</emphasis> pole <literal>Recommends</literal>, <literal>Suggests</literal>, a <literal>Enhances</literal></title>
				 <indexterm>
					<primary><literal>Recommends</literal>, pole hlavičky</primary>
				</indexterm>
				 <indexterm>
					<primary><literal>Suggests</literal>, pole hlavičky</primary>
				</indexterm>
				 <para>
					Pole <literal>Recommends</literal> a <literal>Suggests</literal> popisují závislosti, které nejsou nutné. Závislosti “recommended”, nejdůležitější, podstatně zdokonalují funkcionalitu, kterou balíček nabízí, ale nejsou nezbytné pro jeho operace. Závislosti “suggested”, s druhořadou důležitostí, označují, že jisté balíčky mohou doplnit a zvýšit svou příslušnou užitečnost, ale je naprosto bez problémů instalovat jeden bez druhého.
				</para>
				 <para>
					Měli by jste vždycky instalovat balíčky “recommended”, pokud přesně nevíte, proč je nepotřebujete. A naopak, není nutné instalovat balíčky “suggested”, pokud nevíte, proč je potřebujete.
				</para>
				 <indexterm>
					<primary><literal>Enhances</literal>, pole hlavičky</primary>
				</indexterm>
				 <para>
					Pole <literal>Enhances</literal> také popisuje návrh, ale v jiné souvislosti. Nalézá se to v navrhovaném balíčku a ne v balíčku, který z návrhu těží. Jeho zajímavost spočívá v tom, že je možné přidat návrh bez toho, aniž by bylo potřeba měnit daný balíček. To umožňuje, aby všechny doplňky, zásuvné moduly a další nástavby byly uvedeny v seznamu doporučení pro software. I když existuje již několik let, je toto pole stále do značné míry ignorováno programy jako <command>apt</command> nebo <command>synaptic</command>. Jeho účelem je ukázat uživateli návrh, který je na řádku <literal>Enhances</literal>, kromě tradičních návrhů, které se nalézají v poli <literal>Suggests</literal>.
				</para>
				 </sidebar>
			</section>
			 <section>
				<title>Konflikty: pole <literal>Conflicts</literal></title>
				 <indexterm>
					<primary>konflikty</primary>
				</indexterm>
				 <indexterm>
					<primary><literal>Conflicts</literal>, pole hlavičky</primary>
				</indexterm>
				 <indexterm>
					<primary>balíček</primary>
					<secondary>konflikty</secondary>
				</indexterm>
				 <para>
					Pole <literal>Conflicts</literal> poukazuje na to, pokud balíček nemůže být nainstalovaný zároveň s jiným. Nejčastějším důvodem bývá to, že oba balíčky obsahují soubor stejného jména nebo poskytují stejnou službu na stejném TCP portu nebo překáží jeden druhému v činnosti.
				</para>
				 <para>
					<command>dpkg</command> odmítne nainstalovat balíček, pokud to spustí konflikt s již nainstalovaným balíčkem, ledaže by nový balíček říkal, že “nahradí” nainstalovaný balíček, v tom případě <command>dpkg</command> zvolí nahrazení starého balíčku za nový. <command>apt</command> vždy následuje vaše instrukce: pokud zvolíte instalaci nového balíčku, automaticky nabídne odinstalování balíčku, který představuje problém.
				</para>

			</section>
			 <section>
				<title>Nekompatabilita: pole <literal>Breaks</literal></title>
				 <indexterm>
					<primary>nekompatabilita</primary>
				</indexterm>
				 <indexterm>
					<primary><literal>Breaks</literal>, hlavičkové pole</primary>
				</indexterm>
				 <indexterm>
					<primary>balíček</primary>
					<secondary>nekompatabilita</secondary>
				</indexterm>
				 <para>
					Pole <literal>Breaks</literal> má stejný účinek jako pole <literal>Conflicts</literal>, ale zvláštním způsobem. Signalizuje, že instalace balíčku “naruší” jiný balíček (nebo jeho konkrétní verzi). Obyčejně, tato nekompatabilita mezi balíčky je přechodná a vztah <literal>Breaks</literal> se konkrétně vzahuje na nekompatabilní verze.
				</para>
				 <para>
					<command>dpkg</command> odmítne nainstalovat balíček, který naruší již nainstalovaný balíček a <command>apt</command> se pokusí vyřešit problém aktualizací balíčku, který by byl porušen, na novou verzi (u které se předpokládá, že bude opravena a takto znova kompatabilní).
				</para>
				 <para>
					Podobná situace může nastat v případě aktualizace bez zpětné kompatability: to je případ, kdy nová verze již více nepracuje se starší verzí a zapříčiní selhání v jiném programu bez podniknutí zvláštních opatření. Pole <literal>Breaks</literal> zamezuje uživateli, aby se do těchto problémů dostal.
				</para>

			</section>
			 <section>
				<title>Poskytované položky: pole <literal>Provides</literal></title>
				 <indexterm>
					<primary><literal>Provides</literal>, hlavičkové pole</primary>
				</indexterm>
				 <para>
					Toto pole představuje velmi zajímavé pojetí “virtuálního balíčku”. Má mnoho funkcí, ale dvě jsou obzvláště důležité. První role spočívá v používání virtuálního balíčku k jeho vztažení se k obecným službám (balíček “poskytuje” službu). Druhá dává najevo, že balíček kompletně nahrazuje jiný a to za tím účelem, aby také uspokojoval závislosti, které by ten druhý také uspokojoval. Je tak možné vytvořit náhradní balíček bez nutnosti použití stejného balíčkového jména.
				</para>
				 <sidebar> <title><emphasis>SLOVNÍČEK</emphasis> Meta-balíček a virtuální balíček</title>
				 <indexterm>
					<primary>meta-balíček</primary>
				</indexterm>
				 <indexterm>
					<primary>balíček</primary>
					<secondary>virtuální balíček</secondary>
				</indexterm>
				 <indexterm>
					<primary>virtuální balíček</primary>
				</indexterm>
				 <para>
					Je zcela nezbytné jasně odlišit meta-balíčky od virtuálních balíčků. Ty první jsou reálnými balíčky (včetně reálných souborů <filename>.deb</filename>), jejichž jediným účelem je vyjadřovat závislosti.
				</para>
				 <para>
					Virtuální balíčky nicméně neexistují fyzicky; jsou prostředkem k identifikaci opravdových balíčků na základě společných, logických kritérií (poskytovaných služeb, kompatability se standardním programem nebo předtím-existujícím balíčkem, apod.).
				</para>
				 </sidebar> <section>
					<title>Poskytování “služby”</title>
					 <para>
						Proberme nejdříve detailněji první případ: o všech poštovních serverech, jako je <emphasis role="pkg">postfix</emphasis> nebo <emphasis role="pkg">sendmail</emphasis> se říká, že “poskytují” virtuální balíček <emphasis role="pkg">mail-transport-agent</emphasis>. Takže, jakýkoli balíček, který potřebuje tuto službu musí být funkční (např. správce seznamu adresátů, jako je <emphasis role="pkg">smartlist</emphasis> nebo <emphasis role="pkg">sympa</emphasis>) jednoduše stanovuje ve svých závislostech, že vyžaduje <emphasis role="pkg">mail-transport-agent</emphasis> namísto specifikování dlouhého a stále ještě nekompletního seznamu možných řešení (např. <command>postfix | sendmail | exim4 | …</command>). Navíc, je zbytečné instalovat dva poštovní servery na to samé zařízení, což je důvod, proč každý z balíčků vykazuje konflikt s vyrtuálním balíčkem <emphasis role="pkg">mail-transport-agent</emphasis>. Konflikt mezi balíčkem a jím je systémem ignorován, ale tato technika zakáže instalaci dvou poštovních serverů bok po boku.
					</para>
					 <sidebar> <title><emphasis>POLITIKA DEBIANU</emphasis> Seznam virtuálních balíčků</title>
					 <indexterm>
						<primary>balíček</primary>
						<secondary>virtuální balíček</secondary>
					</indexterm>
					 <para>
						Aby by byly virtuální balíčky použitelné, musí se všichni shodnout na jejich jménech. To je důvod, proč jsou standardizovány ve stanovách Debianu. Seznam mezi jinými obsahuje <emphasis role="pkg">mail-transport-agent</emphasis> pro poštovní servery, <emphasis role="pkg">c-compiler</emphasis> pro kompilátory programovacího jazyka C, <emphasis role="pkg">www-browser</emphasis> pro internetové prohlížeče, <emphasis role="pkg">httpd</emphasis> pro internetové servery, <emphasis role="pkg">ftp-server</emphasis> pro FTP servery, <emphasis role="pkg">x-terminal-emulator</emphasis> pro terminálové emulátory v grafickém módu (<command>xterm</command>), a <emphasis role="pkg">x-window-manager</emphasis> pro manažery oken.
					</para>
					 <para>
						Celý seznam můžete najít na internetové stránce <ulink type="block" url="http://www.debian.org/doc/packaging-manuals/virtual-package-names-list.txt" />
					</para>
					 </sidebar>
				</section>
				 <section>
					<title>Zaměnitelnost s jiným balíčkem</title>
					 <para>
						The <literal>Provides</literal> field is also interesting when the content of a package is included in a larger package. For example, the <emphasis role="pkg">libdigest-md5-perl</emphasis> Perl module was an optional module in Perl 5.6, and has been integrated as standard in Perl 5.8 (and later versions, such as 5.24 present in <emphasis role="distribution">Stretch</emphasis>). As such, the package <emphasis role="pkg">perl</emphasis> has since version 5.8 declared <literal>Provides: libdigest-md5-perl</literal> so that the dependencies on this package are met if the user has Perl 5.8 (or newer). The <emphasis role="pkg">libdigest-md5-perl</emphasis> package itself has eventually been deleted, since it no longer had any purpose when old Perl versions were removed.
					</para>
					 <figure>
						<title>Použití pole <literal>Provides</literal>, aby se neporušily závislosti</title>
						 <mediaobject>
							<imageobject>
								<imagedata fileref="images/virtual-package.png" format="PNG" width="50%" />
							</imageobject>

						</mediaobject>

					</figure>
					 <para>
						Tato funkce je velice užitečná, protože se nikdy nedají předpovídat vrtochy vývoje a je nezbytné mít možnost přizpůsobit se přejmenovávání a jinému automatickému nahrazování starého softwaru.
					</para>
					 <sidebar> <title><emphasis>ZPĚT K ZÁKLADŮM</emphasis> Perl, programovací jazyk</title>
					 <indexterm>
						<primary>Perl</primary>
					</indexterm>
					 <indexterm>
						<primary>CPAN</primary>
					</indexterm>
					 <para>
						Perl (praktický extrakční a reportovací jazyk) je velmi populární programovací jazyk. Má mnoho modulů připravených k použití, které mají široké spektrum uplatnění a jsou distribuovány servery CPAN (všeobecné archivační sítě Perlu), vyčerpávající sítě balíčků Perlu. <ulink type="block" url="http://www.perl.org/" /> <ulink type="block" url="http://www.cpan.org/" />
					</para>
					 <para>
						Protože to je interpretovaný jazyk, program psaný v Perlu nevyžaduje kompilaci před spuštěním. To je důvod, proč se jim říká “Perlové skripty”.
					</para>
					 </sidebar>
				</section>
				 <section>
					<title>Minulá omezení</title>
					 <para>
						Virtuální balíčky trpěly některými omezeními, z nichž nejvýznamnějším byla absence čísla verze. Vraťme se k předcházejícímu příkladu, závislost jako je <literal>Depends: libdigest-md5-perl (&gt;= 1.6)</literal>, navzdory přítomnosti Perl 5.10, nebude nikdy považována za splněnou balíčkovým systémem — i když je de facto pravděpodobně splněná. Neuvědomujíc si toto, balíčkový systém si vybere nejméně riskantní možnost, předpokládajíc, že verze neodpovídají.
					</para>
					 <para>
						This limitation has been lifted in <emphasis role="pkg">dpkg</emphasis> 1.17.11, and is no longer relevant in Stretch. Packages can assign a version to the virtual packages they provide with a dependency such as <literal>Provides: libdigest-md5-perl (= 1.8)</literal>.
					</para>

				</section>

			</section>
			 <section>
				<title>Nahrazení souborů: pole <literal>Replaces</literal></title>
				 <indexterm>
					<primary>nahrazení</primary>
				</indexterm>
				 <indexterm>
					<primary><literal>Replaces</literal>, pole hlavičky</primary>
				</indexterm>
				 <indexterm>
					<primary>balíček</primary>
					<secondary>nahrazení</secondary>
				</indexterm>
				 <para>
					Pole <literal>Replaces</literal> značí, že balíček obsahuje soubory, které jsou také přítomny v jiném balíčku, ale balíček je legitimně oprávněn je nahradit. Bez tohoto přesného vymezení <command>dpkg</command> selže, prohlašujíc, že nemůže přepsat soubory jiného balíčku (technicky vzato, je možné ho přinutit k této činnosti pomocí možnosti <literal>--force-overwrite</literal>, to ale není považováno za standardní operaci). To umožňuje identifikaci možných problémů a vyžaduje, aby správce záležitost prostudoval před tím, než zvolí, zda toto pole přidat.
				</para>
				 <para>
					Použití tohoto pole je opodstatněné v případě změny jména balíčku nebo když je balíček obsažen v jiném balíčku. To se mimo jiné děje tehdy, když se správce rozhodne distribuovat soubory různě mezi různými binárními balíčky, které jsou vyrobeny ze stejného binárního balíčku: nahrazený soubor již nepatří starému balíčku, ale tomu novému.
				</para>
				 <para>
					Pokud byly nahrazeny všechny soubory v instalovaném balíčku, balíček je považován za odstraněný. A konečně, toto pole také vede <command>dpkg</command> k odstranění nahrazeného balíčku v případě, že dojde ke konfliktu.
				</para>
				 <sidebar id="sidebar.debtags"> <title><emphasis>JDEME DÁLE</emphasis> Pole <literal>Tag</literal></title>
				 <para>
					In the <emphasis role="pkg">apt</emphasis> example above, we can see the presence of a field that we have not yet described, the <literal>Tag</literal> field. This field does not describe a relationship between packages, but is simply a way of categorizing a package in a thematic taxonomy. This classification of packages according to several criteria (type of interface, programming language, domain of application, etc.) has been available for a long time. Despite this, not all packages have accurate tags and it is not yet integrated in all Debian tools; <command>aptitude</command> displays these tags, and allows them to be used as search criteria. For those who are repelled by <command>aptitude</command>'s search criteria, the following website allows navigation of the tag database: <ulink type="block" url="https://wiki.debian.org/Debtags" />
				</para>
				 </sidebar>
			</section>

		</section>
		 <section id="sect.configuration-scripts">
			<title>Nastavovací skripty</title>
			 <indexterm>
				<primary><filename>postinst</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>preinst</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>postrm</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>prerm</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>control.tar.gz</filename></primary>
			</indexterm>
			 <para>
				Mimo souboru <filename>control</filename>, archiv <filename>control.tar.gz</filename> u každého balíčku Debianu může obsahovat několik skriptů, které jsou volány <command>dpkg</command> v různých fázích zpracovávání balíčku. Stanovy Debianu detailně popisují možné případy a upřesňují volané skripty a argumenty, které tyto skripty přijímají. Jejich posloupnosti mohou být komplikované, protože, pokud jeden selže, <command>dpkg</command> se pokusí vrátit do uspokojivého stavu a zruší instalaci nebo odstraňování za chodu (pokud je to možné).
			</para>
			 <sidebar> <title><emphasis>JDEME DÁLE</emphasis> databáze <command>dpkg</command></title>
			 <indexterm>
				<primary><filename>/var/lib/dpkg/</filename></primary>
			</indexterm>
			 <indexterm>
				<primary>dpkg</primary>
				<secondary>database</secondary>
			</indexterm>
			 <para>
				Veškeré nastavovací skripty pro nainstalované balíčky jsou uloženy v adresáři <filename>/var/lib/dpkg/info/</filename> ve formě souboru s předponou jména balíčku. Tento adresář také obsahuje pro každý balíček soubor s příponou <filename>.list</filename>, který obsahuje seznam souborů, které náleží tomuto balíčku.
			</para>
			 <para>
				Soubor <filename>/var/lib/dpkg/status</filename> obsahuje sérii bloků dat (ve formátu známé poštovní hlavičky RFC 2822) popisující stav každého z balíčků. Jsou tu také zopakovány informace ze souboru <filename>control</filename> o nainstalovaných balíčcích.
			</para>
			 </sidebar> <para>
				Obecně, skript <filename>preinst</filename> je spuštěn před instalací balíčku, zatímco <filename>postinst</filename> ji následuje. Obdobně, <filename>prerm</filename> je vyvolán před odstraněním balíčku a <filename>postrm</filename> potom. Aktualizace balíčku je stejná jako odstranění předcházející verze a instalace verze nové. Není zde možné popsat detailně veškeré možné scénáře, ale budeme se věnovat dvěma nejběžnějším: instalaci/aktualizaci a odstranění.
			</para>
			 <sidebar> <title><emphasis>UPOZORNĚNÍ</emphasis> Symbolická jména skriptů</title>
			 <para>
				Posloupnosti popsané v této sekci volají nastavovací skripty symbolickými jmény, jako je <command>old-prerm</command> nebo <command>new-postinst</command>. Jsou to v podstatě skript <command>prerm</command> obsažený ve staré verzi balíčku (instalovaném před aktualizací) a skript <command>postinst</command> obsažený v nové verzi (instalované aktualizací).
			</para>
			 </sidebar> <sidebar> <title><emphasis>TIP</emphasis> Stavové diagramy</title>
			 <para>
				Manoj Srivastava made these diagrams explaining how the configuration scripts are called by <command>dpkg</command>. Similar diagrams have also been developed by the Debian Women project; they are a bit simpler to understand, but less complete. <ulink type="block" url="https://people.debian.org/~srivasta/MaintainerScripts.html" /> <ulink type="block" url="https://www.debian.org/doc/debian-policy/#maintainer-script-flowcharts" />
			</para>
			 </sidebar> <section>
				<title>Instalace a vylepšení verze</title>
				 <indexterm>
					<primary><command>dpkg</command></primary>
					<secondary>vnitřní proces</secondary>
				</indexterm>
				 <para>
					Zde je to, co se děje během instalace (nebo během aktualizace):
				</para>
				 <orderedlist>
					<listitem>
						<para>
							Z důvodu aktualizace, <command>dpkg</command> zavolá <command>old-prerm upgrade <replaceable>new-version</replaceable></command>.
						</para>

					</listitem>
					 <listitem>
						<para>
							Stále pro aktualizaci, <command>dpkg</command> poté spustí <command>new-preinst upgrade <replaceable>old-version</replaceable></command>; za účelem instalace spustí <command>new-preinst install</command>. Může přidat starou verzi do posledního parametru, pokud byl balíček již nainstalován a odstraněn (ale ne vyčištěn, nastavovací soubory se zachovaly).
						</para>

					</listitem>
					 <listitem>
						<para>
							Soubory nového balíčku jsou poté rozbaleny. Pokud soubor již existuje, je nahrazen, ale záložní kopie se dočasně vytvoří.
						</para>

					</listitem>
					 <listitem>
						<para>
							Pro aktualizaci, <command>dpkg</command> splustí <command>old-postrm upgrade <replaceable>new-version</replaceable></command>.
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>dpkg</command> aktualizuje všechna interní data (seznam souborů, nastavovací skripty, apod.) a odstraní zálohy nahrazených souborů. Toto je bod, ze kterého není návratu: <command>dpkg</command> již více nemá přístup ke všem prvkům nutným k návratu do předcházejícího stavu.
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>dpkg</command> aktualizuje nastavovací soubory a vyzve uživatele, aby se rozhodl, zda bude nemožné automaticky řídit tento úkol. Detailům tohoto procesu se věnuje <xref linkend="sect.conffiles" />.
						</para>

					</listitem>
					 <listitem>
						<para>
							Nakonec, <command>dpkg</command> nastaví balíček spuštěním <command>new-postinst configure <replaceable>last-version-configured</replaceable></command>.
						</para>

					</listitem>

				</orderedlist>

			</section>
			 <section>
				<title>Odstranění balíčků</title>
				 <para>
					Toto se stane během odstranění balíčku:
				</para>
				 <orderedlist>
					<listitem>
						<para>
							<command>dpkg</command> zavolá <command>prerm remove</command>.
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>dpkg</command> odstraní všechny soubory balíčku, s vyjímkou nastavovacích souborů a konfiguračních skriptů.
						</para>

					</listitem>
					 <listitem>
						<para>
							<command>dpkg</command> spustí <command>postrm remove</command>. Všechny nastavovací skripty, kromě <filename>postrm</filename>, se odstraní. Pokud uživatel nepoužije volbu “purge”, proces se tady zastaví.
						</para>

					</listitem>
					 <listitem>
						<para>
							K úplnému očištění od balíčku (příkaz vydán jako <command>dpkg --purge</command> nebo <command>dpkg -P</command>), nastavovací soubory se také vymažou, stejně jako jisté množství kopií (<filename>*.dpkg-tmp</filename>, <filename>*.dpkg-old</filename>, <filename>*.dpkg-new</filename>) a přechodných souborů; <command>dpkg</command> poté spustí <command>postrm purge</command>.
						</para>

					</listitem>

				</orderedlist>
				 <sidebar> <title><emphasis>SLOVNÍČEK</emphasis> Vyčištění, úplné odstranění</title>
				 <indexterm>
					<primary>vyčištění od balíčku</primary>
				</indexterm>
				 <para>
					Pokud je balíček Debianu odstraněn, nastavovací soubory se zachovají za účelem usnadnění případné re-instalace. Obdobně, data vygenerovaná démonem (jako je obsah serverového adresářeLDAP nebo obsah databáze pro server SQL) se obvykle zachovají.
				</para>
				 <para>
					K odstranění veškerých dat spojených s balíčkem je nutné “vymazat” balíček za pomoci příkazu <command>dpkg -P <replaceable>balíček</replaceable></command>, <command>apt-get remove --purge <replaceable>balíček</replaceable></command> nebo <command>aptitude purge <replaceable>balíček</replaceable></command>.
				</para>
				 <para>
					Z důvodu absolutní povahy takovýchto odstraňování dat, čištění by nemělo být bráno na lehkou váhu.
				</para>
				 </sidebar> <indexterm>
					<primary><filename>config</filename>, <command>debconf</command> script</primary>
				</indexterm>
				 <para>
					Čtyři skripty uvedené výše jsou doplněny <filename>config</filename> skriptem, poskytovaným balíčky za použití <command>debconf</command> za účelem nabytí informací od uživatele kvůli nastavení. Během instalace tento skript detailně definuje otázky položené <command>debconf</command>. Odpovědi jsou zaznamenány v databázi <command>debconf</command> kvůli pozdějším odkazům. Skript je obyčejně spuštěn <command>apt</command> před instalováním balíčků jednoho po druhém za účelem seskupení všech otázek a pokládání jich všech uživateli v počátku tohoto procesu. Před- a po-instalační skripty mohou potom použít tyto informace k fungování podle uživatelových přání.
				</para>
				 <sidebar> <title><emphasis>NÁSTROJ</emphasis> <command>debconf</command></title>
				 <indexterm>
					<primary><command>debconf</command></primary>
				</indexterm>
				 <para>
					<command>debconf</command> byl vytvořen za účelem vyřešit opakující se problém v Debianu. Všechny balíčky Debianu, které nebyly schopny fungovat bez minimálního nastavení pokládávaly otázky za pomoci volání příkazů <command>echo</command> a <command>read</command> v shellovských skriptech <filename>postinst</filename> (a podobných skriptech). Ale to také znamená, že během obsáhlé instalace nebo aktualizace musel uživatel zůstat s počítačem a odpovídat na různé dotazy, které se mohly vyskytnout kdykoliv. Tyto manuální interakce se téměř úplně přestaly používat díky nástroji <command>debconf</command>.
				</para>
				 <para>
					<command>debconf</command> má mnoho zajímavých fukcí: vyžaduje, aby vývojář přesně vymezil uživatelovu interakci; umožňuje lokalizaci všech řetězců, které se zobrazují uživateli (všechny překlady jsou uloženy v souborech <filename>templates</filename> popisujících interakce); jsou tu různé frontendy ke zobrazení otázek uživateli (textový mód, grafický mód, ne-interakitní); a umožňuje vytvoření centrální databáze odpovědí k tomu, aby bylo možné sdílení stejného nastavení různými počítači... ale nejdůležitější je, že je nyní možné představit uživateli všechny otázky za sebou v řadě, před započetím dlouhého instalačního nebo aktualizačního procesu. Uživatel může jít po svých zatímco systém zvládá instalaci ve vlastní režii, bez toho, aniž by uživatel zíral na obrazovku v očekávání dotazů.
				</para>
				 </sidebar>
			</section>

		</section>
		 <section id="sect.conffiles">
			<title>Checksums, seznam souborů nastavení</title>
			 <indexterm>
				<primary><filename>md5sums</filename></primary>
			</indexterm>
			 <indexterm>
				<primary><filename>conffiles</filename></primary>
			</indexterm>
			 <indexterm>
				<primary>checksums</primary>
			</indexterm>
			 <indexterm>
				<primary>soubory</primary>
				<secondary>soubory nastavení</secondary>
			</indexterm>
			 <indexterm>
				<primary>nastavení</primary>
				<secondary>soubory</secondary>
			</indexterm>
			 <para>
				K již v předcházející části zmíněným správcovským skriptům a řídícím datům archiv <filename>control.tar.gz</filename> balíčku Debianu může obsahovat další zajímavé soubory. První z nich, <filename>md5sums</filename>, obsahuje kontrolní součty MD5 pro všechny soubory balíčku. Jeho hlavní výhodou je, že umožňuje <command>dpkg --verify</command> (čemuž se budeme věnovat v <xref linkend="sect.dpkg-verify" />) ke kontrole, zda tyto soubory nebyly změněny od své instalace. Za zmínku stojí, že pokud tento soubor neexistuje, <command>dpkg</command> jej dynamicky vygeneruje v době instalace (a uloží jej do databáze dpkg stejně jako ostatní řídící soubory).
			</para>
			 <para>
				<filename>conffiles</filename> eviduje seznamy souborů balíčku, se kterými se musí zacházet jako se soubory nastavení. Nastavovací soubory mohou být upraveny administrátorem a <command>dpkg</command> se pokusí tyto změny uchovat během aktualizace balíčku.
			</para>
			 <para>
				V podstatě se <command>dpkg</command> chová v této situaci tak inteligentě, jak je to jen možné: pokud se standardní soubor nastavení nezměnil mezi těmito dvěma verzemi, neudělá nic. Pokud se ale tento soubor změnil, pokusí se tento soubor zaktualizovat. Mohou nastat dva případy: buď se adminitrátor ani nedotkl tohoto nastavovacího souboru, v tom případě <command>dpkg</command> automaticky nainstaluje novou verzi; nebo soubor byl upraven a v tom případě se <command>dpkg</command> zeptá administrátora, kterou verzi si přeje použít (tu starou s úpravami nebo tu novou, poskytovanou s balíčkem). V podpoře, k učinění tohoto rozhodnutí, <command>dpkg</command> nabízí zobrazení “<command>diff</command>”, který ukazuje rozdíly mezi těmito verzemi. Když si uživatel přeje zachovat starou verzi, nová se uloží na to samé místo, do souboru s příponou <filename>.dpkg-dist</filename>. Pokud uživatel zvolí novou verzi, nová se zachová v souboru s příponou <filename>.dpkg-old</filename>. Další akce, která je k dispozici, spočívá v krátkém přerušení <command>dpkg</command> a editaci souboru a pokusu o znovu stanovení příslušných úprav (které byly předtím rozpoznány v <command>diff</command>).
			</para>
			 <sidebar id="sidebar.questions-conffiles"> <title><emphasis>JDEME DÁLE</emphasis> Předcházení otázkám na soubor nastavení</title>
			 <para>
				<command>dpkg</command> zaopatřuje aktualizace souboru nastavení, ale, jakmile toto činí, běžně přerušuje svou práci kvůli tomu, že požaduje administrátorům vstup. To už tak nepotěší ty, kteří si přejí, aby aktualizace běžely v neinteraktivním režimu. To je důvod, proč tento program nabízí možnosti, které umožňují systému automaticky odpovídat podle stejné logiky: <command>--force-confold</command> zachovává starou verzi souboru; <command>--force-confnew</command> použije novou verzi souboru (tyto volby jsou respektovány, i když tento soubor nebyl administrátorem změněn, což má jen zřídka kýžený efekt). Přidáním možnosti <command>--force-confdef</command> říkáme <command>dpkg</command>, aby pokud možno rozhodnul ve vlastní režii (jinak řečeno, pokud je původní nastavovací soubor netknutý) a pouze použil <command>--force-confnew</command> nebo <command>--force-confold</command> v ostatních případech.
			</para>
			 <para>
				Tyto možnosti se týkají <command>dpkg</command>, ale většinu času bude administrátor pracovat přímo s programy <command>aptitude</command> nebo <command>apt-get</command>. Proto je nutné znát syntax používaný k označení možností, aby byly předány příkazu <command>dpkg</command> (jejich způsoby uživatelského rozhraní příkazového řádku jsou velmi podobné).
			</para>
			 
<screen>
<computeroutput># </computeroutput><userinput>apt -o DPkg::options::="--force-confdef" -o DPkg::options::="--force-confold" full-upgrade</userinput></screen>
			 <para>
				Tyto možnosti mohou být uloženy přímo do nastavení <command>apt</command>. K tomu, aby jste tak učinili, napište následující řádek do souboru <filename>/etc/apt/apt.conf.d/local</filename>:
			</para>
			 <informalexample> 
<programlisting>
DPkg::options { "--force-confdef"; "--force-confold"; }</programlisting>
			 </informalexample> <para>
				Zahrnutím této volby do souboru nastavení znamená, že bude také použita v grafickém rozhraní jako je <command>aptitude</command>.
			</para>
			 </sidebar> <sidebar id="sidebar.questions-conffiles-bis"> <title><emphasis>JDEME DÁLE</emphasis> Přimění dpkg k dotazovánín a nastavovací soubor</title>
			 <para>
				Možnost <command>--force-confask</command> požaduje po <command>dpkg</command> zobrazení otázek o souborech nastavení, i v případech, kdy by běžně nebyly nutné. Takže, když se reinstaluje balíček s touto volbou, <command>dpkg</command> položí otázky znovu pro všechny soubory nastavení, které byly administrátorem upraveny. To je velmi pohodlné, především pro reinstalaci původního souboru nastavení, pokud byl vymazán a žádná jiná kopie není k dispozici: běžná reinstalace nebude fungovat, protože <command>dpkg</command> považuje odstranění za legitimní formu úpravy a proto nenaistaluje požadovaný nastavovací soubor.
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.source-package-structure">
		<title>Struktura zdrojového balíčku</title>
		 <indexterm>
			<primary>balíček</primary>
			<secondary>zdrojový balíček</secondary>
		</indexterm>
		 <indexterm>
			<primary>zdroj</primary>
			<secondary>balíček</secondary>
		</indexterm>
		 <section>
			<title>Formát</title>
			 <indexterm>
				<primary>soubor DSC</primary>
			</indexterm>
			 <indexterm>
				<primary><filename>diff.gz</filename> soubor</primary>
			</indexterm>
			 <indexterm>
				<primary><filename>debian.tar.gz</filename> soubor</primary>
			</indexterm>
			 <indexterm>
				<primary><filename>orig.tar.gz</filename> soubor</primary>
			</indexterm>
			 <para>
				A source package is usually comprised of three files, a <filename>.dsc</filename>, a <filename>.orig.tar.gz</filename>, and a <filename>.debian.tar.xz</filename> (or <filename>.diff.gz</filename>). They allow creation of binary packages (<filename>.deb</filename> files described above) from the source code files of the program, which are written in a programming language.
			</para>
			 <para>
				Soubor <filename>.dsc</filename> (Debian Source Control) je krátký textový soubor obsahující hlavičku RFC 2822 (stejně jako soubor <filename>control</filename> probíraný v <xref linkend="sect.control" />), který popisuje zdrojový balíček a označuje další soubory, které jsou jeho součástí. Je podepsaný svým správcem, což garantuje autenticitu. Další podrobnosti k tomuto tématu naleznete v <xref linkend="sect.package-authentication" />.
			</para>
			 <example>
				<title>Soubor <filename>.dsc</filename></title>
				 
<programlisting>
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Format: 3.0 (quilt)
Source: zim
Binary: zim
Architecture: all
Version: 0.65-4
Maintainer: Emfox Zhou &lt;emfox@debian.org&gt;
Uploaders: Raphaël Hertzog &lt;hertzog@debian.org&gt;
Homepage: http://zim-wiki.org
Standards-Version: 3.9.8
Vcs-Browser: https://anonscm.debian.org/cgit/collab-maint/zim.git
Vcs-Git: https://anonscm.debian.org/git/collab-maint/zim.git
Build-Depends: debhelper (&gt;= 9), xdg-utils, python (&gt;= 2.6.6-3~), libgtk2.0-0 (&gt;= 2.6), python-gtk2, python-xdg, dh-python
Package-List:
 zim deb x11 optional arch=all
Checksums-Sha1:
 4a9be85c98b7f4397800f6d301428d64241034ce 1899614 zim_0.65.orig.tar.gz
 0ec38c990ec7662205dd0c843bf81f9033906a2e 10332 zim_0.65-4.debian.tar.xz
Checksums-Sha256:
 5442f3334395a2beafc5b9a2bbec2e53e38270d4bad696b5c4053dd51dc1ed96 1899614 zim_0.65.orig.tar.gz
 78271df16aa166dce916b3ff4ecd705ed3a8832e49d3ef0bd8738a4fe8dd2b4f 10332 zim_0.65-4.debian.tar.xz
Files:
 63ab7a2070e6d1d3fb32700a851d7b8b 1899614 zim_0.65.orig.tar.gz
 648559b38e04eaf4f6caa97563c057ff 10332 zim_0.65-4.debian.tar.xz

-----BEGIN PGP SIGNATURE-----
Comment: Signed by Raphael Hertzog

iQEzBAEBCgAdFiEE1823g1EQnhJ1LsbSA4gdq+vCmrkFAlgzZXkACgkQA4gdq+vC
mrnyXAf+M/PzZFjqk6Hvv1QSbocIDZ3bEqRjVpNLApubsPsEZZT6yw9vypzNE2hZ
/BbLPa0Ntbhew4U+SJpuujV7VnLs9mZgOFuKRHKWYQBQ+oxw+gtM6iePwVj58aP/
LW7K5gE428ohMdjIkf42Lz4Fve3dVPgPLIzQxRZ87N6OKqmS81M6/RRIF3TS/gJp
CwpN1yifCfQs46gxL5/CgA4uhI8taz+g+8ZDd6fL5BQeFuNsgplY4QL1uGno3F7G
VY7WZhM601Re2ePnv+6vjh8kDWMjZhfB4RJy0+hHezuoVGKljyaxc1O4P/fxvXus
CEETju6cAE/HgDubDXDqExMwEd4odA==
=HUvj
-----END PGP SIGNATURE-----</programlisting>

			</example>
			 <indexterm>
				<primary><literal>Build-Depends</literal>, hlavičkové pole</primary>
			</indexterm>
			 <para>
				Pamatujte na to, že zdrojový balíček má také závislosti (<literal>Build-Depends</literal>) zcela odlišné od těch, co má binární balíček, protože značí nástroje potřebné pro kompilaci daného softwaru a sestavují jeho binární balíček.
			</para>
			 <sidebar> <title><emphasis>UPOZORNĚNÍ</emphasis> Odlišné jmenné prostory</title>
			 <para>
				Je tu důležité upozornit na to, že neexistuje žádná vyžadovaná shoda mezi jménem zdrojového balíčku a binárního balíčku(ů), který je vygenerován. Je to více než nasnadě, když si uvědomíte, že každý zdrojový balíček může vygenerovat několik binárních balíčků. To je důvod, proč soubor <filename>.dsc</filename> má pole <literal>Source</literal> a <literal>Binary</literal> k tomu, aby explicitně jmenovala zdrojový balíček a ukládala seznam binárních balíčků, které generuje.
			</para>
			 </sidebar> <sidebar> <title><emphasis>KULTURA</emphasis> Proč rozdělovat do několika balíčků</title>
			 <para>
				Opravdu často může zdrojový balíček (pro daný software) generovat několik binárních balíčků. Dělení je odůvodněno možností použití softwaru (nebo jeho částí) v různých souvislostech. Vemte si například sdílenou knihovnu, ta může být nainstalována za účelem fungování aplikace (například <emphasis role="pkg">libc6</emphasis>) nebo může být nainstalována k vývoji nového programu (<emphasis role="pkg">libc6-dev</emphasis> potom bude ten správný balíček). Nalezneme také smysl v případě služeb klient/server, kde chceme nainstalovat serverovou část na jednom zařízení a klientskou část na druhém (to je například u <emphasis role="pkg">openssh-server</emphasis> a <emphasis role="pkg">openssh-client</emphasis>).
			</para>
			 <para>
				Stejně často je dokumentace poskytována ve speciálním balíčku: uživatel ho může nainstalovat nezávisle na softwaru a může se jej kdykoliv rozhodnout odstranit, aby ušetřil místo na disku. Navíc, toto také šetří místo na kopiích datového úložiště, protože dokumentační balíček bude sdílen napříč všemi architekturami (místo toho, abychom měli dulpicitní dokumentaci v baléčcích pro každou architekturu).
			</para>
			 </sidebar> <sidebar> <title><emphasis>PERSPEKTIVA</emphasis> Různé formáty zdrojových balíčků</title>
			 <para>
				Původně existoval pouze jeden formát pro zdrojové balíčky. To je formát <literal>1.0</literal>, který spojuje archiv <filename>.orig.tar.gz</filename> s “debianizační” opravou <filename>.diff.gz</filename> (je také varianta, která se skládá z jednoho archivu <filename>.tar.gz</filename>, který je automaticky používán, pokud není k dispozici žádný <filename>.orig.tar.gz</filename>.
			</para>
			 <para>
				Since Debian <emphasis role="distribution">Squeeze</emphasis>, Debian developers have the option to use new formats that correct many problems of the historical format. Format <literal>3.0 (quilt)</literal> can combine multiple upstream archives in the same source package: in addition to the usual <filename>.orig.tar.gz</filename>, supplementary <filename>.orig-<replaceable>component</replaceable>.tar.gz</filename> archives can be included. This is useful with software that is distributed in several upstream components but for which a single source package is desired. These archives can also be compressed with <command>xz</command> rather than <command>gzip</command>, which saves disk space and network resources. Finally, the monolithic patch, <filename>.diff.gz</filename> is replaced by a <filename>.debian.tar.xz</filename> archive containing the compiling instructions and a set of upstream patches contributed by the package maintainer. These last are recorded in a format compatible with <command>quilt</command> — a tool that facilitates the management of a series of patches.
			</para>
			 </sidebar> <para>
				Soubor <filename>.orig.tar.gz</filename> je archiv, který obsahuje zdrojový kód tak, jak jej poskytuje vývojář. Správce balíčku Debianu je požádán, aby neupravoval tento archiv za účelem snadné kontroly původu a celistvosti souboru (použitím jednoduchého srovnání za pomoci checksumu) a respektování přání některých autorů.
			</para>
			 <para>
				The <filename>.debian.tar.xz</filename> contains all of the modifications made by the Debian maintainer, especially the addition of a <filename>debian</filename> directory containing the instructions to execute to construct a Debian package.
			</para>
			 <sidebar> <title><emphasis>NÁSTROJ</emphasis> Dekomprimace zdrojového balíčku</title>
			 <indexterm>
				<primary><command>dpkg-source</command></primary>
			</indexterm>
			 <indexterm>
				<primary>dekomprimace, zdrojový balíček</primary>
			</indexterm>
			 <indexterm>
				<primary>odkomprimování, zdrojový balíček</primary>
			</indexterm>
			 <indexterm>
				<primary>rozbalení</primary>
				<secondary>zdrojový balíček</secondary>
			</indexterm>
			 <para>
				Pokud máte zdrojový balíček, můžete použít příkaz <command>dpkg-source</command> (z balíčku <emphasis role="pkg">dpkg-dev</emphasis>) k dekomprimaci:
			</para>
			 
<screen><computeroutput>$ </computeroutput><userinput>dpkg-source -x package_0.7-1.dsc</userinput></screen>
			 <para>
				Můžete také použít <command>apt-get</command> ke stažení zdrojového balíčku a jeho okamžitému rozbalení. To každopádně vyžaduje přítomnost příslušných <literal>deb-src</literal> řádků v souboru <filename>/etc/apt/sources.list</filename> (pro detailnější informace nahlédněte do <xref linkend="sect.apt-sources.list" />). Používají se k vypsání “zdrojů” zdrojového balíčku (čímž se rozumí servery, na které jsou skupiny zdrojových balíčků umístěny).
			</para>
			 
<screen><computeroutput>$ </computeroutput><userinput>apt-get source <replaceable>balíček</replaceable></userinput></screen>
			 </sidebar>
		</section>
		 <section>
			<title>Použití v rámci Debianu</title>
			 <para>
				Zdrojový balíček je v Debianu základem všeho. Všechny balíčky Debianu mají svůj původ ve zdrojovém balíčku a každá úprava v balíčku Debianu je důsledkem úpravy učiněné na zdrojovém balíčku. Správci Debianu každopádně pracují se zdrojovým balíčkem s vědomím důsledků své činnosti na binární balíček. Ovoce jejich práce tak může být nalezeno ve zdrojových balíčcích, které jsou od Debianu k dispozici: snadno se k nim můžete vrátit a všechno z nich vyčíst.
			</para>
			 <para>
				Jakmile dorazí nová verze balíčku na server Debianu (zdrojový balíček a jeden nebo více binárních balíčků), zdrojový balíček je nejdůležitější. Samozřejmě, bude posléze použit sítí zařízení různých architektur ke kompilaci pro různé, Debianem podporované, architektury. Skutečnost, že vývojář posílá také jeden nebo více binárních balíčků pro danou architekturu (obyčejně i386 nebo amd64) je poměrně nedůležitá, protože by mohly být také automaticky vygenerovány.
			</para>

		</section>

	</section>
	 <section id="sect.manipulating-packages-with-dpkg">
		<title>Manipulace s balíčkem za použití <command>dpkg</command></title>
		 <indexterm>
			<primary><command>dpkg</command></primary>
		</indexterm>
		 <para>
			<command>dpkg</command> je základní příkaz pro manipulaci s balíčky Debianu v systému. Pokud máte balíčky <filename>.deb</filename>, je to <command>dpkg</command>, co vám umožní instalaci nebo analýzu jejich obsahu. Tento program má ovšem pouze částečný přehled o vesmíru Debianu: ví, co je v systému nainstalováno a co je uvedeno na příkazovém řádku, ale neví nic o ostatních dostupných balíčcích. A tak selže, pokud závislosti nejsou naplněny. Oproti tomu nástroje jako je <command>apt</command>, vytvoří seznam závislostí za účelem instalace všeho, automaticky, jak jen to bude možné.
		</para>
		 <sidebar> <title><emphasis>POZNÁMKA</emphasis> <command>dpkg</command> nebo <command>apt</command>?</title>
		 <para>
			Na <command>dpkg</command> by se mělo nazírat jako na systémový nástroj (backend) a na <command>apt</command> jako na nástroj bližší uživateli, což překonává omezení prvně jmenovaného. Tyto nástroje pracují společně, každý se svými zvláštnostmi, hodícími se pro specifické úkoly.
		</para>
		 </sidebar> <section>
			<title>Instalace balíčků</title>
			 <indexterm>
				<primary>instalace</primary>
				<secondary>instalace balíčku</secondary>
			</indexterm>
			 <indexterm>
				<primary>balíček</primary>
				<secondary>instalace</secondary>
			</indexterm>
			 <para>
				<command>dpkg</command> je, mimo jiné, nástroj pro instalaci již dostupných balíčků Debianu (protože tento nástroj nic nestahuje). Abychom tak učinili, používáme volbu <literal>-i</literal> nebo <literal>--install</literal>.
			</para>
			 <example>
				<title>Instalace balíčku za použití <command>dpkg</command></title>
				 
<screen role="scale">
<computeroutput># </computeroutput><userinput>dpkg -i man-db_2.7.6.1-2_amd64.deb</userinput>
<computeroutput>(Reading database ... 110431 files and directories currently installed.)
Preparing to unpack man-db_2.7.6.1-2_amd64.deb ...
Unpacking man-db (2.7.6.1-2) over (2.7.6.1-1) ...
Setting up man-db (2.7.6.1-2) ...
Updating database of manual pages ...
Processing triggers for mime-support (3.60) ...</computeroutput></screen>

			</example>
			 <para>
				Můžeme vidět různé kroky, které <command>dpkg</command> vykonal; tak víme, ve kterém bodě se mohla jakákoli vyskytnout. Instalace se také může uskutečnit ve dvou fázích: nejdříve rozbalení a potom nastavení. <command>apt-get</command> toho využívá a omezuje počet volání <command>dpkg</command> (protože každé volání je nákladné, z důvodu nahrávání databáze do paměti, především pak seznamu již nainstalovaných souborů).
			</para>
			 <example>
				<title>Oddělené rozbalení a nastavení</title>
				 
<screen role="scale">
<computeroutput># </computeroutput><userinput>dpkg --unpack man-db_2.7.6.1-2_amd64.deb</userinput>
<computeroutput>(Reading database ... 110431 files and directories currently installed.)
Preparing to unpack man-db_2.7.6.1-2_amd64.deb ...
Unpacking man-db (2.7.6.1-2) over (2.7.6.1-2) ...
Processing triggers for mime-support (3.60) ...
# </computeroutput><userinput>dpkg --configure man-db</userinput>
<computeroutput>Setting up man-db (2.7.6.1-2) ...
Updating database of manual pages ...
</computeroutput></screen>

			</example>
			 <indexterm>
				<primary>balíček</primary>
				<secondary>rozbalení</secondary>
			</indexterm>
			 <indexterm>
				<primary>rozbalení</primary>
				<secondary>binární balíček</secondary>
			</indexterm>
			 <para>
				Někdy <command>dpkg</command> při instalaci selže a vrátí nějakou chybu; pokud to uživatel přikáže ignorovat, pouze zobrazí varování; je to z toho důvodu, že máme různé <literal>--force-*</literal> volby. Příkaz <command>dpkg --force-help</command>, nebo dokumentace tohoto příkazu, poskytne úplný výpis těchto možností. Nejčastější chybou, se kterou se musíte dříve nebo později setkat, je kolize souborů. Pokud balíček obsahuje soubor, který už nainstaloval jiný balíček, <command>dpkg</command> jej odmítne instalovat. Potom se objeví následující sdělení:
			</para>
			 
<screen>
<computeroutput>Unpacking libgdm (from .../libgdm_3.8.3-2_amd64.deb) ...
dpkg: error processing /var/cache/apt/archives/libgdm_3.8.3-2_amd64.deb (--unpack):
 trying to overwrite '/usr/bin/gdmflexiserver', which is also in package gdm3 3.4.1-9</computeroutput></screen>
			 <para>
				V tomto případě, pokud si myslíte, že nahrazení tohoto souboru neznamená podstatnou hrozbu pro stabilitu vašeho systému (což je obvyklý případ), můžete použít volbu <literal>--force-overwrite</literal>, což řekne <command>dpkg</command>, aby tuto chybu ignoroval a přepsal soubor.
			</para>
			 <para>
				Zatímco existuje mnoho <literal>--force-*</literal> možností, pouze u <literal>--force-overwrite</literal> se předpokládá jeho častné používání. Tyto volby jsou určeny pouze pro vyjímečné situace a je lepší je pokud možno nechat být a respektovat pravidla zavedená balíčkovacím mechanismem. Nezapomínejte, že tato pravidla zajišťují celistvost a stabilitu vašeho systému.
			</para>
			 <sidebar> <title><emphasis>UPOZORNĚNÍ</emphasis> Účinné používání <literal>--force-*</literal></title>
			 <indexterm>
				<primary>porušená závislost</primary>
			</indexterm>
			 <para>
				Pokud nejste opatrní, použití možnosti <literal>--force-*</literal> může vést k systému, kdy rodina příkazů APT odmítne pracovat. V podstatě, některé z možností umožňují instalaci balíčku, když závislosti nejsou splněny nebo když existuje nějaký konflikt. Výsledkem je nekonzistentní systém z hlediska závislostí a příkazy APT odmítnou spustit jakoukoliv akci, kromě těch, které povedou k navrácení systému zpět do konzistentního stavu (to často spolčívá v instalaci chybějící závislosti nebo odstranění problematického balíčku). Výsledkem často bývá zpráva jako je tato, získaná po instalaci nové verze <emphasis role="pkg">rdesktop</emphasis>, za které se ignorovala jeho závislost na nové verzi <emphasis role="pkg">libc6</emphasis>:
			</para>
			 
<screen><computeroutput># </computeroutput><userinput>apt full-upgrade
</userinput><computeroutput>[...]
You might want to run 'apt-get -f install' to correct these.
The following packages have unmet dependencies:
  rdesktop: Depends: libc6 (&gt;= 2.5) but 2.3.6.ds1-13etch7 is installed
E: Unmet dependencies. Try using -f.</computeroutput></screen>
			 <para>
				Odvážný administrátor, který si je jistý správností své analýzy, může zvolit ignorování závislosti nebo konfliktu a použít možnost <literal>--force-*</literal>. V tomto případě, pokud chce být schopen pokračovat v používání <command>apt</command> nebo <command>aptitude</command>, musí provést korekturu <filename>/var/lib/dpkg/status</filename> a smazat/upravit závislostnebo konflikt, který si zvolil nebrat v úvahu.
			</para>
			 <para>
				Taková manipulace je škaredé nabourání se a neměla by být nikdy realizována, kromě nejkrajnějších případů nutnosti. Nejčastěji je vhodnější znovu zkompilovat balíček, který zapříčiňuje problém (více v <xref linkend="sect.rebuilding-package" />) nebo použít novou verzi (potenciálně opravenou) z úložiště jako je <literal>stable-backports</literal> (více v <xref linkend="sect.backports" />).
			</para>
			 </sidebar>
		</section>
		 <section>
			<title>Odstranění balíčků</title>
			 <indexterm>
				<primary>odstranění balíčku</primary>
			</indexterm>
			 <indexterm>
				<primary>očištění od balíčku</primary>
			</indexterm>
			 <indexterm>
				<primary>balíček</primary>
				<secondary>odstranění</secondary>
			</indexterm>
			 <indexterm>
				<primary>balíček</primary>
				<secondary>očištění</secondary>
			</indexterm>
			 <para>
				Volání <command>dpkg</command> s volbou <literal>-r</literal> nebo <literal>--remove</literal>, následovanou jménem balíčku, odstraní tento balíček. Toto odstranění je, nicméně, nekompletní: všechny nastavovací soubory, správcovské skripty, záznamové soubory (logy systému) a ostatní uživatelská data zpracovávaná balíčkem, zůstávají. Tento způsob vyřazení programu z činnosti je snadno proveden jeho odinstalováním a je stále možné jej rychle znovu nainstalovat v tom samém nastavení. Ke kompletnímu odstranění všeho, co souvisí s balíčkem, použijte volbu <literal>-P</literal> or <literal>--purge</literal>, následovanou jménem balíčku.
			</para>
			 <example>
				<title>Odstranění a očištění od balíčku <emphasis role="pkg">debian-cd</emphasis></title>
				 
<screen><computeroutput># </computeroutput><userinput>dpkg -r debian-cd</userinput>
<computeroutput>(Reading database ... 112188 files and directories currently installed.)
Removing debian-cd (3.1.20) ...
# </computeroutput><userinput>dpkg -P debian-cd</userinput>
<computeroutput>(Reading database ... 111613 files and directories currently installed.)
Purging configuration files for debian-cd (3.1.20) ...
</computeroutput></screen>

			</example>

		</section>
		 <section>
			<title>Dotazování se databáze <command>dpkg</command> a prozkoumání souborů <filename>.deb</filename></title>
			 <indexterm>
				<primary>balíček</primary>
				<secondary>status</secondary>
			</indexterm>
			 <indexterm>
				<primary>balíček</primary>
				<secondary>seznam souborů</secondary>
			</indexterm>
			 <indexterm>
				<primary>balíček</primary>
				<secondary>prohlížení obsahu</secondary>
			</indexterm>
			 <sidebar> <title><emphasis>ZPĚT K ZÁKLADŮM</emphasis> Alternativní syntax</title>
			 <para>
				Většina voleb je k dispozici v “dlouhé” verzi (jedno nebo více příslušných slov před nimiž je dvojitá pomlčka) a “krátké” verzi (jedno písmeno, často počáteční jednoho slova z dlouhé verze, před nímž je jednoduchá pomlčka). Tato konvence je tak běžná, že je POSIX standardem.
			</para>
			 </sidebar> <para>
				Než uzavřeme tuto sekci, podíváme se na volby <command>dpkg</command>, které se dotazují interní databáze za účelem obdržení informace. Předložením nejdříve dlouhých voleb a potom odpovídajících krátkých voleb (které zjevně přijímají ty samé možné argumenty) uvádíme <literal>--listfiles <replaceable>balíček</replaceable></literal> (nebo <literal>-L</literal>), který vypisuje soubory nainstalované tímto balíčkem; <literal>--search <replaceable>soubor</replaceable></literal> (nebo <literal>-S</literal>), který nalezne balíček (balíčky) obsahující tento soubor; <literal>--status <replaceable>balíček</replaceable></literal> (nebo <literal>-s</literal>), který zobrazí hlavičky nainstalovaného balíčku; <literal>--list</literal> (nebo <literal>-l</literal>), zobrazí seznam balíčků známých systému a jejich instalační status; <literal>--contents <replaceable>soubor.deb</replaceable></literal> (nebo <literal>-c</literal>), který vypíše soubory ve specifikovaném balíčku Debianu; <literal>--info<replaceable> soubor.deb </replaceable></literal> (nebo <literal>-I</literal>), který zobrazí hlavičky tohoto balíčku Debianu.
			</para>
			 <example>
				<title>Různé dotazování s <command>dpkg</command></title>
				 
<screen role="scale" width="80">
<computeroutput>$ </computeroutput><userinput>dpkg -L base-passwd</userinput>
<computeroutput>/.
/usr
/usr/sbin
/usr/sbin/update-passwd
/usr/share
/usr/share/base-passwd
/usr/share/base-passwd/group.master
/usr/share/base-passwd/passwd.master
/usr/share/doc
/usr/share/doc/base-passwd
/usr/share/doc/base-passwd/README
/usr/share/doc/base-passwd/changelog.gz
/usr/share/doc/base-passwd/copyright
/usr/share/doc/base-passwd/users-and-groups.html
/usr/share/doc/base-passwd/users-and-groups.txt.gz
/usr/share/doc-base
/usr/share/doc-base/users-and-groups
/usr/share/lintian
/usr/share/lintian/overrides
/usr/share/lintian/overrides/base-passwd
/usr/share/man
/usr/share/man/de
/usr/share/man/de/man8
/usr/share/man/de/man8/update-passwd.8.gz
/usr/share/man/es
/usr/share/man/es/man8
/usr/share/man/es/man8/update-passwd.8.gz
/usr/share/man/fr
/usr/share/man/fr/man8
/usr/share/man/fr/man8/update-passwd.8.gz
/usr/share/man/ja
/usr/share/man/ja/man8
/usr/share/man/ja/man8/update-passwd.8.gz
/usr/share/man/man8
/usr/share/man/man8/update-passwd.8.gz
/usr/share/man/pl
/usr/share/man/pl/man8
/usr/share/man/pl/man8/update-passwd.8.gz
/usr/share/man/ru
/usr/share/man/ru/man8
/usr/share/man/ru/man8/update-passwd.8.gz
$ </computeroutput><userinput>dpkg -S /bin/date</userinput>
<computeroutput>coreutils: /bin/date
$ </computeroutput><userinput>dpkg -s coreutils</userinput>
<computeroutput>Package: coreutils
Essential: yes
Status: install ok installed
Priority: required
Section: utils
Installed-Size: 15103
Maintainer: Michael Stone &lt;mstone@debian.org&gt;
Architecture: amd64
Multi-Arch: foreign
Version: 8.26-3
Replaces: mktemp, realpath, timeout
Pre-Depends: libacl1 (&gt;= 2.2.51-8), libattr1 (&gt;= 1:2.4.46-8), libc6 (&gt;= 2.17), libselinux1 (&gt;= 2.1.13)
Conflicts: timeout
Description: GNU core utilities
 This package contains the basic file, shell and text manipulation
 utilities which are expected to exist on every operating system.
 .
 Specifically, this package includes:
 arch base64 basename cat chcon chgrp chmod chown chroot cksum comm cp
 csplit cut date dd df dir dircolors dirname du echo env expand expr
 factor false flock fmt fold groups head hostid id install join link ln
 logname ls md5sum mkdir mkfifo mknod mktemp mv nice nl nohup nproc numfmt
 od paste pathchk pinky pr printenv printf ptx pwd readlink realpath rm
 rmdir runcon sha*sum seq shred sleep sort split stat stty sum sync tac
 tail tee test timeout touch tr true truncate tsort tty uname unexpand
 uniq unlink users vdir wc who whoami yes
Homepage: http://gnu.org/software/coreutils
$ </computeroutput><userinput>dpkg -l 'b*'</userinput>
<computeroutput>Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                 Version         Architecture    Description
+++-====================-===============-===============-=============================================
un  backupninja          &lt;none&gt;          &lt;none&gt;          (no description available)
un  backuppc             &lt;none&gt;          &lt;none&gt;          (no description available)
un  baekmuk-ttf          &lt;none&gt;          &lt;none&gt;          (no description available)
un  base                 &lt;none&gt;          &lt;none&gt;          (no description available)
un  base-config          &lt;none&gt;          &lt;none&gt;          (no description available)
ii  base-files           9.9+deb9u1      amd64           Debian base system miscellaneous files
ii  base-passwd          3.5.43          amd64           Debian base system master password and group 
ii  bash                 4.4-5           amd64           GNU Bourne Again SHell
[...]
$ </computeroutput><userinput>dpkg -c /var/cache/apt/archives/gnupg_2.1.18-8~deb9u1_amd64.deb</userinput>
<computeroutput>drwxr-xr-x root/root         0 2017-09-18 20:41 ./
drwxr-xr-x root/root         0 2017-09-18 20:41 ./usr/
drwxr-xr-x root/root         0 2017-09-18 20:41 ./usr/bin/
-rwxr-xr-x root/root    996648 2017-09-18 20:41 ./usr/bin/gpg
-rwxr-xr-x root/root      3444 2017-09-18 20:41 ./usr/bin/gpg-zip
-rwxr-xr-x root/root    161192 2017-09-18 20:41 ./usr/bin/gpgconf
-rwxr-xr-x root/root     26696 2017-09-18 20:41 ./usr/bin/gpgparsemail
-rwxr-xr-x root/root     76112 2017-09-18 20:41 ./usr/bin/gpgsplit
-rwxr-xr-x root/root    158344 2017-09-18 20:41 ./usr/bin/kbxutil
-rwxr-xr-x root/root      1081 2014-06-25 16:17 ./usr/bin/lspgpot
-rwxr-xr-x root/root      2194 2017-09-18 20:41 ./usr/bin/migrate-pubring-from-classic-gpg
-rwxr-xr-x root/root     14328 2017-09-18 20:41 ./usr/bin/watchgnupg
drwxr-xr-x root/root         0 2017-09-18 20:41 ./usr/sbin/
-rwxr-xr-x root/root      3078 2017-09-18 20:41 ./usr/sbin/addgnupghome
-rwxr-xr-x root/root      2219 2017-09-18 20:41 ./usr/sbin/applygnupgdefaults
drwxr-xr-x root/root         0 2017-09-18 20:41 ./usr/share/
drwxr-xr-x root/root         0 2017-09-18 20:41 ./usr/share/doc/
drwxr-xr-x root/root         0 2017-09-18 20:41 ./usr/share/doc/gnupg/
-rw-r--r-- root/root     18964 2017-01-23 18:39 ./usr/share/doc/gnupg/DETAILS.gz
[...]
$ </computeroutput><userinput>dpkg -I /var/cache/apt/archives/gnupg_2.1.18-8~deb9u1_amd64.deb</userinput>
<computeroutput> new debian package, version 2.0.
 size 1124042 bytes: control archive=2221 bytes.
    1388 bytes,    24 lines      control              
    2764 bytes,    43 lines      md5sums              
 Package: gnupg
 Source: gnupg2
 Version: 2.1.18-8~deb9u1
 Architecture: amd64
 Maintainer: Debian GnuPG Maintainers &lt;pkg-gnupg-maint@lists.alioth.debian.org&gt;
 Installed-Size: 2088
 Depends: gnupg-agent (= 2.1.18-8~deb9u1), libassuan0 (&gt;= 2.0.1), libbz2-1.0, libc6 (&gt;= 2.15), libgcrypt20 (&gt;= 1.7.0), libgpg-error0 (&gt;= 1.14), libksba8 (&gt;= 1.3.4), libreadline7 (&gt;= 6.0), libsqlite3-0 (&gt;= 3.7.15), zlib1g (&gt;= 1:1.1.4)
 Recommends: dirmngr (= 2.1.18-8~deb9u1), gnupg-l10n (= 2.1.18-8~deb9u1)
 Suggests: parcimonie, xloadimage
 Breaks: debsig-verify (&lt;&lt; 0.15), dirmngr (&lt;&lt; 2.1.18-8~deb9u1), gnupg2 (&lt;&lt; 2.1.11-7+exp1), libgnupg-interface-perl (&lt;&lt; 0.52-3), libgnupg-perl (&lt;= 0.19-1), libmail-gnupg-perl (&lt;= 0.22-1), monkeysphere (&lt;&lt; 0.38~), php-crypt-gpg (&lt;= 1.4.1-1), python-apt (&lt;= 1.1.0~beta4), python-gnupg (&lt;&lt; 0.3.8-3), python3-apt (&lt;= 1.1.0~beta4)
 Replaces: gnupg2 (&lt;&lt; 2.1.11-7+exp1)
 Provides: gpg
 Section: utils
 Priority: optional
 Multi-Arch: foreign
 Homepage: https://www.gnupg.org/
 Description: GNU privacy guard - a free PGP replacement
  GnuPG is GNU's tool for secure communication and data storage.
  It can be used to encrypt data and to create digital signatures.
  It includes an advanced key management facility and is compliant
  with the proposed OpenPGP Internet standard as described in RFC4880.
[...]</computeroutput></screen>

			</example>
			 <sidebar> <title><emphasis>JDEME DÁLE</emphasis> Srovnání verzí</title>
			 <indexterm>
				<primary>verze, srovnání</primary>
			</indexterm>
			 <indexterm>
				<primary>srovnání verzí</primary>
			</indexterm>
			 <para>
				Protože <command>dpkg</command> je program pro manipulování s balíčky Debianu, poskytuje také referenční implementaci logiky pro porovnávání čísel verzí. To je důvod, proč má také volbu <literal>--compare-versions</literal>, použitelnou externími programy (především nastavovacími skripty spušťěnými samotným <command>dpkg</command>). Tato volba vyžaduje tři parametry: číslo verze, operátor porovnání a druhé číslo verze. Různé možné operátory jsou <literal>lt</literal> (čistě menší než), <literal>le</literal> (menší nebo rovno), <literal>eq</literal> (rovno) <literal>ne</literal> (nerovná se), <literal>ge</literal> (větší nebo rovno), a <literal>gt</literal> (čistě větší než). Pokud je porovnání pravdivé, <command>dpkg</command> vrací 0 (úspěch); pokud ne, vrátí nenulové číslo (značící neúspěch).
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>dpkg --compare-versions 1.2-3 gt 1.1-4</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>0
$ </computeroutput><userinput>dpkg --compare-versions 1.2-3 lt 1.1-4</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>1
$ </computeroutput><userinput>dpkg --compare-versions 2.6.0pre3-1 lt 2.6.0-1</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>1</computeroutput></screen>
			 <para>
				Všimněte si neočekávaného selhání v případě posledního srovnání: pro <command>dpkg</command>, <literal>pre</literal>, obyčejně značící verzi před oficiálním vydáním, nemá speciální význam a tak tento program srovnává znaky abecedy stejným způsobem jako čísla (a &lt; b &lt; c ...), v abecedním pořadí. Proto považuje “<literal>0pre3</literal>” za větší, než “<literal>0</literal>”. Pokud chceme, aby číslo verze balíčku označovalo verzi, která je před oficiálním vydáním, používáme znak vlnovky, “<literal>~</literal>”:
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>dpkg --compare-versions 2.6.0~pre3-1 lt 2.6.0-1</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>0</computeroutput></screen>
			 </sidebar>
		</section>
		 <section>
			<title>Log soubor programu <command>dpkg</command></title>
			 <para>
				<command>dpkg</command> uchovává logové záznamy všech svých akcí v <filename>/var/log/dpkg.log</filename>. Tento log je extrémně upovídaný, protože důkladně popisuje každou etapu, kterou balíček, s kterým <command>dpkg</command> manipuluje, prochází. Mimo to, že nabízí způsob zpětného sledování chování dpkg, především uchovává historii vývoje systému: dá se najít přesný moment, kdy byl jakýkoli balíček nainstalován nebo zaktualizován, což může být neobyčejně užitečná informace pro pochopení aktuální změny v chování. Navíc, se záznamem všech verzí, je snadné informace pro všechny dotčené balíčky ověřit s <filename>changelog.Debian.gz</filename> nebo dokonce s hlášeními chyb, které jsou k dispozici online.
			</para>

		</section>
		 <section id="sect.multi-arch">
			<title>Vícearchitekturová podpora</title>
			 <indexterm>
				<primary>Vícearchitekturová</primary>
			</indexterm>
			 <indexterm>
				<primary>architektura</primary>
				<secondary>vícearchitekturová podpora</secondary>
			</indexterm>
			 <para>
				Všechny balíčky Debianu mají ve svých kontrolních informacích pole <literal>Architecture</literal>. Toto pole může obsahovat buď “<literal>all</literal>” (u balíčků, které jsou nazávislé na architektuře) nebo jméno architektury, na kterou se zaměřují (jako je “amd64”, “armhf”, …). V případě posledního jmenovaného je přednastveno, že <command>dpkg</command> bude akceptovat instalaci balíčku pouze pokud jeho architektura odpovídá hostitelské architektuře podle výstupu <command>dpkg --print-architecture</command>.
			</para>
			 <para>
				Toto omezení zaručuje, že uživatelé neskončí s binárním programem sestaveným pro nesprávnou architekturu. Všechno by bylo perfektní, až na to, že, na (některých) počítačích mohou běžet binární programy určené pro více architektur, ať už přirozeně (na systému “amd64“ binární programy pro “i386”) nebo prostřednictvím emulátorů.
			</para>
			 <section>
				<title>Umožnění vícearchitekturové podpory</title>
				 <para>
					<command>dpkg</command> má vícearchitekturovou podporu, která umožňuje uživatelům definovat “cizí architektury”, které mohou být na současném systému naistalovány. To se jednoduše provede pomocí <command>dpkg --add-architecture</command> jak ukazuje níže uvedený příklad. Existuje také odpovídající <command>dpkg --remove-architecture</command>, který vyloučí cizí architekturu, ten se ale může použít pouze pokud žádné balíčky pro tuto architekturu nezůstanou.
				</para>
				 
<screen>
<computeroutput># </computeroutput><userinput>dpkg --print-architecture</userinput>
<computeroutput>amd64
# </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput># </computeroutput><userinput>dpkg -i gcc-6-base_6.3.0-18_armhf.deb</userinput>
<computeroutput>dpkg: error processing archive gcc-6-base_6.3.0-18_armhf.deb (--install):
 package architecture (armhf) does not match system (amd64)
Errors were encountered while processing:
 gcc-6-base_6.3.0-18_armhf.deb
# </computeroutput><userinput>dpkg --add-architecture armhf</userinput>
<computeroutput># </computeroutput><userinput>dpkg --add-architecture armel</userinput>
<computeroutput># </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput>armhf
armel
# </computeroutput><userinput>dpkg -i gcc-6-base_6.3.0-18_armhf.deb</userinput>
<computeroutput>Selecting previously unselected package gcc-6-base:armhf.
(Reading database ... 112000 files and directories currently installed.)
Preparing to unpack gcc-6-base_6.3.0-18_armhf.deb ...
Unpacking gcc-6-base:armhf (6.3.0-18) ...
Setting up gcc-6-base:armhf (6.3.0-18) ...
# </computeroutput><userinput>dpkg --remove-architecture armhf</userinput>
<computeroutput>dpkg: error: cannot remove architecture 'armhf' currently in use by the database
# </computeroutput><userinput>dpkg --remove-architecture armel</userinput>
<computeroutput># </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput>armhf</computeroutput></screen>
				 <sidebar> <title><emphasis>POZNÁMKA</emphasis> vícearchitekturová podpora APTu</title>
				 <para>
					APT automaticky zjistí, že dpkg byl nakonfigurován pro podporu cizích architektur a spustí stahování odpovídajících <filename>Packages</filename> souborů během svého procesu aktualizace.
				</para>
				 <para>
					Cizí balíčky se poté mohou prostřednictvím <command>apt install <replaceable>package</replaceable>:<replaceable>architecture</replaceable></command> instalovat
				</para>
				 </sidebar> <sidebar> <title><emphasis>V PRAXI</emphasis> Používání proprietárních binárních progamů pro i386 na amd64</title>
				 <para>
					There are multiple use cases for multi-arch, but the most popular one is the possibility to execute 32 bit binaries (i386) on 64 bit systems (amd64).
				</para>
				 </sidebar>
			</section>
			 <section>
				<title>Změny související s vícearchitekturovou podporou</title>
				 <para>
					To make multi-arch actually useful and usable, libraries had to be repackaged and moved to an architecture-specific directory so that multiple copies (targeting different architectures) can be installed alongside. Such updated packages contain the “<literal>Multi-Arch: same</literal>” header field to tell the packaging system that the various architectures of the package can be safely co-installed (and that those packages can only satisfy dependencies of packages of the same architecture). The most important libraries have been converted since the introduction of multi-arch in Debian <emphasis role="distribution">Wheezy</emphasis>, but there are many libraries that will likely never be converted unless someone specifically requests it (through a bug report for example).
				</para>
				 
<screen><computeroutput>$ </computeroutput><userinput>dpkg -s gcc-6-base
</userinput><computeroutput>dpkg-query: error: --status needs a valid package name but 'gcc-6-base' is not: ambiguous package name 'gcc-6-base' with more than one installed instance

Use --help for help about querying packages.
$ </computeroutput><userinput>dpkg -s gcc-6-base:amd64 gcc-6-base:armhf | grep ^Multi
</userinput><computeroutput>Multi-Arch: same
Multi-Arch: same
$ </computeroutput><userinput>dpkg -L libgcc1:amd64 |grep .so
</userinput><computeroutput>/lib/x86_64-linux-gnu/libgcc_s.so.1
$ </computeroutput><userinput>dpkg -S /usr/share/doc/gcc-6-base/copyright
</userinput><computeroutput>gcc-6-base:amd64, gcc-6-base:armhf: /usr/share/doc/gcc-6-base/copyright
</computeroutput></screen>
				 <para>
					Stojí za zmínku, že balíčky <literal>Multi-Arch: same</literal> musí mít svá jména označena svou architekturou, aby byly jednoznačně identifikovatelné. Mají také možnost sdílení souborů s ostatními instancemi toho samého balíčku; <command>dpkg</command> zajišťuje, že všechny balíčky mají bit po bitu stejné soubory, pokud jsou sdíleny. V neposlední řadě, všechny instance balíčku musí mít stejnou verzi. Musí být tedy vylepšovány společně.
				</para>
				 <para>
					Vícearchitekturová podpora sebou také přínáší některé zajímavé výzvy ve způsobu, jakým jsou řešeny závislosti. Splnění závislosti vyžaduje buď balíček označený “<literal>Multi-Arch: foreign</literal>” nebo balíček, jehož architektura odpovídá jedné z balíčku, který tuto závislost deklaruje (v případě tohoto procesu rozpoznávání závislostí, na architektuře nezávislé balíčky jsou považovány za balíčky stejné architektury jako je hostitel). Závislost může být také oslabena tím, že povolí jakékoli architektuře ji naplnit a to pomocí synaxe <literal><replaceable>package</replaceable>:any</literal>, ale s tím, že cizí balíčky mohou uspokojit takovou závislost pouze pokud jsou označeny “<literal>Multi-Arch: allowed</literal>”.
				</para>

			</section>

		</section>

	</section>
	 <section id="sect.coexistence-with-other-packaging-systems">
		<title>Soužití s jiným balíčkovacím systémem</title>
		 <indexterm>
			<primary>RPM</primary>
		</indexterm>
		 <indexterm>
			<primary>Red Hat Package Manager</primary>
		</indexterm>
		 <indexterm>
			<primary><command>alien</command></primary>
		</indexterm>
		 <para>
			Balíčky Debianu nejsou jediné, které jsou ve světě svobodného softwaru používány. Hlavním konkurentem je formát RPM distribuce Red Hat Linux a jejích mnoha derivátů. Red Hat je velmi populární, komerční distribuce. Je tedy běžné pro software, který je poskytován třetími stranami, že je nabízen jako balíčky RPM spíše, než jako balíčky Debianu.
		</para>
		 <para>
			V tomto případě by jste měli vědět, že program <command>rpm</command>, který obhospodařuje balíčky RPM je k dispozici jako balíček Debianu, takže je možné použít tento balíčkový formát na Debianu. Opatrnost je zde ovšem na místě a je třeba omezit takové manipulace na získání informací z balíčku nebo ověření jeho celistvosti. Popravdě, nemá smysl používat <command>rpm</command> k instalaci nějakého RPM na systém Debianu; RPM používá svou vlastní databázi, oddělenou od té, co náleží domácímu softwaru (jako je <command>dpkg</command>). Proto je nemožné zajistit stabilní soužití dvou balíčkových systmémů.
		</para>
		 <para>
			Na druhou stranu, program <emphasis role="pkg">alien</emphasis> umí převádět balíčky RPM na balíčky Debianu a naopak.
		</para>
		 <sidebar> <title><emphasis>KOMUNITA</emphasis> Pobídka k přijetí <filename>.deb</filename></title>
		 <para>
			If you regularly use the <command>alien</command> program to install RPM packages coming from one of your providers, do not hesitate to write to them and amicably express your strong preference for the <filename>.deb</filename> format. Note that the format of the package is not everything: a <filename>.deb</filename> package built with <command>alien</command> or prepared for a version of Debian different than that which you use, or even for a derivative distribution like Ubuntu, would probably not offer the same level of quality and integration as a package specifically developed for Debian <emphasis role="distribution">Stretch</emphasis>.
		</para>
		 </sidebar> 
<screen>
<computeroutput>$ </computeroutput><userinput>fakeroot alien --to-deb phpMyAdmin-4.7.5-2.fc28.noarch.rpm</userinput>
<computeroutput>phpmyadmin_4.7.5-3_all.deb generated
$ </computeroutput><userinput>ls -s phpmyadmin_4.7.5-3_all.deb</userinput>
<computeroutput>  4356 phpmyadmin_4.7.5-3_all.deb</computeroutput></screen>
		 <para>
			Shledáte, že tento proces je neobyčejně jednoduchý. Musíte ale vědět, že vygenerovaný balíček nemá žádné informace o závislostech, protože závislosti v těchto dvou balíčkových formátech nemají systematickou shodu. Správce se tak musí manuálně ujistit, že převedený balíček bude správně fungovat a to je důvod, proč bychom se měli takto vygenerovným balíčkům vyhýbat, jak to je jen možné. Naštěstí má Debian nejrozsáhlejší sbírku softwarových balíčků ze všech distribucí a tak cokoli hledáte, se tam pravděpodobně už nalézá.
		</para>
		 <para>
			Nahlédnutím na manuálovou stránku příkazu <command>alien</command> také zjistíte, že tento program pracuje s ostatními balíčkovými formáty, obzvláště s tím, který používá distribuce Slackware (ten je tvořen jednoduchým archivem <filename>tar.gz</filename>).
		</para>
		 <para>
			Stabilita softwaru nasazeného za použití nástroje <command>dpkg</command> přispívá k věhlasu Debianu. Sada nástrojů APT, která je popsána v následující kapitole, si zachovává tuto přednost tím, že ulehčuje správci od řízení statusu balíčků, což je nezbytný, ale také obtížný úkol.
		</para>

	</section>
</chapter>

