<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="debian-packaging" lang="fr-FR">
	<chapterinfo>
		 <keywordset>
			<keyword>Rétroportage</keyword>
			 <keyword>Recompilation</keyword>
			 <keyword>Paquet source</keyword>
			 <keyword>Archive</keyword>
			 <keyword>Métapaquet</keyword>
			 <keyword>Développeur Debian</keyword>
			 <keyword>Mainteneur</keyword>

		</keywordset>

	</chapterinfo>
	 <title>Conception d'un paquet Debian</title>
	 <highlights> <para>
		Manipuler régulièrement des paquets Debian provoque tôt ou tard le besoin de créer le sien ou d'en modifier un. Ce chapitre essaie de répondre à vos interrogations en la matière et fournit des éléments pour tirer le meilleur parti de l'infrastructure offerte par Debian. Qui sait, en ayant ainsi mis la main à la pâte, peut-être irez-vous plus loin et deviendrez-vous développeur Debian !
	</para>
	 </highlights> <section id="sect.rebuilding-package">
		<title>Recompiler un paquet depuis ses sources</title>
		 <para>
			Plusieurs éléments justifient la recompilation d'un paquet depuis ses sources. L'administrateur peut avoir besoin d'une fonctionnalité du logiciel qui implique de recompiler le programme en activant une option particulière ou souhaiter en installer une version plus récente que celle fournie dans sa version de Debian (dans ce cas, il recompilera un paquet plus récent récupéré dans la version <emphasis role="distribution">Testing</emphasis> ou <emphasis role="distribution">Unstable</emphasis> pour qu'il fonctionne parfaitement dans sa distribution <emphasis role="distribution">Stable</emphasis>, opération appelée le rétroportage). On prendra soin de vérifier, avant de se lancer dans une recompilation, que personne d'autre ne s'en est déjà chargé ; on pourra vérifier en particulier sur la page dédiée du système de suivi de paquets. <ulink type="block" url="https://tracker.debian.org/" /> <indexterm><primary>rétroportage</primary></indexterm>
		</para>
		 <section>
			<title>Récupérer les sources</title>
			 <para>
				Pour recompiler un paquet Debian, il faut commencer par rapatrier son code source. Le moyen le plus simple est d'employer la commande <command>apt-get source <replaceable>nom-paquet-source</replaceable></command>, qui nécessite la présence d'une ligne de type <literal>deb-src</literal> dans le fichier <filename>/etc/apt/sources.list</filename> et l'exécution préalable de la commande <command>apt-get update</command>. C'est déjà le cas si vous avez suivi les instructions du chapitre portant sur la configuration d'APT (voir <xref linkend="sect.apt-sources.list" />). Notez cependant que vous téléchargerez les paquetages sources du paquet disponible dans la version de Debian désignée par la ligne <literal>deb-src</literal> de ce fichier de configuration. Si vous souhaitez en rapatrier une version particulière, il vous faudra peut-être la télécharger manuellement depuis un miroir Debian ou depuis le site web : récupérer deux ou trois fichiers (d'extensions <filename>*.dsc</filename> — pour <foreignphrase>Debian Source Control</foreignphrase> — <filename>*.tar.<replaceable>comp</replaceable></filename> et parfois <filename>*.diff.gz</filename> ou <filename>*.debian.tar.<replaceable>comp</replaceable></filename> — <replaceable>comp</replaceable> pouvant prendre les valeurs <literal>gz</literal>, <literal>bz2</literal> ou <literal>xz</literal> selon l'outil de compression employé), puis exécuter la commande <command>dpkg-source -x <replaceable>fichier.dsc</replaceable></command>. Si le fichier <filename>*.dsc</filename> est disponible à une URL donnée, on pourra même se simplifier la vie en utilisant <command>dget <replaceable>URL</replaceable></command> : cette commande (qui fait partie du paquet <emphasis role="pkg">devscripts</emphasis>) récupère le <filename>*.dsc</filename> à l'adresse indiquée, en analyse le contenu et récupère automatiquement le ou les fichiers qu'il référence. Le paquet source est même extrait localement (à moins que l'option <literal>-d</literal> ou <literal>--download-only</literal> soit spécifiée).
			</para>

		</section>
		 <section>
			<title>Effectuer les modifications</title>
			 <para>
				Les sources maintenant disponibles dans un répertoire portant le nom du paquet source et sa version (par exemple <emphasis>samba-4.1.17+dfsg</emphasis>), nous pouvons nous y rendre pour y effectuer nos modifications.
			</para>
			 <para>
				La première modification à apporter est de changer le numéro de version du paquet pour distinguer les paquets recompilés des originaux fournis par Debian. Supposons que la version actuelle soit <literal>2:4.1.17+dfsg-2</literal> ; nous pouvons créer une version <literal>2:4.1.17+dfsg-2falcot1</literal>, ce qui désigne clairement l'origine du paquet. De cette manière, la version est supérieure à celle fournie par Debian et le paquet s'installera facilement en tant que mise à jour de l'original. Pour effectuer ce changement, il est préférable d'utiliser le programme <command>dch</command> <foreignphrase>(Debian CHangelog)</foreignphrase> du paquet <emphasis role="pkg">devscripts</emphasis> en saisissant <command>dch --local falcot</command>. Cette commande démarre un éditeur de texte (<command>sensible-editor</command> — votre éditeur favori si vous l'avez précisé dans la variable d'environnement <varname>VISUAL</varname> ou <varname>EDITOR</varname>, un éditeur par défaut dans les autres cas) où l'on pourra documenter les différences apportées par cette recompilation. On peut constater que <command>dch</command> a bien modifié le fichier <filename>debian/changelog</filename>.
			</para>
			 <para>
				Si une modification des options de compilation s'avère nécessaire, il faudra modifier le fichier <filename>debian/rules</filename>, qui pilote les différentes étapes de la compilation du paquet. Dans les cas les plus simples, vous repérerez facilement les lignes concernant la configuration initiale (<literal>./configure …</literal>) ou déclenchant la compilation (<literal>$(MAKE) …</literal> ou <literal>make …</literal>). En les adaptant convenablement, il est possible d'obtenir l'effet souhaité. Si ces commandes n'apparaissent pas directement, elles sont vraisemblablement appelées par une des commandes présentes. Il faudra se référer à leur documentation pour en apprendre plus sur la manière de changer le comportement par défaut. Pour les paquets qui utilisent <command>dh</command>, il sera peut-être nécessaire de surcharger les commandes <command>dh_auto_configure</command> ou <command>dh_auto_build</command> (voir leurs pages de manuel respectives pour des explications à ce sujet).
			</para>
			 <para>
				Il convient parfois de s'occuper du fichier <filename>debian/control</filename>, qui renferme la description des paquets générés. Il peut être intéressant de la modifier pour qu'elle reflète les changements apportés. Par ailleurs, ce fichier contient aussi des champs <literal>Build-Depends</literal> qui donnent la liste des dépendances de génération du paquet. Celles-ci se rapportent souvent à des versions de paquets contenus dans la distribution d'origine du paquet source, qui ne sont peut-être pas disponibles dans la version utilisée pour la recompilation. Il n'existe pas de moyen automatique pour savoir si une dépendance est réelle ou si elle a été créée pour garantir que la compilation s'effectue bien avec les dernières versions d'une bibliothèque (c'est le seul moyen disponible pour forcer un <foreignphrase>autobuilder</foreignphrase> à recompiler le paquet avec une version prédéfinie d'un paquet — c'est pourquoi les mainteneurs Debian utilisent fréquemment ce procédé).
			</para>
			 <para>
				N'hésitez donc pas à modifier ces dépendances pour les assouplir si vous savez qu'elles sont trop strictes. La lecture d'éventuels fichiers documentant le mode de compilation du logiciel (souvent nommés <filename>INSTALL</filename>) vous sera sans doute utile pour retrouver les bonnes dépendances. Idéalement, il faudrait satisfaire toutes les dépendances avec les paquets disponibles dans la version utilisée pour la recompilation. Sans cela, on entre dans un processus récursif où il faut préalablement rétroporter les paquets donnés dans les champs <literal>Build-Depends</literal> avant de pouvoir compléter le rétroportage souhaité. Certains paquets, qui n'ont pas besoin d'être rétroportés, seront installés tels quels pour les besoins de la recompilation (c'est souvent le cas de <emphasis role="pkg">debhelper</emphasis>). Cependant, le processus peut se compliquer rapidement si l'on n'y prend garde, aussi faut-il éviter autant que possible tout rétroportage non strictement nécessaire.
			</para>
			 <sidebar> <title><emphasis>ASTUCE</emphasis> Installer les <literal>Build-Depends</literal></title>
			 <indexterm>
				<primary><literal>Build-Depends</literal>, champ d'en-tête du paquet source</primary>
			</indexterm>
			 <para>
				<command>apt-get</command> aide à installer rapidement tous les paquets cités dans le ou les champs <literal>Build-Depends</literal> d'un paquet source disponible dans une distribution donnée sur une ligne <literal>deb-src</literal> du fichier <filename>/etc/apt/sources.list</filename>. Il suffit pour cela d'exécuter la commande <command>apt-get build-dep <replaceable>paquet-source</replaceable></command>.
			</para>
			 </sidebar>
		</section>
		 <section>
			<title>Démarrer la recompilation</title>
			 <para>
				Toutes les modifications souhaitables étant apportées sur les sources, il faut maintenant régénérer le paquet binaire correspondant (fichier <filename>.deb</filename>). Tout ce processus de création est contrôlé par le programme <command>dpkg-buildpackage</command>.
			</para>
			 <example>
				<title>Recompilation d'un paquet</title>
				 
<screen><computeroutput>$ </computeroutput><userinput>dpkg-buildpackage -us -uc
</userinput><computeroutput>[...]
</computeroutput></screen>

			</example>
			 <sidebar id="sidebar.fakeroot"> <title><emphasis>OUTIL</emphasis> <command>fakeroot</command></title>
			 <para>
				Le processus de création de paquet, qui finalement se contente de rassembler dans une archive des fichiers existant localement (ou compilés), a besoin de créer des fichiers dont le propriétaire sera le plus souvent <literal>root</literal>. Pour éviter de compiler les paquets sous l'identité de l'administrateur, ce qui induirait des risques inutiles, on peut utiliser l'utilitaire nommé <command>fakeroot</command>. Lorsqu'il est utilisé pour lancer un programme, <command>fakeroot</command> laisse croire à ce programme qu'il tourne sous l'identité de <literal>root</literal>, et que les fichiers qu'il crée appartiennent également à l'administrateur. Lorsque le programme va créer l'archive qui deviendra le paquet Debian, il pourra ainsi y placer des fichiers appartenant à divers propriétaires. C'est pourquoi <command>dpkg-buildpackage</command> utilise par défaut <command>fakeroot</command> pour la préparation des paquets.
			</para>
			 <para>
				Notez qu'il ne s'agit que d'une impression donnée au programme lancé et qu'on ne peut donc pas utiliser cet outil pour obtenir des privilèges quelconques. Le programme tourne réellement sous l'identité de l'utilisateur qui lance <command>fakeroot <replaceable>programme</replaceable></command> et les fichiers qu'il crée réellement continuent de lui appartenir.
			</para>
			 </sidebar> <para>
				La commande précédente échoue si les champs <literal>Build-Depends</literal> n'ont pas été corrigés ou si les dépendances correspondantes n'ont pas été installées. Dans ce cas, on outrepasse cette vérification en ajoutant le paramètre <literal>-d</literal> à l'invocation de <command>dpkg-buildpackage</command>. En ignorant volontairement ces dépendances, on s'expose cependant à ce que la compilation échoue plus tard. Pire, il se peut que le paquet compile correctement mais que son fonctionnement soit altéré car certains programmes désactivent automatiquement des fonctionnalités s'ils détectent l'absence d'une bibliothèque lors de la compilation.
			</para>
			 <para>
				Les développeurs Debian utilisent plus volontiers un programme comme <command>debuild</command>, qui fera suivre l'appel de <command>dpkg-buildpackage</command> par l'exécution d'un programme chargé de vérifier que le paquet généré est conforme à la charte Debian. Par ailleurs, ce script nettoie l'environnement pour que les variables d'environnement locales n'affectent pas la compilation du paquet. <command>debuild</command> fait partie de la série d'outils du paquet <emphasis>devscripts</emphasis>, qui partagent une certaine cohérence et une configuration commune simplifiant le travail des mainteneurs.
			</para>
			 <sidebar> <title><emphasis>DÉCOUVERTE</emphasis> <command>pbuilder</command></title>
			 <indexterm>
				<primary><command>pbuilder</command></primary>
			</indexterm>
			 <para>
				Le programme <command>pbuilder</command> (du paquet éponyme) sert à recompiler un paquet Debian dans un environnement <foreignphrase>chrooté</foreignphrase> : il crée un répertoire temporaire contenant un système minimal nécessaire à la reconstruction du paquet (en se basant sur les informations contenues dans le champ <emphasis>Build-Depends</emphasis>). Grâce à la commande <command>chroot</command>, ce répertoire sert ensuite de racine (<filename>/</filename>) lors du processus de recompilation.
			</para>
			 <para>
				Cette technique permet de compiler le paquet dans un environnement non dégradé (notamment par les manipulations des utilisateurs), de détecter rapidement les manques éventuels dans les dépendances de compilation (qui échouera si un élément essentiel n'est pas documenté) et de compiler un paquet pour une version de Debian différente de celle employée par le système (la machine peut utiliser <emphasis role="distribution">Stable</emphasis> pour le fonctionnement quotidien et <command>pbuilder</command> peut employer <emphasis role="distribution">Unstable</emphasis> pour la recompilation).
			</para>
			 </sidebar>
		</section>

	</section>
	 <section id="sect.building-first-package">
		<title>Construire son premier paquet</title>
		 <section>
			<title>Métapaquet ou faux paquet</title>
			 <para>
				Faux paquet et métapaquet se concrétisent tous deux par un paquet vide qui n'existe que pour les effets de ses informations d'en-têtes sur la chaîne logicielle de gestion des paquets.
			</para>
			 <para>
				Le faux paquet existe pour tromper <command>dpkg</command> et <command>apt</command> en leur faisant croire que le paquet correspondant est installé alors qu'il ne s'agit que d'une coquille vide. Cela aide à satisfaire les dépendances lorsque le logiciel en question a été installé manuellement. Cette méthode fonctionne, mais il faut l'éviter autant que possible ; rien ne garantit en effet que le logiciel installé manuellement constitue un remplaçant parfait du paquet concerné et certains autres paquets, qui en dépendent, pourraient donc ne pas fonctionner.
			</para>
			 <para>
				Le métapaquet existe en tant que collection de paquets par le biais de ses dépendances, que son installation installera donc toutes.
			</para>
			 <para>
				Pour créer ces deux types de paquets, on peut recourir aux programmes <command>equivs-control</command> et <command>equivs-build</command> (du paquet Debian <emphasis>equivs</emphasis>). La commande <command>equivs-control <replaceable>fichier</replaceable></command> crée un fichier contenant des en-têtes de paquet Debian qu'on modifiera pour indiquer le nom du paquet souhaité, son numéro de version, le nom du mainteneur, ses dépendances, sa description. Tous les autres champs dépourvus de valeur par défaut sont optionnels et peuvent être supprimés. Les champs <literal>Copyright</literal>, <literal>Changelog</literal>, <literal>Readme</literal> et <literal>Extra-Files</literal> ne sont pas standards pour un paquet Debian. Propres à <command>equivs-build</command>, ils disparaîtront des en-têtes réels du paquet généré.
			</para>
			 <example>
				<title>Fichier d'en-têtes d'un faux paquet <emphasis>libxml-libxml-perl</emphasis></title>
				 
<programlisting>
Section: perl
Priority: optional
Standards-Version: 3.9.6

Package: libxml-libxml-perl
Version: 2.0116-1
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Depends: libxml2 (&gt;= 2.7.4)
Architecture: all
Description: Fake package - module manually installed in site_perl
 This is a fake package to let the packaging system
 believe that this Debian package is installed. 
 .
 In fact, the package is not installed since a newer version
 of the module has been manually compiled &amp; installed in the
 site_perl directory.</programlisting>

			</example>
			 <para>
				L'étape suivante consiste à générer le paquet Debian en invoquant la commande <command>equivs-build <replaceable>fichier</replaceable></command>. Le tour est joué : le paquet est disponible dans le répertoire courant et vous pouvez désormais le manipuler comme tous les autres paquets Debian.
			</para>

		</section>
		 <section>
			<title>Simple archive de fichiers</title>
			 <para>
				Les administrateurs de Falcot SA souhaitent créer un paquet Debian pour déployer facilement un ensemble de documents sur un grand nombre de machines. Après avoir étudié le guide du nouveau mainteneur, l'administrateur en charge de cette tâche se lance dans la création de son premier paquet. <ulink type="block" url="https://www.debian.org/doc/manuals/maint-guide/index.fr.html" />
			</para>
			 <para>
				Il commence par créer un répertoire <filename>falcot-data-1.0</filename>, qui abritera le paquet source qu'il a choisi de réaliser. Ce paquet se nommera donc <literal>falcot-data</literal> et portera le numéro de version <literal>1.0</literal>. L'administrateur place ensuite les fichiers des documents qu'il souhaite distribuer dans un sous-répertoire <filename>data</filename>. Il invoque la commande <command>dh_make</command> (du paquet <emphasis role="pkg">dh-make</emphasis>) pour ajouter les fichiers requis par le processus de génération d'un paquet (tous contenus dans un sous-répertoire <filename>debian</filename>) :
			</para>
			 
<screen>
<computeroutput>$ </computeroutput><userinput>cd falcot-data-1.0</userinput>
<computeroutput>$ </computeroutput><userinput>dh_make --native</userinput>
<computeroutput>
Type of package: single binary, indep binary, multiple binary, library, kernel module, kernel patch?
 [s/i/m/l/k/n] </computeroutput><userinput>i</userinput>
<computeroutput>
Maintainer name : Raphael Hertzog
Email-Address   : hertzog@debian.org
Date            : Fri, 04 Sep 2015 12:09:39 -0400
Package Name    : falcot-data
Version         : 1.0
License         : gpl3
Type of Package : Independent
Hit &lt;enter&gt; to confirm:
Currently there is no top level Makefile. This may require additional tuning.
Done. Please edit the files in the debian/ subdirectory now. You should also
check that the falcot-data Makefiles install into $DESTDIR and not in / .
$</computeroutput></screen>
			 <para>
				Le type de paquet <foreignphrase>indep binary</foreignphrase> indique que ce paquet source ne générera qu'un seul paquet binaire indépendant de l'architecture (<literal>Architecture: all</literal>). <foreignphrase>single binary</foreignphrase> est le pendant de <foreignphrase>indep binary</foreignphrase> pour un seul paquet binaire dépendant de l'architecture (<literal>Architecture: any</literal>). Nous optons pour le premier choix puisque le paquet abrite des documents et non des programmes binaires : il est donc exploitable sur toutes les architectures.
			</para>
			 <indexterm>
				<primary>types de paquets</primary>
			</indexterm>
			 <indexterm>
				<primary>paquet</primary>
				<secondary>types</secondary>
			</indexterm>
			 <para>
				<foreignphrase>multiple binary</foreignphrase> est à employer pour un paquet source générant plusieurs paquets binaires. Le type <foreignphrase>library</foreignphrase> est un cas particulier pour les bibliothèques partagées qui doivent suivre des règles de mise en paquet très strictes. Il en est de même pour <foreignphrase>kernel module</foreignphrase> et <foreignphrase>kernel patch</foreignphrase>, réservés aux paquets contenant des modules noyau.
			</para>
			 <sidebar> <title><emphasis>ASTUCE</emphasis> Nom et adresse électronique du mainteneur</title>
			 <para>
				La plupart des programmes qui recherchent vos nom et adresse électronique de responsable de paquet utilisent les valeurs contenues dans les variables d'environnement <varname>DEBFULLNAME</varname> et <varname>DEBEMAIL</varname> ou <varname>EMAIL</varname>. En les définissant une fois pour toutes, vous vous éviterez de devoir les saisir à de multiples reprises. Si votre shell habituel est <command>bash</command>, il suffit pour cela d'ajouter les deux lignes suivantes dans votre fichier <filename>~/.bashrc</filename> (en remplaçant évidemment ces valeurs par celles qui vous correspondent !) :
			</para>
			 
<programlisting>
export EMAIL="hertzog@debian.org"
export DEBFULLNAME="Raphael Hertzog"
</programlisting>
			 </sidebar> <para>
				Le programme <command>dh_make</command> a créé un sous-répertoire <filename>debian</filename> contenant de nombreux fichiers. Certains sont nécessaires : c'est notamment le cas des fichiers <filename>rules</filename>, <filename>control</filename>, <filename>changelog</filename> et <filename>copyright</filename>. Les fichiers d'extension <filename>.ex</filename> sont des fichiers d'exemples qu'on peut modifier et rebaptiser (en supprimant simplement cette extension) si cela s'avère utile. Dans le cas contraire, il convient de les supprimer. Le fichier <filename>compat</filename> doit être conservé car il est nécessaire au bon fonctionnement des programmes de l'ensemble appelé <emphasis>debhelper</emphasis>, dont les noms commencent par le préfixe <command>dh_</command> et qui sont employés à diverses étapes de la création de paquet.
			</para>
			 <para>
				Il faut mentionner dans le fichier <filename>copyright</filename> les auteurs des documents inclus dans le paquet et la licence logicielle associée. En l'occurrence, il s'agit de documents internes dont l'usage est limité à la société Falcot. Le fichier <filename>changelog</filename> par défaut convient relativement bien, et l'administrateur s'est contenté d'écrire une explication un peu plus longue que <foreignphrase>Initial release</foreignphrase> (« version initiale ») et de modifier la distribution <literal>unstable</literal> en <literal>internal</literal>. Le fichier <filename>control</filename> a lui aussi changé : le champ <literal>Section</literal> a désormais pour valeur <emphasis>misc</emphasis> et les champs Homepage, Vcs-Git et Vcs-Browser ont été supprimés. Le champ <literal>Depends</literal> a été complété par <literal>iceweasel | www-browser</literal> pour garantir la présence d'un navigateur web capable de consulter les documents ainsi diffusés.
			</para>
			 <example>
				<title>Le fichier <filename>control</filename></title>
				 
<programlisting>
Source: falcot-data
Section: misc
Priority: optional
Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;
Build-Depends: debhelper (&gt;= 9)
Standards-Version: 3.9.5

Package: falcot-data
Architecture: all
Depends: iceweasel | www-browser, ${misc:Depends}
Description: Documentation interne de Falcot SA
 Ce paquet fournit plusieurs documents décrivant
 la structure interne de Falcot SA. Cela comprend:
  - l'organigramme
  - les contacts pour chaque département
 .
 Ces documents NE DOIVENT PAS sortir de la société.
 Ils sont réservés à un USAGE INTERNE.</programlisting>

			</example>
			 <example>
				<title>Le fichier <filename>changelog</filename></title>
				 
<programlisting>
falcot-data (1.0) internal; urgency=low

  * Initial Release.
  * Commençons avec peu de documents:
    - la structure interne de la société
    - les contacts de chaque département

 -- Raphael Hertzog &lt;hertzog@debian.org&gt;  Fri, 04 Sep 2015 12:09:39 -0400</programlisting>

			</example>
			 <example>
				<title>Le fichier <filename>copyright</filename></title>
				 
<programlisting>
Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: falcot-data

Files: *
Copyright: 2004-2015 Falcot Corp
License: 
 All rights reserved.</programlisting>

			</example>
			 <sidebar> <title><emphasis>B.A.-BA</emphasis> Fichier <filename>Makefile</filename></title>
			 <indexterm>
				<primary><filename>Makefile</filename></primary>
			</indexterm>
			 <para>
				Un fichier <filename>Makefile</filename> est un script détaillant au programme <command>make</command> les règles nécessaires pour reconstruire des fichiers issus d'un réseau de dépendances (un programme, fruit de la compilation de fichiers sources, en est un exemple). Le fichier <filename>Makefile</filename> contient la liste de ces règles en respectant le format suivant :
			</para>
			 
<programlisting>cible: source1 source2 ...
        commande1
        commande2
</programlisting>
			 <para>
				Cette règle peut se traduire ainsi : si l'un des fichiers <literal>source*</literal> est plus récent que le fichier <literal>cible</literal>, il faut exécuter <command>command1</command> et <command>command2</command> pour régénérer la cible à partir des sources.
			</para>
			 <para>
				Attention, un caractère de tabulation doit impérativement précéder toutes les commandes. Sachez aussi que si la ligne de commande débute par un signe moins (<literal>-</literal>), la commande peut échouer sans que tout le processus avorte.
			</para>
			 </sidebar> <para>
				Le fichier <filename>rules</filename> contient normalement un ensemble de règles employées pour configurer, compiler et installer le logiciel dans un sous-répertoire dédié (portant le nom du paquet binaire généré). Le contenu de ce sous-répertoire est ensuite intégré au paquet Debian comme s'il était la racine du système de fichiers. Dans le cas qui nous concerne, les fichiers seront installés dans le répertoire <filename>debian/falcot-data/usr/share/falcot-data/</filename> pour que les documents ainsi diffusés soient disponibles sous <filename>/usr/share/falcot-data/</filename> dans le paquet généré. Le fichier <filename>rules</filename> est de type <filename>Makefile</filename> avec quelques cibles standardisées (notamment <literal>clean</literal> et <literal>binary</literal>, respectivement pour nettoyer et produire le binaire).
			</para>
			 <para>
				Bien que ce fichier soit au cœur du processus, il est fréquent qu'il ne contienne que le strict minimum pour lancer un ensemble standardisé de commandes qui sont fournies par le paquet <command>debhelper</command>. C'est le cas dans le fichier préparé par <command>dh_make</command>. Pour installer nos fichiers, nous allons simplement modifier le comportement de la commande <command>dh_install</command> en créant le fichier <filename>debian/falcot-data.install</filename> :
			</para>
			 
<programlisting>
data/* usr/share/falcot-data/
</programlisting>
			 <para>
				À ce stade, il est déjà possible de créer le paquet. Nous allons toutefois y ajouter une dernière touche. Les administrateurs souhaitent que ces documents soient facilement accessibles depuis les menus des bureaux graphiques. Pour cela, ils ajoutent un fichier <filename>falcot-data.desktop</filename> et l'installent dans <filename>/usr/share/applications</filename> en ajoutant une deuxième ligne au fichier <filename>debian/falcot-data.install</filename>.
			</para>
			 <example>
				<title>Le fichier <filename>falcot-data.desktop</filename></title>
				 
<programlisting>
[Desktop Entry]
Name=Internal Falcot Corp Documentation
Comment=Starts a browser to read the documentation
Name[fr]=Documentation interne Falcot SA
Comment[fr]=Lance un navigateur pour lire la documentation
Exec=x-www-browser /usr/share/falcot-data/index.html
Terminal=false
Type=Application
Categories=Documentation;</programlisting>

			</example>
			 <para>
				Le fichier <filename>debian/falcot-data.install</filename> mis à jour ressemble donc à ceci :
			</para>
			 
<programlisting>
data/* usr/share/falcot-data/
falcot-data.desktop usr/share/applications/</programlisting>
			 <para>
				Le paquet source est prêt ! Il ne reste plus qu'à générer le paquet binaire avec la commande déjà employée pour des recompilations de paquets : on se place dans le répertoire <filename>falcot-data-1.0</filename> et on exécute <command>dpkg-buildpackage -us -uc</command>.
			</para>

		</section>

	</section>
	 <section id="sect.setup-apt-package-repository">
		<title>Créer une archive de paquets pour APT</title>
		 <indexterm>
			<primary>archive de paquets</primary>
		</indexterm>
		 <indexterm>
			<primary>paquet</primary>
			<secondary>Debian</secondary>
			<tertiary>archive de</tertiary>
		</indexterm>
		 <para>
			Les administrateurs de Falcot SA maintiennent désormais un certain nombre de paquets Debian modifiés ou créés par eux et qui leur servent à diffuser des données et programmes internes.
		</para>
		 <para>
			Pour faciliter leur déploiement, ils souhaitent les intégrer dans une archive de paquets directement utilisable par APT. Pour des raisons évidentes de maintenance, ils désirent y séparer les paquets internes des paquets officiels recompilés. Les entrées qui correspondraient à cette situation dans un fichier <filename>/etc/apt/sources.list.d/falcot.list</filename> seraient les suivantes :
		</para>
		 
<programlisting>
deb http://packages.falcot.com/ updates/
deb http://packages.falcot.com/ internal/
</programlisting>
		 <indexterm>
			<primary><command>mini-dinstall</command></primary>
		</indexterm>
		 <para>
			Les administrateurs configurent donc un hôte virtuel sur leur serveur HTTP interne. La racine de l'espace web associé est <filename>/srv/vhosts/packages/</filename>. Pour gérer ces archives, ils ont décidé d'employer le programme <command>mini-dinstall</command> (du paquet éponyme). Celui-ci scrute un répertoire d'arrivée <filename>incoming/</filename> (en l'occurrence, il s'agira de <filename>/srv/vhosts/packages/mini-dinstall/incoming/</filename>) pour y récupérer tout paquet Debian déposé et l'installer dans une archive Debian (dont le répertoire est <filename>/srv/vhosts/packages/</filename>). Ce programme fonctionne en traitant les fichiers <filename>.changes</filename> créés lors de la génération d'un paquet Debian. Un tel fichier contient en effet la liste de tous les autres fichiers associés à cette version du paquet (<filename>.deb</filename>, <filename>.dsc</filename>, <filename>.diff.gz</filename>/<filename>debian.tar.gz</filename>, <filename>.orig.tar.gz</filename> ou fichiers équivalents utilisant d'autres outils de compression) et indique donc à <command>mini-dinstall</command> quels fichiers installer. Accessoirement, ce fichier reprend le nom de la distribution de destination (c'est souvent <literal>unstable</literal>) indiquée en tête du fichier <filename>debian/changelog</filename>, information utilisée par <command>mini-dinstall</command> pour décider de l'emplacement d'installation du paquet. C'est la raison pour laquelle les administrateurs doivent systématiquement modifier ce champ avant la génération d'un paquet et y placer <literal>internal</literal> ou <literal>updates</literal>, selon l'emplacement souhaité. <command>mini-dinstall</command> génère alors les fichiers indispensables au bon fonctionnement d'APT, par exemple <filename>Packages.gz</filename>.
		</para>
		 <sidebar> <title><emphasis>ALTERNATIVE</emphasis> <command>apt-ftparchive</command></title>
		 <indexterm>
			<primary><command>apt-ftparchive</command></primary>
		</indexterm>
		 <para>
			Si l'emploi de <command>mini-dinstall</command> semble trop complexe par rapport à vos besoins de création d'une archive Debian, il est possible d'utiliser directement le programme <command>apt-ftparchive</command>. Ce dernier inspecte le contenu d'un répertoire et affiche sur sa sortie standard le contenu du fichier <filename>Packages</filename> correspondant. Pour reprendre le cas de Falcot SA, les administrateurs pourraient directement déposer les paquets dans <filename>/srv/vhosts/packages/updates/</filename> ou <filename>/srv/vhosts/packages/internal/</filename> et exécuter les commandes suivantes pour créer les fichiers <filename>Packages.gz</filename> :
		</para>
		 
<screen>
<computeroutput>$ </computeroutput><userinput>cd /srv/vhosts/packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages updates &gt;updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip updates/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages internal &gt;internal/Packages</userinput>
<computeroutput>$ </computeroutput><userinput>gzip internal/Packages</userinput></screen>
		 <para>
			La commande <command>apt-ftparchive sources</command> crée de manière similaire les fichiers <filename>Sources.gz</filename>.
		</para>
		 </sidebar> <para>
			La configuration de <command>mini-dinstall</command> nécessite de mettre en place un fichier <filename>~/.mini-dinstall.conf</filename>, que les administrateurs de Falcot SA ont renseigné comme suit :
		</para>
		 
<programlisting>
[DEFAULT]
archive_style = flat
archivedir = /srv/vhosts/packages

verify_sigs = 0
mail_to = admin@falcot.com

generate_release = 1
release_origin = Falcot SA
release_codename = stable

[updates]
release_label = Recompiled Debian Packages

[internal]
release_label = Internal Packages
</programlisting>
		 <para>
			Il est intéressant d'y remarquer la décision de générer des fichiers <filename>Release</filename> pour chacune des archives. Cela permettra éventuellement de gérer les priorités d'installation des paquets à l'aide du fichier de configuration <filename>/etc/apt/preferences</filename> (voir <xref linkend="sect.apt.priorities" /> pour les détails).
		</para>
		 <sidebar> <title><emphasis>SÉCURITÉ</emphasis> <command>mini-dinstall</command> et droits</title>
		 <para>
			<command>mini-dinstall</command> étant prévu pour fonctionner dans un compte utilisateur, il ne serait pas raisonnable de l'employer avec le compte <literal>root</literal>. La solution la plus simple est de tout configurer au sein du compte utilisateur de l'administrateur qui a la responsabilité de créer les paquets Debian. Étant donné que lui seul a le droit de déposer des fichiers dans le répertoire <filename>incoming/</filename>, il n'est pas nécessaire d'authentifier l'origine de chaque paquet à installer : on peut considérer que l'administrateur l'aura fait préalablement. Cela justifie le paramètre <literal>verify_sigs = 0</literal> (pas de vérification des signatures). Toutefois, si le contenu des paquets est très sensible, il est possible de revenir sur ce choix et d'avoir un trousseau de clés publiques identifiant les personnes habilitées à créer des paquets (le paramètre <literal>extra_keyrings</literal> existe à cette fin) ; <command>mini-dinstall</command> vérifiera la provenance de chaque paquet déposé en analysant la signature intégrée au fichier <filename>.changes</filename>.
		</para>
		 </sidebar> <para>
			L'exécution de <command>mini-dinstall</command> démarre en fait le démon en arrière-plan. Tant qu'il fonctionne, il vérifie toutes les demi-heures si un nouveau paquet est disponible dans le répertoire <filename>incoming/</filename>, le place dans l'archive et régénère les différents fichiers <filename>Packages.gz</filename> et <filename>Sources.gz</filename>. Si la présence d'un démon constitue un problème, il est possible de l'invoquer en mode non interactif (ou <foreignphrase>batch</foreignphrase>), à l'aide de l'option <literal>-b</literal>, à chaque fois qu'un paquet aura été déposé dans le répertoire <filename>incoming/</filename>. Découvrez les autres possibilités offertes par <command>mini-dinstall</command> en consultant sa page de manuel <citerefentry><refentrytitle>mini-dinstall</refentrytitle>
			<manvolnum>1</manvolnum></citerefentry>.
		</para>
		 <sidebar> <title><emphasis>COMPLÉMENTS</emphasis> Générer une archive signée</title>
		 <para>
			Les outils APT effectuent par défaut une vérification d'une chaîne de signatures cryptographiques apposées sur les paquets qu'ils manipulent, avant de les installer, dans le but de s'assurer de leur authenticité (voir la <xref linkend="sect.package-authentication" />). Les archives APT privées posent alors problème, car les machines qui doivent les utiliser vont sans arrêt afficher des messages d'avertissement pour signaler que les paquets que ces archives contiennent ne sont pas signés. Il est donc souvent judicieux de s'assurer que même les archives privées bénéficient du mécanisme <foreignphrase>secure APT</foreignphrase>.
		</para>
		 <para>
			<command>mini-dinstall</command> propose pour cela l'option de configuration <literal>release_signscript</literal>, qui permet de spécifier un script à utiliser pour générer la signature. On pourra par exemple utiliser le script <filename>sign-release.sh</filename> fourni par le paquet <emphasis role="pkg">mini-dinstall</emphasis> dans <filename>/usr/share/doc/mini-dinstall/examples/</filename>, après l'avoir éventuellement adapté aux besoins locaux.
		</para>
		 </sidebar>
	</section>
	 <section id="sect.becoming-package-maintainer">
		<title>Devenir mainteneur de paquet</title>
		 <section>
			<title>Apprendre à faire des paquets</title>
			 <para>
				Construire un paquet Debian de qualité n'est pas chose facile et on ne s'improvise pas responsable de paquet. C'est une activité qui s'apprend par la pratique et par la théorie. Elle ne se limite pas à compiler et installer un logiciel. Elle implique surtout de maîtriser les problèmes, conflits et interactions qui se produiront avec les milliers d'autres paquets logiciels.
			</para>
			 <section>
				<title>Les règles</title>
				 <para>
					Un paquet Debian est conforme aux règles précises édictées dans la charte Debian. Chaque responsable de paquet se doit de les connaître. Il ne s'agit pas de les réciter par cœur, mais de savoir qu'elles existent et de s'y référer lorsque l'on n'est pas sûr de son choix. Tout mainteneur Debian officiel a déjà commis des erreurs en ignorant l'existence d'une règle, mais ce n'est pas dramatique : un utilisateur avancé de ses paquets finit tôt ou tard par signaler cette négligence sous la forme d'un rapport de bogue. <ulink type="block" url="http://www.debian.org/doc/debian-policy/" />
				</para>

			</section>
			 <section>
				<title>Les procédures</title>
				 <indexterm>
					<primary>référence du développeur Debian</primary>
				</indexterm>
				 <para>
					Debian n'est pas une collection de paquets réalisés individuellement. Le travail de chacun s'inscrit dans un projet collectif et, à ce titre, on ne peut être développeur Debian et ignorer le fonctionnement global de la distribution. Tôt ou tard, chaque développeur doit interagir avec d'autres volontaires. La référence du développeur Debian (paquet <emphasis role="pkg">developers-reference-fr</emphasis>) reprend tout ce qu'il faut savoir pour interagir au mieux avec les différentes équipes du projet et profiter au maximum des ressources mises à disposition. Ce document précise également un certain nombre de devoirs que chaque développeur se doit de remplir. <ulink type="block" url="https://www.debian.org/doc/manuals/developers-reference/" />
				</para>

			</section>
			 <section>
				<title>Les outils</title>
				 <para>
					Toute une panoplie d'outils aide les responsables de paquets dans leur travail. Ce chapitre les décrit rapidement sans détailler leur emploi, car ils sont tous bien documentés.
				</para>
				 <section>
					<title>Le programme <command>lintian</command></title>
					 <indexterm>
						<primary><command>lintian</command></primary>
					</indexterm>
					 <para>
						Ce programme fait partie des outils les plus importants : c'est le vérificateur de paquets Debian. Il dispose d'une vaste batterie de tests créés en fonction de la charte Debian. Il permet de trouver rapidement et automatiquement de nombreuses erreurs et donc de les corriger avant de publier les paquets.
					</para>
					 <para>
						Cet outil ne fournit qu'une aide et il arrive qu'il se trompe (la charte Debian évolue parfois, <command>lintian</command> peut alors être momentanément en retard). Par ailleurs, il n'est pas exhaustif : qu'il ne signale aucune erreur ne signifie pas qu'un paquet est parfait, tout au plus qu'il évite les erreurs les plus communes.
					</para>

				</section>
				 <section>
					<title>Le programme <command>piuparts</command></title>
					 <indexterm>
						<primary><command>piuparts</command></primary>
					</indexterm>
					 <para>
						Il s'agit d'un autre outil important : il automatise l'installation, la mise à jour, la suppression et la purge d'un paquet (dans un environnement isolé) et vérifie qu'aucune de ces opérations n'entraîne d'erreur. Il peut aider à détecter les dépendances manquantes et détecte également lorsque des fichiers subsistent de manière inattendue après que le paquet a été purgé.
					</para>

				</section>
				 <section>
					<title>devscripts</title>
					 <indexterm>
						<primary><emphasis role="pkg">devscripts</emphasis></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debuild</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>dch</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>uscan</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debi</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>debc</command></primary>
					</indexterm>
					 <para>
						Le paquet <emphasis role="pkg">devscripts</emphasis> contient de nombreux programmes couvrant bien des aspects du travail d'un développeur Debian :
					</para>
					 <itemizedlist>
						<listitem>
							<para>
								<command>debuild</command> sert à générer un paquet (<command>dpkg-buildpackage</command>) et à vérifier dans la foulée s'il est conforme à la charte Debian (<command>lintian</command>).
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debclean</command> nettoie un paquet source après la génération d'un paquet binaire.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>dch</command> permet d'éditer facilement un fichier <filename>debian/changelog</filename> dans un paquet source.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>uscan</command> vérifie si l'auteur amont a publié une nouvelle version de son logiciel. Ce programme nécessite un fichier <filename>debian/watch</filename> décrivant l'emplacement de publication de ces archives.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debi</command> installe (<command>dpkg -i</command>) le paquet Debian qui vient d'être généré (sans devoir saisir son nom complet).
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debc</command> sert à consulter le contenu (<command>dpkg -c</command>) du paquet qui vient d'être généré (sans devoir saisir son nom complet).
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>bts</command> manipule le système de suivi de bogues depuis la ligne de commande ; ce programme génère automatiquement les courriers électroniques adéquats.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debrelease</command> envoie la nouvelle version du paquet sur un serveur distant sans devoir saisir le nom complet du fichier <filename>.changes</filename> concerné.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>debsign</command> signe les fichiers <filename>.dsc</filename> et <filename>.changes</filename>.
							</para>

						</listitem>
						 <listitem>
							<para>
								<command>uupdate</command> crée automatiquement une nouvelle révision du paquet lors de la publication d'une nouvelle version amont.
							</para>

						</listitem>

					</itemizedlist>

				</section>
				 <section>
					<title><emphasis role="pkg">debhelper</emphasis> et <emphasis role="pkg">dh-make</emphasis></title>
					 <indexterm>
						<primary><emphasis>debhelper</emphasis></primary>
					</indexterm>
					 <indexterm>
						<primary><emphasis>dh-make</emphasis></primary>
					</indexterm>
					 <para>
						debhelper est un ensemble de scripts facilitant la création d'un paquet conforme à la charte Debian, invoqués depuis <filename>debian/rules</filename>. Il a conquis de très nombreux développeurs Debian ; pour preuve, la majorité des paquets officiels l'utilisent. Tous les scripts sont préfixés par <command>dh_</command>.
					</para>
					 <para>
						Le script <command>dh_make</command> (du paquet <emphasis>dh-make</emphasis>) intègre les fichiers nécessaires à la génération d'un paquet Debian dans un répertoire contenant les sources d'un logiciel. Les fichiers qu'il ajoute utilisent debhelper de manière standard, comme son nom le laisse supposer.
					</para>

				</section>
				 <section>
					<title><command>dupload</command> et <command>dput</command></title>
					 <indexterm>
						<primary><command>dupload</command></primary>
					</indexterm>
					 <indexterm>
						<primary><command>dput</command></primary>
					</indexterm>
					 <para>
						<command>dupload</command> et <command>dput</command> servent à envoyer une nouvelle version d'un paquet Debian sur un serveur local ou distant. C'est ainsi que les développeurs envoient leur paquet sur le serveur principal de Debian (<literal>ftp-master.debian.org</literal>) pour qu'il soit intégré à l'archive et distribué par les miroirs. Ces commandes prennent en paramètre un fichier <filename>.changes</filename> et en déduisent les autres fichiers à envoyer.
					</para>

				</section>

			</section>

		</section>
		 <section>
			<title>Processus d'acceptation</title>
			 <para>
				Ne devient pas développeur Debian qui veut. Différentes étapes jalonnent le processus d'acceptation, qui se veut autant un parcours initiatique qu'une sélection. Ce processus est formalisé et chacun peut suivre sa progression sur le site web des nouveaux mainteneurs (<literal>nm</literal> est l'abréviation de <foreignphrase>New Maintainer</foreignphrase>). <ulink type="block" url="http://nm.debian.org/" />
			</para>
			 <sidebar> <title><emphasis>COMPLÉMENTS</emphasis> Processus allégé pour les « Mainteneurs Debian »</title>
			 <para>
				Un statut de « Mainteneur Debian » (<foreignphrase>Debian Maintainer</foreignphrase>, DM) a été introduit. Le processus associé est plus léger et les droits que ce statut accorde se restreignent à pouvoir maintenir ses propres paquets. Il suffit qu'un développeur Debian vérifie préalablement tout nouveau paquet et qu'il indique qu'il considère le mainteneur capable de gérer son paquet tout seul.
			</para>
			 <indexterm>
				<primary><foreignphrase>Debian Maintainer</foreignphrase></primary>
			</indexterm>
			 </sidebar> <section>
				<title>Prérequis</title>
				 <para>
					Il est demandé à tous les candidats de maîtriser un minimum l'anglais. Cela est nécessaire à tous les niveaux : dans un premier temps pour communiquer avec l'examinateur, mais c'est aussi la langue de prédilection pour une grande partie de la documentation. De plus, les utilisateurs de vos paquets communiqueront avec vous en anglais pour vous signaler des bogues et il faudra être capable de leur répondre.
				</para>
				 <para>
					Le deuxième prérequis porte sur la motivation. Il faut être pleinement conscient que la démarche consistant à devenir développeur Debian n'a de sens que si vous savez par avance que Debian restera un sujet d'intérêt pendant de nombreux mois. En effet, la procédure en elle-même dure plusieurs mois et Debian a besoin de mainteneurs qui s'inscrivent dans la durée, car chaque paquet a besoin d'un mainteneur en permanence (et pas seulement lorsqu'il est créé).
				</para>

			</section>
			 <section>
				<title>Inscription</title>
				 <para>
					La première étape (réelle) consiste à trouver un sponsor, ou avocat <foreignphrase>(advocate)</foreignphrase> ; c'est un développeur officiel qui affirme « je pense que l'acceptation de <emphasis>X</emphasis> serait une bonne chose pour Debian ». Cela implique normalement que le candidat ait déjà été actif au sein de la communauté et que quelqu'un ait apprécié son travail. Si le candidat est timide et n'affiche pas en public le fruit de son travail, il peut tenter de convaincre individuellement un développeur Debian officiel de le soutenir en lui présentant ses travaux en privé.
				</para>
				 <indexterm>
					<primary>biclé</primary>
				</indexterm>
				 <para>
					En parallèle, le candidat doit se générer une biclé (paire publique-privée) RSA avec GnuPG, qu'il doit faire signer par au moins deux développeurs Debian officiels. La signature certifie l'authenticité du nom présent sur la clé. En effet, lors d'une séance de signature de clés, il est d'usage de présenter des papiers d'identité (habituellement une carte d'identité ou un passeport) et les identifiants de ses clés pour officialiser la correspondance entre la personne physique et les clés. Cette signature nécessite donc une rencontre réelle ; si vous n'avez pas encore eu l'occasion de croiser un développeur Debian lors d'une manifestation de logiciels libres, il est possible de solliciter expressément les développeurs en demandant qui serait dans la région concernée par le biais de la liste de diffusion <email>debian-devel-french@lists.debian.org</email>. Il existe également une liste de personnes disponibles pour signer des clés, organisée par pays et par ville. <ulink type="block" url="http://wiki.debian.org/Keysigning" />
				</para>
				 <para>
					Une fois l'inscription sur <literal>nm.debian.org</literal> validée par le sponsor, un <foreignphrase>Application Manager</foreignphrase> (« gestionnaire de candidature ») sera chargé de suivre le candidat dans ses démarches et de réaliser les différentes vérifications prévues dans le processus.
				</para>
				 <para>
					La première vérification est celle de l'identité. Si vous avez une clé signée par un développeur Debian, cette étape est facile. Dans le cas contraire, l'<foreignphrase>Application Manager</foreignphrase> essaiera de guider le candidat dans sa recherche de développeurs Debian à proximité de chez lui pour qu'une rencontre et une signature de clés puissent être arrangées.
				</para>

			</section>
			 <section>
				<title>Acceptation des principes</title>
				 <para>
					Ces formalités administratives sont suivies de considérations philosophiques. Il est question de s'assurer que le candidat comprend le contrat social et les principes du logiciel libre. En effet, il n'est pas possible de rejoindre Debian si l'on ne partage pas les valeurs qui unissent les développeurs actuels, exprimées dans les deux textes fondateurs (et résumées au <xref linkend="the-debian-project" />).
				</para>
				 <para>
					En plus de cela, il est souhaité que chaque personne qui rejoint les rangs de Debian connaisse déjà son fonctionnement et sache interagir comme il se doit pour résoudre les problèmes qu'elle rencontrera au fil du temps. Toutes ces informations sont généralement documentées dans les divers manuels ciblant les nouveaux mainteneurs, mais aussi et surtout dans le guide de référence du développeur Debian. Une lecture attentive de ce document devrait suffire pour répondre aux questions de l'examinateur. Si les réponses ne sont pas satisfaisantes, il le fera savoir et invitera le candidat à se documenter davantage avant de retenter sa chance. Si la documentation ne semble pas répondre à la question, c'est qu'un peu de pratique au sein de Debian permet de découvrir la réponse par soi-même (éventuellement en discutant avec d'autres développeurs Debian). Ce mécanisme entraîne les gens dans les rouages de Debian avant de pouvoir totalement prendre part au projet. C'est une politique volontaire et les gens qui arrivent finalement à rejoindre le projet s'intègrent comme une pièce supplémentaire d'un puzzle extensible à l'infini.
				</para>
				 <indexterm>
					<primary><emphasis>Philosophy &amp; Procedures</emphasis></primary>
				</indexterm>
				 <para>
					Cette étape est couramment désignée par le terme de <foreignphrase>Philosophy &amp; Procedures</foreignphrase> <foreignphrase>(P&amp;P)</foreignphrase> dans le jargon des personnes impliquées dans le processus d'acceptation de nouveaux mainteneurs.
				</para>

			</section>
			 <section>
				<title>Vérification des compétences</title>
				 <para>
					Chaque demande pour devenir développeur Debian officiel doit être justifiée. En effet, on ne devient membre que si l'on peut démontrer que ce statut est légitime et qu'il permettra de faciliter le travail du candidat. La justification habituelle est que le statut de développeur Debian facilite la maintenance d'un paquet Debian, mais elle n'est pas universelle. Certains développeurs rejoignent le projet pour contribuer à un portage sur une architecture, d'autres pour contribuer à la documentation, etc.
				</para>
				 <para>
					Cette étape est donc l'occasion pour chaque candidat d'affirmer ce qu'il a l'intention de réaliser dans le cadre de Debian et de montrer ce qu'il a déjà fait dans ce sens. Debian privilégie en effet le pragmatisme et il ne suffit pas de dire quelque chose pour le faire prendre en compte : il faut montrer sa capacité à faire ce qui a été annoncé. En général, lorsqu'il s'agit de mise en paquet, il faudra montrer une première version du paquet et trouver un parrain (parmi les développeurs officiels) qui contrôle sa réalisation technique et l'envoie sur le serveur principal de Debian.
				</para>
				 <sidebar> <title><emphasis>COMMUNAUTÉ</emphasis> Parrainage</title>
				 <indexterm>
					<primary>parrainage</primary>
				</indexterm>
				 <para>
					Le parrainage (ou <foreignphrase>sponsoring</foreignphrase>) est un mécanisme par lequel un développeur Debian ou un mainteneur Debian vérifie un paquet préparé par quelqu'un d'autre et y appose sa signature pour le publier dans les dépôts officiels. Il permet ainsi à des personnes externes au projet, n'ayant pas suivi la procédure des nouveaux mainteneurs, de contribuer ponctuellement au projet, tout en garantissant que les paquets réellement inclus dans Debian ont toujours subi une vérification par un membre officiel.
				</para>
				 </sidebar> <para>
					Enfin, l'examinateur vérifiera les compétences techniques du candidat en matière de mise en paquet grâce à un questionnaire assez étoffé. Une erreur bloque le processus (sans l'interrompre définitivement), mais le temps pour répondre n'est pas limité, toute la documentation est disponible et il est possible d'essayer plusieurs fois en cas d'erreur. Le questionnaire ne se veut pas discriminatoire mais a pour seul objectif de garantir un niveau minimum de connaissances aux nouveaux contributeurs.
				</para>
				 <indexterm>
					<primary><emphasis>Tasks &amp; Skills</emphasis></primary>
				</indexterm>
				 <para>
					Cette étape se nomme <foreignphrase>Tasks &amp; Skills</foreignphrase> (T&amp;S en abrégé) dans le jargon des examinateurs.
				</para>

			</section>
			 <section>
				<title>Approbation finale</title>
				 <para>
					La toute dernière étape est la validation du parcours par un DAM (<foreignphrase>Debian Account Manager</foreignphrase>, ou gestionnaire des comptes Debian). Il consulte les informations fournies à propos du candidat par l'examinateur et prend la décision de lui créer ou non un compte sur les serveurs Debian. Parfois, il temporisera cette création dans l'attente d'informations supplémentaires s'il le juge nécessaire. Les refus sont assez rares si l'examinateur a bien fait son travail d'encadrement, mais ils se produisent parfois. Ils ne sont jamais définitifs et le candidat est libre de retenter sa chance ultérieurement.
				</para>
				 <para>
					La décision du DAM est souveraine et quasiment incontestable. C'est pourquoi les responsables concernés ont souvent été la cible de critiques par le passé.
				</para>

			</section>

		</section>

	</section>
</chapter>

